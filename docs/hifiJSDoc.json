[
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Assignment Client Scripts</p>The <code>Agent</code> API enables an assignment client to emulate an avatar. Setting <code>isAvatar = true</code> connects \rthe assignment client to the avatar and audio mixers, and enables the {@link Avatar} API to be used.",
        "kind": "namespace",
        "name": "Agent",
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the assignment client script is emulating an avatar, otherwise \r    <code>false</code>.",
                "name": "isAvatar"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the script has a sound to play, otherwise <code>false</code>. \r    Sounds are played when <code>isAvatar</code> is <code>true</code>, from the position and with the orientation of the \r    scripted avatar's head. <em>Read-only.</em>",
                "name": "isPlayingAvatarSound"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the agent is \"listening\" to the audio stream from the \r    domain, otherwise <code>false</code>.",
                "name": "isListeningToAudioStream"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the noise gate is enabled, otherwise <code>false</code>. When \renabled, the input audio stream is blocked (fully attenuated) if it falls below an adaptive threshold.",
                "name": "isNoiseGateEnabled"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The current loudness of the audio input. Nominal range [<code>0.0</code> (no \r    sound) &ndash; <code>1.0</code> (the onset of clipping)]. <em>Read-only.</em>",
                "name": "lastReceivedAudioLoudness"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The unique ID associated with the agent's current session in the domain. <em>Read-only.</em>",
                "name": "sessionUUID"
            }
        ],
        "longname": "Agent",
        "scope": "global"
    },
    {
        "description": "Sets whether the script should emulate an avatar.",
        "kind": "function",
        "name": "setIsAvatar",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the script emulates an avatar, otherwise <code>false</code>.",
                "name": "isAvatar"
            }
        ],
        "examples": [
            "<caption>Make an assignment client script emulate an avatar.</caption>\r(function () {\r    Agent.setIsAvatar(true);\r    Avatar.displayName = \"AC avatar\";\r    print(\"Position: \" + JSON.stringify(Avatar.position));  // 0, 0, 0\r}());"
        ],
        "memberof": "Agent",
        "longname": "Agent.setIsAvatar",
        "scope": "static"
    },
    {
        "description": "Checks whether the script is emulating an avatar.",
        "kind": "function",
        "name": "isAvatar",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the script is emulating an avatar, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Check whether the agent is emulating an avatar.</caption>\r(function () {\r    print(\"Agent is avatar: \" + Agent.isAvatar());\r    print(\"Agent is avatar: \" + Agent.isAvatar); // Same result.\r}());"
        ],
        "memberof": "Agent",
        "longname": "Agent.isAvatar",
        "scope": "static"
    },
    {
        "description": "Plays a sound from the position and with the orientation of the emulated avatar's head. No sound is played unless \r<code>isAvatar == true</code>.",
        "kind": "function",
        "name": "playAvatarSound",
        "params": [
            {
                "type": {
                    "names": [
                        "SoundObject"
                    ]
                },
                "description": "The sound played.",
                "name": "avatarSound"
            }
        ],
        "examples": [
            "<caption>Play a sound from an emulated avatar.</caption>\r(function () {\r    Agent.isAvatar = true;\r    var sound = SoundCache.getSound(Script.resourcesPath() + \"sounds/sample.wav\");\r    Script.setTimeout(function () { // Give the sound time to load.\r        Agent.playAvatarSound(sound);\r    }, 1000);\r}());\r\n     "
        ],
        "memberof": "Agent",
        "longname": "Agent.playAvatarSound",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Assignment Client Scripts</p>The <code>Avatar</code> API is used to manipulate scriptable avatars on the domain. This API is a subset of the \r{@link MyAvatar} API. To enable this API, set {@link Agent|Agent.isAvatar} to <code>true</code>.\r\r<p>For Interface, client entity, and avatar scripts, see {@link MyAvatar}.</p>",
        "kind": "namespace",
        "name": "Avatar",
        "hifiAssignmentClient": true,
        "tags": [
            {
                "originalTitle": "comment",
                "title": "comment",
                "text": "IMPORTANT: This group of properties is copied from AvatarData.h; they should NOT be edited here.",
                "value": "IMPORTANT: This group of properties is copied from AvatarData.h; they should NOT be edited here."
            }
        ],
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the avatar.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "1.0",
                "description": "The scale of the avatar. The value can be set to anything between <code>0.005</code> and \r    <code>1000.0</code>. When the scale value is fetched, it may temporarily be further limited by the domain's settings.",
                "name": "scale"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The density of the avatar in kg/m<sup>3</sup>. The density is used to work out its mass in\r    the application of physics. <em>Read-only.</em>",
                "name": "density"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "A user-defined hand position, in world coordinates. The position moves with the avatar\r   but is otherwise not used or changed by Interface.",
                "name": "handPosition"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The left or right rotation about an axis running from the head to the feet of the avatar.\r    Yaw is sometimes called \"heading\".",
                "name": "bodyYaw"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The rotation about an axis running from shoulder to shoulder of the avatar. Pitch is\r    sometimes called \"elevation\".",
                "name": "bodyPitch"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The rotation about an axis running from the chest to the back of the avatar. Roll is\r    sometimes called \"bank\".",
                "name": "bodyRoll"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the avatar.",
                "name": "orientation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the avatar's head.",
                "name": "headOrientation"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The rotation about an axis running from ear to ear of the avatar's head. Pitch is\r    sometimes called \"elevation\".",
                "name": "headPitch"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The rotation left or right about an axis running from the base to the crown of the avatar's\r    head. Yaw is sometimes called \"heading\".",
                "name": "headYaw"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The rotation about an axis running from the nose to the back of the avatar's head. Roll is\r    sometimes called \"bank\".",
                "name": "headRoll"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The current velocity of the avatar.",
                "name": "velocity"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The current angular velocity of the avatar.",
                "name": "angularVelocity"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The instantaneous loudness of the audio input that the avatar is injecting into the\r    domain.",
                "name": "audioLoudness"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The rolling average loudness of the audio input that the avatar is injecting\r    into the domain.",
                "name": "audioAverageLoudness"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The avatar's display name.",
                "name": "displayName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<code>displayName's</code> sanitized and default version defined by the avatar mixer \r    rather than Interface clients. The result is unique among all avatars present in the domain at the time.",
                "name": "sessionDisplayName"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "<code>true</code> if the avatar's eyes snap to look at another avatar's\r    eyes when the other avatar is in the line of sight and also has <code>lookAtSnappingEnabled == true</code>.",
                "name": "lookAtSnappingEnabled"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The avatar's FST file.",
                "name": "skeletonModelURL"
            },
            {
                "type": {
                    "names": [
                        "Array.<AttachmentData>"
                    ]
                },
                "description": "Information on the avatar's attachments. \r    <p class=\"important\">Deprecated: This property is deprecated and will be removed. Use avatar entities instead.</p>",
                "name": "attachmentData"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "The list of joints in the current avatar model. <em>Read-only.</em>",
                "name": "jointNames"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "Unique ID of the avatar in the domain. <em>Read-only.</em>",
                "name": "sessionUUID"
            },
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The scale, rotation, and translation transform from the user's real world to the\r    avatar's size, orientation, and position in the virtual world. <em>Read-only.</em>",
                "name": "sensorToWorldMatrix"
            },
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The rotation and translation of the left hand controller relative to the\r    avatar. <em>Read-only.</em>",
                "name": "controllerLeftHandMatrix"
            },
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The rotation and translation of the right hand controller relative to the\r    avatar. <em>Read-only.</em>",
                "name": "controllerRightHandMatrix"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The scale that transforms dimensions in the user's real world to the avatar's\r    size in the virtual world. <em>Read-only.</em>",
                "name": "sensorToWorldScale"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the avatar is in a \"hero\" zone, <code>false</code> if it isn't.\r    <em>Read-only.</em>",
                "name": "hasPriority"
            }
        ],
        "examples": [
            "<caption>Create a scriptable avatar.</caption>\r(function () {\r    Agent.setIsAvatar(true);\r    print(\"Position: \" + JSON.stringify(Avatar.position));  // 0, 0, 0\r}());"
        ],
        "longname": "Avatar",
        "scope": "global"
    },
    {
        "description": "Starts playing an animation on the avatar.",
        "kind": "function",
        "name": "startAnimation",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The animation file's URL. Animation files need to be in glTF or FBX format but only need to \r    contain the avatar skeleton and animation data. glTF models may be in JSON or binary format (\".gltf\" or \".glb\" URLs \r    respectively).\r    <p><strong>Warning:</strong> glTF animations currently do not always animate correctly.</p>",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 30,
                "description": "The frames per second (FPS) rate for the animation playback. 30 FPS is normal speed.",
                "name": "fps"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 1,
                "description": "<em>Not used.</em>",
                "name": "priority"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> if the animation should loop, <code>false</code> if it shouldn't.",
                "name": "loop"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<em>Not used.</em>",
                "name": "hold"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "The frame at which the animation starts.",
                "name": "firstFrame"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 3.403e+38,
                "description": "The frame at which the animation stops.",
                "name": "lastFrame"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "The names of joints that should not be animated.",
                "name": "maskedJoints"
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.startAnimation",
        "scope": "static"
    },
    {
        "description": "Stops playing the current animation.",
        "kind": "function",
        "name": "stopAnimation",
        "memberof": "Avatar",
        "longname": "Avatar.stopAnimation",
        "scope": "static"
    },
    {
        "description": "Gets the details of the current avatar animation that is being or was recently played.",
        "kind": "function",
        "name": "getAnimationDetails",
        "returns": [
            {
                "type": {
                    "names": [
                        "Avatar.AnimationDetails"
                    ]
                },
                "description": "The current or recent avatar animation."
            }
        ],
        "examples": [
            "<caption>Report the current animation details.</caption>\rvar animationDetails = Avatar.getAnimationDetails();\rprint(\"Animation details: \" + JSON.stringify(animationDetails));"
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getAnimationDetails",
        "scope": "static"
    },
    {
        "description": "Gets details of all avatar entities.\r<p><strong>Warning:</strong> Potentially an expensive call. Do not use if possible.</p>",
        "kind": "function",
        "name": "getAvatarEntityData",
        "returns": [
            {
                "type": {
                    "names": [
                        "AvatarEntityMap"
                    ]
                },
                "description": "Details of the avatar entities."
            }
        ],
        "examples": [
            "<caption>Report the current avatar entities.</caption>\rvar avatarEntityData = Avatar.getAvatarEntityData();\rprint(\"Avatar entities: \" + JSON.stringify(avatarEntityData));"
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getAvatarEntityData",
        "scope": "static"
    },
    {
        "description": "Sets all avatar entities from an object.\r<p><strong>Warning:</strong> Potentially an expensive call. Do not use if possible.</p>",
        "kind": "function",
        "name": "setAvatarEntityData",
        "params": [
            {
                "type": {
                    "names": [
                        "AvatarEntityMap"
                    ]
                },
                "description": "Details of the avatar entities.",
                "name": "avatarEntityData"
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.setAvatarEntityData",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "update",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Delta time.",
                "name": "deltaTime"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Avatar",
        "longname": "Avatar.update",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setJointMappingsFromNetworkReply",
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Avatar",
        "longname": "Avatar.setJointMappingsFromNetworkReply",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Assignment Client Scripts</p>The <code>EntityViewer</code> API provides a headless viewer for assignment client scripts, so that they can \"see\" entities \rin order for them to be available in the {@link Entities} API.",
        "kind": "namespace",
        "name": "EntityViewer",
        "hifiAssignmentClient": true,
        "longname": "EntityViewer",
        "scope": "global"
    },
    {
        "description": "Updates the entities currently in view.",
        "kind": "function",
        "name": "queryOctree",
        "memberof": "EntityViewer",
        "longname": "EntityViewer.queryOctree",
        "scope": "static"
    },
    {
        "description": "Sets the position of the view frustum.",
        "kind": "function",
        "name": "setPosition",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the view frustum.",
                "name": "position"
            }
        ],
        "memberof": "EntityViewer",
        "longname": "EntityViewer.setPosition",
        "scope": "static"
    },
    {
        "description": "Sets the orientation of the view frustum.",
        "kind": "function",
        "name": "setOrientation",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the view frustum.",
                "name": "orientation"
            }
        ],
        "memberof": "EntityViewer",
        "longname": "EntityViewer.setOrientation",
        "scope": "static"
    },
    {
        "description": "Sets the radius of the center \"keyhole\" in the view frustum.",
        "kind": "function",
        "name": "setCenterRadius",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The radius of the center \"keyhole\" in the view frustum.",
                "name": "radius"
            }
        ],
        "memberof": "EntityViewer",
        "longname": "EntityViewer.setCenterRadius",
        "scope": "static"
    },
    {
        "description": "Sets the radius of the center \"keyhole\" in the view frustum.",
        "kind": "function",
        "name": "setKeyholeRadius",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The radius of the center \"keyhole\" in the view frustum.",
                "name": "radius"
            }
        ],
        "deprecated": "This function is deprecated and will be removed. Use {@link EntityViewer.setCenterRadius|setCenterRadius} \r    instead.",
        "memberof": "EntityViewer",
        "longname": "EntityViewer.setKeyholeRadius",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setVoxelSizeScale",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The voxel size scale.",
                "name": "sizeScale"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "EntityViewer",
        "longname": "EntityViewer.setVoxelSizeScale",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setBoundaryLevelAdjust",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The boundary level adjust factor.",
                "name": "boundaryLevelAdjust"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "EntityViewer",
        "longname": "EntityViewer.setBoundaryLevelAdjust",
        "scope": "static"
    },
    {
        "description": "Sets the maximum number of entity packets to receive from the domain server per second.",
        "kind": "function",
        "name": "setMaxPacketsPerSecond",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The maximum number of entity packets to receive per second.",
                "name": "maxPacketsPerSecond"
            }
        ],
        "memberof": "EntityViewer",
        "longname": "EntityViewer.setMaxPacketsPerSecond",
        "scope": "static"
    },
    {
        "description": "Gets the position of the view frustum.",
        "kind": "function",
        "name": "getPosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the view frustum."
            }
        ],
        "memberof": "EntityViewer",
        "longname": "EntityViewer.getPosition",
        "scope": "static"
    },
    {
        "description": "Gets the orientation of the view frustum.",
        "kind": "function",
        "name": "getOrientation",
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the view frustum."
            }
        ],
        "memberof": "EntityViewer",
        "longname": "EntityViewer.getOrientation",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getVoxelSizeScale",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The voxel size scale."
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "EntityViewer",
        "longname": "EntityViewer.getVoxelSizeScale",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getBoundaryLevelAdjust",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The boundary level adjust factor."
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "EntityViewer",
        "longname": "EntityViewer.getBoundaryLevelAdjust",
        "scope": "static"
    },
    {
        "description": "Gets the maximum number of entity packets to receive from the domain server per second.",
        "kind": "function",
        "name": "getMaxPacketsPerSecond",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The maximum number of entity packets to receive per second."
            }
        ],
        "memberof": "EntityViewer",
        "longname": "EntityViewer.getMaxPacketsPerSecond",
        "scope": "static"
    },
    {
        "description": "Gets the number of nodes in the octree.",
        "kind": "function",
        "name": "getOctreeElementsCount",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The number of nodes in the octree."
            }
        ],
        "memberof": "EntityViewer",
        "longname": "EntityViewer.getOctreeElementsCount",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>HifiAbout</code> API provides information about the version of Interface that is currently running. It also\rhas the functionality to open a web page in an Interface browser window.",
        "kind": "namespace",
        "name": "HifiAbout",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The build date of Interface that is currently running. <em>Read-only.</em>",
                "name": "buildDate"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The build version of Interface that is currently running. <em>Read-only.</em>",
                "name": "buildVersion"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The Qt version used in Interface that is currently running. <em>Read-only.</em>",
                "name": "qtVersion"
            }
        ],
        "examples": [
            "<caption>Report build information for the version of Interface currently running.</caption>\rprint(\"HiFi build date: \" + HifiAbout.buildDate);  // Returns the build date of the version of Interface currently running on your machine.\rprint(\"HiFi version: \" + HifiAbout.buildVersion);  // Returns the build version of Interface currently running on your machine.\rprint(\"Qt version: \" + HifiAbout.qtVersion);  // Returns the Qt version details of the version of Interface currently running on your machine."
        ],
        "longname": "HifiAbout",
        "scope": "global"
    },
    {
        "description": "Display a web page in an Interface browser window.",
        "kind": "function",
        "name": "openUrl",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the web page you want to view in Interface.",
                "name": "url"
            }
        ],
        "memberof": "HifiAbout",
        "longname": "HifiAbout.openUrl",
        "scope": "static"
    },
    {
        "description": "<p>The <code>Controller.Hardware.Application</code> object has properties representing Interface's state. The property\rvalues are integer IDs, uniquely identifying each output. <em>Read-only.</em></p>\r<p>These states can be mapped to actions or functions or <code>Controller.Standard</code> items in a {@link RouteObject} \rmapping (e.g., using the {@link RouteObject#when} method). Each data value is either <code>1.0</code> for \"true\" or \r<code>0.0</code> for \"false\".</p>\r<table>\r  <thead>\r    <tr><th>Property</th><th>Type</th><th>Data</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>CameraFirstPerson</code></td><td>number</td><td>number</td><td>The camera is in first-person mode.\r      </td></tr>\r    <tr><td><code>CameraThirdPerson</code></td><td>number</td><td>number</td><td>The camera is in third-person mode.\r      </td></tr>\r    <tr><td><code>CameraFSM</code></td><td>number</td><td>number</td><td>The camera is in full screen mirror mode.</td></tr>\r    <tr><td><code>CameraIndependent</code></td><td>number</td><td>number</td><td>The camera is in independent mode.</td></tr>\r    <tr><td><code>CameraEntity</code></td><td>number</td><td>number</td><td>The camera is in entity mode.</td></tr>\r    <tr><td><code>InHMD</code></td><td>number</td><td>number</td><td>The user is in HMD mode.</td></tr>\r    <tr><td><code>AdvancedMovement</code></td><td>number</td><td>number</td><td>Advanced movement (walking) controls are \r      enabled.</td></tr>\r    <tr><td><code>StrafeEnabled</code></td><td>number</td><td>number</td><td>Strafing is enabled</td></tr>\r    <tr><td><code>LeftHandDominant</code></td><td>number</td><td>number</td><td>Dominant hand set to left.</td></tr>\r    <tr><td><code>RightHandDominant</code></td><td>number</td><td>number</td><td>Dominant hand set to right.</td></tr>\r    <tr><td><code>SnapTurn</code></td><td>number</td><td>number</td><td>Snap turn is enabled.</td></tr>\r    <tr><td><code>Grounded</code></td><td>number</td><td>number</td><td>The user's avatar is on the ground.</td></tr>\r    <tr><td><code>NavigationFocused</code></td><td>number</td><td>number</td><td><em>Not used.</em></td></tr>\r    <tr><td><code>PlatformWindows</code></td><td>number</td><td>number</td><td>The operating system is Windows.</td></tr>\r    <tr><td><code>PlatformMac</code></td><td>number</td><td>number</td><td>The operating system is Mac.</td></tr>\r    <tr><td><code>PlatformAndroid</code></td><td>number</td><td>number</td><td>The operating system is Android.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "Hardware-Application",
        "type": {
            "names": [
                "object"
            ]
        },
        "memberof": "Controller",
        "longname": "Controller.Hardware-Application",
        "scope": "static"
    },
    {
        "description": "Details of an avatar bookmark.",
        "kind": "typedef",
        "name": "BookmarkData",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The version of the bookmark data format.",
                "name": "version"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the avatar model.",
                "name": "avatarUrl"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The target scale of the avatar.",
                "name": "avatarScale"
            },
            {
                "type": {
                    "names": [
                        "Array.<Object.<\"properties\", Entities.EntityProperties>>"
                    ]
                },
                "optional": true,
                "description": "The avatar entities included with the \r    bookmark.",
                "name": "avatarEntites"
            },
            {
                "type": {
                    "names": [
                        "Array.<MyAvatar.AttachmentData>"
                    ]
                },
                "optional": true,
                "description": "The attachments included with the bookmark.\r    <p class=\"important\">Deprecated: Use avatar entities instead.",
                "name": "attachments"
            }
        ],
        "memberof": "AvatarBookmarks",
        "longname": "AvatarBookmarks.BookmarkData",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>AvatarBookmarks</code> API provides facilities for working with avatar bookmarks (\"favorites\" in the Avatar app). \rAn avatar bookmark associates a name with an avatar model, scale, and avatar entities (wearables).",
        "kind": "namespace",
        "name": "AvatarBookmarks",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "longname": "AvatarBookmarks",
        "scope": "global"
    },
    {
        "description": "Gets the details of an avatar bookmark.",
        "kind": "function",
        "name": "getBookmark",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the avatar bookmark (case sensitive).",
                "name": "bookmarkName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "AvatarBookmarks.BookmarkData",
                        "Object"
                    ]
                },
                "description": "The bookmark data if the bookmark exists, <code>{}</code> if it doesn't."
            }
        ],
        "memberof": "AvatarBookmarks",
        "longname": "AvatarBookmarks.getBookmark",
        "scope": "static"
    },
    {
        "description": "Adds a new (or updates an existing) avatar bookmark with your current avatar model, scale, and avatar entities.",
        "kind": "function",
        "name": "addBookmark",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the avatar bookmark (case sensitive).",
                "name": "bookmarkName"
            }
        ],
        "examples": [
            "<caption>Add a new avatar bookmark and report the bookmark data.</caption>\rvar bookmarkName = \"New Bookmark\";\rAvatarBookmarks.addBookmark(bookmarkName);\rvar bookmarkData = AvatarBookmarks.getBookmark(bookmarkName);\rprint(\"Bookmark data: \" + JSON.stringify(bookmarkData));"
        ],
        "memberof": "AvatarBookmarks",
        "longname": "AvatarBookmarks.addBookmark",
        "scope": "static"
    },
    {
        "description": "Updates an existing bookmark with your current avatar model, scale, and wearables. No action is taken if the bookmark \rdoesn't exist.",
        "kind": "function",
        "name": "saveBookmark",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the avatar bookmark (case sensitive).",
                "name": "bookmarkName"
            }
        ],
        "memberof": "AvatarBookmarks",
        "longname": "AvatarBookmarks.saveBookmark",
        "scope": "static"
    },
    {
        "description": "Loads an avatar bookmark, setting your avatar model, scale, and avatar entities (or attachments if an old bookmark) to \rthose in the bookmark.",
        "kind": "function",
        "name": "loadBookmark",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the avatar bookmark to load (case sensitive).",
                "name": "bookmarkName"
            }
        ],
        "memberof": "AvatarBookmarks",
        "longname": "AvatarBookmarks.loadBookmark",
        "scope": "static"
    },
    {
        "description": "Deletes an avatar bookmark.",
        "kind": "function",
        "name": "removeBookmark",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the avatar bookmark to delete (case sensitive).",
                "name": "bookmarkName"
            }
        ],
        "memberof": "AvatarBookmarks",
        "longname": "AvatarBookmarks.removeBookmark",
        "scope": "static"
    },
    {
        "description": "Updates the avatar entities and their properties. Current avatar entities not included in the list provided are deleted.",
        "kind": "function",
        "name": "updateAvatarEntities",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<MyAvatar.AvatarEntityData>"
                    ]
                },
                "description": "The avatar entity IDs and properties.",
                "name": "avatarEntities"
            }
        ],
        "deprecated": "This function is deprecated and will be removed. Use the {@link MyAvatar} API instead.",
        "memberof": "AvatarBookmarks",
        "longname": "AvatarBookmarks.updateAvatarEntities",
        "scope": "static"
    },
    {
        "description": "Gets the details of all avatar bookmarks.",
        "kind": "function",
        "name": "getBookmarks",
        "returns": [
            {
                "type": {
                    "names": [
                        "Object.<string, AvatarBookmarks.BookmarkData>"
                    ]
                },
                "description": "The current avatar bookmarks in an object where the keys are the \r    bookmark names and the values are the bookmark details."
            }
        ],
        "examples": [
            "<caption>List the names and URLs of all the avatar bookmarks.</caption>\rvar bookmarks = AvatarBookmarks.getBookmarks();\rprint(\"Avatar bookmarks:\");\rfor (var key in bookmarks) {\r    print(\"- \" + key + \" \" + bookmarks[key].avatarUrl);\r};"
        ],
        "memberof": "AvatarBookmarks",
        "longname": "AvatarBookmarks.getBookmarks",
        "scope": "static"
    },
    {
        "description": "Triggered when an avatar bookmark is loaded, setting your avatar model, scale, and avatar entities (or attachments if an \rold bookmark) to those in the bookmark.",
        "kind": "signal",
        "name": "bookmarkLoaded",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the avatar bookmark loaded.",
                "name": "bookmarkName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AvatarBookmarks",
        "longname": "AvatarBookmarks.bookmarkLoaded",
        "scope": "static"
    },
    {
        "description": "Triggered when an avatar bookmark is deleted.",
        "kind": "signal",
        "name": "bookmarkDeleted",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the avatar bookmark deleted.",
                "name": "bookmarkName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when a bookmark is deleted.</caption>\rAvatarBookmarks.bookmarkDeleted.connect(function (bookmarkName) {\r    print(\"Bookmark deleted: \" + bookmarkName);\r});"
        ],
        "memberof": "AvatarBookmarks",
        "longname": "AvatarBookmarks.bookmarkDeleted",
        "scope": "static"
    },
    {
        "description": "Triggered when a new avatar bookmark is added or an existing avatar bookmark is updated, using \r{@link AvatarBookmarks.addBookmark|addBookmark}.",
        "kind": "signal",
        "name": "bookmarkAdded",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the avatar bookmark added or updated.",
                "name": "bookmarkName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AvatarBookmarks",
        "longname": "AvatarBookmarks.bookmarkAdded",
        "scope": "static"
    },
    {
        "description": "Performs no action.",
        "kind": "function",
        "name": "deleteBookmark",
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "AvatarBookmarks",
        "longname": "AvatarBookmarks.deleteBookmark",
        "scope": "static"
    },
    {
        "description": "Prompts the user to delete a bookmark. The user can select the bookmark to delete in the dialog that is opened.",
        "kind": "function",
        "name": "deleteBookmark",
        "memberof": "LocationBookmarks",
        "longname": "LocationBookmarks.deleteBookmark",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Camera</code> API provides access to the \"camera\" that defines your view in desktop and HMD display modes.\rThe High Fidelity camera has axes <code>x</code> = right, <code>y</code> = up, <code>-z</code> = forward.",
        "kind": "namespace",
        "name": "Camera",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the camera. You can set this value only when the camera is in independent \r    mode.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the camera. You can set this value only when the camera is in \r    independent mode.",
                "name": "orientation"
            },
            {
                "type": {
                    "names": [
                        "Camera.Mode"
                    ]
                },
                "description": "The camera mode.",
                "name": "mode"
            },
            {
                "type": {
                    "names": [
                        "ViewFrustum"
                    ]
                },
                "description": "The camera frustum.",
                "name": "frustum"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that is used for the camera position and orientation when the \r    camera is in entity mode.",
                "name": "cameraEntity"
            }
        ],
        "longname": "Camera",
        "scope": "global"
    },
    {
        "description": "Gets the ID of the entity that the camera is set to follow (i.e., use the position and orientation from) when it's in \rentity mode. You can also get the entity ID using the {@link Camera|Camera.cameraEntity} property.",
        "kind": "function",
        "name": "getCameraEntity",
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that the camera is set to follow when in entity mode; <code>null</code> if no \r    camera entity has been set."
            }
        ],
        "memberof": "Camera",
        "longname": "Camera.getCameraEntity",
        "scope": "static"
    },
    {
        "description": "Sets the entity that the camera should follow (i.e., use the position and orientation from) when it's in entity mode. \rYou can also set the entity using the {@link Camera|Camera.cameraEntity} property.",
        "kind": "function",
        "name": "setCameraEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The entity that the camera should follow when it's in entity mode.",
                "name": "entityID"
            }
        ],
        "examples": [
            "<caption>Move your camera to the position and orientation of the closest entity.</caption>\rCamera.setModeString(\"entity\");\rvar entity = Entities.findClosestEntity(MyAvatar.position, 100.0);\rCamera.setCameraEntity(entity);\r\n     "
        ],
        "memberof": "Camera",
        "longname": "Camera.setCameraEntity",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>LocationBookmarks</code> API provides facilities for working with location bookmarks. A location bookmark \rassociates a name with a metaverse address.",
        "kind": "namespace",
        "name": "LocationBookmarks",
        "hifiClientEntity": true,
        "hifiInterface": true,
        "hifiAvatar": true,
        "longname": "LocationBookmarks",
        "scope": "global"
    },
    {
        "description": "Gets the metaverse address associated with a bookmark.",
        "kind": "function",
        "name": "getAddress",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the bookmark to get the metaverse address for (case sensitive).",
                "name": "bookmarkName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The metaverse address for the bookmark. If the bookmark does not exist, <code>\"\"</code> is returned."
            }
        ],
        "examples": [
            "<caption>Report the \"Home\" bookmark's metaverse address.</caption>\rprint(\"Home bookmark's address: \" + LocationBookmarks.getAddress(\"Home\"));"
        ],
        "memberof": "LocationBookmarks",
        "longname": "LocationBookmarks.getAddress",
        "scope": "static"
    },
    {
        "description": "Prompts the user to bookmark their current location. The user can specify the name of the bookmark in the dialog that is \ropened.",
        "kind": "function",
        "name": "addBookmark",
        "memberof": "LocationBookmarks",
        "longname": "LocationBookmarks.addBookmark",
        "scope": "static"
    },
    {
        "description": "Sets the metaverse address associated with the \"Home\" bookmark.",
        "kind": "function",
        "name": "setHomeLocationToAddress",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The metaverse address to set the \"Home\" bookmark to.",
                "name": "address"
            }
        ],
        "memberof": "LocationBookmarks",
        "longname": "LocationBookmarks.setHomeLocationToAddress",
        "scope": "static"
    },
    {
        "description": "Gets the metaverse address associated with the \"Home\" bookmark.",
        "kind": "function",
        "name": "getHomeLocationAddress",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The metaverse address for the \"Home\" bookmark."
            }
        ],
        "memberof": "LocationBookmarks",
        "longname": "LocationBookmarks.getHomeLocationAddress",
        "scope": "static"
    },
    {
        "description": "<p>The world detail quality rendered.</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>0</code></td><td>Low world detail quality.</td></tr>\r    <tr><td><code>1</code></td><td>Medium world detail quality.</td></tr>\r    <tr><td><code>2</code></td><td>High world detail quality.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "WorldDetailQuality",
        "type": {
            "names": [
                "number"
            ]
        },
        "memberof": "LODManager",
        "longname": "LODManager.WorldDetailQuality",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The LOD class manages your Level of Detail functions within Interface.",
        "kind": "namespace",
        "name": "LODManager",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "presentTime"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "engineRunTime"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "gpuTime"
            }
        ],
        "longname": "LODManager",
        "scope": "global"
    },
    {
        "kind": "function",
        "name": "setAutomaticLODAdjust",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "value"
            }
        ],
        "memberof": "LODManager",
        "longname": "LODManager.setAutomaticLODAdjust",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getAutomaticLODAdjust",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "LODManager",
        "longname": "LODManager.getAutomaticLODAdjust",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setDesktopLODTargetFPS",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "value"
            }
        ],
        "memberof": "LODManager",
        "longname": "LODManager.setDesktopLODTargetFPS",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getDesktopLODTargetFPS",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "LODManager",
        "longname": "LODManager.getDesktopLODTargetFPS",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setHMDLODTargetFPS",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "value"
            }
        ],
        "memberof": "LODManager",
        "longname": "LODManager.setHMDLODTargetFPS",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getHMDLODTargetFPS",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "LODManager",
        "longname": "LODManager.getHMDLODTargetFPS",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getLODFeedbackText",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "LODManager",
        "longname": "LODManager.getLODFeedbackText",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setOctreeSizeScale",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "sizeScale"
            }
        ],
        "deprecated": "This function is deprecated and will be removed. Use the {@link LODManager.lodAngleDeg} property instead.",
        "memberof": "LODManager",
        "longname": "LODManager.setOctreeSizeScale",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getOctreeSizeScale",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "deprecated": "This function is deprecated and will be removed. Use the {@link LODManager.lodAngleDeg} property instead.",
        "memberof": "LODManager",
        "longname": "LODManager.getOctreeSizeScale",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setBoundaryLevelAdjust",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "boundaryLevelAdjust"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "LODManager",
        "longname": "LODManager.setBoundaryLevelAdjust",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getBoundaryLevelAdjust",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "LODManager",
        "longname": "LODManager.getBoundaryLevelAdjust",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getLODTargetFPS",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "LODManager",
        "longname": "LODManager.getLODTargetFPS",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "LODIncreased",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "LODManager",
        "longname": "LODManager.LODIncreased",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "LODDecreased",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "LODManager",
        "longname": "LODManager.LODDecreased",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>SpeechRecognizer</code> API provides facilities to recognize voice commands.\r<p>Speech recognition is enabled or disabled via the Developer &gt; Scripting &gt; Enable Speech Control API menu item or \rthe {@link SpeechRecognizer.setEnabled} method.</p>",
        "kind": "namespace",
        "name": "SpeechRecognizer",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "longname": "SpeechRecognizer",
        "scope": "global"
    },
    {
        "description": "Enables or disables speech recognition.",
        "kind": "function",
        "name": "setEnabled",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to enable speech recognition, <code>false</code> to disable.",
                "name": "enabled"
            }
        ],
        "memberof": "SpeechRecognizer",
        "longname": "SpeechRecognizer.setEnabled",
        "scope": "static"
    },
    {
        "description": "Adds a voice command to the speech recognizer.",
        "kind": "function",
        "name": "addCommand",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The voice command to recognize.",
                "name": "command"
            }
        ],
        "memberof": "SpeechRecognizer",
        "longname": "SpeechRecognizer.addCommand",
        "scope": "static"
    },
    {
        "description": "Removes a voice command from the speech recognizer.",
        "kind": "function",
        "name": "removeCommand",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The voice command to stop recognizing.",
                "name": "command"
            }
        ],
        "memberof": "SpeechRecognizer",
        "longname": "SpeechRecognizer.removeCommand",
        "scope": "static"
    },
    {
        "description": "Triggered when a voice command has been recognized.",
        "kind": "signal",
        "name": "commandRecognized",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The voice command recognized.",
                "name": "command"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Turn your avatar upon voice command.</caption>\rvar TURN_LEFT = \"turn left\";\rvar TURN_RIGHT = \"turn right\";\rvar TURN_RATE = 0.5;\rvar TURN_DURATION = 1000; // ms\rvar turnRate = 0;\r\rfunction getTurnRate() {\r    return turnRate;\r}\r\rvar MAPPING_NAME = \"com.highfidelity.controllers.example.speechRecognizer\";\rvar mapping = Controller.newMapping(MAPPING_NAME);\r\rmapping.from(getTurnRate).to(Controller.Actions.Yaw);\rController.enableMapping(MAPPING_NAME);\r\rfunction onCommandRecognized(command) {\r    print(\"Speech command: \" + command);\r    switch (command) {\r        case TURN_LEFT:\r            turnRate = -TURN_RATE;\r            break;\r        case TURN_RIGHT:\r            turnRate = TURN_RATE;\r            break;\r    }\r    Script.setTimeout(function () {\r        turnRate = 0;\r    }, TURN_DURATION);\r}\r\rSpeechRecognizer.addCommand(TURN_LEFT);\rSpeechRecognizer.addCommand(TURN_RIGHT);\rSpeechRecognizer.commandRecognized.connect(onCommandRecognized);\r\rScript.scriptEnding.connect(function () {\r    Controller.disableMapping(MAPPING_NAME);\r    SpeechRecognizer.removeCommand(TURN_LEFT);\r    SpeechRecognizer.removeCommand(TURN_RIGHT);\r});"
        ],
        "memberof": "SpeechRecognizer",
        "longname": "SpeechRecognizer.commandRecognized",
        "scope": "static"
    },
    {
        "description": "Triggered when speech recognition is enabled or disabled.",
        "kind": "signal",
        "name": "enabledUpdated",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if speech recognition is enabled, <code>false</code> if it is disabled.",
                "name": "enabled"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when speech recognition is enabled or disabled.</caption>\rSpeechRecognizer.enabledUpdated.connect(function (enabled) {\r    print(\"Speech recognition: \" + (enabled ? \"enabled\" : \"disabled\"));\r});\r\n     "
        ],
        "memberof": "SpeechRecognizer",
        "longname": "SpeechRecognizer.enabledUpdated",
        "scope": "static"
    },
    {
        "description": "The <code>\"far-grab\"</code> {@link Entities.ActionType|ActionType} moves and rotates an entity to a target position and \rorientation, optionally relative to another entity. Collisions between the entity and the user's avatar are disabled during \rthe far-grab.\rIt has arguments in addition to the common {@link Entities.ActionArguments|ActionArguments}:",
        "kind": "typedef",
        "name": "ActionArguments-FarGrab",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "If an entity ID, the <code>targetPosition</code> and <code>targetRotation</code> are\r    relative to the entity's position and rotation.",
                "name": "otherID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "If a joint index in the <code>otherID</code> entity, the <code>targetPosition</code>\r    and <code>targetRotation</code> are relative to the entity joint's position and rotation.",
                "name": "otherJointIndex"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The target position.",
                "name": "targetPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "defaultvalue": "0,0,0,1",
                "description": "The target rotation.",
                "name": "targetRotation"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 3.4e+38,
                "description": "Controls how long it takes for the entity's position to catch up with the\r    target position. The value is the time for the action to catch up to 1/e = 0.368 of the target value, where the action \r    is applied using an exponential decay.",
                "name": "linearTimeScale"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 3.4e+38,
                "description": "Controls how long it takes for the entity's orientation to catch up with the\r    target orientation. The value is the time for the action to catch up to 1/e = 0.368 of the target value, where the \r    action is applied using an exponential decay.",
                "name": "angularTimeScale"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.ActionArguments-FarGrab",
        "scope": "static"
    },
    {
        "description": "The <code>\"hold\"</code> {@link Entities.ActionType|ActionType} positions and rotates an entity relative to an avatar's hand. \rCollisions between the entity and the user's avatar are disabled during the hold.\rIt has arguments in addition to the common {@link Entities.ActionArguments|ActionArguments}:",
        "kind": "typedef",
        "name": "ActionArguments-Hold",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": "MyAvatar.sessionUUID",
                "description": "The ID of the avatar holding the entity.",
                "name": "holderID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "right",
                "description": "The hand holding the entity: <code>\"left\"</code> or <code>\"right\"</code>.",
                "name": "hand"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The target position relative to the avatar's hand.",
                "name": "relativePosition"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0,1",
                "description": "The target rotation relative to the avatar's hand.",
                "name": "relativeRotation"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 3.4e+38,
                "description": "Controls how long it takes for the entity's position and rotation to catch up with \r    the target. The value is the time for the action to catch up to 1/e = 0.368 of the target value, where the action is \r    applied using an exponential decay.",
                "name": "timeScale"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the entity is made kinematic during the action; the entity won't \r    lag behind the hand but constraint actions such as <code>\"hinge\"</code> won't act properly. <code>false</code> if the \r    entity is not made kinematic during the action",
                "name": "kinematic"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if, when <code>kinematic</code> is <code>true</code>, the \r    entity's velocity will be set during the action, e.g., so that other scripts may use the value. <code>false</code> if \r    the entity's velocity will not be set during the action.",
                "name": "kinematicSetVelocity"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the entity follows the HMD controller, <code>false</code> if it \r    follows the avatar's hand.",
                "name": "ignoreIK"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.ActionArguments-Hold",
        "scope": "static"
    },
    {
        "description": "PAL (People Access List) data for an avatar.",
        "kind": "typedef",
        "name": "PalData",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The avatar's session ID. <code>\"\"</code> if the avatar is your own.",
                "name": "sessionUUID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The avatar's display name, sanitized and versioned, as defined by the avatar mixer. \r    It is unique among all avatars present in the domain at the time.",
                "name": "sessionDisplayName"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The instantaneous loudness of the audio input that the avatar is injecting into the \r    domain.",
                "name": "audioLoudness"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<span class=\"important\">Deprecated: This property is deprecated and will be \r    removed.</span>",
                "name": "isReplicated"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the avatar.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The vertical offset from the avatar's position that an overlay orb should be displayed at.",
                "name": "palOrbOffset"
            }
        ],
        "memberof": "AvatarManager",
        "longname": "AvatarManager.PalData",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>AvatarManager</code> API provides information about avatars within the current domain. The avatars available are \rthose that Interface has displayed and therefore knows about.\r\r<p><strong>Warning:</strong> This API is also provided to Interface, client entity, and avatar scripts as the synonym, \r\"<code>AvatarList</code>\". For assignment client scripts, see the separate {@link AvatarList} API.</p>",
        "kind": "namespace",
        "name": "AvatarManager",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "tags": [
            {
                "originalTitle": "comment",
                "title": "comment",
                "text": "AvatarList.getAvatarIdentifiers as getAvatarIdentifiers - Don't borrow because behavior is slightly different.",
                "value": "AvatarList.getAvatarIdentifiers as getAvatarIdentifiers - Don't borrow because behavior is slightly different."
            },
            {
                "originalTitle": "comment",
                "title": "comment",
                "text": "AvatarList.getAvatarsInRange as getAvatarsInRange - Don't borrow because behavior is slightly different.",
                "value": "AvatarList.getAvatarsInRange as getAvatarsInRange - Don't borrow because behavior is slightly different."
            }
        ],
        "longname": "AvatarManager",
        "scope": "global"
    },
    {
        "description": "Gets the IDs of all avatars known about in the domain.\rYour own avatar is included in the list as a <code>null</code> value.",
        "kind": "function",
        "name": "getAvatarIdentifiers",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "The IDs of all known avatars in the domain."
            }
        ],
        "examples": [
            "<caption>Report the IDS of all avatars within the domain.</caption>\rvar avatars = AvatarManager.getAvatarIdentifiers();\rprint(\"Avatars in the domain: \" + JSON.stringify(avatars));\r// A null item is included for your avatar."
        ],
        "memberof": "AvatarManager",
        "longname": "AvatarManager.getAvatarIdentifiers",
        "scope": "static"
    },
    {
        "description": "Gets the IDs of all avatars known about within a specified distance from a point.\rYour own avatar's ID is included in the list if it is in range.",
        "kind": "function",
        "name": "getAvatarsInRange",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The point about which the search is performed.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The search radius.",
                "name": "range"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "The IDs of all known avatars within the search distance from the position."
            }
        ],
        "examples": [
            "<caption>Report the IDs of all avatars within 10m of your avatar.</caption>\rvar RANGE = 10;\rvar avatars = AvatarManager.getAvatarsInRange(MyAvatar.position, RANGE);\rprint(\"Nearby avatars: \" + JSON.stringify(avatars));\rprint(\"Own avatar: \" + MyAvatar.sessionUUID);"
        ],
        "memberof": "AvatarManager",
        "longname": "AvatarManager.getAvatarsInRange",
        "scope": "static"
    },
    {
        "description": "Gets the amount of avatar mixer data being generated by an avatar other than your own.",
        "kind": "function",
        "name": "getAvatarDataRate",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the avatar whose data rate you're retrieving.",
                "name": "sessionID"
            },
            {
                "type": {
                    "names": [
                        "AvatarDataRate"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The type of avatar mixer data to get the data rate of.",
                "name": "rateName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The data rate in kbps; <code>0</code> if the avatar is your own."
            }
        ],
        "memberof": "AvatarManager",
        "longname": "AvatarManager.getAvatarDataRate",
        "scope": "static"
    },
    {
        "description": "Gets the update rate of avatar mixer data being generated by an avatar other than your own.",
        "kind": "function",
        "name": "getAvatarUpdateRate",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the avatar whose update rate you're retrieving.",
                "name": "sessionID"
            },
            {
                "type": {
                    "names": [
                        "AvatarUpdateRate"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The type of avatar mixer data to get the update rate of.",
                "name": "rateName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The update rate in Hz; <code>0</code> if the avatar is your own."
            }
        ],
        "memberof": "AvatarManager",
        "longname": "AvatarManager.getAvatarUpdateRate",
        "scope": "static"
    },
    {
        "description": "Gets the simulation rate of an avatar other than your own.",
        "kind": "function",
        "name": "getAvatarSimulationRate",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the avatar whose simulation you're retrieving.",
                "name": "sessionID"
            },
            {
                "type": {
                    "names": [
                        "AvatarSimulationRate"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The type of avatar data to get the simulation rate of.",
                "name": "rateName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The simulation rate in Hz; <code>0</code> if the avatar is your own."
            }
        ],
        "memberof": "AvatarManager",
        "longname": "AvatarManager.getAvatarSimulationRate",
        "scope": "static"
    },
    {
        "description": "Find the first avatar intersected by a {@link PickRay}.",
        "kind": "function",
        "name": "findRayIntersection",
        "params": [
            {
                "type": {
                    "names": [
                        "PickRay"
                    ]
                },
                "description": "The ray to use for finding avatars.",
                "name": "ray"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "If not empty then search is restricted to these avatars.",
                "name": "avatarsToInclude"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "Avatars to ignore in the search.",
                "name": "avatarsToDiscard"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "If <code>true</code> then the exact intersection with the avatar mesh is \r    calculated, if <code>false</code> then the intersection is approximate.",
                "name": "pickAgainstMesh"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RayToAvatarIntersectionResult"
                    ]
                },
                "description": "The result of the search for the first intersected avatar."
            }
        ],
        "examples": [
            "<caption>Find the first avatar directly in front of you.</caption>\rvar pickRay = {\r    origin: MyAvatar.position,\r    direction: Quat.getFront(MyAvatar.orientation)\r};\r\rvar intersection = AvatarManager.findRayIntersection(pickRay);\rif (intersection.intersects) {\r    print(\"Avatar found: \" + JSON.stringify(intersection));\r} else {\r    print(\"No avatar found.\");\r}"
        ],
        "memberof": "AvatarManager",
        "longname": "AvatarManager.findRayIntersection",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "findRayIntersectionVector",
        "params": [
            {
                "type": {
                    "names": [
                        "PickRay"
                    ]
                },
                "description": "Ray.",
                "name": "ray"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "Avatars to include.",
                "name": "avatarsToInclude"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "Avatars to discard.",
                "name": "avatarsToDiscard"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Pick against mesh.",
                "name": "pickAgainstMesh"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RayToAvatarIntersectionResult"
                    ]
                },
                "description": "Intersection result."
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "AvatarManager",
        "longname": "AvatarManager.findRayIntersectionVector",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "findParabolaIntersectionVector",
        "params": [
            {
                "type": {
                    "names": [
                        "PickParabola"
                    ]
                },
                "description": "Pick.",
                "name": "pick"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "Avatars to include.",
                "name": "avatarsToInclude"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "Avatars to discard.",
                "name": "avatarsToDiscard"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ParabolaToAvatarIntersectionResult"
                    ]
                },
                "description": "Intersection result."
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "AvatarManager",
        "longname": "AvatarManager.findParabolaIntersectionVector",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getAvatarSortCoefficient",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name.",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Value."
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "AvatarManager",
        "longname": "AvatarManager.getAvatarSortCoefficient",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setAvatarSortCoefficient",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Value.",
                "name": "value"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "AvatarManager",
        "longname": "AvatarManager.setAvatarSortCoefficient",
        "scope": "static"
    },
    {
        "description": "Gets PAL (People Access List) data for one or more avatars. Using this method is faster than iterating over each avatar \rand obtaining data about each individually.",
        "kind": "function",
        "name": "getPalData",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "The IDs of the avatars to get the PAL data for. If empty, then PAL data is obtained \r    for all avatars.",
                "name": "avatarIDs"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object.<\"data\", Array.<AvatarManager.PalData>>"
                    ]
                },
                "description": "An array of objects, each object being the PAL data for an avatar."
            }
        ],
        "examples": [
            "<caption>Report the PAL data for an avatar nearby.</caption>\rvar palData = AvatarManager.getPalData();\rprint(\"PAL data for one avatar: \" + JSON.stringify(palData.data[0]));"
        ],
        "memberof": "AvatarManager",
        "longname": "AvatarManager.getPalData",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "updateAvatarRenderStatus",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Should render avatars.",
                "name": "shouldRenderAvatars"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "AvatarManager",
        "longname": "AvatarManager.updateAvatarRenderStatus",
        "scope": "static"
    },
    {
        "description": "Displays other avatars skeletons debug graphics.",
        "kind": "function",
        "name": "setEnableDebugDrawOtherSkeletons",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to show the debug graphics, <code>false</code> to hide.",
                "name": "enabled"
            }
        ],
        "memberof": "AvatarManager",
        "longname": "AvatarManager.setEnableDebugDrawOtherSkeletons",
        "scope": "static"
    },
    {
        "description": "<p>Information about an avatar entity.</p>\r<table>\r  <thead>\r    <tr><th>Property</th><th>Type</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>id</code></td><td>Uuid</td><td>Entity ID.</td></tr>\r    <tr><td><code>properties</code></td><td>{@link Entities.EntityProperties}</td><td>Entity properties.</td></tr>\r   </tbody>\r</table>",
        "kind": "typedef",
        "name": "AvatarEntityData",
        "type": {
            "names": [
                "object"
            ]
        },
        "memberof": "MyAvatar",
        "longname": "MyAvatar.AvatarEntityData",
        "scope": "static"
    },
    {
        "description": "A teleport target.",
        "kind": "typedef",
        "name": "GoToProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The avatar's new position.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "optional": true,
                "description": "The avatar's new orientation.",
                "name": "orientation"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.GoToProperties",
        "scope": "static"
    },
    {
        "description": "A collision capsule is a cylinder with hemispherical ends. It is often used to approximate the extents of an avatar.",
        "kind": "typedef",
        "name": "CollisionCapsule",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The bottom end of the cylinder, excluding the bottom hemisphere.",
                "name": "start"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The top end of the cylinder, excluding the top hemisphere.",
                "name": "end"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The radius of the cylinder and the hemispheres.",
                "name": "radius"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.CollisionCapsule",
        "scope": "static"
    },
    {
        "description": "Physics options to use in the flow simulation of a joint.",
        "kind": "typedef",
        "name": "FlowPhysicsOptions",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "<code>true</code> to enable flow on the joint, otherwise <code>false</code>.",
                "name": "active"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0.01,
                "description": "The thickness of segments and knots (needed for collisions).",
                "name": "radius"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -0.0096,
                "description": "Y-value of the gravity vector.",
                "name": "gravity"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0.8,
                "description": "Rotational inertia multiplier.",
                "name": "inertia"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0.85,
                "description": "The amount of damping on joint oscillation.",
                "name": "damping"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": "0.0",
                "description": "The stiffness of each thread.",
                "name": "stiffness"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0.55,
                "description": "Delta time for every integration step.",
                "name": "delta"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.FlowPhysicsOptions",
        "scope": "static"
    },
    {
        "description": "Collision options to use in the flow simulation of a joint.",
        "kind": "typedef",
        "name": "FlowCollisionsOptions",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"sphere\"",
                "description": "Currently, only <code>\"sphere\"</code> is supported.",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0.05,
                "description": "Collision sphere radius.",
                "name": "radius"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": "Vec3.ZERO",
                "description": "Offset of the collision sphere from the joint.",
                "name": "offset"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.FlowCollisionsOptions",
        "scope": "static"
    },
    {
        "description": "Flow options currently used in flow simulation.",
        "kind": "typedef",
        "name": "FlowData",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if flow has been initialized for the current avatar, <code>false</code> \r    if it hasn't.",
                "name": "initialized"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if flow is enabled, <code>false</code> if it isn't.",
                "name": "active"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if collisions are enabled, <code>false</code> if they aren't.",
                "name": "colliding"
            },
            {
                "type": {
                    "names": [
                        "Object.<GroupName, MyAvatar.FlowPhysicsData>"
                    ]
                },
                "description": "The physics configuration for each group of joints \r    that has been configured.",
                "name": "physicsData"
            },
            {
                "type": {
                    "names": [
                        "Object.<JointName, MyAvatar.FlowCollisionsData>"
                    ]
                },
                "description": "The collisions configuration for each joint that \r    has collisions configured.",
                "name": "collisions"
            },
            {
                "type": {
                    "names": [
                        "Object.<ThreadName, Array.<number>>"
                    ]
                },
                "description": "The threads that have been configured, with the first joint's name as the \r    <code>ThreadName</code> and value as an array of the indexes of all the joints in the thread.",
                "name": "threads"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.FlowData",
        "scope": "static"
    },
    {
        "description": "A set of physics options currently used in flow simulation.",
        "kind": "typedef",
        "name": "FlowPhysicsData",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to enable flow on the joint, otherwise <code>false</code>.",
                "name": "active"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The thickness of segments and knots. (Needed for collisions.)",
                "name": "radius"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Y-value of the gravity vector.",
                "name": "gravity"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Rotational inertia multiplier.",
                "name": "inertia"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The amount of damping on joint oscillation.",
                "name": "damping"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The stiffness of each thread.",
                "name": "stiffness"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Delta time for every integration step.",
                "name": "delta"
            },
            {
                "type": {
                    "names": [
                        "Array.<number>"
                    ]
                },
                "description": "The indexes of the joints the options are applied to.",
                "name": "jointIndices"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.FlowPhysicsData",
        "scope": "static"
    },
    {
        "description": "A set of collision options currently used in flow simulation.",
        "kind": "typedef",
        "name": "FlowCollisionsData",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Collision sphere radius.",
                "name": "radius"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Offset of the collision sphere from the joint.",
                "name": "offset"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint the options are applied to.",
                "name": "jointIndex"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.FlowCollisionsData",
        "scope": "static"
    },
    {
        "description": "<p>Locomotion control types.</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Name</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>0</code></td><td>Default</td><td>Your walking speed is constant; it doesn't change depending on how far \r      forward you push your controller's joystick. Fully pushing your joystick forward makes your avatar run.</td></tr>\r    <tr><td><code>1</code></td><td>Analog</td><td>Your walking speed changes in steps based on how far forward you push your \r      controller's joystick. Fully pushing your joystick forward makes your avatar run.</td></tr>\r    <tr><td><code>2</code></td><td>AnalogPlus</td><td>Your walking speed changes proportionally to how far forward you push \r      your controller's joystick. Fully pushing your joystick forward makes your avatar run.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "LocomotionControlsMode",
        "type": {
            "names": [
                "number"
            ]
        },
        "memberof": "MyAvatar",
        "longname": "MyAvatar.LocomotionControlsMode",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>Your avatar is your in-world representation of you. The <code>MyAvatar</code> API is used to manipulate the avatar.\rFor example, you can customize the avatar's appearance, run custom avatar animations,\rchange the avatar's position within the domain, or manage the avatar's collisions with the environment and other avatars.\r\r<p>For assignment client scripts, see {@link Avatar}.</p>",
        "kind": "namespace",
        "name": "MyAvatar",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "tags": [
            {
                "originalTitle": "comment",
                "title": "comment",
                "text": "IMPORTANT: This group of properties is copied from AvatarData.h; they should NOT be edited here.",
                "value": "IMPORTANT: This group of properties is copied from AvatarData.h; they should NOT be edited here."
            },
            {
                "originalTitle": "comment",
                "title": "comment",
                "text": "IMPORTANT: This group of properties is copied from Avatar.h; they should NOT be edited here.",
                "value": "IMPORTANT: This group of properties is copied from Avatar.h; they should NOT be edited here."
            },
            {
                "originalTitle": "comment",
                "title": "comment",
                "text": "Avatar.getAvatarEntityData as getAvatarEntityData - Don't borrow because implementation is different.",
                "value": "Avatar.getAvatarEntityData as getAvatarEntityData - Don't borrow because implementation is different."
            },
            {
                "originalTitle": "comment",
                "title": "comment",
                "text": "Avatar.setAvatarEntityData as setAvatarEntityData - Don't borrow because implementation is different.",
                "value": "Avatar.setAvatarEntityData as setAvatarEntityData - Don't borrow because implementation is different."
            },
            {
                "originalTitle": "comment",
                "title": "comment",
                "text": "Avatar.getAbsoluteJointRotationInObjectFrame as getAbsoluteJointRotationInObjectFrame - Don't borrow because implementation is different.",
                "value": "Avatar.getAbsoluteJointRotationInObjectFrame as getAbsoluteJointRotationInObjectFrame - Don't borrow because implementation is different."
            },
            {
                "originalTitle": "comment",
                "title": "comment",
                "text": "Avatar.getAbsoluteJointTranslationInObjectFrame as getAbsoluteJointTranslationInObjectFrame - Don't borrow because implementation is different.",
                "value": "Avatar.getAbsoluteJointTranslationInObjectFrame as getAbsoluteJointTranslationInObjectFrame - Don't borrow because implementation is different."
            },
            {
                "originalTitle": "comment",
                "title": "comment",
                "text": "Avatar.setAbsoluteJointRotationInObjectFrame as setAbsoluteJointRotationInObjectFrame - Don't borrow because implementation is different.",
                "value": "Avatar.setAbsoluteJointRotationInObjectFrame as setAbsoluteJointRotationInObjectFrame - Don't borrow because implementation is different."
            },
            {
                "originalTitle": "comment",
                "title": "comment",
                "text": "Avatar.setAbsoluteJointTranslationInObjectFrame as setAbsoluteJointTranslationInObjectFrame - Don't borrow because implementation is different.",
                "value": "Avatar.setAbsoluteJointTranslationInObjectFrame as setAbsoluteJointTranslationInObjectFrame - Don't borrow because implementation is different."
            }
        ],
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the avatar.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "1.0",
                "description": "The scale of the avatar. The value can be set to anything between <code>0.005</code> and\r    <code>1000.0</code>. When the scale value is fetched, it may temporarily be further limited by the domain's settings.",
                "name": "scale"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The density of the avatar in kg/m<sup>3</sup>. The density is used to work out its mass in\r    the application of physics. <em>Read-only.</em>",
                "name": "density"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "A user-defined hand position, in world coordinates. The position moves with the avatar\r   but is otherwise not used or changed by Interface.",
                "name": "handPosition"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The left or right rotation about an axis running from the head to the feet of the avatar.\r    Yaw is sometimes called \"heading\".",
                "name": "bodyYaw"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The rotation about an axis running from shoulder to shoulder of the avatar. Pitch is\r    sometimes called \"elevation\".",
                "name": "bodyPitch"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The rotation about an axis running from the chest to the back of the avatar. Roll is\r    sometimes called \"bank\".",
                "name": "bodyRoll"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the avatar.",
                "name": "orientation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the avatar's head.",
                "name": "headOrientation"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The rotation about an axis running from ear to ear of the avatar's head. Pitch is\r    sometimes called \"elevation\".",
                "name": "headPitch"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The rotation left or right about an axis running from the base to the crown of the avatar's\r    head. Yaw is sometimes called \"heading\".",
                "name": "headYaw"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The rotation about an axis running from the nose to the back of the avatar's head. Roll is\r    sometimes called \"bank\".",
                "name": "headRoll"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The current velocity of the avatar.",
                "name": "velocity"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The current angular velocity of the avatar.",
                "name": "angularVelocity"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The instantaneous loudness of the audio input that the avatar is injecting into the\r    domain.",
                "name": "audioLoudness"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The rolling average loudness of the audio input that the avatar is injecting\r    into the domain.",
                "name": "audioAverageLoudness"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The avatar's display name.",
                "name": "displayName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<code>displayName's</code> sanitized and default version defined by the avatar\r    mixer rather than Interface clients. The result is unique among all avatars present in the domain at the time.",
                "name": "sessionDisplayName"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "<code>true</code> if the avatar's eyes snap to look at another avatar's\r    eyes when the other avatar is in the line of sight and also has <code>lookAtSnappingEnabled == true</code>.",
                "name": "lookAtSnappingEnabled"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The avatar's FST file.",
                "name": "skeletonModelURL"
            },
            {
                "type": {
                    "names": [
                        "Array.<AttachmentData>"
                    ]
                },
                "description": "Information on the avatar's attachments.\r    <p class=\"important\">Deprecated: This property is deprecated and will be removed. Use avatar entities instead.</p>",
                "name": "attachmentData"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "The list of joints in the current avatar model. <em>Read-only.</em>",
                "name": "jointNames"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "Unique ID of the avatar in the domain. <em>Read-only.</em>",
                "name": "sessionUUID"
            },
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The scale, rotation, and translation transform from the user's real world to the\r    avatar's size, orientation, and position in the virtual world. <em>Read-only.</em>",
                "name": "sensorToWorldMatrix"
            },
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The rotation and translation of the left hand controller relative to the\r    avatar. <em>Read-only.</em>",
                "name": "controllerLeftHandMatrix"
            },
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The rotation and translation of the right hand controller relative to the\r    avatar. <em>Read-only.</em>",
                "name": "controllerRightHandMatrix"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The scale that transforms dimensions in the user's real world to the avatar's\r    size in the virtual world. <em>Read-only.</em>",
                "name": "sensorToWorldScale"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the avatar is in a \"hero\" zone, <code>false</code> if it isn't.\r    <em>Read-only.</em>",
                "name": "hasPriority"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "Can be used to apply a translation offset between the avatar's position and the\r    registration point of the 3D model.",
                "name": "skeletonOffset"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "A synonym for <code>position</code> for use by QML.",
                "name": "qmlPosition"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the avatar's feet.",
                "name": "feetPosition"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code> then your avatar is rendered for you in Interface,\r    otherwise it is not rendered for you (but it is still rendered for other users).",
                "name": "shouldRenderLocally"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "Vec3.ZERO",
                "description": "The target velocity of your avatar to be achieved by a scripted motor.",
                "name": "motorVelocity"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1000000,
                "description": "The timescale for the scripted motor to achieve the target \r    <code>motorVelocity</code> avatar velocity. Smaller values result in higher acceleration.",
                "name": "motorTimescale"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"camera\"",
                "description": "Reference frame of the <code>motorVelocity</code>. Must be one of the \r    following: <code>\"camera\"</code>, <code>\"avatar\"</code>, and <code>\"world\"</code>.",
                "name": "motorReferenceFrame"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"simple\"",
                "description": "The Type of scripted motor behavior: <code>\"simple\"</code> to use the \r    <code>motorTimescale</code> time scale; <code>\"dynamic\"</code> to use character controller timescales.",
                "name": "motorMode"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"Body_Hits_Impact.wav\"",
                "description": "The sound that's played when the avatar experiences a \r    collision. It can be a mono or stereo 16-bit WAV file running at either 24kHz or 48kHz. The latter is down-sampled \r    by the audio mixer, so all audio effectively plays back at a 24khz. 48kHz RAW files are also supported.",
                "name": "collisionSoundURL"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "Specifies the listening position when hearing spatialized audio. Must be one \r    of the following property values:\r    <ul>\r        <li><code>MyAvatar.audioListenerModeHead</code></li>\r        <li><code>MyAvatar.audioListenerModeCamera</code></li>\r        <li><code>MyAvatar.audioListenerModeCustom</code></li>\r    </ul>",
                "name": "audioListenerMode"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The audio listening position is at the avatar's head. <em>Read-only.</em>",
                "name": "audioListenerModeHead"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The audio listening position is at the camera. <em>Read-only.</em>",
                "name": "audioListenerModeCamera"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 2,
                "description": "The audio listening position is at a the position specified by set by the \r    <code>customListenPosition</code> and <code>customListenOrientation</code> property values. <em>Read-only.</em>",
                "name": "audioListenerModeCustom"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "Vec3.ZERO",
                "description": "The listening position used when the <code>audioListenerMode</code>\r    property value is <code>audioListenerModeCustom</code>.",
                "name": "customListenPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "defaultvalue": "Quat.IDENTITY",
                "description": "The listening orientation used when the\r    <code>audioListenerMode</code> property value is <code>audioListenerModeCustom</code>.",
                "name": "customListenOrientation"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Configures how quickly the avatar root rotates to recenter its facing \r    direction to match that of the user's torso based on head and hands orientation. A smaller value makes the \r    recentering happen more quickly. The minimum value is <code>0.01</code>.",
                "name": "rotationRecenterFilterLength"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The angle in radians that the user's torso facing direction (based on head and \r    hands orientation) can differ from that of the avatar before the avatar's root is rotated to match the user's torso.",
                "name": "rotationThreshold"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If <code>true</code> then after the user's avatar takes a step, the \r    avatar's root immediately rotates to recenter its facing direction to match that of the user's torso based on head \r    and hands orientation.",
                "name": "enableStepResetRotation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If <code>true</code>, debug graphics are drawn that show the average \r    facing direction of the user's torso (based on head and hands orientation). This can be useful if you want to try \r    out different filter lengths and thresholds.",
                "name": "enableDrawAverageFacing"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the left hand in avatar coordinates if it's being positioned by \r    controllers, otherwise {@link Vec3(0)|Vec3.ZERO}. <em>Read-only.</em>",
                "name": "leftHandPosition"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the right hand in avatar coordinates if it's being positioned by\r    controllers, otherwise {@link Vec3(0)|Vec3.ZERO}. <em>Read-only.</em>",
                "name": "rightHandPosition"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position 0.3m in front of the left hand's position, in the direction along the \r    palm, in avatar coordinates. If the hand isn't being positioned by a controller, the value is \r    {@link Vec3(0)|Vec3.ZERO}. <em>Read-only.</em>",
                "name": "leftHandTipPosition"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position 0.3m in front of the right hand's position, in the direction along \r    the palm, in avatar coordinates. If the hand isn't being positioned by a controller, the value is \r    {@link Vec3(0)|Vec3.ZERO}. <em>Read-only.</em>",
                "name": "rightHandTipPosition"
            },
            {
                "type": {
                    "names": [
                        "Pose"
                    ]
                },
                "description": "The left hand's pose as determined by the hand controllers, relative to the avatar. \r    <em>Read-only.</em>",
                "name": "leftHandPose"
            },
            {
                "type": {
                    "names": [
                        "Pose"
                    ]
                },
                "description": "The right hand's pose as determined by the hand controllers, relative to the avatar.\r    <em>Read-only.</em>",
                "name": "rightHandPose"
            },
            {
                "type": {
                    "names": [
                        "Pose"
                    ]
                },
                "description": "The left hand's pose as determined by the hand controllers, relative to the avatar, \r    with the position adjusted by 0.3m along the direction of the palm. <em>Read-only.</em>",
                "name": "leftHandTipPose"
            },
            {
                "type": {
                    "names": [
                        "Pose"
                    ]
                },
                "description": "The right hand's pose as determined by the hand controllers, relative to the avatar, \r    with the position adjusted by 0.3m along the direction of the palm. <em>Read-only.</em>",
                "name": "rightHandTipPose"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<span class=\"important\">Deprecated: This property will be removed.</span>",
                "name": "energy"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if your avatar is away (i.e., inactive), <code>false</code> if it is \r    active.",
                "name": "isAway"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "<code>true</code> if the avatar hips are placed according to\r    the center of gravity model that balances the center of gravity over the base of support of the feet. Set the\r    value to <code>false</code> for default behavior where the hips are positioned under the head.",
                "name": "centerOfGravityModelEnabled"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "<code>true</code> IF the avatar is re-centered to be under the \r    head's position. In room-scale VR, this behavior is what causes your avatar to follow your HMD as you walk around \r    the room. Setting the value <code>false</code> is useful if you want to pin the avatar to a fixed position.",
                "name": "hmdLeanRecenterEnabled"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Set to <code>true</code> to enable the avatar to collide with the environment, \r    <code>false</code> to disable collisions with the environment. May return <code>true</code> even though the value \r    was set <code>false</code> because the zone may disallow collisionless avatars.",
                "name": "collisionsEnabled"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Set to <code>true</code> to enable the avatar to collide with other \r    avatars, <code>false</code> to disable collisions with other avatars.",
                "name": "otherAvatarsCollisionsEnabled"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Synonym of <code>collisionsEnabled</code>.\r    <p class=\"important\">Deprecated: This property is deprecated and will be removed. Use <code>collisionsEnabled</code> \r    instead.</p>",
                "name": "characterControllerEnabled"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Returns and sets the value of the Interface setting, Settings > \r    Controls > Walking. Note: Setting the value has no effect unless Interface is restarted.",
                "name": "useAdvancedMovementControls"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Returns and sets the value of the Interface setting, Settings > Controls > Show room \r    boundaries while teleporting.\r    <p><strong>Note:</strong> Setting the value has no effect unless Interface is restarted.</p>",
                "name": "showPlayArea"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 75,
                "description": "The mouse X sensitivity value in Settings > General. <em>Read-only.</em>",
                "name": "yawSpeed"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 50,
                "description": "The mouse Y sensitivity value in Settings > General. <em>Read-only.</em>",
                "name": "pitchSpeed"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the roll angle of your HMD turns your avatar \r    while flying.",
                "name": "hmdRollControlEnabled"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 8,
                "description": "The amount of HMD roll, in degrees, required before your avatar turns if \r   <code>hmdRollControlEnabled</code> is enabled.",
                "name": "hmdRollControlDeadZone"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "If <code>MyAvatar.hmdRollControlEnabled</code> is true, this value determines the \r    maximum turn rate of your avatar when rolling your HMD in degrees per second.",
                "name": "hmdRollControlRate"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1.75,
                "description": "The height of the user in sensor space.",
                "name": "userHeight"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1.65,
                "description": "The estimated height of the user's eyes in sensor space. <em>Read-only.</em>",
                "name": "userEyeHeight"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "UUID representing \"my avatar\". Only use for local-only entities in situations \r    where MyAvatar.sessionUUID is not available (e.g., if not connected to a domain). Note: Likely to be deprecated. \r    <em>Read-only.</em>",
                "name": "SELF_ID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The walk speed of your avatar for the current control scheme (see \r    {@link MyAvatar.getControlScheme|getControlScheme}).",
                "name": "walkSpeed"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The walk backward speed of your avatar for the current control scheme (see \r    {@link MyAvatar.getControlScheme|getControlScheme}).",
                "name": "walkBackwardSpeed"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The sprint (run) speed of your avatar for the current control scheme (see \r    {@link MyAvatar.getControlScheme|getControlScheme}).",
                "name": "sprintSpeed"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The walk speed of your avatar for the \"AnalogPlus\" control scheme.\r    <p><strong>Warning:</strong> Setting this value also sets the value of <code>analogPlusSprintSpeed</code> to twice \r    the value.</p>",
                "name": "analogPlusWalkSpeed"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The sprint (run) speed of your avatar for the \"AnalogPlus\" control scheme.",
                "name": "analogPlusSprintSpeed"
            },
            {
                "type": {
                    "names": [
                        "MyAvatar.SitStandModelType"
                    ]
                },
                "description": "Controls avatar leaning and recentering behavior.",
                "name": "userRecenterModel"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<code>true</code> if the user wearing the HMD is determined to be sitting\r    (avatar leaning is disabled, recentering is enabled), <code>false</code> if the user wearing the HMD is\r    determined to be standing (avatar leaning is enabled, and avatar recenters if it leans too far).\r    If <code>userRecenterModel == 2</code> (i.e., auto) the property value automatically updates as the user sits\r    or stands, unless <code>isSitStandStateLocked == true</code>. Setting the property value overrides the current\r    siting / standing state, which is updated when the user next sits or stands unless\r    <code>isSitStandStateLocked == true</code>.",
                "name": "isInSittingState"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to lock the avatar sitting/standing state, i.e., use this \r    to disable automatically changing state.",
                "name": "isSitStandStateLocked"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if teleporting is enabled in the Interface settings, \r    <code>false</code> if it isn't. <em>Read-only.</em>",
                "name": "allowTeleporting"
            }
        ],
        "longname": "MyAvatar",
        "scope": "global"
    },
    {
        "description": "<p>Logical keys that drive your avatar and camera.</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Name</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>0</code></td><td>TRANSLATE_X</td><td>Move the user's avatar in the direction of its x-axis, if the \r      camera isn't in independent or mirror modes.</td></tr>\r    <tr><td><code>1</code></td><td>TRANSLATE_Y</td><td>Move the user's avatar in the direction of its y-axis, if the \r      camera isn't in independent or mirror modes.</td></tr>\r    <tr><td><code>2</code></td><td>TRANSLATE_Z</td><td>Move the user's avatar in the direction of its z-axis, if the \r      camera isn't in independent or mirror modes</td></tr>\r    <tr><td><code>3</code></td><td>YAW</td><td>Rotate the user's avatar about its y-axis at a rate proportional to the \r      control value, if the camera isn't in independent or mirror modes.</td></tr>\r    <tr><td><code>4</code></td><td>STEP_TRANSLATE_X</td><td>No action.</td></tr>\r    <tr><td><code>5</code></td><td>STEP_TRANSLATE_Y</td><td>No action.</td></tr>\r    <tr><td><code>6</code></td><td>STEP_TRANSLATE_Z</td><td>No action.</td></tr>\r    <tr><td><code>7</code></td><td>STEP_YAW</td><td>Rotate the user's avatar about its y-axis in a step increment, if \r      the camera isn't in independent or mirror modes.</td></tr>\r    <tr><td><code>8</code></td><td>PITCH</td><td>Rotate the user's avatar head and attached camera about its negative \r      x-axis (i.e., positive values pitch down) at a rate proportional to the control value, if the camera isn't in HMD, \r      independent, or mirror modes.</td></tr>\r    <tr><td><code>9</code></td><td>ZOOM</td><td>Zoom the camera in or out.</td></tr>\r    <tr><td><code>10</code></td><td>DELTA_YAW</td><td>Rotate the user's avatar about its y-axis by an amount proportional \r      to the control value, if the camera isn't in independent or mirror modes.</td></tr>\r    <tr><td><code>11</code></td><td>DELTA_PITCH</td><td>Rotate the user's avatar head and attached camera about its \r      negative x-axis (i.e., positive values pitch down) by an amount proportional to the control value, if the camera \r      isn't in HMD, independent, or mirror modes.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "DriveKeys",
        "type": {
            "names": [
                "number"
            ]
        },
        "memberof": "MyAvatar",
        "longname": "MyAvatar.DriveKeys",
        "scope": "static"
    },
    {
        "description": "<p>Specifies different avatar leaning and recentering behaviors.</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Name</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>0</code></td><td>ForceSit</td><td>Assumes the user is seated in the real world. Disables avatar \r      leaning regardless of what the avatar is doing in the virtual world (i.e., avatar always recenters).</td></tr>\r    <tr><td><code>1</code></td><td>ForceStand</td><td>Assumes the user is standing in the real world. Enables avatar \r      leaning regardless of what the avatar is doing in the virtual world (i.e. avatar leans, then if leans too far it \r      recenters).</td></tr>\r    <tr><td><code>2</code></td><td>Auto</td><td>Interface detects when the user is standing or seated in the real world. \r      Avatar leaning is disabled when the user is sitting (i.e., avatar always recenters), and avatar leaning is enabled \r      when the user is standing (i.e., avatar leans, then if leans too far it recenters).</td></tr>\r    <tr><td><code>3</code></td><td>DisableHMDLean</td><td><p>Both avatar leaning and recentering are disabled regardless of \r      what the user is doing in the real world and no matter what their avatar is doing in the virtual world. Enables \r      the avatar to sit on the floor when the user sits on the floor.</p>\r      <p><strong>Note:</strong> Experimental.</p></td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "SitStandModelType",
        "type": {
            "names": [
                "number"
            ]
        },
        "memberof": "MyAvatar",
        "longname": "MyAvatar.SitStandModelType",
        "scope": "static"
    },
    {
        "description": "Resets the sensor positioning of your HMD (if in use) and recenters your avatar body and head.",
        "kind": "function",
        "name": "resetSensorsAndBody",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.resetSensorsAndBody",
        "scope": "static"
    },
    {
        "description": "Moves and orients the avatar, such that it is directly underneath the HMD, with toes pointed forward in the direction of \rthe HMD.",
        "kind": "function",
        "name": "centerBody",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.centerBody",
        "scope": "static"
    },
    {
        "description": "Clears inverse kinematics joint limit history.\r<p>The internal inverse-kinematics system maintains a record of which joints are \"locked\". Sometimes it is useful to \rforget this history to prevent contorted joints, e.g., after finishing with an override animation.</p>",
        "kind": "function",
        "name": "clearIKJointLimitHistory",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.clearIKJointLimitHistory",
        "scope": "static"
    },
    {
        "description": "Gets the avatar orientation. Suitable for use in QML.",
        "kind": "function",
        "name": "setOrientationVar",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The avatar's orientation.",
                "name": "newOrientationVar"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setOrientationVar",
        "scope": "static"
    },
    {
        "description": "Gets the avatar orientation. Suitable for use in QML.",
        "kind": "function",
        "name": "getOrientationVar",
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The avatar's orientation."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getOrientationVar",
        "scope": "static"
    },
    {
        "description": "Gets the position in world coordinates of the point directly between your avatar's eyes assuming your avatar was in its\rdefault pose. This is a reference position; it does not change as your avatar's head moves relative to the avatar \rposition.",
        "kind": "function",
        "name": "getDefaultEyePosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "Default position between your avatar's eyes in world coordinates."
            }
        ],
        "examples": [
            "<caption>Report your avatar's default eye position.</caption>\rvar defaultEyePosition = MyAvatar.getDefaultEyePosition();\rprint(JSON.stringify(defaultEyePosition));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getDefaultEyePosition",
        "scope": "static"
    },
    {
        "description": "Overrides the default avatar animations.\r<p>The avatar animation system includes a set of default animations along with rules for how those animations are blended\rtogether with procedural data (such as look at vectors, hand sensors etc.). <code>overrideAnimation()</code> is used to \rcompletely override all motion from the default animation system (including inverse kinematics for hand and head \rcontrollers) and play a set of specified animations. To end these animations and restore the default animations, use \r{@link MyAvatar.restoreAnimation}.</p>\r<p>Note: When using pre-built animation data, it's critical that the joint orientation of the source animation and target \rrig are equivalent, since the animation data applies absolute values onto the joints. If the orientations are different, \rthe avatar will move in unpredictable ways. For more information about avatar joint orientation standards, see \r<a href=\"https://docs.highfidelity.com/create/avatars/avatar-standards\">Avatar Standards</a>.</p>",
        "kind": "function",
        "name": "overrideAnimation",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL to the animation file. Animation files may be in glTF or FBX format, but only need to \r    contain the avatar skeleton and animation data. glTF models may be in JSON or binary format (\".gltf\" or \".glb\" URLs \r    respectively).\r    <p><strong>Warning:</strong> glTF animations currently do not always animate correctly.</p>",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The frames per second (FPS) rate for the animation playback. 30 FPS is normal speed.",
                "name": "fps"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the animation should loop, <code>false</code> if it shouldn't.",
                "name": "loop"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The frame to start the animation at.",
                "name": "firstFrame"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The frame to end the animation at.",
                "name": "lastFrame"
            }
        ],
        "examples": [
            "<caption> Play a clapping animation on your avatar for three seconds. </caption>\rvar ANIM_URL = \"https://s3.amazonaws.com/hifi-public/animations/ClapAnimations/ClapHands_Standing.fbx\";\rMyAvatar.overrideAnimation(ANIM_URL, 30, true, 0, 53);\rScript.setTimeout(function () {\r    MyAvatar.restoreAnimation();\r    MyAvatar.clearIKJointLimitHistory();\r}, 3000);"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.overrideAnimation",
        "scope": "static"
    },
    {
        "description": "Overrides the default hand poses that are triggered with controller buttons.\rUse {@link MyAvatar.restoreHandAnimation} to restore the default poses.",
        "kind": "function",
        "name": "overrideHandAnimation",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to override the left hand, <code>false</code> to override the right hand.",
                "name": "isLeft"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the animation file. Animation files need to be in glTF or FBX format, but only need to \r    contain the avatar skeleton and animation data. glTF models may be in JSON or binary format (\".gltf\" or \".glb\" URLs \r    respectively).\r    <p><strong>Warning:</strong> glTF animations currently do not always animate correctly.</p>",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The frames per second (FPS) rate for the animation playback. 30 FPS is normal speed.",
                "name": "fps"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the animation should loop, <code>false</code> if it shouldn't.",
                "name": "loop"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The frame to start the animation at.",
                "name": "firstFrame"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The frame to end the animation at.",
                "name": "lastFrame"
            }
        ],
        "examples": [
            "<caption> Override left hand animation for three seconds.</caption>\rvar ANIM_URL = \"https://s3.amazonaws.com/hifi-public/animations/ClapAnimations/ClapHands_Standing.fbx\";\rMyAvatar.overrideHandAnimation(isLeft, ANIM_URL, 30, true, 0, 53);\rScript.setTimeout(function () {\r    MyAvatar.restoreHandAnimation();\r}, 3000);"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.overrideHandAnimation",
        "scope": "static"
    },
    {
        "description": "Restores the default animations.\r<p>The avatar animation system includes a set of default animations along with rules for how those animations are blended \rtogether with procedural data (such as look at vectors, hand sensors etc.). Playing your own custom animations will \roverride the  default animations. <code>restoreAnimation()</code> is used to restore all motion from the default \ranimation system including inverse kinematics for hand and head controllers. If you aren't currently playing an override \ranimation, this function has no effect.</p>",
        "kind": "function",
        "name": "restoreAnimation",
        "examples": [
            "<caption> Play a clapping animation on your avatar for three seconds. </caption>\rvar ANIM_URL = \"https://s3.amazonaws.com/hifi-public/animations/ClapAnimations/ClapHands_Standing.fbx\";\rMyAvatar.overrideAnimation(ANIM_URL, 30, true, 0, 53);\rScript.setTimeout(function () {\r    MyAvatar.restoreAnimation();\r}, 3000);"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.restoreAnimation",
        "scope": "static"
    },
    {
        "description": "Restores the default hand animation state machine that is driven by the state machine in the avatar-animation JSON.\r<p>The avatar animation system includes a set of default animations along with rules for how those animations are blended\rtogether with procedural data (such as look at vectors, hand sensors etc.). Playing your own custom animations will\roverride the  default animations. <code>restoreHandAnimation()</code> is used to restore the default hand poses.\rIf you aren't currently playing an override hand animation, this function has no effect.</p>",
        "kind": "function",
        "name": "restoreHandAnimation",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Set to true if using the left hand",
                "name": "isLeft"
            }
        ],
        "examples": [
            "<caption> Override left hand animation for three seconds. </caption>\rvar ANIM_URL = \"https://s3.amazonaws.com/hifi-public/animations/ClapAnimations/ClapHands_Standing.fbx\";\rMyAvatar.overrideHandAnimation(isLeft, ANIM_URL, 30, true, 0, 53);\rScript.setTimeout(function () {\r    MyAvatar.restoreHandAnimation();\r}, 3000);"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.restoreHandAnimation",
        "scope": "static"
    },
    {
        "description": "Gets the current animation roles.\r<p>Each avatar has an avatar-animation.json file that defines which animations are used and how they are blended together \rwith procedural data (such as look at vectors, hand sensors etc.). Each animation specified in the avatar-animation.json \rfile is known as an animation role. Animation roles map to easily understandable actions that the avatar can perform, \rsuch as <code>\"idleStand\"</code>, <code>\"idleTalk\"</code>, or <code>\"walkFwd\"</code>. <code>getAnimationRoles()</code> \ris used get the list of animation roles defined in the avatar-animation.json.</p>",
        "kind": "function",
        "name": "getAnimationRoles",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "Array of role strings."
            }
        ],
        "examples": [
            "<caption>Print the list of animation roles defined in the avatar's avatar-animation.json file to the debug log.</caption>\rvar roles = MyAvatar.getAnimationRoles();\rprint(\"Animation Roles:\");\rfor (var i = 0; i < roles.length; i++) {\r    print(roles[i]);\r}"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getAnimationRoles",
        "scope": "static"
    },
    {
        "description": "Overrides a specific animation role.\r<p>Each avatar has an avatar-animation.json file that defines a set of animation roles. Animation roles map to easily \runderstandable actions that the avatar can perform, such as <code>\"idleStand\"</code>, <code>\"idleTalk\"</code>, or \r<code>\"walkFwd\"</code>. To get the full list of roles, use {@ link MyAvatar.getAnimationRoles}.\rFor each role, the avatar-animation.json defines when the animation is used, the animation clip (glTF or FBX) used, and \rhow animations are blended together with procedural data (such as look at vectors, hand sensors etc.).\r<code>overrideRoleAnimation()</code> is used to change the animation clip (glTF or FBX) associated with a specified \ranimation role. To end the role animation and restore the default, use {@link MyAvatar.restoreRoleAnimation}.</p>\r<p>Note: Hand roles only affect the hand. Other \"main\" roles, like \"idleStand\", \"idleTalk\", and \"takeoffStand\", are full \rbody.</p>\r<p>Note: When using pre-built animation data, it's critical that the joint orientation of the source animation and target\rrig are equivalent, since the animation data applies absolute values onto the joints. If the orientations are different,\rthe avatar will move in unpredictable ways. For more information about avatar joint orientation standards, see \r<a href=\"https://docs.highfidelity.com/create/avatars/avatar-standards\">Avatar Standards</a>.",
        "kind": "function",
        "name": "overrideRoleAnimation",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The animation role to override",
                "name": "role"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL to the animation file. Animation files need to be in glTF or FBX format, but only need to \r    contain the avatar skeleton and animation data. glTF models may be in JSON or binary format (\".gltf\" or \".glb\" URLs \r    respectively).\r    <p><strong>Warning:</strong> glTF animations currently do not always animate correctly.</p>",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The frames per second (FPS) rate for the animation playback. 30 FPS is normal speed.",
                "name": "fps"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the animation should loop, <code>false</code> if it shouldn't.",
                "name": "loop"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The frame the animation should start at.",
                "name": "firstFrame"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The frame the animation should end at.",
                "name": "lastFrame"
            }
        ],
        "examples": [
            "<caption>The default avatar-animation.json defines an \"idleStand\" animation role. This role specifies that when the avatar is not moving,\ran animation clip of the avatar idling with hands hanging at its side will be used. It also specifies that when the avatar moves, the animation\rwill smoothly blend to the walking animation used by the \"walkFwd\" animation role.\rIn this example, the \"idleStand\" role animation clip has been replaced with a clapping animation clip. Now instead of standing with its arms\rhanging at its sides when it is not moving, the avatar will stand and clap its hands. Note that just as it did before, as soon as the avatar\rstarts to move, the animation will smoothly blend into the walk animation used by the \"walkFwd\" animation role.</caption>\r// An animation of the avatar clapping its hands while standing. Restore default after 30s.\rvar ANIM_URL = \"https://s3.amazonaws.com/hifi-public/animations/ClapAnimations/ClapHands_Standing.fbx\";\rMyAvatar.overrideRoleAnimation(\"idleStand\", ANIM_URL, 30, true, 0, 53);\rScript.setTimeout(function () {\r    MyAvatar.restoreRoleAnimation();\r}, 30000);"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.overrideRoleAnimation",
        "scope": "static"
    },
    {
        "description": "Restores a default role animation.\r<p>Each avatar has an avatar-animation.json file that defines a set of animation roles. Animation roles map to easily \runderstandable actions that the avatar can perform, such as <code>\"idleStand\"</code>, <code>\"idleTalk\"</code>, or \r<code>\"walkFwd\"</code>. To get the full list of roles, use {@link MyAvatar.getAnimationRoles}. For each role,\rthe avatar-animation.json defines when the animation is used, the animation clip (glTF or FBX) used, and how animations \rare blended together with procedural data (such as look-at vectors, hand sensors etc.). You can change the animation \rclip (glTF or FBX) associated with a specified animation role using {@link MyAvatar.overrideRoleAnimation}.\r<code>restoreRoleAnimation()</code> is used to restore a specified animation role's default animation clip. If you have \rnot specified an override animation for the specified role, this function has no effect.",
        "kind": "function",
        "name": "restoreRoleAnimation",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The animation role clip to restore.",
                "name": "role"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.restoreRoleAnimation",
        "scope": "static"
    },
    {
        "description": "Adds an animation state handler function that is invoked just before each animation graph update. More than one \ranimation state handler function may be added by calling <code>addAnimationStateHandler</code> multiple times. It is not \rspecified in what order multiple handlers are called.\r<p>The animation state handler function is called with an {@link MyAvatar.AnimStateDictionary|AnimStateDictionary}\r\"<code>animStateDictionaryIn</code>\" parameter and is expected to return an \r{@link MyAvatar.AnimStateDictionary|AnimStateDictionary} \"<code>animStateDictionaryOut</code>\" object. The \r<code>animStateDictionaryOut</code> object can be the same object as <code>animStateDictionaryIn</code>, or it can be a \rdifferent object. The <code>animStateDictionaryIn</code> may be shared among multiple handlers and thus may contain \radditional properties specified when adding the different handlers.</p>\r<p>A handler may change a value from <code>animStateDictionaryIn</code> or add different values in the \r<code>animStateDictionaryOut</code> returned. Any property values set in <code>animStateDictionaryOut</code> will \roverride those of the internal animation machinery.</p>",
        "kind": "function",
        "name": "addAnimationStateHandler",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The animation state handler function to add.",
                "name": "handler"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>",
                        "null"
                    ]
                },
                "description": "The list of {@link MyAvatar.AnimStateDictionary|AnimStateDictionary} \r    properties that should be included in the parameter that the handler function is called with. If <code>null</code> \r    then all properties are included in the call parameter.",
                "name": "propertiesList"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the animation state handler function if successfully added, <code>undefined</code> if not."
            }
        ],
        "examples": [
            "<caption>Log all the animation state dictionary parameters for a short while.</caption>\rfunction animStateHandler(dictionary) {\r    print(\"Anim state dictionary: \" + JSON.stringify(dictionary));\r}\r\rvar handler = MyAvatar.addAnimationStateHandler(animStateHandler, null);\r\rScript.setTimeout(function () {\r    MyAvatar.removeAnimationStateHandler(handler);\r}, 100);"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.addAnimationStateHandler",
        "scope": "static"
    },
    {
        "description": "Removes an animation state handler function.",
        "kind": "function",
        "name": "removeAnimationStateHandler",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the animation state handler function to remove.",
                "name": "handler"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.removeAnimationStateHandler",
        "scope": "static"
    },
    {
        "description": "Gets whether you do snap turns in HMD mode.",
        "kind": "function",
        "name": "getSnapTurn",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if you do snap turns in HMD mode; <code>false</code> if you do smooth turns in HMD \r    mode."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getSnapTurn",
        "scope": "static"
    },
    {
        "description": "Sets whether you do snap turns or smooth turns in HMD mode.",
        "kind": "function",
        "name": "setSnapTurn",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to do snap turns in HMD mode; <code>false</code> to do smooth turns in HMD mode.",
                "name": "on"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setSnapTurn",
        "scope": "static"
    },
    {
        "description": "Gets the control scheme that is in use.",
        "kind": "function",
        "name": "getControlScheme",
        "returns": [
            {
                "type": {
                    "names": [
                        "MyAvatar.LocomotionControlsMode"
                    ]
                },
                "description": "The control scheme that is in use."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getControlScheme",
        "scope": "static"
    },
    {
        "description": "Sets the control scheme to use.",
        "kind": "function",
        "name": "setControlScheme",
        "params": [
            {
                "type": {
                    "names": [
                        "MyAvatar.LocomotionControlsMode"
                    ]
                },
                "description": "The control scheme to use.",
                "name": "controlScheme"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setControlScheme",
        "scope": "static"
    },
    {
        "description": "Gets whether your avatar hovers when its feet are not on the ground.",
        "kind": "function",
        "name": "hoverWhenUnsupported",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if your avatar hovers when its feet are not on the ground, <code>false</code> if it \r    falls."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.hoverWhenUnsupported",
        "scope": "static"
    },
    {
        "description": "Sets whether your avatar hovers when its feet are not on the ground.",
        "kind": "function",
        "name": "setHoverWhenUnsupported",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if your avatar hovers when its feet are not on the ground, <code>false</code> \r    if it falls.",
                "name": "hover"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setHoverWhenUnsupported",
        "scope": "static"
    },
    {
        "description": "Sets the avatar's dominant hand.",
        "kind": "function",
        "name": "setDominantHand",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The dominant hand: <code>\"left\"</code> for the left hand or <code>\"right\"</code> for the right \r    hand. Any other value has no effect.",
                "name": "hand"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setDominantHand",
        "scope": "static"
    },
    {
        "description": "Gets the avatar's dominant hand.",
        "kind": "function",
        "name": "getDominantHand",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<code>\"left\"</code> for the left hand, <code>\"right\"</code> for the right hand."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getDominantHand",
        "scope": "static"
    },
    {
        "description": "Sets whether strafing is enabled.",
        "kind": "function",
        "name": "setStrafeEnabled",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if strafing is enabled, <code>false</code> if it isn't.",
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setStrafeEnabled",
        "scope": "static"
    },
    {
        "description": "Gets whether strafing is enabled.",
        "kind": "function",
        "name": "getStrafeEnabled",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if strafing is enabled, <code>false</code> if it isn't."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getStrafeEnabled",
        "scope": "static"
    },
    {
        "description": "Sets the HMD alignment relative to your avatar.",
        "kind": "function",
        "name": "setHmdAvatarAlignmentType",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<code>\"head\"</code> to align your head and your avatar's head, <code>\"eyes\"</code> to align your \r    eyes and your avatar's eyes.",
                "name": "type"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setHmdAvatarAlignmentType",
        "scope": "static"
    },
    {
        "description": "Gets the HMD alignment relative to your avatar.",
        "kind": "function",
        "name": "getHmdAvatarAlignmentType",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<code>\"head\"</code> if aligning your head and your avatar's head, <code>\"eyes\"</code> if aligning your \r    eyes and your avatar's eyes."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getHmdAvatarAlignmentType",
        "scope": "static"
    },
    {
        "description": "Sets whether the avatar's hips are balanced over the feet or positioned under the head.",
        "kind": "function",
        "name": "setCenterOfGravityModelEnabled",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to balance the hips over the feet, <code>false</code> to position the hips \r    under the head.",
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setCenterOfGravityModelEnabled",
        "scope": "static"
    },
    {
        "description": "Gets whether the avatar hips are being balanced over the feet or placed under the head.",
        "kind": "function",
        "name": "getCenterOfGravityModelEnabled",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the hips are being balanced over the feet, <code>false</code> if the hips are \r    being positioned under the head."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getCenterOfGravityModelEnabled",
        "scope": "static"
    },
    {
        "description": "Sets whether the avatar's position updates to recenter the avatar under the head. In room-scale VR, recentering \rcauses your avatar to follow your HMD as you walk around the room. Disabling recentering is useful if you want to pin \rthe avatar to a fixed position.",
        "kind": "function",
        "name": "setHMDLeanRecenterEnabled",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to recenter the avatar under the head as it moves, <code>false</code> to \r    disable recentering.",
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setHMDLeanRecenterEnabled",
        "scope": "static"
    },
    {
        "description": "Gets whether the avatar's position updates to recenter the avatar under the head. In room-scale VR, recentering\rcauses your avatar to follow your HMD as you walk around the room.",
        "kind": "function",
        "name": "getHMDLeanRecenterEnabled",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if recentering is enabled, <code>false</code> if not."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getHMDLeanRecenterEnabled",
        "scope": "static"
    },
    {
        "description": "Requests that the hand touch effect is disabled for your avatar. Any resulting change in the status of the hand touch \reffect will be signaled by {@link MyAvatar.shouldDisableHandTouchChanged}.\r<p>The hand touch effect makes the avatar's fingers adapt to the shape of any object grabbed, creating the effect that \rit is really touching that object.</p>",
        "kind": "function",
        "name": "requestEnableHandTouch",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.requestEnableHandTouch",
        "scope": "static"
    },
    {
        "description": "Requests that the hand touch effect is enabled for your avatar. Any resulting change in the status of the hand touch\reffect will be signaled by {@link MyAvatar.shouldDisableHandTouchChanged}.\r<p>The hand touch effect makes the avatar's fingers adapt to the shape of any object grabbed, creating the effect that\rit is really touching that object.</p>",
        "kind": "function",
        "name": "requestDisableHandTouch",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.requestDisableHandTouch",
        "scope": "static"
    },
    {
        "description": "Disables the hand touch effect on a specific entity.\r<p>The hand touch effect makes the avatar's fingers adapt to the shape of any object grabbed, creating the effect that\rit is really touching that object.</p>",
        "kind": "function",
        "name": "disableHandTouchForID",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The entity that the hand touch effect will be disabled for.",
                "name": "entityID"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.disableHandTouchForID",
        "scope": "static"
    },
    {
        "description": "Enables the hand touch effect on a specific entity.\r<p>The hand touch effect makes the avatar's fingers adapt to the shape of any object grabbed, creating the effect that\rit is really touching that object.</p>",
        "kind": "function",
        "name": "enableHandTouchForID",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The entity that the hand touch effect will be enabled for.",
                "name": "entityID"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.enableHandTouchForID",
        "scope": "static"
    },
    {
        "description": "Gets the value of a drive key, regardless of whether it is disabled.",
        "kind": "function",
        "name": "getRawDriveKey",
        "params": [
            {
                "type": {
                    "names": [
                        "MyAvatar.DriveKeys"
                    ]
                },
                "description": "The drive key.",
                "name": "key"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The value of the drive key."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getRawDriveKey",
        "scope": "static"
    },
    {
        "description": "Disables the action associated with a drive key.",
        "kind": "function",
        "name": "disableDriveKey",
        "params": [
            {
                "type": {
                    "names": [
                        "MyAvatar.DriveKeys"
                    ]
                },
                "description": "The drive key to disable.",
                "name": "key"
            }
        ],
        "examples": [
            "<caption>Disable rotating your avatar using the keyboard for a couple of seconds.</caption>\rvar YAW = 3;\rprint(\"Disable\");\rMyAvatar.disableDriveKey(YAW);\rScript.setTimeout(function () {\r    print(\"Enable\");\r    MyAvatar.enableDriveKey(YAW);\r}, 5000);"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.disableDriveKey",
        "scope": "static"
    },
    {
        "description": "Enables the action associated with a drive key. The action may have been disabled with \r{@link MyAvatar.disableDriveKey|disableDriveKey}.",
        "kind": "function",
        "name": "enableDriveKey",
        "params": [
            {
                "type": {
                    "names": [
                        "MyAvatar.DriveKeys"
                    ]
                },
                "description": "The drive key to enable.",
                "name": "key"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.enableDriveKey",
        "scope": "static"
    },
    {
        "description": "Checks whether a drive key is disabled.",
        "kind": "function",
        "name": "isDriveKeyDisabled",
        "params": [
            {
                "type": {
                    "names": [
                        "DriveKeys"
                    ]
                },
                "description": "The drive key to check.",
                "name": "key"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the drive key is disabled, <code>false</code> if it isn't."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.isDriveKeyDisabled",
        "scope": "static"
    },
    {
        "description": "Recenter the avatar in the vertical direction, if <code>{@link MyAvatar|MyAvatar.hmdLeanRecenterEnabled}</code> is \r<code>false</code>.",
        "kind": "function",
        "name": "triggerVerticalRecenter",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.triggerVerticalRecenter",
        "scope": "static"
    },
    {
        "description": "Recenter the avatar in the horizontal direction, if <code>{@link MyAvatar|MyAvatar.hmdLeanRecenterEnabled}</code> is \r<code>false</code>.",
        "kind": "function",
        "name": "triggerHorizontalRecenter",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.triggerHorizontalRecenter",
        "scope": "static"
    },
    {
        "description": "Recenter the avatar's rotation, if <code>{@link MyAvatar|MyAvatar.hmdLeanRecenterEnabled}</code> is <code>false</code>.",
        "kind": "function",
        "name": "triggerRotationRecenter",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.triggerRotationRecenter",
        "scope": "static"
    },
    {
        "description": "Gets whether the avatar is configured to keep its center of gravity under its head.",
        "kind": "function",
        "name": "isRecenteringHorizontally",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the avatar is keeping its center of gravity under its head position, \r    <code>false</code> if not."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.isRecenteringHorizontally",
        "scope": "static"
    },
    {
        "description": "Gets the current position of the avatar's \"Head\" joint.",
        "kind": "function",
        "name": "getHeadPosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The current position of the avatar's \"Head\" joint."
            }
        ],
        "examples": [
            "<caption>Report the current position of your avatar's head.</caption>\rprint(JSON.stringify(MyAvatar.getHeadPosition()));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getHeadPosition",
        "scope": "static"
    },
    {
        "description": "Gets the yaw of the avatar's head relative to its body.",
        "kind": "function",
        "name": "getHeadFinalYaw",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The yaw of the avatar's head, in degrees."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getHeadFinalYaw",
        "scope": "static"
    },
    {
        "description": "Gets the roll of the avatar's head relative to its body.",
        "kind": "function",
        "name": "getHeadFinalRoll",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The roll of the avatar's head, in degrees."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getHeadFinalRoll",
        "scope": "static"
    },
    {
        "description": "Gets the pitch of the avatar's head relative to its body.",
        "kind": "function",
        "name": "getHeadFinalPitch",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The pitch of the avatar's head, in degrees."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getHeadFinalPitch",
        "scope": "static"
    },
    {
        "description": "If a face tracker is connected and being used, gets the estimated pitch of the user's head scaled. This is scale such \rthat the avatar looks at the edge of the view frustum when the user looks at the edge of their screen.",
        "kind": "function",
        "name": "getHeadDeltaPitch",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The pitch that the avatar's head should be if a face tracker is connected and being used, otherwise\r    <code>0</code>, in degrees."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getHeadDeltaPitch",
        "scope": "static"
    },
    {
        "description": "Gets the current position of the point directly between the avatar's eyes.",
        "kind": "function",
        "name": "getEyePosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The current position of the point directly between the avatar's eyes."
            }
        ],
        "examples": [
            "<caption>Report your avatar's current eye position.</caption>\rvar eyePosition = MyAvatar.getEyePosition();\rprint(JSON.stringify(eyePosition));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getEyePosition",
        "scope": "static"
    },
    {
        "description": "Gets the position of the avatar your avatar is currently looking at.",
        "kind": "function",
        "name": "getTargetAvatarPosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the avatar beeing looked at."
            }
        ],
        "examples": [
            "<caption>Report the position of the avatar you're currently looking at.</caption>\rprint(JSON.stringify(MyAvatar.getTargetAvatarPosition()));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getTargetAvatarPosition",
        "scope": "static"
    },
    {
        "description": "Gets information on the avatar your avatar is currently looking at.",
        "kind": "function",
        "name": "getTargetAvatar",
        "returns": [
            {
                "type": {
                    "names": [
                        "AvatarData"
                    ]
                },
                "description": "Information on the avatar being looked at."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getTargetAvatar",
        "scope": "static"
    },
    {
        "description": "Gets the position of the avatar's left hand, relative to the avatar, as positioned by a hand controller (e.g., Oculus \rTouch or Vive).\r<p>Note: The Leap Motion isn't part of the hand controller input system. (Instead, it manipulates the avatar's joints \rfor hand animation.)</p>",
        "kind": "function",
        "name": "getLeftHandPosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the left hand in avatar coordinates if positioned by a hand controller, otherwise \r    <code>{@link Vec3(0)|Vec3.ZERO}</code>."
            }
        ],
        "examples": [
            "<caption>Report the position of your left hand relative to your avatar.</caption>\rprint(JSON.stringify(MyAvatar.getLeftHandPosition()));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getLeftHandPosition",
        "scope": "static"
    },
    {
        "description": "Gets the position of the avatar's right hand, relative to the avatar, as positioned by a hand controller (e.g., Oculus \rTouch or Vive).\r<p>Note: The Leap Motion isn't part of the hand controller input system. (Instead, it manipulates the avatar's joints \rfor hand animation.)</p>",
        "kind": "function",
        "name": "getRightHandPosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the right hand in avatar coordinates if positioned by a hand controller, otherwise \r    <code>{@link Vec3(0)|Vec3.ZERO}</code>."
            }
        ],
        "examples": [
            "<caption>Report the position of your right hand relative to your avatar.</caption>\rprint(JSON.stringify(MyAvatar.getLeftHandPosition()));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getRightHandPosition",
        "scope": "static"
    },
    {
        "description": "Gets the position 0.3m in front of the left hand's position in the direction along the palm, in avatar coordinates, as \rpositioned by a hand controller.",
        "kind": "function",
        "name": "getLeftHandTipPosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position 0.3m in front of the left hand's position in the direction along the palm, in avatar \r    coordinates. If the hand isn't being positioned by a controller, <code>{@link Vec3(0)|Vec3.ZERO}</code> is returned."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getLeftHandTipPosition",
        "scope": "static"
    },
    {
        "description": "Gets the position 0.3m in front of the right hand's position in the direction along the palm, in avatar coordinates, as\rpositioned by a hand controller.",
        "kind": "function",
        "name": "getRightHandTipPosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position 0.3m in front of the right hand's position in the direction along the palm, in avatar \r    coordinates. If the hand isn't being positioned by a controller, <code>{@link Vec3(0)|Vec3.ZERO}</code> is returned."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getRightHandTipPosition",
        "scope": "static"
    },
    {
        "description": "Gets the pose (position, rotation, velocity, and angular velocity) of the avatar's left hand as positioned by a \rhand controller (e.g., Oculus Touch or Vive).\r<p>Note: The Leap Motion isn't part of the hand controller input system. (Instead, it manipulates the avatar's joints \rfor hand animation.) If you are using the Leap Motion, the return value's <code>valid</code> property will be \r<code>false</code> and any pose values returned will not be meaningful.</p>",
        "kind": "function",
        "name": "getLeftHandPose",
        "returns": [
            {
                "type": {
                    "names": [
                        "Pose"
                    ]
                },
                "description": "The pose of the avatar's left hand, relative to the avatar, as positioned by a hand controller."
            }
        ],
        "examples": [
            "<caption>Report the pose of your avatar's left hand.</caption>\rprint(JSON.stringify(MyAvatar.getLeftHandPose()));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getLeftHandPose",
        "scope": "static"
    },
    {
        "description": "Gets the pose (position, rotation, velocity, and angular velocity) of the avatar's left hand as positioned by a \rhand controller (e.g., Oculus Touch or Vive).\r<p>Note: The Leap Motion isn't part of the hand controller input system. (Instead, it manipulates the avatar's joints \rfor hand animation.) If you are using the Leap Motion, the return value's <code>valid</code> property will be \r<code>false</code> and any pose values returned will not be meaningful.</p>",
        "kind": "function",
        "name": "getRightHandPose",
        "returns": [
            {
                "type": {
                    "names": [
                        "Pose"
                    ]
                },
                "description": "The pose of the avatar's right hand, relative to the avatar, as positioned by a hand controller."
            }
        ],
        "examples": [
            "<caption>Report the pose of your avatar's right hand.</caption>\rprint(JSON.stringify(MyAvatar.getRightHandPose()));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getRightHandPose",
        "scope": "static"
    },
    {
        "description": "Gets the pose (position, rotation, velocity, and angular velocity) of the avatar's left hand, relative to the avatar, as \rpositioned by a hand controller (e.g., Oculus Touch or Vive), and translated 0.3m along the palm.\r<p>Note: Leap Motion isn't part of the hand controller input system. (Instead, it manipulates the avatar's joints\rfor hand animation.) If you are using Leap Motion, the return value's <code>valid</code> property will be\r<code>false</code> and any pose values returned will not be meaningful.</p>",
        "kind": "function",
        "name": "getLeftHandTipPose",
        "returns": [
            {
                "type": {
                    "names": [
                        "Pose"
                    ]
                },
                "description": "The pose of the avatar's left hand, relative to the avatar, as positioned by a hand controller, and \r    translated 0.3m along the palm."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getLeftHandTipPose",
        "scope": "static"
    },
    {
        "description": "Gets the pose (position, rotation, velocity, and angular velocity) of the avatar's right hand, relative to the avatar, as\rpositioned by a hand controller (e.g., Oculus Touch or Vive), and translated 0.3m along the palm.\r<p>Note: Leap Motion isn't part of the hand controller input system. (Instead, it manipulates the avatar's joints\rfor hand animation.) If you are using Leap Motion, the return value's <code>valid</code> property will be\r<code>false</code> and any pose values returned will not be meaningful.</p>",
        "kind": "function",
        "name": "getRightHandTipPose",
        "returns": [
            {
                "type": {
                    "names": [
                        "Pose"
                    ]
                },
                "description": "The pose of the avatar's right hand, relative to the avatar, as positioned by a hand controller, and\r    translated 0.3m along the palm."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getRightHandTipPose",
        "scope": "static"
    },
    {
        "description": "Sets and locks a joint's position and orientation.\r<p><strong>Note:</strong> Only works on the hips joint.</p>",
        "kind": "function",
        "name": "pinJoint",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint.",
                "name": "index"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the joint in world coordinates.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the joint in world coordinates.",
                "name": "orientation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the joint was pinned, <code>false</code> if it wasn't."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.pinJoint",
        "scope": "static"
    },
    {
        "description": "Clears a lock on a joint's position and orientation, as set by {@link MyAvatar.pinJoint|pinJoint}.\r<p><strong>Note:</strong> Only works on the hips joint.</p>",
        "kind": "function",
        "name": "clearPinOnJoint",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint.",
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the joint was unpinned, <code>false</code> if it wasn't."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.clearPinOnJoint",
        "scope": "static"
    },
    {
        "description": "Gets the maximum error distance from the most recent inverse kinematics (IK) solution.",
        "kind": "function",
        "name": "getIKErrorOnLastSolve",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The maximum IK error distance."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getIKErrorOnLastSolve",
        "scope": "static"
    },
    {
        "description": "Changes the user's avatar and associated descriptive name.",
        "kind": "function",
        "name": "useFullAvatarURL",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the avatar's <code>.fst</code> file.",
                "name": "fullAvatarURL"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "Descriptive name of the avatar.",
                "name": "modelName"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.useFullAvatarURL",
        "scope": "static"
    },
    {
        "description": "Gets the complete URL for the current avatar.",
        "kind": "function",
        "name": "getFullAvatarURLFromPreferences",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The full avatar model name."
            }
        ],
        "examples": [
            "<caption>Report the URL for the current avatar.</caption>\rprint(MyAvatar.getFullAvatarURLFromPreferences());"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getFullAvatarURLFromPreferences",
        "scope": "static"
    },
    {
        "description": "Gets the full avatar model name for the current avatar.",
        "kind": "function",
        "name": "getFullAvatarModelName",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The full avatar model name."
            }
        ],
        "examples": [
            "<caption>Report the current full avatar model name.</caption>\rprint(MyAvatar.getFullAvatarModelName());"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getFullAvatarModelName",
        "scope": "static"
    },
    {
        "description": "Gets the current avatar entity IDs and their properties.",
        "kind": "function",
        "name": "getAvatarEntitiesVariant",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<MyAvatar.AvatarEntityData>"
                    ]
                },
                "description": "The current avatar entity IDs and their properties."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getAvatarEntitiesVariant",
        "scope": "static"
    },
    {
        "description": "Checks whether your avatar is flying.",
        "kind": "function",
        "name": "isFlying",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if your avatar is flying and not taking off or falling, <code>false</code> if not."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.isFlying",
        "scope": "static"
    },
    {
        "description": "Checks whether your avatar is in the air.",
        "kind": "function",
        "name": "isInAir",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if your avatar is taking off, flying, or falling, otherwise <code>false</code> \r    because your avatar is on the ground."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.isInAir",
        "scope": "static"
    },
    {
        "description": "Sets your preference for flying in your current desktop or HMD display mode. Note that your ability to fly also depends \ron whether the domain you're in allows you to fly.",
        "kind": "function",
        "name": "setFlyingEnabled",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Set <code>true</code> if you want to enable flying in your current desktop or HMD display \r    mode, otherwise set <code>false</code>.",
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setFlyingEnabled",
        "scope": "static"
    },
    {
        "description": "Gets your preference for flying in your current desktop or HMD display mode. Note that your ability to fly also depends \ron whether the domain you're in allows you to fly.",
        "kind": "function",
        "name": "getFlyingEnabled",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if your preference is to enable flying in your current desktop or HMD display mode, \r    otherwise <code>false</code>."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getFlyingEnabled",
        "scope": "static"
    },
    {
        "description": "Sets your preference for flying in desktop display mode. Note that your ability to fly also depends on whether the domain \ryou're in allows you to fly.",
        "kind": "function",
        "name": "setFlyingDesktopPref",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Set <code>true</code> if you want to enable flying in desktop display mode, otherwise set \r    <code>false</code>.",
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setFlyingDesktopPref",
        "scope": "static"
    },
    {
        "description": "Gets your preference for flying in desktop display mode. Note that your ability to fly also depends on whether the domain\ryou're in allows you to fly.",
        "kind": "function",
        "name": "getFlyingDesktopPref",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if your preference is to enable flying in desktop display mode, otherwise \r    <code>false</code>."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getFlyingDesktopPref",
        "scope": "static"
    },
    {
        "description": "Sets your preference for flying in HMD display mode. Note that your ability to fly also depends on whether the domain\ryou're in allows you to fly.",
        "kind": "function",
        "name": "setFlyingHMDPref",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Set <code>true</code> if you want to enable flying in HMD display mode, otherwise set\r    <code>false</code>.",
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setFlyingHMDPref",
        "scope": "static"
    },
    {
        "description": "Gets your preference for flying in HMD display mode. Note that your ability to fly also depends on whether the domain\ryou're in allows you to fly.",
        "kind": "function",
        "name": "getFlyingHMDPref",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if your preference is to enable flying in HMD display mode, otherwise\r    <code>false</code>."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getFlyingHMDPref",
        "scope": "static"
    },
    {
        "description": "Set your preference for hand-relative movement.",
        "kind": "function",
        "name": "setHandRelativeMovement",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Set <code>true</code> if you want to enable hand-relative movement, otherwise set to <code>false</code>.",
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setHandRelativeMovement",
        "scope": "static"
    },
    {
        "description": "Get your preference for hand-relative movement.",
        "kind": "function",
        "name": "getHandRelativeMovement",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<code>true</code> if your preference is for user locomotion to be relative to the direction your\rcontroller is pointing, otherwise <code>false</code>."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getHandRelativeMovement",
        "scope": "static"
    },
    {
        "description": "Set the first 'shifting point' for acceleration step function.",
        "kind": "function",
        "name": "setDriveGear1",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Set the first shift point for analog movement acceleration step function, between [0.0, 1.0]. Must be less than or equal to Gear 2.",
                "name": "shiftPoint"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setDriveGear1",
        "scope": "static"
    },
    {
        "description": "Get the first 'shifting point' for acceleration step function.",
        "kind": "function",
        "name": "getDriveGear1",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Value between [0.0, 1.0]."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getDriveGear1",
        "scope": "static"
    },
    {
        "description": "Set the second 'shifting point' for acceleration step function.",
        "kind": "function",
        "name": "setDriveGear2",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Defines the second shift point for analog movement acceleration step function, between [0, 1]. Must be greater than or equal to Gear 1 and less than or equal to Gear 2.",
                "name": "shiftPoint"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setDriveGear2",
        "scope": "static"
    },
    {
        "description": "Get the second 'shifting point' for acceleration step function.",
        "kind": "function",
        "name": "getDriveGear2",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Value between [0.0, 1.0]."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getDriveGear2",
        "scope": "static"
    },
    {
        "description": "Set the third 'shifting point' for acceleration step function.",
        "kind": "function",
        "name": "setDriveGear3",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Defines the third shift point for analog movement acceleration step function, between [0, 1]. Must be greater than or equal to Gear 2 and less than or equal to Gear 4.",
                "name": "shiftPoint"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setDriveGear3",
        "scope": "static"
    },
    {
        "description": "Get the third 'shifting point' for acceleration step function.",
        "kind": "function",
        "name": "getDriveGear3",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Value between [0.0, 1.0]."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getDriveGear3",
        "scope": "static"
    },
    {
        "description": "Set the fourth 'shifting point' for acceleration step function.",
        "kind": "function",
        "name": "setDriveGear4",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Defines the fourth shift point for analog movement acceleration step function, between [0, 1]. Must be greater than Gear 3 and less than Gear 5.",
                "name": "shiftPoint"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setDriveGear4",
        "scope": "static"
    },
    {
        "description": "Get the fourth 'shifting point' for acceleration step function.",
        "kind": "function",
        "name": "getDriveGear4",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Value between [0.0, 1.0]."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getDriveGear4",
        "scope": "static"
    },
    {
        "description": "Set the fifth 'shifting point' for acceleration step function.",
        "kind": "function",
        "name": "setDriveGear5",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Defines the fifth shift point for analog movement acceleration step function, between [0, 1]. Must be greater than or equal to Gear 4.",
                "name": "shiftPoint"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setDriveGear5",
        "scope": "static"
    },
    {
        "description": "Get the fifth 'shifting point' for acceleration step function.",
        "kind": "function",
        "name": "getDriveGear5",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Value between [0.0, 1.0]."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getDriveGear5",
        "scope": "static"
    },
    {
        "description": "Gets the target scale of the avatar. The target scale is the desired scale of the avatar without any restrictions on\rpermissible scale values imposed by the domain.",
        "kind": "function",
        "name": "getAvatarScale",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The target scale for the avatar, range <code>0.005</code> &ndash; <code>1000.0</code>."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getAvatarScale",
        "scope": "static"
    },
    {
        "description": "Sets the target scale of the avatar. The target scale is the desired scale of the avatar without any restrictions on \rpermissible scale values imposed by the domain.",
        "kind": "function",
        "name": "setAvatarScale",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The target scale for the avatar, range <code>0.005</code> &ndash; <code>1000.0</code>.",
                "name": "scale"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setAvatarScale",
        "scope": "static"
    },
    {
        "description": "Sets whether the avatar should collide with entities.\r<p><strong>Note:</strong> A <code>false</code> value won't disable collisions if the avatar is in a zone that disallows \rcollisionless avatars. However, the <code>false</code> value will be set so that collisions are disabled as soon as the \ravatar moves to a position where collisionless avatars are allowed.",
        "kind": "function",
        "name": "setCollisionsEnabled",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to enable the avatar to collide with entities, <code>false</code> to \r    disable.",
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setCollisionsEnabled",
        "scope": "static"
    },
    {
        "description": "Gets whether the avatar will currently collide with entities.\r<p><strong>Note:</strong> The avatar will always collide with entities if in a zone that disallows collisionless avatars.",
        "kind": "function",
        "name": "getCollisionsEnabled",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the avatar will currently collide with entities, <code>false</code> if it won't."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getCollisionsEnabled",
        "scope": "static"
    },
    {
        "description": "Sets whether the avatar should collide with other avatars.",
        "kind": "function",
        "name": "setOtherAvatarsCollisionsEnabled",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to enable the avatar to collide with other avatars, <code>false</code> \r    to disable.",
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setOtherAvatarsCollisionsEnabled",
        "scope": "static"
    },
    {
        "description": "Gets whether the avatar will collide with other avatars.",
        "kind": "function",
        "name": "getOtherAvatarsCollisionsEnabled",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the avatar will collide with other avatars, <code>false</code> if it won't."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getOtherAvatarsCollisionsEnabled",
        "scope": "static"
    },
    {
        "description": "Gets the avatar's collision capsule: a cylinder with hemispherical ends that approximates the extents or the avatar.\r<p><strong>Warning:</strong> The values returned are in world coordinates but aren't necessarily up to date with the \ravatar's current position.</p>",
        "kind": "function",
        "name": "getCollisionCapsule",
        "returns": [
            {
                "type": {
                    "names": [
                        "MyAvatar.CollisionCapsule"
                    ]
                },
                "description": "The avatar's collision capsule."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getCollisionCapsule",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setCharacterControllerEnabled",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to enable the avatar to collide with entities, <code>false</code> to\r    disable.",
                "name": "enabled"
            }
        ],
        "deprecated": "This function is deprecated and will be removed. Use {@link MyAvatar.setCollisionsEnabled} instead.",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setCharacterControllerEnabled",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getCharacterControllerEnabled",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the avatar will currently collide with entities, <code>false</code> if it won't."
            }
        ],
        "deprecated": "This function is deprecated and will be removed. Use {@link MyAvatar.getCollisionsEnabled} instead.",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getCharacterControllerEnabled",
        "scope": "static"
    },
    {
        "description": "Gets the rotation of a joint relative to the avatar.",
        "tags": [
            {
                "originalTitle": "comment",
                "title": "comment",
                "text": "Different behavior to the Avatar version of this method.",
                "value": "Different behavior to the Avatar version of this method."
            }
        ],
        "kind": "function",
        "name": "getAbsoluteJointRotationInObjectFrame",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint.",
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation of the joint relative to the avatar."
            }
        ],
        "examples": [
            "<caption>Report the rotation of your avatar's head joint relative to your avatar.</caption>\rvar headIndex = MyAvatar.getJointIndex(\"Head\");\rvar headRotation = MyAvatar.getAbsoluteJointRotationInObjectFrame(headIndex);\rprint(\"Head rotation: \" + JSON.stringify(Quat.safeEulerAngles(headRotation))); // Degrees"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getAbsoluteJointRotationInObjectFrame",
        "scope": "static"
    },
    {
        "description": "Gets the translation of a joint relative to the avatar.",
        "tags": [
            {
                "originalTitle": "comment",
                "title": "comment",
                "text": "Different behavior to the Avatar version of this method.",
                "value": "Different behavior to the Avatar version of this method."
            }
        ],
        "kind": "function",
        "name": "getAbsoluteJointTranslationInObjectFrame",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint.",
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The translation of the joint relative to the avatar."
            }
        ],
        "examples": [
            "<caption>Report the translation of your avatar's head joint relative to your avatar.</caption>\rvar headIndex = MyAvatar.getJointIndex(\"Head\");\rvar headTranslation = MyAvatar.getAbsoluteJointTranslationInObjectFrame(headIndex);\rprint(\"Head translation: \" + JSON.stringify(headTranslation));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getAbsoluteJointTranslationInObjectFrame",
        "scope": "static"
    },
    {
        "description": "Tests whether a vector is pointing in the general direction of the avatar's \"up\" direction (i.e., dot product of vectors \r    is <code>&gt; 0</code>).",
        "kind": "function",
        "name": "isUp",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The vector to test.",
                "name": "direction"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the direction vector is pointing generally in the direction of the avatar's \"up\" \r    direction."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.isUp",
        "scope": "static"
    },
    {
        "description": "Tests whether a vector is pointing in the general direction of the avatar's \"down\" direction (i.e., dot product of \r    vectors is  <code>&lt; 0</code>).",
        "kind": "function",
        "name": "isDown",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The vector to test.",
                "name": "direction"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the direction vector is pointing generally in the direction of the avatar's \r    \"down\" direction."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.isDown",
        "scope": "static"
    },
    {
        "description": "Turn the avatar's head until it faces the target point within the 90/-90 degree range.\rOnce this method is called, API calls will have full control of the head for a limited time.\rIf this method is not called for two seconds, the engine will regain control of the head.",
        "kind": "function",
        "name": "setHeadLookAt",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The target point in world coordinates.",
                "name": "lookAtTarget"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setHeadLookAt",
        "scope": "static"
    },
    {
        "description": "Returns the current head look at target point in world coordinates.",
        "kind": "function",
        "name": "getHeadLookAt",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The head's look at target in world coordinates."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getHeadLookAt",
        "scope": "static"
    },
    {
        "description": "When this function is called the engine regains control of the head immediately.",
        "kind": "function",
        "name": "releaseHeadLookAtControl",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.releaseHeadLookAtControl",
        "scope": "static"
    },
    {
        "description": "Force the avatar's eyes to look to the specified location.\rOnce this method is called, API calls will have full control of the eyes for a limited time.\rIf this method is not called for two seconds, the engine will regain control of the eyes.",
        "kind": "function",
        "name": "setEyesLookAt",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The target point in world coordinates.",
                "name": "lookAtTarget"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setEyesLookAt",
        "scope": "static"
    },
    {
        "description": "Returns the current eyes look at target point in world coordinates.",
        "kind": "function",
        "name": "getEyesLookAt",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The eyes's look at target in world coordinates."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getEyesLookAt",
        "scope": "static"
    },
    {
        "description": "When this function is called the engine regains control of the eyes immediately.",
        "kind": "function",
        "name": "releaseEyesLookAtControl",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.releaseEyesLookAtControl",
        "scope": "static"
    },
    {
        "description": "Aims the pointing directional blending towards the provided target point.\rThe \"point\" reaction should be triggered before using this method. \r<code>MyAvatar.beginReaction(\"point\")</code>\rReturns <code>true</code> if the target point lays in front of the avatar.",
        "kind": "function",
        "name": "setPointAt",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The target point in world coordinates.",
                "name": "pointAtTarget"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setPointAt",
        "scope": "static"
    },
    {
        "description": "Creates a new grab that grabs an entity.",
        "kind": "function",
        "name": "grab",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to grab.",
                "name": "targetID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The avatar joint to use to grab the entity.",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The target's local position relative to the joint.",
                "name": "offset"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The target's local rotation relative to the joint.",
                "name": "rotationalOffset"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the new grab."
            }
        ],
        "examples": [
            "<caption>Create and grab an entity for a short while.</caption>\rvar entityPosition = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 }));\rvar entityRotation = MyAvatar.orientation;\rvar entityID = Entities.addEntity({\r    type: \"Box\",\r    position: entityPosition,\r    rotation: entityRotation,\r    dimensions: { x: 0.5, y: 0.5, z: 0.5 }\r});\rvar rightHandJoint = MyAvatar.getJointIndex(\"RightHand\");\rvar relativePosition = Entities.worldToLocalPosition(entityPosition, MyAvatar.SELF_ID, rightHandJoint);\rvar relativeRotation = Entities.worldToLocalRotation(entityRotation, MyAvatar.SELF_ID, rightHandJoint);\rvar grabID = MyAvatar.grab(entityID, rightHandJoint, relativePosition, relativeRotation);\r\rScript.setTimeout(function () {\r    MyAvatar.releaseGrab(grabID);\r    Entities.deleteEntity(entityID);\r}, 10000);"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.grab",
        "scope": "static"
    },
    {
        "description": "Releases (deletes) a grab to stop grabbing an entity.",
        "kind": "function",
        "name": "releaseGrab",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the grab to release.",
                "name": "grabID"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.releaseGrab",
        "scope": "static"
    },
    {
        "description": "Gets details of all avatar entities.",
        "kind": "function",
        "name": "getAvatarEntityData",
        "returns": [
            {
                "type": {
                    "names": [
                        "AvatarEntityMap"
                    ]
                },
                "description": "Details of the avatar entities."
            }
        ],
        "examples": [
            "<caption>Report the current avatar entities.</caption>\rvar avatarEntityData = MyAvatar.getAvatarEntityData();\rprint(\"Avatar entities: \" + JSON.stringify(avatarEntityData));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getAvatarEntityData",
        "scope": "static"
    },
    {
        "description": "Sets all avatar entities from an object.",
        "kind": "function",
        "name": "setAvatarEntityData",
        "params": [
            {
                "type": {
                    "names": [
                        "AvatarEntityMap"
                    ]
                },
                "description": "Details of the avatar entities.",
                "name": "avatarEntityData"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setAvatarEntityData",
        "scope": "static"
    },
    {
        "description": "Enables and disables flow simulation of physics on the avatar's hair, clothes, and body parts. See \r{@link https://docs.highfidelity.com/create/avatars/add-flow.html|Add Flow to Your Avatar} for more \rinformation.",
        "kind": "function",
        "name": "useFlow",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if flow simulation is enabled on the joint, <code>false</code> if it isn't.",
                "name": "isActive"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to enable collisions in the flow simulation, <code>false</code> to \r    disable.",
                "name": "isCollidable"
            },
            {
                "type": {
                    "names": [
                        "Object.<JointName, MyAvatar.FlowPhysicsOptions>"
                    ]
                },
                "optional": true,
                "description": "Physics configurations for particular entity \r    and avatar joints.",
                "name": "physicsConfig>"
            },
            {
                "type": {
                    "names": [
                        "Object.<JointName, MyAvatar.FlowCollisionsOptions>"
                    ]
                },
                "optional": true,
                "description": "Collision configurations for particular \r    entity and avatar joints.",
                "name": "collisionsConfig"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.useFlow",
        "scope": "static"
    },
    {
        "description": "Gets the current flow configuration.",
        "kind": "function",
        "name": "getFlowData",
        "returns": [
            {
                "type": {
                    "names": [
                        "MyAvatar.FlowData"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getFlowData",
        "scope": "static"
    },
    {
        "description": "Gets the indexes of currently colliding flow joints.",
        "kind": "function",
        "name": "getCollidingFlowJoints",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<number>"
                    ]
                },
                "description": "The indexes of currently colliding flow joints."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getCollidingFlowJoints",
        "scope": "static"
    },
    {
        "description": "Starts a sitting action for the avatar",
        "kind": "function",
        "name": "beginSit",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The point in space where the avatar will sit.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "Initial absolute orientation of the avatar once is seated.",
                "name": "rotation"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.beginSit",
        "scope": "static"
    },
    {
        "description": "Ends a sitting action for the avatar",
        "kind": "function",
        "name": "endSit",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the avatar when standing up.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The absolute rotation of the avatar once the sitting action ends.",
                "name": "rotation"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.endSit",
        "scope": "static"
    },
    {
        "description": "Gets whether the avatar is in a seated pose. The seated pose is set by calling the \rMyAvatar::beginSit method.",
        "kind": "function",
        "name": "isSeated",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the avatar is in a seated pose."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.isSeated",
        "scope": "static"
    },
    {
        "description": "Increases the avatar's scale by five percent, up to a minimum scale of <code>1000</code>.",
        "kind": "function",
        "name": "increaseSize",
        "examples": [
            "<caption>Reset your avatar's size to default then grow it 5 times.</caption>\rMyAvatar.resetSize();\r\rfor (var i = 0; i < 5; i++){\r    print(\"Growing by 5 percent\");\r    MyAvatar.increaseSize();\r}"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.increaseSize",
        "scope": "static"
    },
    {
        "description": "Decreases the avatar's scale by five percent, down to a minimum scale of <code>0.25</code>.",
        "kind": "function",
        "name": "decreaseSize",
        "examples": [
            "<caption>Reset your avatar's size to default then shrink it 5 times.</caption>\rMyAvatar.resetSize();\r\rfor (var i = 0; i < 5; i++){\r    print(\"Shrinking by 5 percent\");\r    MyAvatar.decreaseSize();\r}"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.decreaseSize",
        "scope": "static"
    },
    {
        "description": "Resets the avatar's scale back to the default scale of <code>1.0</code>.",
        "kind": "function",
        "name": "resetSize",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.resetSize",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "animGraphLoaded",
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.animGraphLoaded",
        "scope": "static"
    },
    {
        "description": "Sets the amount of gravity applied to the avatar in the y-axis direction. (Negative values are downward.)",
        "kind": "function",
        "name": "setGravity",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The amount of gravity to be applied to the avatar, in m/s<sup>2</sup>.",
                "name": "gravity"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setGravity",
        "scope": "static"
    },
    {
        "description": "Sets the amount of gravity applied to the avatar in the y-axis direction. (Negative values are downward.) The default \rvalue is <code>-5</code> m/s<sup>2</sup>.",
        "kind": "function",
        "name": "getGravity",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The amount of gravity currently applied to the avatar, in m/s<sup>2</sup>."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getGravity",
        "scope": "static"
    },
    {
        "description": "Moves the avatar to a new position and/or orientation in the domain, while taking into account Avatar leg-length.",
        "kind": "function",
        "name": "goToFeetLocation",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The new position for the avatar, in world coordinates.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Set to <code>true</code> to set the orientation of the avatar.",
                "name": "hasOrientation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "optional": true,
                "defaultvalue": "Quat.IDENTITY",
                "description": "The new orientation for the avatar.",
                "name": "orientation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Set to <code>true</code> to position the avatar a short distance away from\r     the new position and orientate the avatar to face the position.",
                "name": "shouldFaceLocation"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.goToFeetLocation",
        "scope": "static"
    },
    {
        "description": "Moves the avatar to a new position and/or orientation in the domain.",
        "kind": "function",
        "name": "goToLocation",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The new position for the avatar, in world coordinates.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Set to <code>true</code> to set the orientation of the avatar.",
                "name": "hasOrientation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "optional": true,
                "defaultvalue": "Quat.IDENTITY",
                "description": "The new orientation for the avatar.",
                "name": "orientation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Set to <code>true</code> to position the avatar a short distance away from",
                "name": "shouldFaceLocation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Set to <code>false</code> MyAvatar::safeLanding will not be called (used when teleporting).\r    the new position and orientate the avatar to face the position.",
                "name": "withSafeLanding"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.goToLocation",
        "scope": "static"
    },
    {
        "description": "Moves the avatar to a new position and (optional) orientation in the domain.",
        "kind": "function",
        "name": "goToLocation",
        "params": [
            {
                "type": {
                    "names": [
                        "MyAvatar.GoToProperties"
                    ]
                },
                "description": "The goto target.",
                "name": "target"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.goToLocation",
        "scope": "static"
    },
    {
        "description": "Moves the avatar to a new position and then enables collisions.",
        "kind": "function",
        "name": "goToLocationAndEnableCollisions",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The new position for the avatar, in world coordinates.",
                "name": "position"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.goToLocationAndEnableCollisions",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "safeLanding",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The new position for the avatar, in world coordinates.",
                "name": "position"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the avatar was moved, <code>false</code> if it wasn't."
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.safeLanding",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "restrictScaleFromDomainSettings",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Domain settings.",
                "name": "domainSettings"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.restrictScaleFromDomainSettings",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "clearScaleRestriction",
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.clearScaleRestriction",
        "scope": "static"
    },
    {
        "description": "Adds a thrust to your avatar's current thrust to be applied for a short while.",
        "kind": "function",
        "name": "addThrust",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The thrust direction and magnitude.",
                "name": "thrust"
            }
        ],
        "deprecated": "This function is deprecated and will be removed. Use {@link MyAvatar|MyAvatar.motorVelocity} and related \r    properties instead.",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.addThrust",
        "scope": "static"
    },
    {
        "description": "Gets the thrust currently being applied to your avatar.",
        "kind": "function",
        "name": "getThrust",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The thrust currently being applied to your avatar."
            }
        ],
        "deprecated": "This function is deprecated and will be removed. Use {@link MyAvatar|MyAvatar.motorVelocity} and related \r    properties instead.",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getThrust",
        "scope": "static"
    },
    {
        "description": "Sets the thrust to be applied to your avatar for a short while.",
        "kind": "function",
        "name": "setThrust",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The thrust direction and magnitude.",
                "name": "thrust"
            }
        ],
        "deprecated": "This function is deprecated and will be removed. Use {@link MyAvatar|MyAvatar.motorVelocity} and related \r    properties instead.",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setThrust",
        "scope": "static"
    },
    {
        "description": "Updates avatar motion behavior from the Developer &gt; Avatar &gt; Enable Default Motor Control and Enable Scripted \rMotor Control menu items.",
        "kind": "function",
        "name": "updateMotionBehaviorFromMenu",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.updateMotionBehaviorFromMenu",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setToggleHips",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Enabled.",
                "name": "enabled"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setToggleHips",
        "scope": "static"
    },
    {
        "description": "Displays the base of support area debug graphics if in HMD mode. If your head goes outside this area your avatar's hips \rare moved to counterbalance your avatar, and if your head moves too far then your avatar's position is moved (i.e., a \rstep happens).",
        "kind": "function",
        "name": "setEnableDebugDrawBaseOfSupport",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to show the debug graphics, <code>false</code> to hide.",
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setEnableDebugDrawBaseOfSupport",
        "scope": "static"
    },
    {
        "description": "Displays default pose debug graphics.",
        "kind": "function",
        "name": "setEnableDebugDrawDefaultPose",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to show the debug graphics, <code>false</code> to hide.",
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setEnableDebugDrawDefaultPose",
        "scope": "static"
    },
    {
        "description": "Displays animation debug graphics. By default, the animation poses used for rendering are displayed. However, \r{@link MyAvatar.setDebugDrawAnimPoseName} can be used to set a specific animation node to display.",
        "kind": "function",
        "name": "setEnableDebugDrawAnimPose",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to show the debug graphics, <code>false</code> to hide.",
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setEnableDebugDrawAnimPose",
        "scope": "static"
    },
    {
        "description": "Sets the animation node to display when animation debug graphics are enabled with \r{@link MyAvatar.setEnableDebugDrawAnimPose}.",
        "kind": "function",
        "name": "setDebugDrawAnimPoseName",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the animation node to display debug graphics for. Use <code>\"\"</code> to reset to \r    default.",
                "name": "poseName"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setDebugDrawAnimPoseName",
        "scope": "static"
    },
    {
        "description": "Displays position debug graphics.",
        "kind": "function",
        "name": "setEnableDebugDrawPosition",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to show the debug graphics, <code>false</code> to hide.",
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setEnableDebugDrawPosition",
        "scope": "static"
    },
    {
        "description": "Displays controller hand target debug graphics.",
        "kind": "function",
        "name": "setEnableDebugDrawHandControllers",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to show the debug graphics, <code>false</code> to hide.",
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setEnableDebugDrawHandControllers",
        "scope": "static"
    },
    {
        "description": "Displays sensor-to-world matrix debug graphics.",
        "kind": "function",
        "name": "setEnableDebugDrawSensorToWorldMatrix",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to show the debug graphics, <code>false</code> to hide.",
                "name": "enable"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setEnableDebugDrawSensorToWorldMatrix",
        "scope": "static"
    },
    {
        "description": "Displays inverse kinematics targets debug graphics.",
        "kind": "function",
        "name": "setEnableDebugDrawIKTargets",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to show the debug graphics, <code>false</code> to hide.",
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setEnableDebugDrawIKTargets",
        "scope": "static"
    },
    {
        "description": "Displays inverse kinematics constraints debug graphics.",
        "kind": "function",
        "name": "setEnableDebugDrawIKConstraints",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to show the debug graphics, <code>false</code> to hide.",
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setEnableDebugDrawIKConstraints",
        "scope": "static"
    },
    {
        "description": "Displays inverse kinematics chains debug graphics.",
        "kind": "function",
        "name": "setEnableDebugDrawIKChains",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to show the debug graphics, <code>false</code> to hide.",
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setEnableDebugDrawIKChains",
        "scope": "static"
    },
    {
        "description": "Displays detailed collision debug graphics.",
        "kind": "function",
        "name": "setEnableDebugDrawDetailedCollision",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to show the debug graphics, <code>false</code> to hide.",
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setEnableDebugDrawDetailedCollision",
        "scope": "static"
    },
    {
        "description": "Gets whether your avatar mesh is visible.",
        "kind": "function",
        "name": "getEnableMeshVisible",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if your avatar's mesh is visible, otherwise <code>false</code>."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getEnableMeshVisible",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "storeAvatarEntityDataPayload",
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.storeAvatarEntityDataPayload",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "sanitizeAvatarEntityProperties",
        "params": [
            {
                "type": {
                    "names": [
                        "EntityItemProperties"
                    ]
                },
                "description": "Properties.",
                "name": "properties"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.sanitizeAvatarEntityProperties",
        "scope": "static"
    },
    {
        "description": "Sets whether your avatar mesh is visible to you.",
        "kind": "function",
        "name": "setEnableMeshVisible",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to show your avatar mesh, <code>false</code> to hide.",
                "name": "enabled"
            }
        ],
        "examples": [
            "<caption>Make your avatar invisible for 10s.</caption>\rMyAvatar.setEnableMeshVisible(false);\rScript.setTimeout(function () {\r    MyAvatar.setEnableMeshVisible(true);\r}, 10000);"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setEnableMeshVisible",
        "scope": "static"
    },
    {
        "description": "Sets whether inverse kinematics (IK) is enabled for your avatar.",
        "kind": "function",
        "name": "setEnableInverseKinematics",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to enable IK, <code>false</code> to disable.",
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setEnableInverseKinematics",
        "scope": "static"
    },
    {
        "description": "Gets the URL of the override animation graph.\r<p>See {@link https://docs.highfidelity.com/create/avatars/custom-animations.html|Custom Avatar Animations} for\rinformation on animation graphs.</p>",
        "kind": "function",
        "name": "getAnimGraphOverrideUrl",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the override animation graph JSON file. <code>\"\"</code> if there is no override animation \r    graph."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getAnimGraphOverrideUrl",
        "scope": "static"
    },
    {
        "description": "Sets the animation graph to use in preference to the default animation graph.\r<p>See {@link https://docs.highfidelity.com/create/avatars/custom-animations.html|Custom Avatar Animations} for\rinformation on animation graphs.</p>",
        "kind": "function",
        "name": "setAnimGraphOverrideUrl",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the animation graph JSON file to use. Set to <code>\"\"</code> to clear an override.",
                "name": "url"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setAnimGraphOverrideUrl",
        "scope": "static"
    },
    {
        "description": "Gets the URL of animation graph (i.e., the avatar animation JSON) that's currently being used for avatar animations.\r<p>See {@link https://docs.highfidelity.com/create/avatars/custom-animations.html|Custom Avatar Animations} for \rinformation on animation graphs.</p>",
        "kind": "function",
        "name": "getAnimGraphUrl",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the current animation graph JSON file."
            }
        ],
        "examples": [
            "<caption>Report the current avatar animation JSON being used.</caption>\rprint(MyAvatar.getAnimGraphUrl());"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getAnimGraphUrl",
        "scope": "static"
    },
    {
        "description": "Sets the current animation graph  (i.e., the avatar animation JSON) to use for avatar animations and makes it the default.\r<p>See {@link https://docs.highfidelity.com/create/avatars/custom-animations.html|Custom Avatar Animations} for\rinformation on animation graphs.</p>",
        "kind": "function",
        "name": "setAnimGraphUrl",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the animation graph JSON file to use.",
                "name": "url"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setAnimGraphUrl",
        "scope": "static"
    },
    {
        "description": "Gets your listening position for spatialized audio. The position depends on the value of the\r{@link Myavatar|audioListenerMode} property.",
        "kind": "function",
        "name": "getPositionForAudio",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "Your listening position."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getPositionForAudio",
        "scope": "static"
    },
    {
        "description": "Gets the orientation of your listening position for spatialized audio. The orientation depends on the value of the \r{@link Myavatar|audioListenerMode} property.",
        "kind": "function",
        "name": "getOrientationForAudio",
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of your listening position."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getOrientationForAudio",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setModelScale",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The scale.",
                "name": "scale"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setModelScale",
        "scope": "static"
    },
    {
        "description": "Triggered when the {@link MyAvatar|audioListenerMode} property value changes.",
        "kind": "signal",
        "name": "audioListenerModeChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.audioListenerModeChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the walk speed set for the \"AnalogPlus\" control scheme changes.",
        "kind": "signal",
        "name": "analogPlusWalkSpeedChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The new walk speed set for the \"AnalogPlus\" control scheme.",
                "name": "speed"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.analogPlusWalkSpeedChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the sprint (run) speed set for the \"AnalogPlus\" control scheme changes.",
        "kind": "signal",
        "name": "analogPlusSprintSpeedChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The new sprint speed set for the \"AnalogPlus\" control scheme.",
                "name": "speed"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.analogPlusSprintSpeedChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the sprint (run) speed set for the current control scheme (see \r{@link MyAvatar.getControlScheme|getControlScheme}) changes.",
        "kind": "signal",
        "name": "sprintSpeedChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The new sprint speed set for the current control scheme.",
                "name": "speed"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.sprintSpeedChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the walk backward speed set for the current control scheme (see \r{@link MyAvatar.getControlScheme|getControlScheme}) changes.",
        "kind": "signal",
        "name": "walkBackwardSpeedChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The new walk backward speed set for the current control scheme.",
                "name": "speed"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.walkBackwardSpeedChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "transformChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "deprecated": "This signal is deprecated and will be removed.",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.transformChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the {@link MyAvatar|collisionSoundURL} property value changes.",
        "kind": "signal",
        "name": "newCollisionSoundURL",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the new collision sound.",
                "name": "url"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.newCollisionSoundURL",
        "scope": "static"
    },
    {
        "description": "Triggered when the avatar collides with an entity.",
        "kind": "signal",
        "name": "collisionWithEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Collision"
                    ]
                },
                "description": "Details of the collision.",
                "name": "collision"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report each time your avatar collides with an entity.</caption>\rMyAvatar.collisionWithEntity.connect(function (collision) {\r    print(\"Your avatar collided with an entity.\");\r});"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.collisionWithEntity",
        "scope": "static"
    },
    {
        "description": "Triggered when collisions with the environment are enabled or disabled.",
        "kind": "signal",
        "name": "collisionsEnabledChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if collisions with the environment are enabled, <code>false</code> if \r    they're not.",
                "name": "enabled"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.collisionsEnabledChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when collisions with other avatars are enabled or disabled.",
        "kind": "signal",
        "name": "otherAvatarsCollisionsEnabledChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if collisions with other avatars are enabled, <code>false</code> if they're \r    not.",
                "name": "enabled"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.otherAvatarsCollisionsEnabledChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the avatar's animation graph being used changes.",
        "kind": "signal",
        "name": "animGraphUrlChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the new animation graph JSON file.",
                "name": "url"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when the current avatar animation JSON being used changes.</caption>\rMyAvatar.animGraphUrlChanged.connect(function (url) {\r    print(\"Avatar animation JSON changed to: \" + url);\r});"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.animGraphUrlChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "energyChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Avatar energy.",
                "name": "energy"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "deprecated": "This signal is deprecated and will be removed.",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.energyChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the avatar has been moved to a new position by one of the MyAvatar \"goTo\" functions.",
        "kind": "signal",
        "name": "positionGoneTo",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.positionGoneTo",
        "scope": "static"
    },
    {
        "description": "Triggered when the avatar's model finishes loading.",
        "kind": "signal",
        "name": "onLoadComplete",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.onLoadComplete",
        "scope": "static"
    },
    {
        "description": "Triggered when the avatar's model has failed to load.",
        "kind": "signal",
        "name": "onLoadFailed",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.onLoadFailed",
        "scope": "static"
    },
    {
        "description": "Triggered when your avatar changes from being active to being away.",
        "kind": "signal",
        "name": "wentAway",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when your avatar goes away.</caption>\rMyAvatar.wentAway.connect(function () {\r    print(\"My avatar went away\");\r});\r// In desktop mode, pres the Esc key to go away."
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.wentAway",
        "scope": "static"
    },
    {
        "description": "Triggered when your avatar changes from being away to being active.",
        "kind": "signal",
        "name": "wentActive",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.wentActive",
        "scope": "static"
    },
    {
        "description": "Triggered when the avatar's model (i.e., {@link MyAvatar|skeletonModelURL} property value) is changed.\r<p>Synonym of {@link MyAvatar.skeletonModelURLChanged|skeletonModelURLChanged}.</p>",
        "kind": "signal",
        "name": "skeletonChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.skeletonChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the avatar's dominant hand changes.",
        "kind": "signal",
        "name": "dominantHandChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The dominant hand: <code>\"left\"</code> for the left hand, <code>\"right\"</code> for the right hand.",
                "name": "hand"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.dominantHandChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the HMD alignment for your avatar changes.",
        "kind": "signal",
        "name": "hmdAvatarAlignmentTypeChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<code>\"head\"</code> if aligning your head and your avatar's head, <code>\"eyes\"</code> if aligning \r    your eyes and your avatar's eyes.",
                "name": "type"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.hmdAvatarAlignmentTypeChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the avatar's <code>sensorToWorldScale</code> property value changes.",
        "kind": "signal",
        "name": "sensorToWorldScaleChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The scale that transforms dimensions in the user's real world to the avatar's size in the virtual \r    world.",
                "name": "scale"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.sensorToWorldScaleChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the a model is attached to or detached from one of the avatar's joints using one of \r{@link MyAvatar.attach|attach}, {@link MyAvatar.detachOne|detachOne}, {@link MyAvatar.detachAll|detachAll}, or \r{@link MyAvatar.setAttachmentData|setAttachmentData}.",
        "kind": "signal",
        "name": "attachmentsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "deprecated": "This signal is deprecated and will be removed. Use avatar entities instead.",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.attachmentsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the avatar's size changes. This can be due to the user changing the size of their avatar or the domain \rlimiting the size of their avatar.",
        "kind": "signal",
        "name": "scaleChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.scaleChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the hand touch effect is enabled or disabled for the avatar.\r<p>The hand touch effect makes the avatar's fingers adapt to the shape of any object grabbed, creating the effect that\rit is really touching that object.</p>",
        "kind": "signal",
        "name": "shouldDisableHandTouchChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the hand touch effect is disabled for the avatar, \r    <code>false</code> if it isn't disabled.",
                "name": "disabled"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.shouldDisableHandTouchChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the hand touch is enabled or disabled on a specific entity.\r<p>The hand touch effect makes the avatar's fingers adapt to the shape of any object grabbed, creating the effect that\rit is really touching that object.</p>",
        "kind": "signal",
        "name": "disableHandTouchForIDChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The entity that the hand touch effect has been enabled or disabled for.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the hand touch effect is disabled for the entity,\r    <code>false</code> if it isn't disabled.",
                "name": "disabled"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.disableHandTouchForIDChanged",
        "scope": "static"
    },
    {
        "description": "<p>A <code>WalletStatus</code> may have one of the following values:</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Meaning</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>0</code></td><td>Not logged in</td><td>The user is not logged in.</td></tr>\r    <tr><td><code>1</code></td><td>Not set up</td><td>The user's wallet has not been set up.</td></tr>\r    <tr><td><code>2</code></td><td>Pre-existing</td><td>There is a wallet present on the server but not one \r      locally.</td></tr>\r    <tr><td><code>3</code></td><td>Conflicting</td><td>There is a wallet present on the server plus one present locally, \r      and they don't match.</td></tr>\r    <tr><td><code>4</code></td><td>Not authenticated</td><td>There is a wallet present locally but the user hasn't \r      logged into it.</td></tr>\r    <tr><td><code>5</code></td><td>Ready</td><td>The wallet is ready for use.</td></tr>\r  </tbody>\r</table>\r<p>Wallets used to be stored locally but now they're only stored on the server. A wallet is present in both places if \ryour computer previously stored its information locally.</p>",
        "kind": "typedef",
        "name": "WalletStatus",
        "type": {
            "names": [
                "number"
            ]
        },
        "memberof": "WalletScriptingInterface",
        "longname": "WalletScriptingInterface.WalletStatus",
        "scope": "static"
    },
    {
        "description": "An intersection result for a collision pick.",
        "kind": "typedef",
        "name": "CollisionPickResult",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if there is at least one intersection, <code>false</code> if there isn't.",
                "name": "intersects"
            },
            {
                "type": {
                    "names": [
                        "Array.<IntersectingObject>"
                    ]
                },
                "description": "All objects which intersect with the <code>collisionRegion</code>.",
                "name": "intersectingObjects"
            },
            {
                "type": {
                    "names": [
                        "CollisionRegion"
                    ]
                },
                "description": "The collision region that was used. Valid even if there was no intersection.",
                "name": "collisionRegion"
            }
        ],
        "longname": "CollisionPickResult",
        "scope": "global"
    },
    {
        "description": "Information about a {@link CollisionPick}'s intersection with an object.",
        "kind": "typedef",
        "name": "IntersectingObject",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the object.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "IntersectionType"
                    ]
                },
                "description": "The type of the object, either <code>1</code> for INTERSECTED_ENTITY or <code>3</code> \r    for INTERSECTED_AVATAR.",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Array.<CollisionContact>"
                    ]
                },
                "description": "Information on the penetration between the pick and the object.",
                "name": "collisionContacts"
            }
        ],
        "longname": "IntersectingObject",
        "scope": "global"
    },
    {
        "description": "A pair of points that represents part of an overlap between a {@link CollisionPick} and an object in the physics engine. \rPoints which are further apart represent deeper overlap.",
        "kind": "typedef",
        "name": "CollisionContact",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "A point representing a penetration of the object's surface into the volume of the pick, in \r    world coordinates.",
                "name": "pointOnPick"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "A point representing a penetration of the pick's surface into the volume of the object, in \r    world coordinates.",
                "name": "pointOnObject"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The normal vector pointing away from the pick, representing the direction of collision.",
                "name": "normalOnPick"
            }
        ],
        "longname": "CollisionContact",
        "scope": "global"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>LaserPointers</code> API is a subset of the {@link Pointers} API. It lets you create, manage, and visually \rrepresent objects for repeatedly calculating ray intersections with avatars, entities, and overlays. Ray pointers can also \rbe configured to generate events on entities and overlays intersected.",
        "kind": "namespace",
        "name": "LaserPointers",
        "deprecated": "This API is deprecated and will be removed. Use {@link Pointers} instead.",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "longname": "LaserPointers",
        "scope": "global"
    },
    {
        "description": "Creates a new ray pointer. The pointer can have a wide range of behaviors depending on the properties specified. For\rexample, it may be a static ray pointer, a mouse ray pointer, or joint ray pointer.\r<p><strong>Warning:</strong> Pointers created using this method currently always intersect at least visible and\rcollidable things but this may not always be the case.</p>",
        "kind": "function",
        "name": "createLaserPointer",
        "params": [
            {
                "type": {
                    "names": [
                        "Pointers.RayPointerProperties"
                    ]
                },
                "description": "The properties of the pointer, including the properties of the \r    underlying pick that the pointer uses to do its picking.",
                "name": "properties"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pointer if successfully created, otherwise <code>0</code>."
            }
        ],
        "memberof": "LaserPointers",
        "longname": "LaserPointers.createLaserPointer",
        "scope": "static"
    },
    {
        "description": "Edits a render state of a pointer, to change its visual appearance for the state when the pointer is intersecting \rsomething.\r<p><strong>Note:</strong> You can only edit the properties of the existing parts of the pointer; you cannot change the\rtype of any part.</p>\r<p><strong>Note:</strong> You cannot use this method to change the appearance of a default render state.</p>",
        "kind": "function",
        "name": "editRenderState",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pointer.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the render state to edit.",
                "name": "renderState"
            },
            {
                "type": {
                    "names": [
                        "Pointers.RayPointerRenderState"
                    ]
                },
                "description": "The new properties for the render state. Only the overlay \r    properties to change need be specified.",
                "name": "properties"
            }
        ],
        "memberof": "LaserPointers",
        "longname": "LaserPointers.editRenderState",
        "scope": "static"
    },
    {
        "description": "Sets the render state of a pointer, to change its visual appearance and possibly disable or enable it.",
        "kind": "function",
        "name": "setRenderState",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<p>The name of the render state to set the pointer to. This may be:</p>\r    <ul>\r      <li>The name of one of the render states set in the pointer's properties.</li>\r      <li><code>\"\"</code>, to hide the pointer and disable emitting of events.</li>\r    </ul>",
                "name": "renderState"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pointer.",
                "name": "id"
            }
        ],
        "memberof": "LaserPointers",
        "longname": "LaserPointers.setRenderState",
        "scope": "static"
    },
    {
        "description": "Gets the most recent intersection of a pointer. A pointer continues to be updated ready to return a result, as long as\rit is enabled, regardless of the render state.",
        "kind": "function",
        "name": "getPrevRayPickResult",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pointer.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RayPickResult"
                    ]
                },
                "description": "The most recent intersection of the pointer."
            }
        ],
        "memberof": "LaserPointers",
        "longname": "LaserPointers.getPrevRayPickResult",
        "scope": "static"
    },
    {
        "description": "Sets the length of a pointer.",
        "kind": "function",
        "name": "setLaserLength",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pointer.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The desired length of the pointer.",
                "name": "laserLength"
            }
        ],
        "memberof": "LaserPointers",
        "longname": "LaserPointers.setLaserLength",
        "scope": "static"
    },
    {
        "description": "Sets a list of entity and avatar IDs that a pointer should ignore during intersection.",
        "kind": "function",
        "name": "setIgnoreItems",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pointer.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "A list of IDs to ignore.",
                "name": "ignoreItems"
            }
        ],
        "memberof": "LaserPointers",
        "longname": "LaserPointers.setIgnoreItems",
        "scope": "static"
    },
    {
        "description": "Sets a list of entity and avatar IDs that a pointer should include during intersection, instead of intersecting with\reverything.",
        "kind": "function",
        "name": "setIncludeItems",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pointer.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "A list of IDs to include.",
                "name": "includeItems"
            }
        ],
        "memberof": "LaserPointers",
        "longname": "LaserPointers.setIncludeItems",
        "scope": "static"
    },
    {
        "description": "Locks a pointer onto a specific entity or avatar.",
        "kind": "function",
        "name": "setLockEndUUID",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pointer.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity or avatar to lock the pointer on to.",
                "name": "targetID"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the target is an avatar, <code>false</code> if it is an entity.",
                "name": "isAvatar"
            },
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "optional": true,
                "description": "The offset of the target point from the center of the target item. If not specified, the\r    pointer locks on to the center of the target item.",
                "name": "offset"
            }
        ],
        "memberof": "LaserPointers",
        "longname": "LaserPointers.setLockEndUUID",
        "scope": "static"
    },
    {
        "description": "Checks if a pointer is associated with the left hand: a pointer with <code>joint</code> property set to\r<code>\"_CONTROLLER_LEFTHAND\"</code> or <code>\"_CAMERA_RELATIVE_CONTROLLER_LEFTHAND\"</code>.",
        "kind": "function",
        "name": "isLeftHand",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pointer.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the pointer is associated with the left hand, <code>false</code> if it isn't."
            }
        ],
        "memberof": "LaserPointers",
        "longname": "LaserPointers.isLeftHand",
        "scope": "static"
    },
    {
        "description": "Checks if a pointer is associated with the right hand: a pointer with <code>joint</code> property set to\r<code>\"_CONTROLLER_RIGHTHAND\"</code> or <code>\"_CAMERA_RELATIVE_CONTROLLER_RIGHTHAND\"</code>.",
        "kind": "function",
        "name": "isRightHand",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pointer.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the pointer is associated with the right hand, <code>false</code> if it isn't."
            }
        ],
        "memberof": "LaserPointers",
        "longname": "LaserPointers.isRightHand",
        "scope": "static"
    },
    {
        "description": "Checks if a pointer is associated with the system mouse: a pointer with <code>joint</code> property set to \r<code>\"Mouse\"</code>.",
        "kind": "function",
        "name": "isMouse",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pointer.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the pointer is associated with the system mouse, <code>false</code> if it isn't."
            }
        ],
        "memberof": "LaserPointers",
        "longname": "LaserPointers.isMouse",
        "scope": "static"
    },
    {
        "description": "An intersection result for a parabola pick.",
        "kind": "typedef",
        "name": "ParabolaPickResult",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The intersection type.",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if there's a valid intersection, <code>false</code> if there isn't.",
                "name": "intersects"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the intersected object. <code>null</code> for HUD or invalid intersections.",
                "name": "objectID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The distance from the parabola origin to the intersection point in a straight line.",
                "name": "distance"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The distance from the parabola origin to the intersection point along the arc of\r    the parabola.",
                "name": "parabolicDistance"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The intersection point in world coordinates.",
                "name": "intersection"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The surface normal at the intersected point. All <code>NaN</code>s if <code>type ==\r    Picks.INTERSECTED_HUD</code>.",
                "name": "surfaceNormal"
            },
            {
                "type": {
                    "names": [
                        "SubmeshIntersection"
                    ]
                },
                "description": "Additional intersection details for model objects, otherwise\r    <code>{ }</code>.",
                "name": "extraInfo"
            },
            {
                "type": {
                    "names": [
                        "PickParabola"
                    ]
                },
                "description": "The pick parabola that was used. Valid even if there is no intersection.",
                "name": "parabola"
            }
        ],
        "longname": "ParabolaPickResult",
        "scope": "global"
    },
    {
        "description": "The properties of a ray pick.",
        "kind": "typedef",
        "name": "RayPickProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> if this pick should start enabled, <code>false</code> if it should \r    start disabled. Disabled picks do not update their pick results.",
                "name": "enabled"
            },
            {
                "type": {
                    "names": [
                        "FilterFlags"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "The filter for this pick to use. Construct using {@link Picks} FilterFlags property \r    values (e.g., <code>Picks.PICK_DOMAIN_ENTITIES</code>) combined with <code>|</code> (bitwise OR) operators.",
                "name": "filter"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": "0.0",
                "description": "The maximum distance at which this pick will intersect. A value of <code>0.0</code> \r    means no maximum.",
                "name": "maxDistance"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "optional": true,
                "description": "The ID of the parent: an avatar, an entity, or another pick.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "The joint of the parent to parent to, for example, an avatar joint. \r    A value of <code>0</code> means no joint.\r    <p><em>Used only if <code>parentID</code> is specified.</em></p>",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "<code>\"Mouse\"</code> parents the pick to the mouse; <code>\"Avatar\"</code> parents the pick to \r    the user's avatar head; a joint name parents to the joint in the user's avatar; otherwise, the pick is \"static\", not \r    parented to anything.\r    <p><em>Used only if <code>parentID</code> is not specified.</em></p>",
                "name": "joint"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "optional": true,
                "defaultvalue": "Vec3.ZERO",
                "description": "The offset of the ray origin from its parent if parented, otherwise the ray origin \r    in world coordinates.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "optional": true,
                "description": "Synonym for <code>position</code>.",
                "name": "posOffset"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "optional": true,
                "description": "The offset of the ray direction from its parent's y-axis if parented, otherwise the ray\r    direction in world coordinates.\r    <p><strong>Default Value:</strong> <code>Vec3.UP</code> direction if <code>joint</code> is specified, otherwise\r    <code>-Vec3.UP</code>.</p>",
                "name": "direction"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "optional": true,
                "description": "Synonym for <code>direction</code>.",
                "name": "dirOffset"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "optional": true,
                "description": "Alternative property for specifying <code>direction</code>. The value is applied to the \r    default <code>direction</code> value.",
                "name": "orientation"
            },
            {
                "type": {
                    "names": [
                        "PickType"
                    ]
                },
                "description": "The type of pick when getting these properties from {@link Picks.getPickProperties} or {@link Picks.getPickScriptParameters}. A ray pick's type is {@link PickType.Ray}.",
                "name": "pickType"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "Returned from {@link Picks.getPickProperties} when the pick has a parent with varying scale (usually an avatar or an entity).\r    Its value is the original scale of the parent at the moment the pick was created, and is used to scale the pointer which owns this pick, if any.",
                "name": "baseScale"
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.RayPickProperties",
        "scope": "static"
    },
    {
        "description": "The properties of a stylus pick.",
        "kind": "typedef",
        "name": "StylusPickProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "description": "<code>0</code> for the left hand, <code>1</code> for the right hand, invalid (<code>-1</code>) \r    otherwise.",
                "name": "hand"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> if this pick should start enabled, <code>false</code> if it should\r    start disabled. Disabled picks do not update their pick results.",
                "name": "enabled"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "The filter for this pick to use. Construct using {@link Picks} FilterFlags property\r    values (e.g., <code>Picks.PICK_DOMAIN_ENTITIES</code>) combined with <code>|</code> (bitwise OR) operators.\r    <p><strong>Note:</strong> Stylus picks do not intersect avatars or the HUD.</p>",
                "name": "filter"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": "0.0",
                "description": "The maximum distance at which this pick will intersect. A value of <code>0.0</code>\r    means no maximum.",
                "name": "maxDistance"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "optional": true,
                "defaultvalue": "0,0.095,0",
                "description": "The position of the stylus tip relative to the hand position at default avatar \r    scale.",
                "name": "tipOffset"
            },
            {
                "type": {
                    "names": [
                        "PickType"
                    ]
                },
                "description": "The type of pick when getting these properties from {@link Picks.getPickProperties} or {@link Picks.getPickScriptParameters}. A stylus pick's type is {@link PickType.Stylus}.",
                "name": "pickType"
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.StylusPickProperties",
        "scope": "static"
    },
    {
        "description": "The properties of a parabola pick.",
        "kind": "typedef",
        "name": "ParabolaPickProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> if this pick should start enabled, <code>false</code> if it should \r    start disabled. Disabled picks do not update their pick results.",
                "name": "enabled"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "The filter for this pick to use. Construct using {@link Picks} FilterFlags property \r    values (e.g., <code>Picks.PICK_DOMAIN_ENTITIES</code>) combined with <code>|</code> (bitwise OR) operators.",
                "name": "filter"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": "0.0",
                "description": "The maximum distance at which this pick will intersect. A value of <code>0.0</code> \r    means no maximum.",
                "name": "maxDistance"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "optional": true,
                "description": "The ID of the parent: an avatar, an entity, or another pick.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "The joint of the parent to parent to, for example, an avatar joint.\r    A value of <code>0</code> means no joint.\r    <p><em>Used only if <code>parentID</code> is specified.</em></p>",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "<code>\"Mouse\"</code> parents the pick to the mouse; <code>\"Avatar\"</code> parents the pick to \r    the user's avatar head; a joint name parents to the joint in the user's avatar; otherwise, the pick is \"static\", not \r    parented to anything.\r    <p><em>Used only if <code>parentID</code> is not specified.</em></p>",
                "name": "joint"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "optional": true,
                "defaultvalue": "Vec3.ZERO",
                "description": "The offset of the parabola origin from its parent if parented, otherwise the \r    parabola origin in world coordinates.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "optional": true,
                "description": "Synonym for <code>position</code>.",
                "name": "posOffset"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "optional": true,
                "description": "The offset of the parabola direction from its parent's y-axis if parented, otherwise the \r    parabola direction in world coordinates.\r    <p><strong>Default Value:</strong> <code>Vec3.UP</code> direction if <code>joint</code> is specified, otherwise\r    <code>Vec3.FRONT</code>.</p>",
                "name": "direction"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "optional": true,
                "description": "Synonym for <code>direction</code>.",
                "name": "dirOffset"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "optional": true,
                "description": "Alternative property for specifying <code>direction</code>. The value is applied to the \r    default <code>direction</code> value.",
                "name": "orientation"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 1,
                "description": "The initial speed of the parabola in m/s, i.e., the initial speed of a virtual projectile \r    whose trajectory defines the parabola.",
                "name": "speed"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "optional": true,
                "defaultvalue": "-Vec3.UP",
                "description": "The acceleration of the parabola in m/s<sup>2</sup>, i.e., the acceleration\r    of a virtual projectile whose trajectory defines the parabola, both magnitude and direction.",
                "name": "accelerationAxis"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "<code>true</code> if the acceleration axis should rotate with the\r    avatar about the avatar's y-axis, <code>false</code> if it shouldn't.",
                "name": "rotateAccelerationWithAvatar"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> if the acceleration axis should rotate with the\r    parent about the parent's y-axis, if available.",
                "name": "rotateAccelerationWithParent"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "<code>true</code> if the velocity and acceleration of the pick should scale\r    with the avatar or other parent.",
                "name": "scaleWithParent"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Synonym for <code>scalewithParent</code>.\r    <p class=\"important\">Deprecated: This property is deprecated and will be removed.</p>",
                "name": "scaleWithAvatar"
            },
            {
                "type": {
                    "names": [
                        "PickType"
                    ]
                },
                "description": "The type of pick when getting these properties from {@link Picks.getPickProperties} or {@link Picks.getPickScriptParameters}. A parabola pick's type is {@link PickType.Parabola}.",
                "name": "pickType"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "Returned from {@link Picks.getPickProperties} when the pick has a parent with varying scale (usually an avatar or an entity).\r    Its value is the original scale of the parent at the moment the pick was created, and is used to rescale the pick, and/or the pointer which owns this pick, if any.",
                "name": "baseScale"
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.ParabolaPickProperties",
        "scope": "static"
    },
    {
        "description": "The properties of a collision pick.",
        "kind": "typedef",
        "name": "CollisionPickProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> if this pick should start enabled, <code>false</code> if it should\r    start disabled. Disabled picks do not update their pick results.",
                "name": "enabled"
            },
            {
                "type": {
                    "names": [
                        "FilterFlags"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "The filter for this pick to use. Construct using {@link Picks} FilterFlags property\r    values (e.g., <code>Picks.PICK_DOMAIN_ENTITIES</code>) combined with <code>|</code> (bitwise OR) operators.\r    <p><strong>Note:</strong> Collision picks do not intersect the HUD.</p>",
                "name": "filter"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": "0.0",
                "description": "The maximum distance at which this pick will intersect. A value of <code>0.0</code>\r    means no maximum.",
                "name": "maxDistance"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "optional": true,
                "description": "The ID of the parent: an avatar, an entity, or another pick.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "The joint of the parent to parent to, for example, an avatar joint.\r    A value of <code>0</code> means no joint.\r    <p><em>Used only if <code>parentID</code> is specified.</em></p>",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "<code>\"Mouse\"</code> parents the pick to the mouse; <code>\"Avatar\"</code> parents the pick to\r    the user's avatar head; a joint name parents to the joint in the user's avatar; otherwise, the pick is \"static\", not\r    parented to anything.\r    <p><em>Used only if <code>parentID</code> is not specified.</em></p>",
                "name": "joint"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "<code>true</code> to scale the pick's dimensions and threshold according to the \r    scale of the parent.",
                "name": "scaleWithParent"
            },
            {
                "type": {
                    "names": [
                        "Shape"
                    ]
                },
                "description": "The collision region's shape and size. Dimensions are in world coordinates but scale with the \r    parent if defined.",
                "name": "shape"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the collision region, relative to the parent if defined.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the collision region, relative to the parent if defined.",
                "name": "orientation"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The approximate minimum penetration depth for a test object to be considered in contact with\r    the collision region. The depth is in world coordinates but scales with the parent if defined.",
                "name": "threshold"
            },
            {
                "type": {
                    "names": [
                        "CollisionMask"
                    ]
                },
                "optional": true,
                "defaultvalue": 8,
                "description": "The type of objects the collision region collides as. Objects whose collision\r    masks overlap with the region's collision group are considered to be colliding with the region.",
                "name": "collisionGroup"
            },
            {
                "type": {
                    "names": [
                        "PickType"
                    ]
                },
                "description": "The type of pick when getting these properties from {@link Picks.getPickProperties} or \r    {@link Picks.getPickScriptParameters}. A collision pick's type is {@link PickType.Collision}.",
                "name": "pickType"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "Returned from {@link Picks.getPickProperties} when the pick has a parent with varying scale \r    (usually an avatar or an entity). Its value is the original scale of the parent at the moment the pick was created, and \r    is used to rescale the pick, and/or the pointer which owns this pick, if any.",
                "name": "baseScale"
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.CollisionPickProperties",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Picks</code> API lets you create and manage objects for repeatedly calculating intersections.",
        "kind": "namespace",
        "name": "Picks",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "FilterFlags"
                    ]
                },
                "description": "Include domain entities when intersecting. <em>Read-only.</em>",
                "name": "PICK_DOMAIN_ENTITIES"
            },
            {
                "type": {
                    "names": [
                        "FilterFlags"
                    ]
                },
                "description": "Include avatar entities when intersecting. <em>Read-only.</em>",
                "name": "PICK_AVATAR_ENTITIES"
            },
            {
                "type": {
                    "names": [
                        "FilterFlags"
                    ]
                },
                "description": "Include local entities when intersecting. <em>Read-only.</em>",
                "name": "PICK_LOCAL_ENTITIES"
            },
            {
                "type": {
                    "names": [
                        "FilterFlags"
                    ]
                },
                "description": "Include avatars when intersecting. <em>Read-only.</em>",
                "name": "PICK_AVATARS"
            },
            {
                "type": {
                    "names": [
                        "FilterFlags"
                    ]
                },
                "description": "Include the HUD surface when intersecting in HMD mode. <em>Read-only.</em>",
                "name": "PICK_HUD"
            },
            {
                "type": {
                    "names": [
                        "FilterFlags"
                    ]
                },
                "description": "Include domain and avatar entities when intersecting. <em>Read-only.</em>\r    <p class=\"important\">Deprecated: This property is deprecated and will be removed. Use <code>PICK_DOMAIN_ENTITIES | \r    PICK_AVATAR_ENTITIES</code> instead.</p>",
                "name": "PICK_ENTITIES"
            },
            {
                "type": {
                    "names": [
                        "FilterFlags"
                    ]
                },
                "description": "Include local entities when intersecting. <em>Read-only.</em>\r    <p class=\"important\">Deprecated: This property is deprecated and will be removed. Use <code>PICK_LOCAL_ENTITIES</code> \r    instead.</p>",
                "name": "PICK_OVERLAYS"
            },
            {
                "type": {
                    "names": [
                        "FilterFlags"
                    ]
                },
                "description": "Include visible objects when intersecting. <em>Read-only.</em>\r    <p><strong>Warning:</strong> Is currently always enabled by default but may not be in the future.</p>",
                "name": "PICK_INCLUDE_VISIBLE"
            },
            {
                "type": {
                    "names": [
                        "FilterFlags"
                    ]
                },
                "description": "Include invisible objects when intersecting. <em>Read-only.</em>",
                "name": "PICK_INCLUDE_INVISIBLE"
            },
            {
                "type": {
                    "names": [
                        "FilterFlags"
                    ]
                },
                "description": "Include collidable objects when intersecting. <em>Read-only.</em>\r    <p><strong>Warning:</strong> Is currently always enabled by default but may not be in the future.</p>",
                "name": "PICK_INCLUDE_COLLIDABLE"
            },
            {
                "type": {
                    "names": [
                        "FilterFlags"
                    ]
                },
                "description": "Include non-collidable objects when intersecting. <em>Read-only.</em>",
                "name": "PICK_INCLUDE_NONCOLLIDABLE"
            },
            {
                "type": {
                    "names": [
                        "FilterFlags"
                    ]
                },
                "description": "Pick against exact meshes. <em>Read-only.</em>",
                "name": "PICK_PRECISE"
            },
            {
                "type": {
                    "names": [
                        "FilterFlags"
                    ]
                },
                "description": "Pick against coarse meshes. <em>Read-only.</em>",
                "name": "PICK_COARSE"
            },
            {
                "type": {
                    "names": [
                        "FilterFlags"
                    ]
                },
                "description": "If set, returns all intersections instead of just the closest. \r    <em>Read-only.</em>\r    <p><strong>Warning:</strong> Not yet implemented.</p>",
                "name": "PICK_ALL_INTERSECTIONS"
            },
            {
                "type": {
                    "names": [
                        "IntersectionType"
                    ]
                },
                "description": "Intersected nothing. <em>Read-only.</em>",
                "name": "INTERSECTED_NONE"
            },
            {
                "type": {
                    "names": [
                        "IntersectionType"
                    ]
                },
                "description": "Intersected an entity. <em>Read-only.</em>",
                "name": "INTERSECTED_ENTITY"
            },
            {
                "type": {
                    "names": [
                        "IntersectionType"
                    ]
                },
                "description": "Intersected a local entity. <em>Read-only.</em>",
                "name": "INTERSECTED_LOCAL_ENTITY"
            },
            {
                "type": {
                    "names": [
                        "IntersectionType"
                    ]
                },
                "description": "Intersected a local entity. (3D overlays no longer exist.) \r    <em>Read-only.</em>\r    <p class=\"important\">Deprecated: This property is deprecated and will be removed. Use \r    <code>INTERSECTED_LOCAL_ENTITY</code> instead.</p>",
                "name": "INTERSECTED_OVERLAY"
            },
            {
                "type": {
                    "names": [
                        "IntersectionType"
                    ]
                },
                "description": "Intersected an avatar. <em>Read-only.</em>",
                "name": "INTERSECTED_AVATAR"
            },
            {
                "type": {
                    "names": [
                        "IntersectionType"
                    ]
                },
                "description": "Intersected the HUD surface. <em>Read-only.</em>",
                "name": "INTERSECTED_HUD"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The maximum time, in microseconds, to spend per frame updating pick results.",
                "name": "perFrameTimeBudget"
            }
        ],
        "longname": "Picks",
        "scope": "global"
    },
    {
        "description": "Creates a new pick. Different {@link PickType}s use different properties, and within one PickType the properties you \rchoose can lead to a wide range of behaviors. For example, with <code>PickType.Ray</code>, the properties could \rconfigure a mouse ray pick, an avatar head ray pick, or a joint ray pick.\r<p><strong>Warning:</strong> Picks created using this method currently always intersect at least visible and collidable \rthings but this may not always be the case.</p>",
        "kind": "function",
        "name": "createPick",
        "params": [
            {
                "type": {
                    "names": [
                        "PickType"
                    ]
                },
                "description": "The type of picking to use.",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Picks.RayPickProperties",
                        "Picks.ParabolaPickProperties",
                        "Picks.StylusPickProperties",
                        "Picks.CollisionPickProperties"
                    ]
                },
                "description": "Properties of the pick, per the pick <code>type</code>.",
                "name": "properties"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pick created. <code>0</code> if invalid."
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.createPick",
        "scope": "static"
    },
    {
        "description": "Enables a pick. Enabled picks update their pick results.",
        "kind": "function",
        "name": "enablePick",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pick.",
                "name": "id"
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.enablePick",
        "scope": "static"
    },
    {
        "description": "Disables a pick. Disabled picks do not update their pick results.",
        "kind": "function",
        "name": "disablePick",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pick.",
                "name": "id"
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.disablePick",
        "scope": "static"
    },
    {
        "description": "Get the enabled status of a pick. Enabled picks update their pick results.",
        "kind": "function",
        "name": "isPickEnabled",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pick.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "enabled - Whether or not the pick is enabled."
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.isPickEnabled",
        "scope": "static"
    },
    {
        "description": "Removes (deletes) a pick.",
        "kind": "function",
        "name": "removePick",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pick.",
                "name": "id"
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.removePick",
        "scope": "static"
    },
    {
        "description": "Gets the current properties of the pick.",
        "kind": "function",
        "name": "getPickProperties",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pick.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Picks.RayPickProperties",
                        "Picks.ParabolaPickProperties",
                        "Picks.StylusPickProperties",
                        "Picks.CollisionPickProperties"
                    ]
                },
                "description": "Properties of the pick, per the pick <code>type</code>."
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.getPickProperties",
        "scope": "static"
    },
    {
        "description": "Gets the parameters that were passed in to {@link Picks.createPick} to create the pick,\rif the pick was created through a script.\rNote that these properties do not reflect the current state of the pick.\rSee {@link Picks.getPickProperties}.",
        "kind": "function",
        "name": "getPickScriptParameters",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pick.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Picks.RayPickProperties",
                        "Picks.ParabolaPickProperties",
                        "Picks.StylusPickProperties",
                        "Picks.CollisionPickProperties"
                    ]
                },
                "description": "User-provided properties, per the pick <code>type</code>."
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.getPickScriptParameters",
        "scope": "static"
    },
    {
        "description": "Gets all picks which currently exist, including disabled picks.",
        "kind": "function",
        "name": "getPicks",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<number>"
                    ]
                },
                "description": "picks - The IDs of the picks."
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.getPicks",
        "scope": "static"
    },
    {
        "description": "Gets the most recent result from a pick. A pick continues to be updated ready to return a result, as long as it is \renabled.\r<p><strong>Note:</strong> Stylus picks only intersect with objects in their include list, set using \r{@link Picks.setIncludeItems|setIncludeItems}.</p>",
        "kind": "function",
        "name": "getPrevPickResult",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pick.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RayPickResult",
                        "ParabolaPickResult",
                        "StylusPickResult",
                        "CollisionPickResult"
                    ]
                },
                "description": "The most recent intersection result."
            }
        ],
        "examples": [
            "<caption>Highlight entities under your mouse in desktop mode or that you're looking at in HMD mode.</caption>\r// Highlight.\rvar HIGHLIGHT_LIST_NAME = \"highlightEntitiesExampleList\";\rvar HIGHLIGHT_LIST_TYPE = \"entity\";\rSelection.enableListHighlight(HIGHLIGHT_LIST_NAME, {});\r\r// Ray pick.\rvar PICK_FILTER = Picks.PICK_DOMAIN_ENTITIES | Picks.PICK_AVATAR_ENTITIES\r        | Picks.PICK_INCLUDE_COLLIDABLE | Picks.PICK_INCLUDE_NONCOLLIDABLE;\rvar rayPick = Picks.createPick(PickType.Ray, {\r    enabled: true,\r    filter: PICK_FILTER,\r    joint: HMD.active ? \"Avatar\" : \"Mouse\"\r});\r\r// Highlight intersected entity.\rvar highlightedEntityID = null;\rScript.update.connect(function () {\r    var rayPickResult = Picks.getPrevPickResult(rayPick);\r    if (rayPickResult.intersects) {\r        if (rayPickResult.objectID !== highlightedEntityID) {\r            if (highlightedEntityID) {\r                Selection.removeFromSelectedItemsList(HIGHLIGHT_LIST_NAME, HIGHLIGHT_LIST_TYPE, highlightedEntityID);\r            }\r            highlightedEntityID = rayPickResult.objectID;\r            Selection.addToSelectedItemsList(HIGHLIGHT_LIST_NAME, HIGHLIGHT_LIST_TYPE, highlightedEntityID);\r        }\r    } else {\r        if (highlightedEntityID) {\r            Selection.removeFromSelectedItemsList(HIGHLIGHT_LIST_NAME, HIGHLIGHT_LIST_TYPE, highlightedEntityID);\r            highlightedEntityID = null;\r        }\r    }\r});\r\r// Clean up.\rScript.scriptEnding.connect(function () {\r    if (highlightedEntityID) {\r        Selection.removeFromSelectedItemsList(HIGHLIGHT_LIST_NAME, HIGHLIGHT_LIST_TYPE, highlightedEntityID);\r    }\r});"
        ],
        "memberof": "Picks",
        "longname": "Picks.getPrevPickResult",
        "scope": "static"
    },
    {
        "description": "Sets whether or not a pick should use precision picking, i.e., whether it should pick against precise meshes or coarse \rmeshes.\rThis has the same effect as using the <code>PICK_PRECISE</code> or <code>PICK_COARSE</code> filter flags.",
        "kind": "function",
        "name": "setPrecisionPicking",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pick.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to use precision picking, <code>false</code> to use coarse picking.",
                "name": "precisionPicking"
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.setPrecisionPicking",
        "scope": "static"
    },
    {
        "description": "Sets a list of entity and avatar IDs that a pick should ignore during intersection.\r<p><strong>Note:</strong> Not used by stylus picks.</p>",
        "kind": "function",
        "name": "setIgnoreItems",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pick.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "The list of IDs to ignore.",
                "name": "ignoreItems"
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.setIgnoreItems",
        "scope": "static"
    },
    {
        "description": "Sets a list of entity and avatar IDs that a pick should include during intersection, instead of intersecting with \reverything.\r<p><strong>Note:</strong> Stylus picks only intersect with items in their include list.</p>",
        "kind": "function",
        "name": "setIncludeItems",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pick.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "The list of IDs to include.",
                "name": "includeItems"
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.setIncludeItems",
        "scope": "static"
    },
    {
        "description": "Checks if a pick is associated with the left hand: a ray or parabola pick with <code>joint</code> property set to \r<code>\"_CONTROLLER_LEFTHAND\"</code> or <code>\"_CAMERA_RELATIVE_CONTROLLER_LEFTHAND\"</code>, or a stylus pick with \r<code>hand</code> property set to <code>0</code>.",
        "kind": "function",
        "name": "isLeftHand",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pick.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the pick is associated with the left hand, <code>false</code> if it isn't."
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.isLeftHand",
        "scope": "static"
    },
    {
        "description": "Checks if a pick is associated with the right hand: a ray or parabola pick with <code>joint</code> property set to\r<code>\"_CONTROLLER_RIGHTHAND\"</code> or <code>\"_CAMERA_RELATIVE_CONTROLLER_RIGHTHAND\"</code>, or a stylus pick with \r<code>hand</code> property set to <code>1</code>.",
        "kind": "function",
        "name": "isRightHand",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pick.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the pick is associated with the right hand, <code>false</code> if it isn't."
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.isRightHand",
        "scope": "static"
    },
    {
        "description": "Checks if a pick is associated with the system mouse: a ray or parabola pick with <code>joint</code> property set to \r<code>\"Mouse\"</code>.",
        "kind": "function",
        "name": "isMouse",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pick.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the pick is associated with the system mouse, <code>false</code> if it isn't."
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.isMouse",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_ENTITIES",
        "deprecated": "This function is deprecated and will be removed. Use the <code>Picks.PICK_DOMAIN_ENTITIES | \r    Picks.PICK_AVATAR_ENTITIES</code> properties expression instead.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.PICK_ENTITIES",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_OVERLAYS",
        "deprecated": "This function is deprecated and will be removed. Use the <code>Picks.PICK_LOCAL_ENTITIES</code> property \r    instead.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.PICK_OVERLAYS",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_DOMAIN_ENTITIES",
        "deprecated": "This function is deprecated and will be removed. Use the <code>Picks.PICK_DOMAIN_ENTITIES</code> property \r    instead.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.PICK_DOMAIN_ENTITIES",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_AVATAR_ENTITIES",
        "deprecated": "This function is deprecated and will be removed. Use the <code>Picks.PICK_AVATAR_ENTITIES</code> property \r    instead.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.PICK_AVATAR_ENTITIES",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_LOCAL_ENTITIES",
        "deprecated": "This function is deprecated and will be removed. Use the <code>Picks.PICK_LOCAL_ENTITIES</code> property \r    instead.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.PICK_LOCAL_ENTITIES",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_AVATARS",
        "deprecated": "This function is deprecated and will be removed. Use the <code>Picks.PICK_AVATARS</code> property \r    instead.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.PICK_AVATARS",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_HUD",
        "deprecated": "This function is deprecated and will be removed. Use the <code>Picks.PICK_HUD</code> property instead.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.PICK_HUD",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_INCLUDE_VISIBLE",
        "deprecated": "This function is deprecated and will be removed. Use the <code>Picks.PICK_INCLUDE_VISIBLE</code> property \r    instead.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.PICK_INCLUDE_VISIBLE",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_INCLUDE_INVISIBLE",
        "deprecated": "This function is deprecated and will be removed. Use the <code>Picks.PICK_INCLUDE_INVISIBLE</code> property \r    instead.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.PICK_INCLUDE_INVISIBLE",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_INCLUDE_COLLIDABLE",
        "deprecated": "This function is deprecated and will be removed. Use the <code>Picks.PICK_INCLUDE_COLLIDABLE</code> property \r    instead.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.PICK_INCLUDE_COLLIDABLE",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_INCLUDE_NONCOLLIDABLE",
        "deprecated": "This function is deprecated and will be removed. Use the <code>Picks.PICK_INCLUDE_NONCOLLIDABLE</code> \r    property instead.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.PICK_INCLUDE_NONCOLLIDABLE",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_PRECISE",
        "deprecated": "This function is deprecated and will be removed. Use the <code>Picks.PICK_PRECISE</code> property instead.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.PICK_PRECISE",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_COARSE",
        "deprecated": "This function is deprecated and will be removed. Use the <code>Picks.PICK_COARSE</code> property instead.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.PICK_COARSE",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_ALL_INTERSECTIONS",
        "deprecated": "This function is deprecated and will be removed. Use the <code>Picks.PICK_ALL_INTERSECTIONS</code> property \r    instead.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.PICK_ALL_INTERSECTIONS",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "INTERSECTED_NONE",
        "deprecated": "This function is deprecated and will be removed. Use the <code>Picks.INTERSECTED_NONE</code> property \r    instead.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.INTERSECTED_NONE",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "INTERSECTED_ENTITY",
        "deprecated": "This function is deprecated and will be removed. Use the <code>Picks.INTERSECTED_ENTITY</code> property \r    instead.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.INTERSECTED_ENTITY",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "INTERSECTED_LOCAL_ENTITY",
        "deprecated": "This function is deprecated and will be removed. Use the <code>Picks.INTERSECTED_LOCAL_ENTITY</code> \r    property instead.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.INTERSECTED_LOCAL_ENTITY",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "INTERSECTED_OVERLAY",
        "deprecated": "This function is deprecated and will be removed. Use the <code>Picks.INTERSECTED_LOCAL_ENTITY</code> \r    property instead.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.INTERSECTED_OVERLAY",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "INTERSECTED_AVATAR",
        "deprecated": "This function is deprecated and will be removed. Use the <code>Picks.INTERSECTED_AVATAR</code> property \r    instead.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.INTERSECTED_AVATAR",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "INTERSECTED_HUD",
        "deprecated": "This function is deprecated and will be removed. Use the <code>Picks.INTERSECTED_HUD</code> property \r    instead.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.INTERSECTED_HUD",
        "scope": "static"
    },
    {
        "description": "The properties of a stylus pointer. These include the properties from the underlying stylus pick that the pointer uses.",
        "kind": "typedef",
        "name": "StylusPointerProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Pointers.StylusPointerModel"
                    ]
                },
                "optional": true,
                "description": "Override some or all of the default stylus model properties.",
                "name": "model"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> if the pointer generates {@link Entities} hover events, \r    <code>false</code> if it doesn't.",
                "name": "hover"
            },
            {
                "type": {
                    "names": [
                        "PickType"
                    ]
                },
                "description": "The type of pointer when getting these properties from {@link Pointers.getPointerProperties} or {@link Pointers.getPointerScriptParameters}. A stylus pointer's type is {@link PickType.Stylus}.",
                "name": "pointerType"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "description": "Returned from {@link Pointers.getPointerProperties}. The ID of the pick created alongside this pointer.",
                "name": "pickID"
            }
        ],
        "see": [
            "{@link Picks.StylusPickProperties} for additional properties from the underlying stylus pick."
        ],
        "memberof": "Pointers",
        "longname": "Pointers.StylusPointerProperties",
        "scope": "static"
    },
    {
        "description": "The properties of a stylus pointer model.",
        "kind": "typedef",
        "name": "StylusPointerModel",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "The url of a model to use for the stylus, to override the default stylus mode.",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "optional": true,
                "description": "The dimensions of the stylus, to override the default stylus dimensions.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "optional": true,
                "description": "The position offset of the model from the stylus tip, to override the default position \r    offset.",
                "name": "positionOffset"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "optional": true,
                "description": "The rotation offset of the model from the hand, to override the default rotation offset.",
                "name": "rotationOffset"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.StylusPointerModel",
        "scope": "static"
    },
    {
        "description": "Properties that define the visual appearance of a ray pointer when the pointer is not intersecting something. These are the \rproperties of {@link Pointers.RayPointerRenderState} but with an additional property.",
        "kind": "typedef",
        "name": "DefaultRayPointerRenderState",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The distance at which to render the end of the ray pointer.",
                "name": "distance"
            }
        ],
        "see": [
            "{@link Pointers.RayPointerRenderState} for the remainder of the properties."
        ],
        "memberof": "Pointers",
        "longname": "Pointers.DefaultRayPointerRenderState",
        "scope": "static"
    },
    {
        "description": "Properties that define the visual appearance of a ray pointer when the pointer is intersecting something.",
        "kind": "typedef",
        "name": "RayPointerRenderState",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "When creating using {@link Pointers.createPointer}, the name of the render state.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Overlays.OverlayProperties",
                        "Uuid"
                    ]
                },
                "optional": true,
                "description": "<p>When creating or editing using {@link Pointers.createPointer} or {@link Pointers.editRenderState}, the properties of \r    an overlay to render at the start of the ray pointer. The <code>type</code> property must be specified.</p>\r    <p>When getting using {@link Pointers.getPointerProperties}, the ID of the overlay rendered at the start of the ray;\r    <code>null</code> if there is no overlay.",
                "name": "start"
            },
            {
                "type": {
                    "names": [
                        "Overlays.OverlayProperties",
                        "Uuid"
                    ]
                },
                "optional": true,
                "description": "<p>When creating or editing using {@link Pointers.createPointer} or {@link Pointers.editRenderState}, the properties of\r    the overlay rendered for the path of the ray pointer. The <code>type</code> property must be specified and be \r    <code>\"line3d\"</code>.</p>\r    <p>When getting using {@link Pointers.getPointerProperties}, the ID of the overlay rendered for the path of the ray;\r    <code>null</code> if there is no overlay.",
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "Overlays.OverlayProperties",
                        "Uuid"
                    ]
                },
                "optional": true,
                "description": "<p>When creating or editing using {@link Pointers.createPointer} or {@link Pointers.editRenderState}, the properties of\r    an overlay to render at the end of the ray pointer. The <code>type</code> property must be specified.</p>\r    <p>When getting using {@link Pointers.getPointerProperties}, the ID of the overlay rendered at the end of the ray; \r    <code>null</code> if there is no overlay.",
                "name": "end"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.RayPointerRenderState",
        "scope": "static"
    },
    {
        "description": "The properties of a ray pointer. These include the properties from the underlying ray pick that the pointer uses.",
        "kind": "typedef",
        "name": "RayPointerProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay rendered at the end of the ray rotates about the \r    world y-axis to always face the avatar; <code>false</code> if it maintains its world orientation.",
                "name": "faceAvatar"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "<code>true</code> if the overlay rendered at the end of the ray is centered on \r    the ray end; <code>false</code> if the overlay is positioned against the surface if <code>followNormal</code> is \r    <code>true</code>, or above the ray end if <code>followNormal</code> is <code>false</code>.",
                "name": "centerEndY"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> if the end of the ray is locked to the center of the object at \r    which the ray is pointing; <code>false</code> if the end of the ray is at the intersected surface.",
                "name": "lockEnd"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> if the dimensions of the overlay at the end of the ray \r    scale linearly with distance; <code>false</code> if they aren't.",
                "name": "distanceScaleEnd"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> if the width of the ray's path and the size of the \r    start and end overlays scale linearly with the pointer parent's scale; <code>false</code> if they don't scale.",
                "name": "scaleWithParent"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "A synonym for <code>scalewithParent</code>.\r    <p class=\"important\">Deprecated: This property is deprecated and will be removed.</p>",
                "name": "scaleWithAvatar"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay rendered at the end of the ray rotates to \r    follow the normal of the surface if one is intersected; <code>false</code> if it doesn't.",
                "name": "followNormal"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": "0.0",
                "description": "How quickly the overlay rendered at the end of the ray rotates to follow \r    the normal of an intersected surface. If <code>0</code> or <code>1</code>, the overlay rotation follows instantaneously; \r   for other values, the larger the value the more quickly the rotation follows.",
                "name": "followNormalStrength"
            },
            {
                "type": {
                    "names": [
                        "Array.<Pointers.RayPointerRenderState>",
                        "Object.<string, Pointers.RayPointerRenderState>"
                    ]
                },
                "optional": true,
                "description": "<p>A set of visual states that can be switched among using {@link Pointers.setRenderState}. These define the visual \r    appearance of the pointer when it is intersecting something.</p>\r    <p>When setting using {@link Pointers.createPointer}, an array of \r    {@link Pointers.RayPointerRenderState|RayPointerRenderState} values.</p>\r    <p>When getting using {@link Pointers.getPointerProperties}, an object mapping render state names to \r    {@link Pointers.RayPointerRenderState|RayPointerRenderState} values.</p>",
                "name": "renderStates"
            },
            {
                "type": {
                    "names": [
                        "Array.<Pointers.DefaultRayPointerRenderState>",
                        "Object.<string, Pointers.DefaultRayPointerRenderState>"
                    ]
                },
                "optional": true,
                "description": "<p>A set of visual states that can be switched among using {@link Pointers.setRenderState}. These define the visual\r    appearance of the pointer when it is not intersecting something.</p>\r    <p>When setting using {@link Pointers.createPointer}, an array of \r    {@link Pointers.DefaultRayPointerRenderState|DefaultRayPointerRenderState} values.</p>\r    <p>When getting using {@link Pointers.getPointerProperties}, an object mapping render state names to \r    {@link Pointers.DefaultRayPointerRenderState|DefaultRayPointerRenderState} values.</p>",
                "name": "defaultRenderStates"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> if the pointer generates {@link Entities} hover events, \r    <code>false</code> if it doesn't.",
                "name": "hover"
            },
            {
                "type": {
                    "names": [
                        "Array.<Pointers.Trigger>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "A list of ways that a {@link Controller} action or function should trigger \r    events on the entity or overlay currently intersected.",
                "name": "triggers"
            },
            {
                "type": {
                    "names": [
                        "PickType"
                    ]
                },
                "description": "The type of pointer when getting these properties from {@link Pointers.getPointerProperties} or {@link Pointers.getPointerScriptParameters}. A laser pointer's type is {@link PickType.Ray}.",
                "name": "pointerType"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "description": "Returned from {@link Pointers.getPointerProperties}. The ID of the pick created alongside this pointer.",
                "name": "pickID"
            }
        ],
        "see": [
            "{@link Picks.RayPickProperties} for additional properties from the underlying ray pick."
        ],
        "memberof": "Pointers",
        "longname": "Pointers.RayPointerProperties",
        "scope": "static"
    },
    {
        "description": "The visual appearance of the parabolic path.",
        "kind": "typedef",
        "name": "ParabolaPointerPath",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "optional": true,
                "defaultvalue": "255,255,255",
                "description": "The color of the parabola.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": "1.0",
                "description": "The opacity of the parabola, range <code>0.0</code> &ndash; <code>1.0</code>.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0.01,
                "description": "The width of the parabola, in meters.",
                "name": "width"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> if the parabola is rendered in the secondary \r    camera, <code>false</code> if it isn't.",
                "name": "isVisibleInSecondaryCamera"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> if the parabola is rendered in front of objects in the world, \r    but behind the HUD, <code>false</code> if it is occluded by objects in front of it.",
                "name": "drawInFront"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.ParabolaPointerPath",
        "scope": "static"
    },
    {
        "description": "Properties that define the visual appearance of a parabola pointer when the pointer is not intersecting something. These are\rproperties of {@link Pointers.ParabolaPointerRenderState} but with an additional property.",
        "kind": "typedef",
        "name": "DefaultParabolaPointerRenderState",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The distance along the parabola at which to render the end of the parabola pointer.",
                "name": "distance"
            }
        ],
        "see": [
            "{@link Pointers.ParabolaPointerRenderState} for the remainder of the properties."
        ],
        "memberof": "Pointers",
        "longname": "Pointers.DefaultParabolaPointerRenderState",
        "scope": "static"
    },
    {
        "description": "Properties that define the visual appearance of a parabola pointer when the pointer is intersecting something.",
        "kind": "typedef",
        "name": "ParabolaPointerRenderState",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "When creating using {@link Pointers.createPointer}, the name of the render state.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Overlays.OverlayProperties",
                        "Uuid"
                    ]
                },
                "optional": true,
                "description": "<p>When creating or editing using {@link Pointers.createPointer} or {@link Pointers.editRenderState}, the properties of\r    an overlay to render at the start of the parabola pointer. The <code>type</code> property must be specified.</p>\r    <p>When getting using {@link Pointers.getPointerProperties}, the ID of the overlay rendered at the start of the \r    parabola; <code>null</code> if there is no overlay.",
                "name": "start"
            },
            {
                "type": {
                    "names": [
                        "Pointers.ParabolaPointerPath",
                        "Uuid"
                    ]
                },
                "optional": true,
                "description": "<p>When creating or editing using {@link Pointers.createPointer} or {@link Pointers.editRenderState}, the properties of\r    the rendered path of the parabola pointer.</p>\r    <p>This property is not provided when getting using {@link Pointers.getPointerProperties}.",
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "Overlays.OverlayProperties",
                        "Uuid"
                    ]
                },
                "optional": true,
                "description": "<p>When creating or editing using {@link Pointers.createPointer} or {@link Pointers.editRenderState}, the properties of\r    an overlay to render at the end of the ray pointer. The <code>type</code> property must be specified.</p>\r    <p>When getting using {@link Pointers.getPointerProperties}, the ID of the overlay rendered at the end of the parabola;\r    <code>null</code> if there is no overlay.",
                "name": "end"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.ParabolaPointerRenderState",
        "scope": "static"
    },
    {
        "description": "The properties of a parabola pointer. These include the properties from the underlying parabola pick that the pointer uses.",
        "kind": "typedef",
        "name": "ParabolaPointerProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay rendered at the end of the ray rotates about the\r    world y-axis to always face the avatar; <code>false</code> if it maintains its world orientation.",
                "name": "faceAvatar"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "<code>true</code> if the overlay rendered at the end of the ray is centered on\r    the ray end; <code>false</code> if the overlay is positioned against the surface if <code>followNormal</code> is\r    <code>true</code>, or above the ray end if <code>followNormal</code> is <code>false</code>.",
                "name": "centerEndY"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> if the end of the ray is locked to the center of the object at\r    which the ray is pointing; <code>false</code> if the end of the ray is at the intersected surface.",
                "name": "lockEnd"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> if the dimensions of the overlay at the end of the ray\r    scale linearly with distance; <code>false</code> if they aren't.",
                "name": "distanceScaleEnd"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> if the width of the ray's path and the size of the\r    start and end overlays scale linearly with the pointer parent's scale; <code>false</code> if they don't scale.",
                "name": "scaleWithParent"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "A synonym for <code>scalewithParent</code>.\r    <p class=\"important\">Deprecated: This property is deprecated and will be removed.</p>",
                "name": "scaleWithAvatar"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay rendered at the end of the ray rotates to\r    follow the normal of the surface if one is intersected; <code>false</code> if it doesn't.",
                "name": "followNormal"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": "0.0",
                "description": "How quickly the overlay rendered at the end of the ray rotates to follow\r    the normal of an intersected surface. If <code>0</code> or <code>1</code>, the overlay rotation follows instantaneously;\r   for other values, the larger the value the more quickly the rotation follows.",
                "name": "followNormalStrength"
            },
            {
                "type": {
                    "names": [
                        "Array.<Pointers.ParabolaPointerRenderState>",
                        "Object.<string, Pointers.ParabolaPointerRenderState>"
                    ]
                },
                "optional": true,
                "description": "<p>A set of visual states that can be switched among using {@link Pointers.setRenderState}. These define the visual\r    appearance of the pointer when it is intersecting something.</p>\r    <p>When setting using {@link Pointers.createPointer}, an array of\r    {@link Pointers.ParabolaPointerRenderState|ParabolaPointerRenderState} values.</p>\r    <p>When getting using {@link Pointers.getPointerProperties}, an object mapping render state names to\r    {@link Pointers.ParabolaPointerRenderState|ParabolaPointerRenderState} values.</p>",
                "name": "renderStates"
            },
            {
                "type": {
                    "names": [
                        "Array.<Pointers.DefaultParabolaPointerRenderState>",
                        "Object.<string, Pointers.DefaultParabolaPointerRenderState>"
                    ]
                },
                "optional": true,
                "description": "<p>A set of visual states that can be switched among using {@link Pointers.setRenderState}. These define the visual\r    appearance of the pointer when it is not intersecting something.</p>\r    <p>When setting using {@link Pointers.createPointer}, an array of\r    {@link Pointers.DefaultParabolaPointerRenderState|DefaultParabolaPointerRenderState} values.</p>\r    <p>When getting using {@link Pointers.getPointerProperties}, an object mapping render state names to\r    {@link Pointers.DefaultParabolaPointerRenderState|DefaultParabolaPointerRenderState} values.</p>",
                "name": "defaultRenderStates"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> if the pointer generates {@link Entities} hover events,\r    <code>false</code> if it doesn't.",
                "name": "hover"
            },
            {
                "type": {
                    "names": [
                        "Array.<Pointers.Trigger>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "A list of ways that a {@link Controller} action or function should trigger\r    events on the entity or overlay currently intersected.",
                "name": "triggers"
            },
            {
                "type": {
                    "names": [
                        "PickType"
                    ]
                },
                "description": "The type of pointer when getting these properties from {@link Pointers.getPointerProperties} or {@link Pointers.getPointerScriptParameters}. A parabola pointer's type is {@link PickType.Parabola}.",
                "name": "pointerType"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "description": "Returned from {@link Pointers.getPointerProperties}. The ID of the pick created alongside this pointer.",
                "name": "pickID"
            }
        ],
        "see": [
            "{@link Picks.ParabolaPickProperties} for additional properties from the underlying parabola pick."
        ],
        "memberof": "Pointers",
        "longname": "Pointers.ParabolaPointerProperties",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Pointers</code> API lets you create, manage, and visually represent objects for repeatedly calculating \rintersections with avatars, entities, and overlays. Pointers can also be configured to generate events on entities and \roverlays intersected.",
        "kind": "namespace",
        "name": "Pointers",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "longname": "Pointers",
        "scope": "global"
    },
    {
        "description": "Specifies that a {@link Controller} action or function should trigger events on the entity or overlay currently \rintersected by a {@link Pointers.RayPointerProperties|Ray} or {@link Pointers.ParabolaPointerProperties|Parabola} \rpointer.",
        "kind": "typedef",
        "name": "Trigger",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Controller.Standard",
                        "Controller.Actions",
                        "function"
                    ]
                },
                "description": "The controller output or function that triggers the \r    events on the entity or overlay. If a function, it must return a number <code>&gt;= 1.0</code> to start the action \r    and <code>&lt; 1.0</code> to terminate the action.",
                "name": "action"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Which button to trigger:\r   <ul>\r     <li><code>\"Primary\"</code>, <code>\"Secondary\"</code>, and <code>\"Tertiary\"</code> cause {@link Entities} and \r     {@link Overlays} mouse pointer events. Other button names also cause mouse events but the <code>button</code> \r     property in the event will be <code>\"None\"</code>.</li>\r     <li><code>\"Focus\"</code> will try to give focus to the entity or overlay which the pointer is intersecting.</li>\r   </ul>",
                "name": "button"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.Trigger",
        "scope": "static"
    },
    {
        "description": "Creates a new ray, parabola, or stylus pointer. The pointer can have a wide range of behaviors depending on the \rproperties specified. For example, a ray pointer may be a static ray pointer, a mouse ray pointer, or joint ray \rpointer.\r<p><strong>Warning:</strong> Pointers created using this method currently always intersect at least visible and \rcollidable things but this may not always be the case.</p>",
        "kind": "function",
        "name": "createPointer",
        "params": [
            {
                "type": {
                    "names": [
                        "PickType"
                    ]
                },
                "description": "The type of pointer to create. Cannot be {@link PickType|PickType.Collision}.",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Pointers.RayPointerProperties",
                        "Pointers.ParabolaPointerProperties",
                        "Pointers.StylusPointerProperties"
                    ]
                },
                "description": "The properties of the pointer, per the pointer <code>type</code>, including the properties of the underlying pick \r    that the pointer uses to do its picking.",
                "name": "properties"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pointer if successfully created, otherwise <code>0</code>."
            }
        ],
        "examples": [
            "<caption>Create a ray pointer on the left hand that changes color when it's intersecting and that triggers \revents.<br />\rNote: Stop controllerScripts.js from running to disable similar behavior from it.</caption>\rvar intersectEnd = {\r    type: \"sphere\",\r    dimensions: { x: 0.2, y: 0.2, z: 0.2 },\r    solid: true,\r    color: { red: 0, green: 255, blue: 0 },\r    ignorePickIntersection: true\r};\rvar intersectedPath = {\r    type: \"line3d\",\r    color: { red: 0, green: 255, blue: 0 },\r};\rvar searchEnd = {\r    type: \"sphere\",\r    dimensions: { x: 0.2, y: 0.2, z: 0.2 },\r    solid: true,\r    color: { red: 255, green: 0, blue: 0 },\r    ignorePickIntersection: true\r};\rvar searchPath = {\r    type: \"line3d\",\r    color: { red: 255, green: 0, blue: 0 },\r};\r\rvar renderStates = [{ name: \"example\", path: intersectedPath, end: intersectEnd }];\rvar defaultRenderStates = [{ name: \"example\", distance: 20.0, path: searchPath, end: searchEnd }];\r\r// Create the pointer.\rvar rayPointer = Pointers.createPointer(PickType.Ray, {\r    joint: \"_CAMERA_RELATIVE_CONTROLLER_LEFTHAND\",\r    filter: Picks.PICK_LOCAL_ENTITIES | Picks.PICK_DOMAIN_ENTITIES | Picks.PICK_INCLUDE_NONCOLLIDABLE,\r    renderStates: renderStates,\r    defaultRenderStates: defaultRenderStates,\r    hover: true,  // Generate hover events.\r    triggers: [\r        { action: Controller.Standard.LTClick, button: \"Primary\" },  // Generate mouse events.\r        { action: Controller.Standard.LTClick, button: \"Focus\" }  // Focus on web entities.\r    ],\r    enabled: true\r});\rPointers.setRenderState(rayPointer, \"example\");\r\r// Hover events.\rEntities.hoverEnterEntity.connect(function (entityID, event) {\r    print(\"hoverEnterEntity() : \" + entityID);\r});\rEntities.hoverLeaveEntity.connect(function (entityID, event) {\r    print(\"hoverLeaveEntity() : \" + entityID);\r});\r\r// Mouse events.\rEntities.mousePressOnEntity.connect(function (entityID, event) {\r    print(\"mousePressOnEntity() : \" + entityID + \" , \" + event.button);\r});\rEntities.mouseReleaseOnEntity.connect(function (entityID, event) {\r    print(\"mouseReleaseOnEntity() : \" + entityID + \" , \" + event.button);\r});\r\r// Tidy up.\rScript.scriptEnding.connect(function () {\r    Pointers.removePointer(rayPointer);\r});"
        ],
        "memberof": "Pointers",
        "longname": "Pointers.createPointer",
        "scope": "static"
    },
    {
        "description": "Enables and shows a pointer. Enabled pointers update their pick results and generate events.",
        "kind": "function",
        "name": "enablePointer",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pointer.",
                "name": "id"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.enablePointer",
        "scope": "static"
    },
    {
        "description": "Disables and hides a pointer. Disabled pointers do not update their pick results or generate events.",
        "kind": "function",
        "name": "disablePointer",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pointer.",
                "name": "id"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.disablePointer",
        "scope": "static"
    },
    {
        "description": "Gets the enabled status of a pointer. Enabled pointers update their pick results and generate events.",
        "kind": "function",
        "name": "isPointerEnabled",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pointer.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "enabled - Whether or not the pointer is enabled."
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.isPointerEnabled",
        "scope": "static"
    },
    {
        "description": "Removes (deletes) a pointer.",
        "kind": "function",
        "name": "removePointer",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pointer.",
                "name": "id"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.removePointer",
        "scope": "static"
    },
    {
        "description": "Gets the parameters that were passed in to {@link Pointers.createPointer} to create the pointer,\rif the pointer was created through a script.\rNote that these properties do not reflect the current state of the pointer.\rSee {@link Pointers.getPointerProperties}.",
        "kind": "function",
        "name": "getPointerScriptParameters",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pointer.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Pointers.RayPointerProperties",
                        "Picks.ParabolaPointerProperties",
                        "Picks.StylusPointerProperties"
                    ]
                },
                "description": "User-provided properties, per the pointer <code>type</code>."
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.getPointerScriptParameters",
        "scope": "static"
    },
    {
        "description": "Gets all pointers which currently exist, including disabled pointers.",
        "kind": "function",
        "name": "getPointers",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<number>"
                    ]
                },
                "description": "pointers - The IDs of the pointers."
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.getPointers",
        "scope": "static"
    },
    {
        "description": "Edits a render state of a {@link Pointers.RayPointerProperties|ray} or \r{@link Pointers.ParabolaPointerProperties|parabola} pointer, to change its visual appearance for the state when the \rpointer is intersecting something.\r<p><strong>Note:</strong> You can only edit the properties of the existing parts of the pointer; you cannot change the \rtype of any part.</p>\r<p><strong>Note:</strong> You cannot use this method to change the appearance of a default render state.</p>\r<p><strong>Note:</strong> Not able to be used with stylus pointers.</p>",
        "kind": "function",
        "name": "editRenderState",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pointer.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the render state to edit.",
                "name": "renderState"
            },
            {
                "type": {
                    "names": [
                        "Pointers.RayPointerRenderState",
                        "Pointers.ParabolaPointerRenderState"
                    ]
                },
                "description": "The new properties for the \r    render state. Only the overlay properties to change need be specified.",
                "name": "properties"
            }
        ],
        "examples": [
            "<caption>Change the dimensions of a ray pointer's intersecting end overlay.</caption>\rvar intersectEnd = {\r    type: \"sphere\",\r    dimensions: { x: 0.2, y: 0.2, z: 0.2 },\r    solid: true,\r    color: { red: 0, green: 255, blue: 0 },\r    ignorePickIntersection: true\r};\rvar intersectedPath = {\r    type: \"line3d\",\r    color: { red: 0, green: 255, blue: 0 },\r};\rvar searchEnd = {\r    type: \"sphere\",\r    dimensions: { x: 0.2, y: 0.2, z: 0.2 },\r    solid: true,\r    color: { red: 255, green: 0, blue: 0 },\r    ignorePickIntersection: true\r};\rvar searchPath = {\r    type: \"line3d\",\r    color: { red: 255, green: 0, blue: 0 },\r};\r\rvar renderStates = [ { name: \"example\", path: intersectedPath, end: intersectEnd } ];\rvar defaultRenderStates = [ { name: \"example\", distance: 20.0, path: searchPath, end: searchEnd } ];\r\r// Create the pointer.\rvar rayPointer = Pointers.createPointer(PickType.Ray, {\r    joint: \"_CAMERA_RELATIVE_CONTROLLER_LEFTHAND\",\r    filter: Picks.PICK_LOCAL_ENTITIES | Picks.PICK_DOMAIN_ENTITIES | Picks.PICK_INCLUDE_NONCOLLIDABLE,\r    renderStates: renderStates,\r    defaultRenderStates: defaultRenderStates,\r    enabled: true\r});\rPointers.setRenderState(rayPointer, \"example\");\r\r// Edit the intersecting render state.\rScript.setTimeout(function () {\r    print(\"Edit render state\");\r    Pointers.editRenderState(rayPointer, \"example\", {\r        end: { dimensions: { x: 0.5, y: 0.5, z: 0.5 } }\r    });\r}, 10000);\r\rScript.setTimeout(function () {\r    print(\"Edit render state\");\r    Pointers.editRenderState(rayPointer, \"example\", {\r        end: { dimensions: { x: 0.2, y: 0.2, z: 0.2 } }\r    });\r}, 15000);\r\r// Tidy up.\rScript.scriptEnding.connect(function () {\r    Pointers.removePointer(rayPointer);\r});"
        ],
        "memberof": "Pointers",
        "longname": "Pointers.editRenderState",
        "scope": "static"
    },
    {
        "description": "Sets the render state of a pointer, to change its visual appearance and possibly disable or enable it.",
        "kind": "function",
        "name": "setRenderState",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pointer.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<p>The name of the render state to set the pointer to.</p>\r    <p>For {@link Pointers.RayPointerProperties|ray} and {@link Pointers.ParabolaPointerProperties|parabola} pointers, \r    this may be:</p>\r    <ul>\r      <li>The name of one of the render states set in the pointer's properties.</li>\r      <li><code>\"\"</code>, to hide the pointer and disable emitting of events.</li>\r    </ul>\r    <p>For {@link Pointers.StylusPointerProperties|stylus} pointers, the values may be:</p>\r    <ul>\r      <li><code>\"events on\"</code>, to render and emit events (the default).</li>\r      <li><code>\"events off\"</code>, to render but don't emit events.</li>\r      <li><code>\"disabled\"</code>, to not render and not emit events.</li>\r    </ul>",
                "name": "renderState"
            }
        ],
        "examples": [
            "<caption>Switch a ray pointer between having a path and not having a path.</caption>\rvar intersectEnd = {\r    type: \"sphere\",\r    dimensions: { x: 0.2, y: 0.2, z: 0.2 },\r    solid: true,\r    color: { red: 0, green: 255, blue: 0 },\r    ignorePickIntersection: true\r};\rvar intersectedPath = {\r    type: \"line3d\",\r    color: { red: 0, green: 255, blue: 0 },\r};\rvar searchEnd = {\r    type: \"sphere\",\r    dimensions: { x: 0.2, y: 0.2, z: 0.2 },\r    solid: true,\r    color: { red: 255, green: 0, blue: 0 },\r    ignorePickIntersection: true\r};\rvar searchPath = {\r    type: \"line3d\",\r    color: { red: 255, green: 0, blue: 0 },\r};\r\rvar renderStates = [\r    { name: \"examplePath\", path: intersectedPath, end: intersectEnd },\r    { name: \"exampleNoPath\", end: intersectEnd }\r];\rvar defaultRenderStates = [\r    { name: \"examplePath\", distance: 20.0, path: searchPath, end: searchEnd },\r    { name: \"exampleNoPath\", distance: 20.0, end: searchEnd }\r];\r\r// Create the pointer.\rvar rayPointer = Pointers.createPointer(PickType.Ray, {\r    joint: \"_CAMERA_RELATIVE_CONTROLLER_LEFTHAND\",\r    filter: Picks.PICK_LOCAL_ENTITIES | Picks.PICK_DOMAIN_ENTITIES | Picks.PICK_INCLUDE_NONCOLLIDABLE,\r    renderStates: renderStates,\r    defaultRenderStates: defaultRenderStates,\r    enabled: true\r});\rPointers.setRenderState(rayPointer, \"examplePath\");\r\r// Change states.\rScript.setTimeout(function () {\r    print(\"Without path\");\r    Pointers.setRenderState(rayPointer, \"exampleNoPath\");\r}, 10000);\r\rScript.setTimeout(function () {\r    print(\"With path\");\r    Pointers.setRenderState(rayPointer, \"examplePath\");\r}, 15000);\r\r// Tidy up.\rScript.scriptEnding.connect(function () {\r    Pointers.removePointer(rayPointer);\r});"
        ],
        "memberof": "Pointers",
        "longname": "Pointers.setRenderState",
        "scope": "static"
    },
    {
        "description": "Gets the most recent intersection of a pointer. A pointer continues to be updated ready to return a result, as long as  \rit is enabled, regardless of the render state.",
        "kind": "function",
        "name": "getPrevPickResult",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pointer.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RayPickResult",
                        "ParabolaPickResult",
                        "StylusPickResult"
                    ]
                },
                "description": "The most recent intersection of the pointer."
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.getPrevPickResult",
        "scope": "static"
    },
    {
        "description": "Sets whether or not a pointer should use precision picking, i.e., whether it should pick against precise meshes or \rcoarse meshes. This has the same effect as using the <code>PICK_PRECISE</code> or <code>PICK_COARSE</code> filter flags.",
        "kind": "function",
        "name": "setPrecisionPicking",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pointer.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to use precision picking, <code>false</code> to use coarse picking.",
                "name": "precisionPicking"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.setPrecisionPicking",
        "scope": "static"
    },
    {
        "description": "Sets the length of a pointer.\r<p><strong>Note:</strong> Not used by stylus pointers.</p>",
        "kind": "function",
        "name": "setLength",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pointer.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The desired length of the pointer.",
                "name": "length"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.setLength",
        "scope": "static"
    },
    {
        "description": "Sets a list of entity and avatar IDs that a pointer should ignore during intersection.\r<p><strong>Note:</strong> Not used by stylus pointers.</p>",
        "kind": "function",
        "name": "setIgnoreItems",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pointer.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "A list of IDs to ignore.",
                "name": "ignoreItems"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.setIgnoreItems",
        "scope": "static"
    },
    {
        "description": "Sets a list of entity and avatar IDs that a pointer should include during intersection, instead of intersecting with \reverything.  \r<p><strong>Note:</strong> Stylus pointers only intersect with items in their include list.</p>",
        "kind": "function",
        "name": "setIncludeItems",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pointer.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "A list of IDs to include.",
                "name": "includeItems"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.setIncludeItems",
        "scope": "static"
    },
    {
        "description": "Locks a pointer onto a specific entity or avatar.\r<p><strong>Note:</strong> Not used by stylus pointers.</p>",
        "kind": "function",
        "name": "setLockEndUUID",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pointer.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity or avatar to lock the pointer on to.",
                "name": "targetID"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the target is an avatar, <code>false</code> if it is an entity.",
                "name": "isAvatar"
            },
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "optional": true,
                "description": "The offset of the target point from the center of the target item. If not specified, the \r    pointer locks on to the center of the target item.",
                "name": "offset"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.setLockEndUUID",
        "scope": "static"
    },
    {
        "description": "Checks if a pointer is associated with the left hand: a ray or parabola pointer with <code>joint</code> property set to\r<code>\"_CONTROLLER_LEFTHAND\"</code> or <code>\"_CAMERA_RELATIVE_CONTROLLER_LEFTHAND\"</code>, or a stylus pointer with \r<code>hand</code> property set to <code>0</code>.",
        "kind": "function",
        "name": "isLeftHand",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pointer.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the pointer is associated with the left hand, <code>false</code> if it isn't."
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.isLeftHand",
        "scope": "static"
    },
    {
        "description": "Checks if a pointer is associated with the right hand: a ray or parabola pointer with <code>joint</code> property set to\r<code>\"_CONTROLLER_RIGHTHAND\"</code> or <code>\"_CAMERA_RELATIVE_CONTROLLER_RIGHTHAND\"</code>, or a stylus pointer with \r<code>hand</code> property set to <code>1</code>.",
        "kind": "function",
        "name": "isRightHand",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pointer.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the pointer is associated with the right hand, <code>false</code> if it isn't."
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.isRightHand",
        "scope": "static"
    },
    {
        "description": "Checks if a pointer is associated with the system mouse: a ray or parabola pointer with <code>joint</code> property set \rto <code>\"Mouse\"</code>.",
        "kind": "function",
        "name": "isMouse",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pointer.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the pointer is associated with the system mouse, <code>false</code> if it isn't."
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.isMouse",
        "scope": "static"
    },
    {
        "description": "Gets information about a pointer.",
        "kind": "function",
        "name": "getPointerProperties",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pointer.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Pointers.RayPointerProperties",
                        "Pointers.ParabolaPointerProperties",
                        "object"
                    ]
                },
                "description": "The <code>renderStates</code> and \r    <code>defaultRenderStates</code> for ray and parabola pointers, <code>{}</code> for stylus pointers."
            }
        ],
        "examples": [
            "<caption>Report the properties of a parabola pointer.</caption>\rvar intersectEnd = {\r    type: \"sphere\",\r    dimensions: { x: 0.2, y: 0.2, z: 0.2 },\r    solid: true,\r    color: { red: 0, green: 255, blue: 0 },\r    ignorePickIntersection: true\r};\rvar intersectedPath = {\r    color: { red: 0, green: 255, blue: 0 },\r};\rvar searchEnd = {\r    type: \"sphere\",\r    dimensions: { x: 0.2, y: 0.2, z: 0.2 },\r    solid: true,\r    color: { red: 255, green: 0, blue: 0 },\r    ignorePickIntersection: true\r};\rvar searchPath = {\r    color: { red: 255, green: 0, blue: 0 },\r};\r\rvar renderStates = [{ name: \"example\", path: intersectedPath, end: intersectEnd }];\rvar defaultRenderStates = [{ name: \"example\", distance: 20.0, path: searchPath, end: searchEnd }];\r\r// Create the pointer.\rvar parabolaPointer = Pointers.createPointer(PickType.Parabola, {\r    joint: \"_CAMERA_RELATIVE_CONTROLLER_LEFTHAND\",\r    filter: Picks.PICK_LOCAL_ENTITIES | Picks.PICK_DOMAIN_ENTITIES | Picks.PICK_INCLUDE_NONCOLLIDABLE,\r    renderStates: renderStates,\r    defaultRenderStates: defaultRenderStates,\r    enabled: true\r});\rPointers.setRenderState(parabolaPointer, \"example\");\r\r// Report the pointer properties.\rScript.setTimeout(function () {\r    var properties = Pointers.getPointerProperties(parabolaPointer);\r    print(\"Pointer properties:\" + JSON.stringify(properties));\r}, 500);\r\r// Tidy up.\rScript.scriptEnding.connect(function () {\r    Pointers.removePointer(parabolaPointer);\r});\r\n     "
        ],
        "memberof": "Pointers",
        "longname": "Pointers.getPointerProperties",
        "scope": "static"
    },
    {
        "description": "An intersection result for a ray pick.",
        "kind": "typedef",
        "name": "RayPickResult",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "IntersectionType"
                    ]
                },
                "description": "The intersection type.",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if there's a valid intersection, <code>false</code> if there isn't.",
                "name": "intersects"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the intersected object. <code>null</code> for HUD or invalid intersections.",
                "name": "objectID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The distance from the ray origin to the intersection point.",
                "name": "distance"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The intersection point in world coordinates.",
                "name": "intersection"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The surface normal at the intersected point. All <code>NaN</code>s if <code>type == \r    Picks.INTERSECTED_HUD</code>.",
                "name": "surfaceNormal"
            },
            {
                "type": {
                    "names": [
                        "SubmeshIntersection"
                    ]
                },
                "description": "Additional intersection details for model objects, otherwise\r    <code>{ }</code>.",
                "name": "extraInfo"
            },
            {
                "type": {
                    "names": [
                        "PickRay"
                    ]
                },
                "description": "The pick ray that was used. Valid even if there is no intersection.",
                "name": "searchRay"
            }
        ],
        "longname": "RayPickResult",
        "scope": "global"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>RayPick</code> API is a subset of the {@link Picks} API, as used for ray picks.",
        "kind": "namespace",
        "name": "RayPick",
        "deprecated": "This API is deprecated and will be removed. Use the {@link Picks} API instead.",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "FilterFlags"
                    ]
                },
                "description": "Include domain and avatar entities when intersecting. \r    <em>Read-only.</em>",
                "name": "PICK_ENTITIES"
            },
            {
                "type": {
                    "names": [
                        "FilterFlags"
                    ]
                },
                "description": "Include local entities when intersecting. <em>Read-only.</em>",
                "name": "PICK_OVERLAYS"
            },
            {
                "type": {
                    "names": [
                        "FilterFlags"
                    ]
                },
                "description": "Include avatars when intersecting. <em>Read-only.</em>",
                "name": "PICK_AVATARS"
            },
            {
                "type": {
                    "names": [
                        "FilterFlags"
                    ]
                },
                "description": "Include the HUD surface when intersecting in HMD mode. <em>Read-only.</em>",
                "name": "PICK_HUD"
            },
            {
                "type": {
                    "names": [
                        "FilterFlags"
                    ]
                },
                "description": "Pick against exact meshes. <em>Read-only.</em>",
                "name": "PICK_PRECISE"
            },
            {
                "type": {
                    "names": [
                        "FilterFlags"
                    ]
                },
                "description": "Include invisible objects when intersecting. <em>Read-only.</em>",
                "name": "PICK_INCLUDE_INVISIBLE"
            },
            {
                "type": {
                    "names": [
                        "FilterFlags"
                    ]
                },
                "description": "Include non-collidable objects when intersecting. <em>Read-only.</em>",
                "name": "PICK_INCLUDE_NONCOLLIDABLE"
            },
            {
                "type": {
                    "names": [
                        "FilterFlags"
                    ]
                },
                "description": "Return all intersections instead of just the closest. <em>Read-only.</em>",
                "name": "PICK_ALL_INTERSECTIONS"
            },
            {
                "type": {
                    "names": [
                        "IntersectionType"
                    ]
                },
                "description": "Intersected nothing with the given filter flags. <em>Read-only.</em>",
                "name": "INTERSECTED_NONE"
            },
            {
                "type": {
                    "names": [
                        "IntersectionType"
                    ]
                },
                "description": "Intersected an entity. <em>Read-only.</em>",
                "name": "INTERSECTED_ENTITY"
            },
            {
                "type": {
                    "names": [
                        "IntersectionType"
                    ]
                },
                "description": "Intersected a local entity. <em>Read-only.</em>",
                "name": "INTERSECTED_LOCAL_ENTITY"
            },
            {
                "type": {
                    "names": [
                        "IntersectionType"
                    ]
                },
                "description": "Intersected an entity (3D Overlays no longer exist). <em>Read-only.</em>",
                "name": "INTERSECTED_OVERLAY"
            },
            {
                "type": {
                    "names": [
                        "IntersectionType"
                    ]
                },
                "description": "Intersected an avatar. <em>Read-only.</em>",
                "name": "INTERSECTED_AVATAR"
            },
            {
                "type": {
                    "names": [
                        "IntersectionType"
                    ]
                },
                "description": "Intersected the HUD surface. <em>Read-only.</em>",
                "name": "INTERSECTED_HUD"
            }
        ],
        "longname": "RayPick",
        "scope": "global"
    },
    {
        "description": "Creates a new ray pick.\r<p><strong>Warning:</strong> Picks created using this method currently always intersect at least visible and collidable\rthings but this may not always be the case.</p>",
        "kind": "function",
        "name": "createRayPick",
        "params": [
            {
                "type": {
                    "names": [
                        "Picks.RayPickProperties"
                    ]
                },
                "description": "Properties of the pick.",
                "name": "properties"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pick created. <code>0</code> if invalid."
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.createRayPick",
        "scope": "static"
    },
    {
        "description": "Enables a ray pick.",
        "kind": "function",
        "name": "enableRayPick",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the ray pick.",
                "name": "id"
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.enableRayPick",
        "scope": "static"
    },
    {
        "description": "Disables a ray pick.",
        "kind": "function",
        "name": "disableRayPick",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the ray pick.",
                "name": "id"
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.disableRayPick",
        "scope": "static"
    },
    {
        "description": "Removes (deletes) a ray pick.",
        "kind": "function",
        "name": "removeRayPick",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the ray pick.",
                "name": "id"
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.removeRayPick",
        "scope": "static"
    },
    {
        "description": "Gets the most recent pick result from a ray pick. A ray pick continues to be updated ready to return a result, as long \ras it is enabled.",
        "kind": "function",
        "name": "getPrevRayPickResult",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the ray pick.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RayPickResult"
                    ]
                }
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.getPrevRayPickResult",
        "scope": "static"
    },
    {
        "description": "Sets whether or not a ray pick should use precision picking, i.e., whether it should pick against precise meshes or \rcoarse meshes.",
        "kind": "function",
        "name": "setPrecisionPicking",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the ray pick.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to use precision picking, <code>false</code> to use coarse picking.",
                "name": "precisionPicking"
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.setPrecisionPicking",
        "scope": "static"
    },
    {
        "description": "Sets a list of entity and avatar IDs that a ray pick should ignore during intersection.",
        "kind": "function",
        "name": "setIgnoreItems",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the ray pick.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "The list of IDs to ignore.",
                "name": "ignoreItems"
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.setIgnoreItems",
        "scope": "static"
    },
    {
        "description": "Sets a list of entity and avatar IDs that a ray pick should include during intersection, instead of intersecting with \reverything.",
        "kind": "function",
        "name": "setIncludeItems",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the ray pick.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "The list of IDs to include.",
                "name": "includeItems"
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.setIncludeItems",
        "scope": "static"
    },
    {
        "description": "Checks if a pick is associated with the left hand: a ray or parabola pick with <code>joint</code> property set to\r<code>\"_CONTROLLER_LEFTHAND\"</code> or <code>\"_CAMERA_RELATIVE_CONTROLLER_LEFTHAND\"</code>, or a stylus pick with \r<code>hand</code> property set to <code>0</code>.",
        "kind": "function",
        "name": "isLeftHand",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the ray pick.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the pick is associated with the left hand, <code>false</code> if it isn't."
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.isLeftHand",
        "scope": "static"
    },
    {
        "description": "Checks if a pick is associated with the right hand: a ray or parabola pick with <code>joint</code> property set to\r<code>\"_CONTROLLER_RIGHTHAND\"</code> or <code>\"_CAMERA_RELATIVE_CONTROLLER_RIGHTHAND\"</code>, or a stylus pick with \r<code>hand</code> property set to <code>1</code>.",
        "kind": "function",
        "name": "isRightHand",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the ray pick.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the pick is associated with the right hand, <code>false</code> if it isn't."
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.isRightHand",
        "scope": "static"
    },
    {
        "description": "Checks if a pick is associated with the system mouse: a ray or parabola pick with <code>joint</code> property set to \r<code>\"Mouse\"</code>.",
        "kind": "function",
        "name": "isMouse",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the ray pick.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the pick is associated with the system mouse, <code>false</code> if it isn't."
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.isMouse",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_ENTITIES",
        "deprecated": "This function is deprecated and will be removed. Use the <code>Raypick.PICK_ENTITIES</code> property instead.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.PICK_ENTITIES",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_OVERLAYS",
        "deprecated": "This function is deprecated and will be removed. Use the <code>RayPick.PICK_OVERLAYS</code> property instead.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.PICK_OVERLAYS",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_AVATARS",
        "deprecated": "This function is deprecated and will be removed. Use the <code>RayPick.PICK_AVATARS</code> property instead.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.PICK_AVATARS",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_HUD",
        "deprecated": "This function is deprecated and will be removed. Use the <code>RayPick.PICK_HUD</code> property instead.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.PICK_HUD",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_COARSE",
        "deprecated": "This function is deprecated and will be removed. Use the <code>RayPick.PICK_COARSE</code> property instead.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.PICK_COARSE",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_INCLUDE_INVISIBLE",
        "deprecated": "This function is deprecated and will be removed. Use the <code>RayPick.PICK_INCLUDE_INVISIBLE</code> \r    property instead.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.PICK_INCLUDE_INVISIBLE",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_INCLUDE_NONCOLLIDABLE",
        "deprecated": "This function is deprecated and will be removed. Use the <code>RayPick.PICK_INCLUDE_NONCOLLIDABLE</code> \r    property instead.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.PICK_INCLUDE_NONCOLLIDABLE",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_ALL_INTERSECTIONS",
        "deprecated": "This function is deprecated and will be removed. Use the <code>RayPick.PICK_ALL_INTERSECTIONS</code> \r    property instead.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.PICK_ALL_INTERSECTIONS",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "INTERSECTED_NONE",
        "deprecated": "This function is deprecated and will be removed. Use the <code>RayPick.INTERSECTED_NONE</code> property \r    instead.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.INTERSECTED_NONE",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "INTERSECTED_ENTITY",
        "deprecated": "This function is deprecated and will be removed. Use the <code>RayPick.INTERSECTED_ENTITY</code> property \r    instead.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.INTERSECTED_ENTITY",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "INTERSECTED_OVERLAY",
        "deprecated": "This function is deprecated and will be removed. Use the <code>RayPick.INTERSECTED_LOCAL_ENTITY</code> \r    property instead.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.INTERSECTED_OVERLAY",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "INTERSECTED_OVERLAY",
        "deprecated": "This function is deprecated and will be removed. Use the <code>RayPick.INTERSECTED_OVERLAY</code> property \r    instead.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.INTERSECTED_OVERLAY",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "INTERSECTED_AVATAR",
        "deprecated": "This function is deprecated and will be removed. Use the <code>RayPick.INTERSECTED_AVATAR</code> property \r    instead.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.INTERSECTED_AVATAR",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "INTERSECTED_HUD",
        "deprecated": "This function is deprecated and will be removed. Use the <code>RayPick.INTERSECTED_HUD</code> property \r    instead.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.INTERSECTED_HUD",
        "scope": "static"
    },
    {
        "description": "An intersection result for a stylus pick.",
        "kind": "typedef",
        "name": "StylusPickResult",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The intersection type.",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if there's a valid intersection, <code>false</code> if there isn't.",
                "name": "intersects"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the intersected object. <code>null</code> for invalid intersections.",
                "name": "objectID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The distance to the intersection point from the stylus tip.",
                "name": "distance"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The intersection point in world coordinates.",
                "name": "intersection"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The surface normal at the intersected point.",
                "name": "surfaceNormal"
            },
            {
                "type": {
                    "names": [
                        "StylusTip"
                    ]
                },
                "description": "The stylus tip at the time of the result. Valid even if there is no intersection.",
                "name": "stylusTip"
            }
        ],
        "longname": "StylusPickResult",
        "scope": "global"
    },
    {
        "description": "Information on the assets currently being downloaded and pending download.",
        "kind": "typedef",
        "name": "DownloadInfoResult",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Array.<number>"
                    ]
                },
                "description": "The download percentage remaining of each asset currently downloading.",
                "name": "downloading"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The number of assets pending download.",
                "name": "pending"
            }
        ],
        "memberof": "AccountServices",
        "longname": "AccountServices.DownloadInfoResult",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>AccountServices</code> API provides functions that give information on user connectivity, visibility, and \rasset download progress.",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "kind": "namespace",
        "name": "AccountServices",
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The user name of the user logged in. If there is no user logged in, it is\r    <code>\"Unknown user\"</code>. <em>Read-only.</em>",
                "name": "username"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the user is logged in, otherwise <code>false</code>. \r    <em>Read-only.</em>",
                "name": "loggedIn"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The user's visibility to other users:\r    <ul>\r        <li><code>\"none\"</code> &mdash; user appears offline.</li>\r        <li><code>\"friends\"</code> &mdash; user is visible only to friends.</li>\r        <li><code>\"connections\"</code> &mdash; user is visible to friends and connections.</li>\r        <li><code>\"all\"</code> &mdash; user is visible to everyone.</li>\r    </ul>",
                "name": "findableBy"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The metaverse server that the user is authenticated against when logged in\r    &mdash; typically <code>\"https://metaverse.highfidelity.com\"</code>. <em>Read-only.</em>",
                "name": "metaverseServerURL"
            }
        ],
        "longname": "AccountServices",
        "scope": "global"
    },
    {
        "description": "Gets information on the download progress of assets in the domain.",
        "kind": "function",
        "name": "getDownloadInfo",
        "returns": [
            {
                "type": {
                    "names": [
                        "AccountServices.DownloadInfoResult"
                    ]
                },
                "description": "Information on the download progress of assets."
            }
        ],
        "memberof": "AccountServices",
        "longname": "AccountServices.getDownloadInfo",
        "scope": "static"
    },
    {
        "description": "Triggers a {@link AccountServices.downloadInfoChanged|downloadInfoChanged} signal with information on the current \rdownload progress of the assets in the domain.",
        "kind": "function",
        "name": "updateDownloadInfo",
        "memberof": "AccountServices",
        "longname": "AccountServices.updateDownloadInfo",
        "scope": "static"
    },
    {
        "description": "Checks whether the user is logged in.",
        "kind": "function",
        "name": "isLoggedIn",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the user is logged in, <code>false</code> if not."
            }
        ],
        "examples": [
            "<caption>Report whether you are logged in.</caption>\rvar isLoggedIn = AccountServices.isLoggedIn();\rprint(\"You are logged in: \" + isLoggedIn);  // true or false"
        ],
        "memberof": "AccountServices",
        "longname": "AccountServices.isLoggedIn",
        "scope": "static"
    },
    {
        "description": "The function returns the login status of the user and prompts the user to log in (with a login dialog) if they're not already logged in.",
        "kind": "function",
        "name": "checkAndSignalForAccessToken",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the user is logged in, <code>false</code> if not."
            }
        ],
        "memberof": "AccountServices",
        "longname": "AccountServices.checkAndSignalForAccessToken",
        "scope": "static"
    },
    {
        "description": "Logs the user out.",
        "kind": "function",
        "name": "logOut",
        "memberof": "AccountServices",
        "longname": "AccountServices.logOut",
        "scope": "static"
    },
    {
        "description": "Not currently used.",
        "kind": "signal",
        "name": "connected",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AccountServices",
        "longname": "AccountServices.connected",
        "scope": "static"
    },
    {
        "description": "Triggered when the user logs out.",
        "kind": "signal",
        "name": "disconnected",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Has the value, <code>\"logout\"</code>.",
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AccountServices",
        "longname": "AccountServices.disconnected",
        "scope": "static"
    },
    {
        "description": "Triggered when the username logged in with changes, i.e., when the user logs in or out.",
        "kind": "signal",
        "name": "myUsernameChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The user name of the user logged in. If there is no user logged in, it is <code>\"\"</code>.",
                "name": "username"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when your username changes.</caption>\rAccountServices.myUsernameChanged.connect(function (username) {\r    print(\"Username changed: \" + username);\r});"
        ],
        "memberof": "AccountServices",
        "longname": "AccountServices.myUsernameChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the download progress of the assets in the domain changes.",
        "kind": "signal",
        "name": "downloadInfoChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "AccountServices.DownloadInfoResult"
                    ]
                },
                "description": "Information on the download progress of assets.",
                "name": "downloadInfo"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AccountServices",
        "longname": "AccountServices.downloadInfoChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the user's visibility to others changes.",
        "kind": "signal",
        "name": "findableByChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The user's visibility to other people:\r    <ul>\r        <li><code>\"none\"</code> &mdash; user appears offline.</li>\r        <li><code>\"friends\"</code> &mdash; user is visible only to friends.</li>\r        <li><code>\"connections\"</code> &mdash; user is visible to friends and connections.</li>\r        <li><code>\"all\"</code> &mdash; user is visible to everyone.</li>\r    </ul>",
                "name": "findableBy"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when your visiblity changes.</caption>\rAccountServices.findableByChanged.connect(function (findableBy) {\r    print(\"Findable by changed: \" + findableBy);\r});\r\rvar originalFindableBy = AccountServices.findableBy;\rScript.setTimeout(function () {\r    // Change visiblity.\r    AccountServices.findableBy = originalFindableBy === \"none\" ? \"all\" : \"none\";\r}, 2000);\rScript.setTimeout(function () {\r    // Restore original visibility.\r    AccountServices.findableBy = originalFindableBy;\r}, 4000);"
        ],
        "memberof": "AccountServices",
        "longname": "AccountServices.findableByChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the login status of the user changes.",
        "kind": "signal",
        "name": "loggedInChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the user is logged in, <code>false</code> if not.",
                "name": "loggedIn"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when your login status changes.</caption>\rAccountServices.loggedInChanged.connect(function(loggedIn) {\r    print(\"Logged in: \" + loggedIn);\r});\r\n     "
        ],
        "memberof": "AccountServices",
        "longname": "AccountServices.loggedInChanged",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>The <code>Audio</code> API provides facilities to interact with audio inputs and outputs and to play sounds.",
        "kind": "namespace",
        "name": "Audio",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the audio input is muted for the current user context (desktop or HMD), \r    otherwise <code>false</code>.",
                "name": "muted"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if desktop audio input is muted, otherwise <code>false</code>.",
                "name": "mutedDesktop"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the HMD input is muted, otherwise <code>false</code>.",
                "name": "mutedHMD"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the \"muted\" warning is enabled, otherwise <code>false</code>.\r    When enabled, if you speak while your microphone is muted, \"muted\" is displayed on the screen as a warning.",
                "name": "warnWhenMuted"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if noise reduction is enabled, otherwise <code>false</code>. When\r    enabled, the input audio signal is blocked (fully attenuated) when it falls below an adaptive threshold set just\r    above the noise floor.",
                "name": "noiseReduction"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Adjusts the volume of the input audio, range <code>0.0</code> &ndash; <code>1.0</code>. \r    If set to a value, the resulting value depends on the input device: for example, the volume can't be changed on some \r    devices, and others might only support values of <code>0.0</code> and <code>1.0</code>.",
                "name": "inputVolume"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The loudness of the audio input, range <code>0.0</code> (no sound) &ndash;\r    <code>1.0</code> (the onset of clipping). <em>Read-only.</em>",
                "name": "inputLevel"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the audio input is clipping, otherwise <code>false</code>.",
                "name": "clipping"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The current context of the audio: either <code>\"Desktop\"</code> or <code>\"HMD\"</code>.\r    <em>Read-only.</em>",
                "name": "context"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "<em>Read-only.</em>\r    <p class=\"important\">Deprecated: This property is deprecated and will be removed.",
                "name": "devices"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if push-to-talk is enabled for the current user context (desktop or \r    HMD), otherwise <code>false</code>.",
                "name": "pushToTalk"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if desktop push-to-talk is enabled, otherwise \r    <code>false</code>.",
                "name": "pushToTalkDesktop"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if HMD push-to-talk is enabled, otherwise <code>false</code>.",
                "name": "pushToTalkHMD"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the user is currently pushing-to-talk, otherwise \r    <code>false</code>.",
                "name": "pushingToTalk"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The gain (relative volume in dB) that avatars' voices are played at. This gain is used \r    at the server.",
                "name": "avatarGain"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The gain (relative volume in dB) that local injectors (local environment sounds) \r   are played at.",
                "name": "localInjectorGain"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The gain (relative volume in dB) that server injectors (server environment \r    sounds) are played at. This gain is used at the server.",
                "name": "serverInjectorGain"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The gain (relative volume in dB) that system sounds are played at.",
                "name": "systemInjectorGain"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The gain (relative volume in dB) that all sounds are played at when \r    the user is holding the push-to-talk key in desktop mode.",
                "name": "pushingToTalkOutputGainDesktop"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if acoustic echo cancellation is enabled, otherwise\r    <code>false</code>. When enabled, sound from the audio output is suppressed when it echos back to the input audio \r    signal.",
                "name": "acousticEchoCancellation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the input audio is being used in stereo, otherwise\r    <code>false</code>. Some devices do not support stereo, in which case the value is always <code>false</code>.",
                "name": "isStereoInput"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if currently audio soloing, i.e., playing audio from only specific \r    avatars. <em>Read-only.</em>",
                "name": "isSoloing"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "The list of currently soloed avatar IDs. Empty list if not currently audio soloing. \r    <em>Read-only.</em>",
                "name": "soloList"
            }
        ],
        "tags": [
            {
                "originalTitle": "comment",
                "title": "comment",
                "text": "The following properties are from AudioScriptingInterface.h.",
                "value": "The following properties are from AudioScriptingInterface.h."
            }
        ],
        "longname": "Audio",
        "scope": "global"
    },
    {
        "kind": "function",
        "name": "setInputDevice",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Device.",
                "name": "device"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Is HMD.",
                "name": "isHMD"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Audio",
        "longname": "Audio.setInputDevice",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setOutputDevice",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Device.",
                "name": "device"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Is HMD.",
                "name": "isHMD"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Audio",
        "longname": "Audio.setOutputDevice",
        "scope": "static"
    },
    {
        "description": "Enables or disables reverberation. Reverberation is done by the client on the post-mix audio. The reverberation options\rcome from either the domain's audio zone configured on the server or settings scripted by\r{@link Audio.setReverbOptions|setReverbOptions}.",
        "kind": "function",
        "name": "setReverb",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to enable reverberation, <code>false</code> to disable.",
                "name": "enable"
            }
        ],
        "examples": [
            "<caption>Enable reverberation for a short while.</caption>\rvar sound = SoundCache.getSound(Script.resourcesPath() + \"sounds/sample.wav\");\rvar injector;\rvar injectorOptions = {\r    position: MyAvatar.position\r};\r\rScript.setTimeout(function () {\r    print(\"Reverb OFF\");\r    Audio.setReverb(false);\r    injector = Audio.playSound(sound, injectorOptions);\r}, 1000);\r\rScript.setTimeout(function () {\r    var reverbOptions = new AudioEffectOptions();\r    reverbOptions.roomSize = 100;\r    Audio.setReverbOptions(reverbOptions);\r    print(\"Reverb ON\");\r    Audio.setReverb(true);\r}, 4000);\r\rScript.setTimeout(function () {\r    print(\"Reverb OFF\");\r    Audio.setReverb(false);\r}, 8000);"
        ],
        "memberof": "Audio",
        "longname": "Audio.setReverb",
        "scope": "static"
    },
    {
        "description": "Configures reverberation options. Use {@link Audio.setReverb|setReverb} to enable or disable reverberation.",
        "kind": "function",
        "name": "setReverbOptions",
        "params": [
            {
                "type": {
                    "names": [
                        "AudioEffectOptions"
                    ]
                },
                "description": "The reverberation options.",
                "name": "options"
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.setReverbOptions",
        "scope": "static"
    },
    {
        "description": "Sets the gain (relative volume) that avatars' voices are played at. This gain is used at the server.",
        "kind": "function",
        "name": "setAvatarGain",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The avatar gain (dB) at the server.",
                "name": "gain"
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.setAvatarGain",
        "scope": "static"
    },
    {
        "description": "Gets the gain (relative volume) that avatars' voices are played at. This gain is used at the server.",
        "kind": "function",
        "name": "getAvatarGain",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The avatar gain (dB) at the server."
            }
        ],
        "examples": [
            "<caption>Report current audio gain settings.</caption>\r// 0 value = normal volume; -ve value = quieter; +ve value = louder.\rprint(\"Avatar gain: \" + Audio.getAvatarGain());\rprint(\"Environment server gain: \" + Audio.getInjectorGain());\rprint(\"Environment local gain: \" + Audio.getLocalInjectorGain());\rprint(\"System gain: \" + Audio.getSystemInjectorGain());"
        ],
        "memberof": "Audio",
        "longname": "Audio.getAvatarGain",
        "scope": "static"
    },
    {
        "description": "Sets the gain (relative volume) that environment sounds from the server are played at.",
        "kind": "function",
        "name": "setInjectorGain",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The injector gain (dB) at the server.",
                "name": "gain"
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.setInjectorGain",
        "scope": "static"
    },
    {
        "description": "Gets the gain (relative volume) that environment sounds from the server are played at.",
        "kind": "function",
        "name": "getInjectorGain",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The injector gain (dB) at the server."
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.getInjectorGain",
        "scope": "static"
    },
    {
        "description": "Sets the gain (relative volume) that environment sounds from the client are played at.",
        "kind": "function",
        "name": "setLocalInjectorGain",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The injector gain (dB) in the client.",
                "name": "gain"
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.setLocalInjectorGain",
        "scope": "static"
    },
    {
        "description": "Gets the gain (relative volume) that environment sounds from the client are played at.",
        "kind": "function",
        "name": "getLocalInjectorGain",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The injector gain (dB) in the client."
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.getLocalInjectorGain",
        "scope": "static"
    },
    {
        "description": "Sets the gain (relative volume) that system sounds are played at.",
        "kind": "function",
        "name": "setSystemInjectorGain",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The injector gain (dB) in the client.",
                "name": "gain"
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.setSystemInjectorGain",
        "scope": "static"
    },
    {
        "description": "Gets the gain (relative volume) that system sounds are played at.",
        "kind": "function",
        "name": "getSystemInjectorGain",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The injector gain (dB) in the client."
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.getSystemInjectorGain",
        "scope": "static"
    },
    {
        "description": "Starts making an audio recording of the audio being played in-world (i.e., not local-only audio) to a file in WAV format.",
        "kind": "function",
        "name": "startRecording",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the file to make the recording in. Should have a <code>.wav</code>\r    extension. The file is overwritten if it already exists.",
                "name": "filename"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the specified file could be opened and audio recording has started, otherwise\r    <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Make a 10 second audio recording.</caption>\rvar filename = File.getTempDir() + \"/audio.wav\";\rif (Audio.startRecording(filename)) {\r    Script.setTimeout(function () {\r        Audio.stopRecording();\r        print(\"Audio recording made in: \" + filename);\r    }, 10000);\r\r} else {\r    print(\"Could not make an audio recording in: \" + filename);\r}"
        ],
        "memberof": "Audio",
        "longname": "Audio.startRecording",
        "scope": "static"
    },
    {
        "description": "Finishes making an audio recording started with {@link Audio.startRecording|startRecording}.",
        "kind": "function",
        "name": "stopRecording",
        "memberof": "Audio",
        "longname": "Audio.stopRecording",
        "scope": "static"
    },
    {
        "description": "Checks whether an audio recording is currently being made.",
        "kind": "function",
        "name": "getRecording",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if an audio recording is currently being made, otherwise <code>false</code>."
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.getRecording",
        "scope": "static"
    },
    {
        "description": "Sets the output volume gain that will be used when the user is holding the push-to-talk key.\rShould be negative.",
        "kind": "function",
        "name": "setPushingToTalkOutputGainDesktop",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The output volume gain (dB) while using push-to-talk.",
                "name": "gain"
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.setPushingToTalkOutputGainDesktop",
        "scope": "static"
    },
    {
        "description": "Gets the output volume gain that is used when the user is holding the push-to-talk key.\rShould be negative.",
        "kind": "function",
        "name": "getPushingToTalkOutputGainDesktop",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "gain - The output volume gain (dB) while using push-to-talk."
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.getPushingToTalkOutputGainDesktop",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "nop",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "deprecated": "This signal is deprecated and will be removed.",
        "memberof": "Audio",
        "longname": "Audio.nop",
        "scope": "static"
    },
    {
        "description": "Triggered when the audio input is muted or unmuted for the current context (desktop or HMD).",
        "kind": "signal",
        "name": "mutedChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the audio input is muted for the current context (desktop or HMD), \r    otherwise <code>false</code>.",
                "name": "isMuted"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when audio input is muted or unmuted</caption>\rAudio.mutedChanged.connect(function (isMuted) {\r    print(\"Audio muted: \" + isMuted);\r});"
        ],
        "memberof": "Audio",
        "longname": "Audio.mutedChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when desktop audio input is muted or unmuted.",
        "kind": "signal",
        "name": "mutedDesektopChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if desktop audio input is muted, otherwise <code>false</code>.",
                "name": "isMuted"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when desktop muting changes.</caption>\rAudio.mutedDesktopChanged.connect(function (isMuted) {\r    print(\"Desktop muted: \" + isMuted);\r});"
        ],
        "memberof": "Audio",
        "longname": "Audio.mutedDesektopChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when HMD audio input is muted or unmuted.",
        "kind": "signal",
        "name": "mutedHMDChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if HMD audio input is muted, otherwise <code>false</code>.",
                "name": "isMuted"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.mutedHMDChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when push-to-talk is enabled or disabled for the current context (desktop or HMD).",
        "kind": "signal",
        "name": "pushToTalkChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if push-to-talk is enabled, otherwise <code>false</code>.",
                "name": "enabled"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when push-to-talk changes.</caption>\rAudio.pushToTalkChanged.connect(function (enabled) {\r    print(\"Push to talk: \" + (enabled ? \"on\" : \"off\"));\r});"
        ],
        "memberof": "Audio",
        "longname": "Audio.pushToTalkChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when push-to-talk is enabled or disabled for desktop mode.",
        "kind": "signal",
        "name": "pushToTalkDesktopChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if push-to-talk is enabled for desktop mode, otherwise <code>false</code>.",
                "name": "enabled"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.pushToTalkDesktopChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when push-to-talk is enabled or disabled for HMD mode.",
        "kind": "signal",
        "name": "pushToTalkHMDChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if push-to-talk is enabled for HMD mode, otherwise <code>false</code>.",
                "name": "enabled"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.pushToTalkHMDChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when audio input noise reduction is enabled or disabled.",
        "kind": "signal",
        "name": "noiseReductionChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if audio input noise reduction is enabled, otherwise <code>false</code>.",
                "name": "isEnabled"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.noiseReductionChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when \"warn when muted\" is enabled or disabled.",
        "kind": "signal",
        "name": "warnWhenMutedChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if \"warn when muted\" is enabled, otherwise <code>false</code>.",
                "name": "isEnabled"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.warnWhenMutedChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when acoustic echo cancellation is enabled or disabled.",
        "kind": "signal",
        "name": "acousticEchoCancellationChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if acoustic echo cancellation is enabled, otherwise <code>false</code>.",
                "name": "isEnabled"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.acousticEchoCancellationChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the input audio volume changes.",
        "kind": "signal",
        "name": "inputVolumeChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The requested volume to be applied to the audio input, range <code>0.0</code> &ndash;\r    <code>1.0</code>. The resulting value of <code>Audio.inputVolume</code> depends on the capabilities of the device.\r    For example, the volume can't be changed on some devices, while others might only support values of <code>0.0</code>\r    and <code>1.0</code>.",
                "name": "volume"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.inputVolumeChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the input audio level changes.",
        "kind": "signal",
        "name": "inputLevelChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The loudness of the input audio, range <code>0.0</code> (no sound) &ndash; <code>1.0</code> (the\r    onset of clipping).",
                "name": "level"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.inputLevelChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the clipping state of the input audio changes.",
        "kind": "signal",
        "name": "clippingChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the audio input is clipping, otherwise <code>false</code>.",
                "name": "isClipping"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.clippingChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the current context of the audio changes.",
        "kind": "signal",
        "name": "contextChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The current context of the audio: either <code>\"Desktop\"</code> or <code>\"HMD\"</code>.",
                "name": "context"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.contextChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the user starts or stops push-to-talk.",
        "kind": "signal",
        "name": "pushingToTalkChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if started push-to-talk, <code>false</code> if stopped push-to-talk.",
                "name": "talking"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.pushingToTalkChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the avatar gain changes.",
        "kind": "signal",
        "name": "avatarGainChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The new avatar gain value (dB).",
                "name": "gain"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.avatarGainChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the local injector gain changes.",
        "kind": "signal",
        "name": "localInjectorGainChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The new local injector gain value (dB).",
                "name": "gain"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.localInjectorGainChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the server injector gain changes.",
        "kind": "signal",
        "name": "serverInjectorGainChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The new server injector gain value (dB).",
                "name": "gain"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.serverInjectorGainChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the system injector gain changes.",
        "kind": "signal",
        "name": "systemInjectorGainChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The new system injector gain value (dB).",
                "name": "gain"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.systemInjectorGainChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the push to talk gain changes.",
        "kind": "signal",
        "name": "pushingToTalkOutputGainDesktopChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The new output gain value (dB).",
                "name": "gain"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.pushingToTalkOutputGainDesktopChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "onContextChanged",
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Audio",
        "longname": "Audio.onContextChanged",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Clipboard</code> API enables you to export and import entities to and from JSON files.",
        "kind": "namespace",
        "name": "Clipboard",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "longname": "Clipboard",
        "scope": "global"
    },
    {
        "description": "Gets the extents of the entities held in the clipboard.",
        "kind": "function",
        "name": "getContentsDimensions",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The extents of the content held in the clipboard."
            }
        ],
        "examples": [
            "<caption>Import entities to the clipboard and report their overall dimensions.</caption>\rvar filename = Window.browse(\"Import entities to clipboard\", \"\", \"*.json\");\rif (filename) {\r    if (Clipboard.importEntities(filename)) {\r        print(\"Clipboard dimensions: \" + JSON.stringify(Clipboard.getContentsDimensions()));\r    }\r}"
        ],
        "memberof": "Clipboard",
        "longname": "Clipboard.getContentsDimensions",
        "scope": "static"
    },
    {
        "description": "Gets the largest dimension of the extents of the entities held in the clipboard.",
        "kind": "function",
        "name": "getClipboardContentsLargestDimension",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The largest dimension of the extents of the content held in the clipboard."
            }
        ],
        "memberof": "Clipboard",
        "longname": "Clipboard.getClipboardContentsLargestDimension",
        "scope": "static"
    },
    {
        "description": "Imports entities from a JSON file into the clipboard.",
        "kind": "function",
        "name": "importEntities",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the JSON file to import.",
                "name": "filename"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "<code>true</code> if the {@link ResourceRequestObserver} can observe this \r    request, <code>false</code> if it can't.",
                "name": "isObservable"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "description": "An integer ID that is passed through to the {@link ResourceRequestObserver}.",
                "name": "callerID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the import was successful, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Import entities and paste into the domain.</caption>\rvar filename = Window.browse(\"Import entities to clipboard\", \"\", \"*.json\");\rif (filename) {\r    if (Clipboard.importEntities(filename)) {\r        pastedEntities = Clipboard.pasteEntities(Vec3.sum(MyAvatar.position,\r            Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })));\r        print(\"Entities pasted: \" + JSON.stringify(pastedEntities));\r    }\r}"
        ],
        "memberof": "Clipboard",
        "longname": "Clipboard.importEntities",
        "scope": "static"
    },
    {
        "description": "Exports specified entities to a JSON file.",
        "kind": "function",
        "name": "exportEntities",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Path and name of the file to export the entities to. Should have the extension \".json\".",
                "name": "filename"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "The IDs of the entities to export.",
                "name": "entityIDs"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if entities were found and the file was written, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Create and export a cube and a sphere.</caption>\r// Create entities.\rvar box = Entities.addEntity({\r    type: \"Box\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: -0.2, y: 0, z: -3 })),\r    lifetime: 300 // Delete after 5 minutes.\r});\rvar sphere = Entities.addEntity({\r    type: \"Sphere\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0.2, y: 0, z: -3 })),\r    lifetime: 300 // Delete after 5 minutes.\r});\r\r// Export entities.\rvar filename = Window.save(\"Export entities to JSON file\", Paths.resources, \"*.json\");\rif (filename) {\r    Clipboard.exportEntities(filename, [box, sphere]);\r}"
        ],
        "memberof": "Clipboard",
        "longname": "Clipboard.exportEntities",
        "scope": "static"
    },
    {
        "description": "Exports all entities that have centers within a cube to a JSON file.",
        "kind": "function",
        "name": "exportEntities",
        "variation": "0",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Path and name of the file to export the entities to. Should have the extension \".json\".",
                "name": "filename"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "X-coordinate of the cube center.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Y-coordinate of the cube center.",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Z-coordinate of the cube center.",
                "name": "z"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Half dimension of the cube.",
                "name": "scale"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if entities were found and the file was written, otherwise <code>false</code>."
            }
        ],
        "memberof": "Clipboard",
        "longname": "Clipboard.exportEntities(0)",
        "scope": "static"
    },
    {
        "description": "Pastes the contents of the clipboard into the domain.",
        "kind": "function",
        "name": "pasteEntities",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position to paste the clipboard contents at.",
                "name": "position"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "The IDs of the new entities that were created as a result of the paste operation. If entities couldn't \r    be created then an empty array is returned."
            }
        ],
        "memberof": "Clipboard",
        "longname": "Clipboard.pasteEntities",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Controller</code> API provides facilities to interact with computer and controller hardware.\r\r<h3>Facilities</h3>\r\r<h4>Properties</h4>\r<p>Get <code>Controller</code> property trees.</p>\r<ul>\r  <li>{@link Controller.getActions|getActions}</li>\r  <li>{@link Controller.getHardware|getHardware}</li>\r  <li>{@link Controller.getStandard|getStandard}</li>\r</ul>\r\r<h4>Mappings</h4>\r<p>Create and enable or disable <code>Controller</code> mappings.</p>\r<ul>\r  <li>{@link Controller.disableMapping|disableMapping}</li>\r  <li>{@link Controller.enableMapping|enableMapping}</li>\r  <li>{@link Controller.loadMapping|loadMapping}</li>\r  <li>{@link Controller.newMapping|newMapping}</li>\r  <li>{@link Controller.parseMapping|parseMapping}</li>\r</ul>\r\r<h4>Input, Hardware, and Action Reflection</h4>\r<p>Information on the devices and actions available.</p>\r<ul>\r  <li>{@link Controller.findAction|findAction}</li>\r  <li>{@link Controller.findDevice|findDevice}</li>\r  <li>{@link Controller.getActionNames|getActionNames}</li>\r  <li>{@link Controller.getAllActions|getAllActions}</li>\r  <li>{@link Controller.getAvailableInputs|getAvailableInputs}</li>\r  <li>{@link Controller.getDeviceName|getDeviceName}</li>\r  <li>{@link Controller.getDeviceNames|getDeviceNames}</li>\r  <li>{@link Controller.getRunningInputDevices|getRunningInputDevices}</li>\r</ul>\r\r<h4>Input, Hardware, and Action Signals</h4>\r<p>Notifications of device and action events.</p>\r<ul>\r  <li>{@link Controller.actionEvent|actionEvent}</li>\r  <li>{@link Controller.hardwareChanged|hardwareChanged}</li>\r  <li>{@link Controller.inputDeviceRunningChanged|inputDeviceRunningChanged}</li>\r  <li>{@link Controller.inputEvent|inputEvent}</li>\r</ul>\r\r<h4>Mouse, Keyboard, and Touch Signals</h4>\r<p>Notifications of mouse, keyboard, and touch events.</p>\r<ul>\r  <li>{@link Controller.keyPressEvent|keyPressEvent}</li>\r  <li>{@link Controller.keyReleaseEvent|keyReleaseEvent}</li>\r  <li>{@link Controller.mouseDoublePressEvent|mouseDoublePressEvent}</li>\r  <li>{@link Controller.mouseMoveEvent|mouseMoveEvent}</li>\r  <li>{@link Controller.mousePressEvent|mousePressEvent}</li>\r  <li>{@link Controller.mouseReleaseEvent|mouseReleaseEvent}</li>\r  <li>{@link Controller.touchBeginEvent|touchBeginEvent}</li>\r  <li>{@link Controller.touchEndEvent|touchEndEvent}</li>\r  <li>{@link Controller.touchUpdateEvent|touchUpdateEvent}</li>\r  <li>{@link Controller.wheelEvent|wheelEvent}</li>\r</ul>\r\r<h4>Control Capturing</h4>\r<p>Disable and enable the processing of mouse and touch events.</p>\r<ul>\r  <li>{@link Controller.captureMouseEvents|captureMouseEvents}</li>\r  <li>{@link Controller.captureWheelEvents|captureWheelEvents}</li>\r  <li>{@link Controller.captureTouchEvents|captureTouchEvents}</li>\r  <li>{@link Controller.releaseMouseEvents|releaseMouseEvents}</li>\r  <li>{@link Controller.releaseWheelEvents|releaseWheelEvents}</li>\r  <li>{@link Controller.releaseTouchEvents|releaseTouchEvents}</li>\r</ul>\r\r<h4>Action Capturing</h4>\r<p>Disable and enable controller actions.</p>\r<ul>\r  <li>{@link Controller.captureActionEvents|captureActionEvents}</li>\r  <li>{@link Controller.captureKeyEvents|captureKeyEvents}</li>\r  <li>{@link Controller.captureJoystick|captureJoystick}</li>\r  <li>{@link Controller.captureEntityClickEvents|captureEntityClickEvents}</li>\r  <li>{@link Controller.releaseActionEvents|releaseActionEvents}</li>\r  <li>{@link Controller.releaseKeyEvents|releaseKeyEvents}</li>\r  <li>{@link Controller.releaseJoystick|releaseJoystick}</li>\r  <li>{@link Controller.releaseEntityClickEvents|releaseEntityClickEvents}</li>\r</ul>\r\r<h4>Controller and Action Values</h4>\r<p>Get the current value of controller outputs and actions.</p>\r<ul>\r  <li>{@link Controller.getValue|getValue}</li>\r  <li>{@link Controller.getAxisValue|getAxisValue}</li>\r  <li>{@link Controller.getPoseValue|getPoseValue}</li>\r  <li>{@link Controller.getActionValue|getActionValue}</li>\r</ul>\r\r<h4>Haptics</h4>\r<p>Trigger haptic pulses.</p>\r<ul>\r  <li>{@link Controller.triggerHapticPulse|triggerHapticPulse}</li>\r  <li>{@link Controller.triggerHapticPulseOnDevice|triggerHapticPulseOnDevice}</li>\r  <li>{@link Controller.triggerShortHapticPulse|triggerShortHapticPulse}</li>\r  <li>{@link Controller.triggerShortHapticPulseOnDevice|triggerShortHapticPulseOnDevice}</li>\r</ul>\r\r<h4>Display Information</h4>\r<p>Get information on the display.</p>\r<ul>\r  <li>{@link Controller.getViewportDimensions|getViewportDimensions}</li>\r  <li>{@link Controller.getRecommendedHUDRect|getRecommendedHUDRect}</li>\r</ul>\r\r<h4>Virtual Game Pad</h4>\r<p>Use the virtual game pad which is available on some devices.</p>\r<ul>\r  <li>{@link Controller.setVPadEnabled|setVPadEnabled}</li>\r  <li>{@link Controller.setVPadHidden|setVPadHidden}</li>\r  <li>{@link Controller.setVPadExtraBottomMargin|setVPadExtraBottomMargin}</li>\r</ul>\r\r<h4>Input Recordings</h4>\r<p>Create and play input recordings.</p>\r<ul>\r  <li>{@link Controller.startInputRecording|startInputRecording}</li>\r  <li>{@link Controller.stopInputRecording|stopInputRecording}</li>\r  <li>{@link Controller.saveInputRecording|saveInputRecording}</li>\r  <li>{@link Controller.getInputRecorderSaveDirectory|getInputRecorderSaveDirectory}</li>\r  <li>{@link Controller.loadInputRecording|loadInputRecording}</li>\r  <li>{@link Controller.startInputPlayback|startInputPlayback}</li>\r  <li>{@link Controller.stopInputPlayback|stopInputPlayback}</li>\r</ul>\r\r<h3>Entity Methods</h3>\r\r<p>The default scripts implement hand controller actions that use {@link Entities.callEntityMethod} to call entity script \rmethods, if present, in the entity being interacted with.</p>\r\r<table>\r  <thead>\r    <tr><th>Method Name</th><th>Description</th><th>Example</th></tr>\r  </thead>\r  <tbody>\r    <tr>\r      <td><code>startFarTrigger</code><br /><code>continueFarTrigger</code><br /><code>stopFarTrigger</code></td>\r      <td>These methods are called when a user is more than 0.3m away from the entity, the entity is triggerable, and the \r        user starts, continues, or stops squeezing the trigger.</td>\r      <td>A light switch that can be toggled on and off from a distance.</td>\r    </tr>\r    <tr>\r      <td><code>startNearTrigger</code><br /><code>continueNearTrigger</code><br /><code>stopNearTrigger</code></td>\r      <td>These methods are called when a user is less than 0.3m away from the entity, the entity is triggerable, and the \r        user starts, continues, or stops squeezing the trigger.</td>\r      <td>A doorbell that can be rung when a user is near.</td>\r    </tr>\r    <tr>\r      <td><code>startDistanceGrab</code><br /><code>continueDistanceGrab</code><br /></td>\r      <td>These methods are called when a user is more than 0.3m away from the entity, the entity is either cloneable, or\r        grabbable and not locked, and the user starts or continues to squeeze the trigger.</td>\r      <td>A comet that emits icy particle trails when a user is dragging it through the sky.</td>\r    </tr>\r    <tr>\r      <td><code>startNearGrab</code><br /><code>continueNearGrab</code><br /></td>\r      <td>These methods are called when a user is less than 0.3m away from the entity, the entity is either cloneable, or \r        grabbable and not locked, and the user starts or continues to squeeze the trigger.</td>\r      <td>A ball that glows when it's being held close.</td>\r    </tr>\r    <tr>\r      <td><code>releaseGrab</code></td>\r      <td>This method is called when a user releases the trigger when having been either distance or near grabbing an \r        entity.</td>\r      <td>Turn off the ball glow or comet trail with the user finishes grabbing it.</td>\r    </tr>\r    <tr>\r      <td><code>startEquip</code><br /><code>continueEquip</code><br /><code>releaseEquip</code></td>\r      <td>These methods are called when a user starts, continues, or stops equipping an entity.</td>\r      <td>A glass that stays in the user's hand after the trigger is clicked.</td>\r    </tr>\r  </tbody>\r</table>\r<p>All the entity methods are called with the following two arguments:</p>\r<ul>\r  <li>The entity ID.</li>\r  <li>A string, <code>\"hand,userID\"</code> &mdash; where \"hand\" is <code>\"left\"</code> or <code>\"right\"</code>, and \"userID\"\r    is the user's {@link MyAvatar|MyAvatar.sessionUUID}.</li>\r</ul>",
        "kind": "namespace",
        "name": "Controller",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "Controller.Actions"
                    ]
                },
                "description": "Predefined actions on Interface and the user's avatar. These can be used as end\r    points in a {@link RouteObject} mapping. A synonym for <code>Controller.Hardware.Actions</code>.\r    <em>Read-only.</em>\r    <p>Default mappings are provided from the <code>Controller.Hardware.Keyboard</code> and <code>Controller.Standard</code> \r    to actions in \r    <a href=\"https://github.com/highfidelity/hifi/blob/master/interface/resources/controllers/keyboardMouse.json\">\r    keyboardMouse.json</a> and \r    <a href=\"https://github.com/highfidelity/hifi/blob/master/interface/resources/controllers/standard.json\">\r    standard.json</a>, respectively.</p>",
                "name": "Actions"
            },
            {
                "type": {
                    "names": [
                        "Controller.Hardware"
                    ]
                },
                "description": "Standard and hardware-specific controller and computer outputs, plus predefined \r    actions on Interface and the user's avatar. The outputs can be mapped to <code>Actions</code> or functions in a \r    {@link RouteObject} mapping. Additionally, hardware-specific controller outputs can be mapped to \r    <code>Controller.Standard</code> controller outputs. <em>Read-only.</em>",
                "name": "Hardware"
            },
            {
                "type": {
                    "names": [
                        "Controller.Standard"
                    ]
                },
                "description": "Standard controller outputs that can be mapped to <code>Actions</code> or \r    functions in a {@link RouteObject} mapping. <em>Read-only.</em>\r    <p>Each hardware device has a mapping from its outputs to <code>Controller.Standard</code> items, specified in a JSON file. \r    For example, <a href=\"https://github.com/highfidelity/hifi/blob/master/interface/resources/controllers/leapmotion.json\">\r    leapmotion.json</a> and \r    <a href=\"https://github.com/highfidelity/hifi/blob/master/interface/resources/controllers/vive.json\">vive.json</a>.</p>",
                "name": "Standard"
            }
        ],
        "longname": "Controller",
        "scope": "global"
    },
    {
        "description": "Disables default Interface actions for a particular key event.",
        "kind": "function",
        "name": "captureKeyEvents",
        "params": [
            {
                "type": {
                    "names": [
                        "KeyEvent"
                    ]
                },
                "description": "Details of the key event to be captured. The <code>key</code> property must be specified. The \r    <code>text</code> property is ignored. The other properties default to <code>false</code>.",
                "name": "event"
            }
        ],
        "examples": [
            "<caption>Disable left and right strafing.</caption>\rvar STRAFE_LEFT = { \"key\": 16777234, isShifted: true };\rvar STRAFE_RIGHT = { \"key\": 16777236, isShifted: true };\r\rController.captureKeyEvents(STRAFE_LEFT);\rController.captureKeyEvents(STRAFE_RIGHT);\r\rScript.scriptEnding.connect(function () {\r    Controller.releaseKeyEvents(STRAFE_LEFT);\r    Controller.releaseKeyEvents(STRAFE_RIGHT);\r});"
        ],
        "memberof": "Controller",
        "longname": "Controller.captureKeyEvents",
        "scope": "static"
    },
    {
        "description": "Re-enables default Interface actions for a particular key event that has been disabled using \r{@link Controller.captureKeyEvents|captureKeyEvents}.",
        "kind": "function",
        "name": "releaseKeyEvents",
        "params": [
            {
                "type": {
                    "names": [
                        "KeyEvent"
                    ]
                },
                "description": "Details of the key event to release from capture. The <code>key</code> property must be \r    specified. The <code>text</code> property is ignored. The other properties default to <code>false</code>.",
                "name": "event"
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.releaseKeyEvents",
        "scope": "static"
    },
    {
        "description": "Disables default Interface actions for a joystick.",
        "kind": "function",
        "name": "captureJoystick",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The integer ID of the joystick.",
                "name": "joystickID"
            }
        ],
        "deprecated": "This function is deprecated and will be removed. It no longer has any effect.",
        "memberof": "Controller",
        "longname": "Controller.captureJoystick",
        "scope": "static"
    },
    {
        "description": "Re-enables default Interface actions for a joystick that has been disabled using \r{@link Controller.captureJoystick|captureJoystick}.",
        "kind": "function",
        "name": "releaseJoystick",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The integer ID of the joystick.",
                "name": "joystickID"
            }
        ],
        "deprecated": "This function is deprecated and will be removed. It no longer has any effect.",
        "memberof": "Controller",
        "longname": "Controller.releaseJoystick",
        "scope": "static"
    },
    {
        "description": "Disables {@link Entities.mousePressOnEntity} and {@link Entities.mouseDoublePressOnEntity} events on entities.",
        "kind": "function",
        "name": "captureEntityClickEvents",
        "examples": [
            "<caption>Disable entity click events for a short period.</caption>\rEntities.mousePressOnEntity.connect(function (entityID, event) {\r    print(\"Clicked on entity: \" + entityID);\r});\r\rScript.setTimeout(function () {\r    Controller.captureEntityClickEvents();\r}, 5000);\r\rScript.setTimeout(function () {\r    Controller.releaseEntityClickEvents();\r}, 10000);"
        ],
        "memberof": "Controller",
        "longname": "Controller.captureEntityClickEvents",
        "scope": "static"
    },
    {
        "description": "Re-enables {@link Entities.mousePressOnEntity} and {@link Entities.mouseDoublePressOnEntity} events on entities that were \rdisabled using {@link Controller.captureEntityClickEvents|captureEntityClickEvents}.",
        "kind": "function",
        "name": "releaseEntityClickEvents",
        "memberof": "Controller",
        "longname": "Controller.releaseEntityClickEvents",
        "scope": "static"
    },
    {
        "description": "Gets the dimensions of the Interface window's interior if in desktop mode or the HUD surface if in HMD mode.",
        "kind": "function",
        "name": "getViewportDimensions",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "The dimensions of the Interface window interior if in desktop mode or HUD surface if in HMD mode."
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.getViewportDimensions",
        "scope": "static"
    },
    {
        "description": "Gets the recommended area to position UI on the HUD surface if in HMD mode or Interface's window interior if in desktop \rmode.",
        "kind": "function",
        "name": "getRecommendedHUDRect",
        "returns": [
            {
                "type": {
                    "names": [
                        "Rect"
                    ]
                },
                "description": "The recommended area in which to position UI."
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.getRecommendedHUDRect",
        "scope": "static"
    },
    {
        "description": "Enables or disables the virtual game pad that is displayed on certain devices (e.g., Android).",
        "kind": "function",
        "name": "setVPadEnabled",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If <code>true</code> then the virtual game pad doesn't work, otherwise it does work provided \r    that it is not hidden by {@link Controller.setVPadHidden|setVPadHidden}.",
                "name": "enable"
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.setVPadEnabled",
        "scope": "static"
    },
    {
        "description": "Shows or hides the virtual game pad that is displayed on certain devices (e.g., Android).",
        "kind": "function",
        "name": "setVPadHidden",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If <code>true</code> then the virtual game pad is hidden, otherwise it is shown.",
                "name": "hidden"
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.setVPadHidden",
        "scope": "static"
    },
    {
        "description": "Sets the amount of extra margin between the virtual game pad that is displayed on certain devices (e.g., Android) and \rthe bottom of the display.",
        "kind": "function",
        "name": "setVPadExtraBottomMargin",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer number of pixels in the extra margin.",
                "name": "margin"
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.setVPadExtraBottomMargin",
        "scope": "static"
    },
    {
        "description": "Triggered when a keyboard key is pressed.",
        "kind": "signal",
        "name": "keyPressEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "KeyEvent"
                    ]
                },
                "description": "Details of the key press.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report the KeyEvent details for each key press.</caption>\rController.keyPressEvent.connect(function (event) {\r    print(JSON.stringify(event));\r});"
        ],
        "memberof": "Controller",
        "longname": "Controller.keyPressEvent",
        "scope": "static"
    },
    {
        "description": "Triggered when a keyboard key is released from being pressed.",
        "kind": "signal",
        "name": "keyReleaseEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "KeyEvent"
                    ]
                },
                "description": "Details of the key release.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.keyReleaseEvent",
        "scope": "static"
    },
    {
        "description": "Triggered when the mouse moves.",
        "kind": "signal",
        "name": "mouseMoveEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "MouseEvent"
                    ]
                },
                "description": "Details of the mouse movement.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report the MouseEvent details for each mouse move.</caption>\rController.mouseMoveEvent.connect(function (event) {\r    print(JSON.stringify(event));\r});"
        ],
        "memberof": "Controller",
        "longname": "Controller.mouseMoveEvent",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse button is pressed.",
        "kind": "signal",
        "name": "mousePressEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "MouseEvent"
                    ]
                },
                "description": "Details of the button press.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.mousePressEvent",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse button is double-pressed.",
        "kind": "signal",
        "name": "mouseDoublePressEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "MouseEvent"
                    ]
                },
                "description": "Details of the button double-press.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.mouseDoublePressEvent",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse button is released from being pressed.",
        "kind": "signal",
        "name": "mouseReleaseEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "MouseEvent"
                    ]
                },
                "description": "Details of the button release.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.mouseReleaseEvent",
        "scope": "static"
    },
    {
        "description": "Triggered when a touch event starts in the Interface window on a touch-enabled display or device.",
        "kind": "signal",
        "name": "touchBeginEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "TouchEvent"
                    ]
                },
                "description": "Details of the touch begin.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report the TouchEvent details when a touch event starts.</caption>\rController.touchBeginEvent.connect(function (event) {\r    print(JSON.stringify(event));\r});"
        ],
        "memberof": "Controller",
        "longname": "Controller.touchBeginEvent",
        "scope": "static"
    },
    {
        "description": "Triggered when a touch event ends in the Interface window on a touch-enabled display or device.",
        "kind": "signal",
        "name": "touchEndEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "TouchEvent"
                    ]
                },
                "description": "Details of the touch end.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.touchEndEvent",
        "scope": "static"
    },
    {
        "description": "Triggered when a touch event update occurs in the Interface window on a touch-enabled display or device.",
        "kind": "signal",
        "name": "touchUpdateEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "TouchEvent"
                    ]
                },
                "description": "Details of the touch update.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.touchUpdateEvent",
        "scope": "static"
    },
    {
        "description": "Triggered when the mouse wheel is rotated.",
        "kind": "signal",
        "name": "wheelEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "WheelEvent"
                    ]
                },
                "description": "Details of the wheel movement.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report the WheelEvent details for each wheel rotation.</caption>\rController.wheelEvent.connect(function (event) {\r    print(JSON.stringify(event));\r});\r\n     "
        ],
        "memberof": "Controller",
        "longname": "Controller.wheelEvent",
        "scope": "static"
    },
    {
        "description": "The possible docking locations of an <code>InteractiveWindow</code>.",
        "kind": "typedef",
        "name": "DockAreas",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "InteractiveWindow.DockArea"
                    ]
                },
                "description": "Dock to the top edge of the Interface window.",
                "name": "TOP"
            },
            {
                "type": {
                    "names": [
                        "InteractiveWindow.DockArea"
                    ]
                },
                "description": "Dock to the bottom edge of the Interface window.",
                "name": "BOTTOM"
            },
            {
                "type": {
                    "names": [
                        "InteractiveWindow.DockArea"
                    ]
                },
                "description": "Dock to the left edge of the Interface window.",
                "name": "LEFT"
            },
            {
                "type": {
                    "names": [
                        "InteractiveWindow.DockArea"
                    ]
                },
                "description": "Dock to the right edge of the Interface window.",
                "name": "RIGHT"
            }
        ],
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.DockAreas",
        "scope": "static"
    },
    {
        "description": "<p>A docking location of an <code>InteractiveWindow</code>.</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Name</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>0</code></td><td>TOP</td><td>Dock to the top edge of the Interface window.</td></tr>\r    <tr><td><code>1</code></td><td>BOTTOM</td><td>Dock to the bottom edge of the Interface window.</td></tr>\r    <tr><td><code>2</code></td><td>LEFT</td><td>Dock to the left edge of the Interface window.</td></tr>\r    <tr><td><code>3</code></td><td>RIGHT</td><td>Dock to the right edge of the Interface window.</td></tr>\r  <tbody>\r</table>",
        "kind": "typedef",
        "name": "DockArea",
        "type": {
            "names": [
                "number"
            ]
        },
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.DockArea",
        "scope": "static"
    },
    {
        "description": "The possible \"relative position anchors\" of an <code>InteractiveWindow</code>. Used when defining the `relativePosition` property of an `InteractiveWindow`.",
        "kind": "typedef",
        "name": "RelativePositionAnchors",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "InteractiveWindow.RelativePositionAnchor"
                    ]
                },
                "description": "Specifies that the position of the `InteractiveWindow` will not be relative to any part of the Interface window.",
                "name": "NO_ANCHOR"
            },
            {
                "type": {
                    "names": [
                        "InteractiveWindow.RelativePositionAnchor"
                    ]
                },
                "description": "Specifies that the `relativePosition` of the `InteractiveWindow` will be offset from the top left of the Interface window.",
                "name": "TOP_LEFT"
            },
            {
                "type": {
                    "names": [
                        "InteractiveWindow.RelativePositionAnchor"
                    ]
                },
                "description": "Specifies that the `relativePosition` of the `InteractiveWindow` will be offset from the top right of the Interface window.",
                "name": "TOP_RIGHT"
            },
            {
                "type": {
                    "names": [
                        "InteractiveWindow.RelativePositionAnchor"
                    ]
                },
                "description": "Specifies that the `relativePosition` of the `InteractiveWindow` will be offset from the bottom right of the Interface window.",
                "name": "BOTTOM_RIGHT"
            },
            {
                "type": {
                    "names": [
                        "InteractiveWindow.RelativePositionAnchor"
                    ]
                },
                "description": "Specifies that the `relativePosition` of the `InteractiveWindow` will be offset from the bottom left of the Interface window.",
                "name": "BOTTOM_LEFT"
            }
        ],
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.RelativePositionAnchors",
        "scope": "static"
    },
    {
        "description": "The possible display modes for an <code>InteractiveWindow</code>.",
        "kind": "typedef",
        "name": "PresentationModes",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "InteractiveWindow.PresentationMode"
                    ]
                },
                "description": "The window is displayed inside Interface: in the desktop window in \r    desktop mode or on the HUD surface in HMD mode.",
                "name": "VIRTUAL"
            },
            {
                "type": {
                    "names": [
                        "InteractiveWindow.PresentationMode"
                    ]
                },
                "description": "The window is displayed separately from the Interface window, as its \r    own separate window.",
                "name": "NATIVE"
            }
        ],
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.PresentationModes",
        "scope": "static"
    },
    {
        "description": "<p>A display mode for an <code>InteractiveWindow</code>.</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Name</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>0</code></td><td>VIRTUAL</td><td>The window is displayed inside Interface: in the desktop window in \r      desktop mode or on the HUD surface in HMD mode.</td></tr>\r    <tr><td><code>1</code></td><td>NATIVE</td><td>The window is displayed separately from the Interface window, as its \r    own separate window.</td></tr>\r  <tbody>\r</table>",
        "kind": "typedef",
        "name": "PresentationMode",
        "type": {
            "names": [
                "number"
            ]
        },
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.PresentationMode",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Desktop</code> API provides the dimensions of the computer screen, sets the opacity of the HUD surface, and \renables QML and HTML windows to be shown inside or outside of Interface.",
        "kind": "namespace",
        "name": "Desktop",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The width of the computer screen including task bar and system menu, in pixels. \r    <em>Read-only.</em>",
                "name": "width"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The height of the computer screen including task bar and system menu, in pixels. \r    <em>Read-only.</em>",
                "name": "height"
            },
            {
                "type": {
                    "names": [
                        "InteractiveWindow.Flags"
                    ]
                },
                "description": "A flag value that makes an {@link InteractiveWindow} always display on \r    top. <em>Read-only.</em>",
                "name": "ALWAYS_ON_TOP"
            },
            {
                "type": {
                    "names": [
                        "InteractiveWindow.Flags"
                    ]
                },
                "description": "A flag value that makes an {@link InteractiveWindow} hide instead \r    of closing when the user clicks the \"close\" button.<em> Read-only.</em>",
                "name": "CLOSE_BUTTON_HIDES"
            },
            {
                "type": {
                    "names": [
                        "InteractiveWindow.PresentationModes"
                    ]
                },
                "description": "The possible display options for an \r    {@link InteractiveWindow}: display inside Interface or in a separate desktop window. <em>Read-only.</em>",
                "name": "PresentationMode"
            },
            {
                "type": {
                    "names": [
                        "InteractiveWindow.DockAreas"
                    ]
                },
                "description": "The possible docking locations of an {@link InteractiveWindow}: top, \r    bottom, left, or right of the Interface window. \r    <em>Read-only.</em>",
                "name": "DockArea"
            },
            {
                "type": {
                    "names": [
                        "InteractiveWindow.RelativePositionAnchors"
                    ]
                },
                "description": "The possible \"relative position anchors\" for an {@link InteractiveWindow}: top left, \r    top right, bottom right, or bottom left of the Interface window. \r    <em>Read-only.</em>",
                "name": "RelativePositionAnchor"
            }
        ],
        "longname": "Desktop",
        "scope": "global"
    },
    {
        "description": "Sets the opacity of the HUD surface.",
        "kind": "function",
        "name": "setHUDAlpha",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The opacity, <code>0.0 &ndash; 1.0</code>.",
                "name": "alpha"
            }
        ],
        "memberof": "Desktop",
        "longname": "Desktop.setHUDAlpha",
        "scope": "static"
    },
    {
        "description": "Opens a QML window within Interface: in the Interface window in desktop mode or on the HUD surface in HMD mode. If a \rwindow of the specified name already exists, it is shown, otherwise a new window is created from the QML.",
        "kind": "function",
        "name": "show",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The QML file that specifies the window content.",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "A unique name for the window.",
                "name": "name"
            }
        ],
        "examples": [
            "<caption>Open the general settings dialog.</caption>\rDesktop.show(\"hifi/dialogs/GeneralPreferencesDialog.qml\", \"GeneralPreferencesDialog\");"
        ],
        "memberof": "Desktop",
        "longname": "Desktop.show",
        "scope": "static"
    },
    {
        "description": "Creates a new window that can be displayed either within Interface or as a separate desktop window.",
        "kind": "function",
        "name": "createWindow",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The QML file that specifies the window content. The QML file can use a <code>WebView</code> \r    control (defined by \"WebView.qml\" included in the Interface install) to embed an HTML web page (complete with  \r    <code>EventBridge</code> object).",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "InteractiveWindow.Properties"
                    ]
                },
                "optional": true,
                "description": "Initial window properties.",
                "name": "properties"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "InteractiveWindow"
                    ]
                },
                "description": "A new window object."
            }
        ],
        "examples": [
            "<caption>Open a dialog in its own window separate from Interface.</caption>\rvar nativeWindow = Desktop.createWindow(Script.resourcesPath() + 'qml/OverlayWindowTest.qml', {\r    title: \"Native Window\",\r    presentationMode: Desktop.PresentationMode.NATIVE,\r    size: { x: 500, y: 400 }\r});\r\rScript.scriptEnding.connect(function () {\r    nativeWindow.close();\r});\r\n     "
        ],
        "memberof": "Desktop",
        "longname": "Desktop.createWindow",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The GooglePoly API allows you to interact with Google Poly models direct from inside High Fidelity.",
        "kind": "namespace",
        "name": "GooglePoly",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "longname": "GooglePoly",
        "scope": "global"
    },
    {
        "kind": "function",
        "name": "setAPIKey",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "key"
            }
        ],
        "memberof": "GooglePoly",
        "longname": "GooglePoly.setAPIKey",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getAssetList",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "keyword"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "category"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "format"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "GooglePoly",
        "longname": "GooglePoly.getAssetList",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getFBX",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "keyword"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "category"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "GooglePoly",
        "longname": "GooglePoly.getFBX",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getOBJ",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "keyword"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "category"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "GooglePoly",
        "longname": "GooglePoly.getOBJ",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getBlocks",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "keyword"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "category"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "GooglePoly",
        "longname": "GooglePoly.getBlocks",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getGLTF",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "keyword"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "category"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "GooglePoly",
        "longname": "GooglePoly.getGLTF",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getGLTF2",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "keyword"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "category"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "GooglePoly",
        "longname": "GooglePoly.getGLTF2",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getTilt",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "keyword"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "category"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "GooglePoly",
        "longname": "GooglePoly.getTilt",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getModelInfo",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "input"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "GooglePoly",
        "longname": "GooglePoly.getModelInfo",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>HMD</code> API provides access to the HMD used in VR display mode.",
        "kind": "namespace",
        "name": "HMD",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the HMD if currently in VR display mode, otherwise\r    {@link Vec3(0)|Vec3.ZERO}. <em>Read-only.</em>",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the HMD if currently in VR display mode, otherwise \r    {@link Quat(0)|Quat.IDENTITY}. <em>Read-only.</em>",
                "name": "orientation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the display mode is HMD, otherwise <code>false</code>. <em>Read-only.</em>",
                "name": "active"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if currently in VR display mode and the HMD is being worn, otherwise\r    <code>false</code>. <em>Read-only.</em>",
                "name": "mounted"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The real-world height of the user. <em>Read-only.</em> <em>Currently always returns a\r    value of <code>1.755</code>.</em>",
                "name": "playerHeight"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The real-world height of the user's eyes. <em>Read-only.</em> <em>Currently always returns a\r    value of <code>1.655</code>.</em>",
                "name": "eyeHeight"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The inter-pupillary distance (distance between eyes) of the user, used for rendering. Defaults to\r    the human average of <code>0.064</code> unless set by the HMD. <em>Read-only.</em>",
                "name": "ipd"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "1.0",
                "description": "A scale factor applied to the <code>ipd</code> property value.",
                "name": "ipdScale"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the tablet is being displayed, <code>false</code> otherwise.\r    <em>Read-only.</em>",
                "name": "showTablet"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the tablet has been opened in contextual mode, otherwise \r    <code>false</code>. In contextual mode, the tablet has been opened at a specific world position and orientation rather \r    than at a position and orientation relative to the user. <em>Read-only.</em>",
                "name": "tabletContextualMode"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID of the tablet body model entity.",
                "name": "tabletID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID of the tablet's screen entity.",
                "name": "tabletScreenID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID of the tablet's \"home\" button entity.",
                "name": "homeButtonID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID of the tablet's \"home\" button highlight entity.",
                "name": "homeButtonHighlightID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID of the mini tablet's body model entity. <code>null</code> if not in HMD mode.",
                "name": "miniTabletID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID of the mini tablet's screen entity. <code>null</code> if not in HMD mode.",
                "name": "miniTabletScreenID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The hand that the mini tablet is displayed on: <code>0</code> for left hand, \r    <code>1</code> for right hand, <code>-1</code> if not in HMD mode.",
                "name": "miniTabletHand"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "<code>true</code> if the mini tablet is enabled to be displayed, otherwise \r    <code>false</code>.",
                "name": "miniTabletEnabled"
            },
            {
                "type": {
                    "names": [
                        "Rect"
                    ]
                },
                "defaultvalue": "0,0,0,0",
                "description": "The size and position of the HMD play area in sensor coordinates. <em>Read-only.</em>",
                "name": "playArea"
            },
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "defaultvalue": "[]",
                "description": "The positions of the VR system sensors in sensor coordinates. <em>Read-only.</em>",
                "name": "sensorPositions"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "0.0",
                "description": "The amount of vision squeeze for the x-axis when moving, range <code>0.0</code> \r    &ndash; <code>1.0</code>.",
                "name": "visionSqueezeRatioX"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "0.0",
                "description": "The amount of vision squeeze for the y-axis when moving, range <code>0.0</code> \r    &ndash; <code>1.0</code>.",
                "name": "visionSqueezeRatioY"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.51,
                "description": "The additional amount of vision squeeze for the x-axis when turning,\r    range <code>0.0</code> &ndash; <code>1.0</code>.",
                "name": "visionSqueezeTurningXFactor"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.36,
                "description": "<em>Currently unused.</em>",
                "name": "visionSqueezeTurningYFactor"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.2,
                "description": "The delay in undoing the vision squeeze effect after motion stops, in\r    seconds.",
                "name": "visionSqueezeUnSqueezeDelay"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "3.0",
                "description": "How quickly the vision squeeze effect fades, once \r    <code>visionSqueezeUnSqueezeDelay</code> has passed.",
                "name": "visionSqueezeUnSqueezeSpeed"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.25,
                "description": "How tightly vision is squeezed, range <code>0.01</code> &ndash; \r    <code>0.7</code>.",
                "name": "visionSqueezeTransition"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "<code>1</code> if each eye gets a tube to see through, <code>0</code> if the face \r    gets a tube.",
                "name": "visionSqueezePerEye"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "0.0",
                "description": "Adjusts how far below the camera the vision squeeze grid is displayed at.",
                "name": "visionSqueezeGroundPlaneY"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "6.0",
                "description": "The diameter of the circle of vision squeeze grid that is illuminated \r    around the camera.",
                "name": "visionSqueezeSpotlightSize"
            }
        ],
        "longname": "HMD",
        "scope": "global"
    },
    {
        "description": "Calculates the intersection of a ray with the HUD overlay.",
        "kind": "function",
        "name": "calculateRayUICollisionPoint",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The origin of the ray.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The direction of the ray.",
                "name": "direction"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The point of intersection with the HUD overlay if it intersects, otherwise {@link Vec3(0)|Vec3.ZERO}."
            }
        ],
        "examples": [
            "<caption>Draw a square on the HUD overlay in the direction you're looking.</caption>\rvar hudIntersection = HMD.calculateRayUICollisionPoint(MyAvatar.getHeadPosition(),\r    Quat.getForward(MyAvatar.headOrientation));\rvar hudPoint = HMD.overlayFromWorldPoint(hudIntersection);\r\rvar DIMENSIONS = { x: 50, y: 50 };\rvar square = Overlays.addOverlay(\"rectangle\", {\r    x: hudPoint.x - DIMENSIONS.x / 2,\r    y: hudPoint.y - DIMENSIONS.y / 2,\r    width: DIMENSIONS.x,\r    height: DIMENSIONS.y,\r    color: { red: 255, green: 0, blue: 0 }\r});\r\rScript.scriptEnding.connect(function () {\r    Overlays.deleteOverlay(square);\r});"
        ],
        "memberof": "HMD",
        "longname": "HMD.calculateRayUICollisionPoint",
        "scope": "static"
    },
    {
        "description": "Gets the 2D HUD overlay coordinates of a 3D point on the HUD overlay.\r2D HUD overlay coordinates are pixels with the origin at the top left of the overlay.",
        "kind": "function",
        "name": "overlayFromWorldPoint",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The point on the HUD overlay in world coordinates.",
                "name": "position"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "The point on the HUD overlay in HUD coordinates."
            }
        ],
        "examples": [
            "<caption>Draw a square on the HUD overlay in the direction you're looking.</caption>\rvar hudIntersection = HMD.calculateRayUICollisionPoint(MyAvatar.getHeadPosition(),\r    Quat.getForward(MyAvatar.headOrientation));\rvar hudPoint = HMD.overlayFromWorldPoint(hudIntersection);\r\rvar DIMENSIONS = { x: 50, y: 50 };\rvar square = Overlays.addOverlay(\"rectangle\", {\r    x: hudPoint.x - DIMENSIONS.x / 2,\r    y: hudPoint.y - DIMENSIONS.y / 2,\r    width: DIMENSIONS.x,\r    height: DIMENSIONS.y,\r    color: { red: 255, green: 0, blue: 0 }\r});\r\rScript.scriptEnding.connect(function () {\r    Overlays.deleteOverlay(square);\r});"
        ],
        "memberof": "HMD",
        "longname": "HMD.overlayFromWorldPoint",
        "scope": "static"
    },
    {
        "description": "Gets the 3D world coordinates of a 2D point on the HUD overlay.\r2D HUD overlay coordinates are pixels with the origin at the top left of the overlay.",
        "kind": "function",
        "name": "worldPointFromOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "The point on the HUD overlay in HUD coordinates.",
                "name": "coordinates"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The point on the HUD overlay in world coordinates."
            }
        ],
        "memberof": "HMD",
        "longname": "HMD.worldPointFromOverlay",
        "scope": "static"
    },
    {
        "description": "Gets the 2D point on the HUD overlay represented by given spherical coordinates. \r2D HUD overlay coordinates are pixels with the origin at the top left of the overlay.\rSpherical coordinates are polar coordinates in radians with <code>{ x: 0, y: 0 }</code> being the center of the HUD \roverlay.",
        "kind": "function",
        "name": "sphericalToOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "The point on the HUD overlay in spherical coordinates.",
                "name": "sphericalPos"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "The point on the HUD overlay in HUD coordinates."
            }
        ],
        "memberof": "HMD",
        "longname": "HMD.sphericalToOverlay",
        "scope": "static"
    },
    {
        "description": "Gets the spherical coordinates of a 2D point on the HUD overlay.\r2D HUD overlay coordinates are pixels with the origin at the top left of the overlay.\rSpherical coordinates are polar coordinates in radians with <code>{ x: 0, y: 0 }</code> being the center of the HUD\roverlay.",
        "kind": "function",
        "name": "overlayToSpherical",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "The point on the HUD overlay in HUD coordinates.",
                "name": "overlayPos"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "The point on the HUD overlay in spherical coordinates."
            }
        ],
        "memberof": "HMD",
        "longname": "HMD.overlayToSpherical",
        "scope": "static"
    },
    {
        "description": "Recenters the HMD HUD to the current HMD position and orientation.",
        "kind": "function",
        "name": "centerUI",
        "memberof": "HMD",
        "longname": "HMD.centerUI",
        "scope": "static"
    },
    {
        "description": "Gets the name of the HMD audio input device.",
        "kind": "function",
        "name": "preferredAudioInput",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the HMD audio input device if in HMD mode, otherwise an empty string."
            }
        ],
        "memberof": "HMD",
        "longname": "HMD.preferredAudioInput",
        "scope": "static"
    },
    {
        "description": "Gets the name of the HMD audio output device.",
        "kind": "function",
        "name": "preferredAudioOutput",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the HMD audio output device if in HMD mode, otherwise an empty string."
            }
        ],
        "memberof": "HMD",
        "longname": "HMD.preferredAudioOutput",
        "scope": "static"
    },
    {
        "description": "Checks whether there is an HMD available.",
        "kind": "function",
        "name": "isHMDAvailable",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The name of the HMD to check for, e.g., <code>\"Oculus Rift\"</code>. The name is the same as \r    may be displayed in Interface's \"Display\" menu. If no name is specified, then any HMD matches.",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if an HMD of the specified <code>name</code> is available, otherwise \r    <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Report on HMD availability.</caption>\rprint(\"Is any HMD available: \" + HMD.isHMDAvailable());\rprint(\"Is an Oculus Rift HMD available: \" + HMD.isHMDAvailable(\"Oculus Rift\"));\rprint(\"Is a Vive HMD available: \" + HMD.isHMDAvailable(\"OpenVR (Vive)\"));"
        ],
        "memberof": "HMD",
        "longname": "HMD.isHMDAvailable",
        "scope": "static"
    },
    {
        "description": "Checks whether there is an HMD head controller available.",
        "kind": "function",
        "name": "isHeadControllerAvailable",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The name of the HMD head controller to check for, e.g., <code>\"Oculus\"</code>. If no name is \r    specified, then any HMD head controller matches.",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if an HMD head controller of the specified <code>name</code> is available, \r    otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Report HMD head controller availability.</caption>\rprint(\"Is any HMD head controller available: \" + HMD.isHeadControllerAvailable());\rprint(\"Is an Oculus head controller available: \" + HMD.isHeadControllerAvailable(\"Oculus\"));\rprint(\"Is a Vive head controller available: \" + HMD.isHeadControllerAvailable(\"OpenVR\"));"
        ],
        "memberof": "HMD",
        "longname": "HMD.isHeadControllerAvailable",
        "scope": "static"
    },
    {
        "description": "Checks whether there are HMD hand controllers available.",
        "kind": "function",
        "name": "isHandControllerAvailable",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The name of the HMD hand controller to check for, e.g., <code>\"Oculus\"</code>. If no name is \r    specified, then any HMD hand controller matches.",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if an HMD hand controller of the specified <code>name</code> is available, \r    otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Report HMD hand controller availability.</caption>\rprint(\"Are any HMD hand controllers available: \" + HMD.isHandControllerAvailable());\rprint(\"Are Oculus hand controllers available: \" + HMD.isHandControllerAvailable(\"Oculus\"));\rprint(\"Are Vive hand controllers available: \" + HMD.isHandControllerAvailable(\"OpenVR\"));"
        ],
        "memberof": "HMD",
        "longname": "HMD.isHandControllerAvailable",
        "scope": "static"
    },
    {
        "description": "Checks whether there are specific HMD controllers available.",
        "kind": "function",
        "name": "isSubdeviceContainingNameAvailable",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the HMD controller to check for, e.g., <code>\"OculusTouch\"</code>.",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if an HMD controller with a name containing the specified <code>name</code> is \r    available, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Report if particular Oculus controllers are available.</caption>\rprint(\"Is an Oculus Touch controller available: \" + HMD.isSubdeviceContainingNameAvailable(\"Touch\"));\rprint(\"Is an Oculus Remote controller available: \" + HMD.isSubdeviceContainingNameAvailable(\"Remote\"));"
        ],
        "memberof": "HMD",
        "longname": "HMD.isSubdeviceContainingNameAvailable",
        "scope": "static"
    },
    {
        "description": "Signals that models of the HMD hand controllers being used should be displayed. The models are displayed at their actual, \rreal-world locations.",
        "kind": "function",
        "name": "requestShowHandControllers",
        "examples": [
            "<caption>Show your hand controllers for 10 seconds.</caption>\rHMD.requestShowHandControllers();\rScript.setTimeout(function () {\r    HMD.requestHideHandControllers();\r}, 10000);"
        ],
        "memberof": "HMD",
        "longname": "HMD.requestShowHandControllers",
        "scope": "static"
    },
    {
        "description": "Signals that it is no longer necessary to display models of the HMD hand controllers being used. If no other scripts \rwant the models displayed then they are no longer displayed.",
        "kind": "function",
        "name": "requestHideHandControllers",
        "memberof": "HMD",
        "longname": "HMD.requestHideHandControllers",
        "scope": "static"
    },
    {
        "description": "Checks whether any script wants models of the HMD hand controllers displayed. Requests are made and canceled using \r{@link HMD.requestShowHandControllers|requestShowHandControllers} and \r{@link HMD.requestHideHandControllers|requestHideHandControllers}.",
        "kind": "function",
        "name": "shouldShowHandControllers",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if any script is requesting that HMD hand controller models be displayed."
            }
        ],
        "memberof": "HMD",
        "longname": "HMD.shouldShowHandControllers",
        "scope": "static"
    },
    {
        "description": "Causes the borders in HUD windows to be enlarged when the laser intersects them in HMD mode. By default, borders are not \renlarged.",
        "kind": "function",
        "name": "activateHMDHandMouse",
        "memberof": "HMD",
        "longname": "HMD.activateHMDHandMouse",
        "scope": "static"
    },
    {
        "description": "Causes the border in HUD windows to no longer be enlarged when the laser intersects them in HMD mode. By default, \rborders are not enlarged.",
        "kind": "function",
        "name": "deactivateHMDHandMouse",
        "memberof": "HMD",
        "longname": "HMD.deactivateHMDHandMouse",
        "scope": "static"
    },
    {
        "description": "Suppresses the activation of the HMD-provided keyboard, if any. Successful calls should be balanced with a call to \r{@link HMD.unsuppressKeyboard|unsuppressKeyboard} within a reasonable amount of time.",
        "kind": "function",
        "name": "suppressKeyboard",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the current HMD provides a keyboard and it was successfully suppressed (e.g., it \risn't being displayed), otherwise <code>false</code>."
            }
        ],
        "memberof": "HMD",
        "longname": "HMD.suppressKeyboard",
        "scope": "static"
    },
    {
        "description": "Unsuppresses the activation of the HMD-provided keyboard, if any.",
        "kind": "function",
        "name": "unsuppressKeyboard",
        "memberof": "HMD",
        "longname": "HMD.unsuppressKeyboard",
        "scope": "static"
    },
    {
        "description": "Checks whether the HMD-provided keyboard, if any, is visible.",
        "kind": "function",
        "name": "isKeyboardVisible",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the current HMD provides a keyboard and it is visible, otherwise \r<code>false</code>."
            }
        ],
        "memberof": "HMD",
        "longname": "HMD.isKeyboardVisible",
        "scope": "static"
    },
    {
        "description": "Closes the tablet if it is open.",
        "kind": "function",
        "name": "closeTablet",
        "memberof": "HMD",
        "longname": "HMD.closeTablet",
        "scope": "static"
    },
    {
        "description": "Opens the tablet if the tablet is used in the current display mode and it isn't already showing, and sets the tablet to \rcontextual mode if requested. In contextual mode, the page displayed on the tablet is wholly controlled by script (i.e., \rthe user cannot navigate to another).",
        "kind": "function",
        "name": "openTablet",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If <code>true</code> then the tablet is opened at a specific position and \r    orientation already set by the script, otherwise it opens at a position and orientation relative to the user. For \r    contextual mode, set the world or local position and orientation of the <code>HMD.tabletID</code> overlay.",
                "name": "contextualMode"
            }
        ],
        "memberof": "HMD",
        "longname": "HMD.openTablet",
        "scope": "static"
    },
    {
        "description": "Triggered when a request to show or hide models of the HMD hand controllers is made using \r{@link HMD.requestShowHandControllers|requestShowHandControllers} or\r{@link HMD.requestHideHandControllers|requestHideHandControllers}.",
        "kind": "signal",
        "name": "shouldShowHandControllersChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when showing of hand controllers changes.</caption>\rfunction onShouldShowHandControllersChanged() {\r    print(\"Should show hand controllers: \" + HMD.shouldShowHandControllers());\r}\rHMD.shouldShowHandControllersChanged.connect(onShouldShowHandControllersChanged);\r\rHMD.requestShowHandControllers();\rScript.setTimeout(function () {\r    HMD.requestHideHandControllers();\r}, 10000);"
        ],
        "memberof": "HMD",
        "longname": "HMD.shouldShowHandControllersChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the tablet is shown or hidden.",
        "kind": "signal",
        "name": "showTabletChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the tablet is showing, otherwise <code>false</code>.",
                "name": "showTablet"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "HMD",
        "longname": "HMD.showTabletChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the ability to display the mini tablet has changed.",
        "kind": "signal",
        "name": "miniTabletEnabledChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the mini tablet is enabled to be displayed, otherwise <code>false</code>.",
                "name": "enabled"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "HMD",
        "longname": "HMD.miniTabletEnabledChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the altering the mode for going into an away state when the interface focus is lost in VR.",
        "kind": "signal",
        "name": "awayStateWhenFocusLostInVRChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the setting to go into an away state in VR when the interface focus is lost is enabled, otherwise <code>false</code>.",
                "name": "enabled"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "HMD",
        "longname": "HMD.awayStateWhenFocusLostInVRChanged",
        "scope": "static"
    },
    {
        "description": "Gets the position on the HUD overlay that your HMD is looking at, in HUD coordinates.",
        "kind": "function",
        "name": "getHUDLookAtPosition2D",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "The position on the HUD overlay that your HMD is looking at, in pixels."
            }
        ],
        "memberof": "HMD",
        "longname": "HMD.getHUDLookAtPosition2D",
        "scope": "static"
    },
    {
        "description": "Gets the position on the HUD overlay that your HMD is looking at, in world coordinates.",
        "kind": "function",
        "name": "getHUDLookAtPosition3D",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position on the HUD overlay the your HMD is looking at, in world coordinates."
            }
        ],
        "memberof": "HMD",
        "longname": "HMD.getHUDLookAtPosition3D",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Keyboard</code> API provides facilities to use an in-world, virtual keyboard. When enabled, this keyboard is \rdisplayed instead of the 2D keyboard that raises at the bottom of the tablet or Web entities when a text input field has \rfocus and you're in HMD mode.",
        "kind": "namespace",
        "name": "Keyboard",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the virtual keyboard is visible, <code>false</code> if it isn't.",
                "name": "raised"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if <code>\"*\"</code>s are displayed on the virtual keyboard's display \r    instead of the characters typed, <code>false</code> if the actual characters are displayed.",
                "name": "password"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if user settings have \"Use Virtual Keyboard\" enabled, \r    <code>false</code> if it's disabled. <em>Read-only.</em>",
                "name": "use3DKeyboard"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if user settings for the virtual keyboard have \"Mallets\" \r    selected, <code>false</code> if \"Lasers\" is selected. <em>Read-only.</em>",
                "name": "preferMalletsOverLasers"
            }
        ],
        "longname": "Keyboard",
        "scope": "global"
    },
    {
        "description": "Loads a JSON file that defines the virtual keyboard's layout. The default JSON file used is \r{@link https://github.com/highfidelity/hifi/blob/master/interface/resources/config/keyboard.json|https://github.com/highfidelity/hifi/.../keyboard.json}.",
        "kind": "function",
        "name": "loadKeyboardFile",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The keyboard JSON file.",
                "name": "path"
            }
        ],
        "memberof": "Keyboard",
        "longname": "Keyboard.loadKeyboardFile",
        "scope": "static"
    },
    {
        "description": "Enables the left mallet so that it is displayed when in HMD mode.",
        "kind": "function",
        "name": "enableLeftMallet",
        "memberof": "Keyboard",
        "longname": "Keyboard.enableLeftMallet",
        "scope": "static"
    },
    {
        "description": "Enables the right mallet so that it is displayed when in HMD mode.",
        "kind": "function",
        "name": "enableRightMallet",
        "memberof": "Keyboard",
        "longname": "Keyboard.enableRightMallet",
        "scope": "static"
    },
    {
        "description": "Disables the left mallet so that it is not displayed when in HMD mode.",
        "kind": "function",
        "name": "disableLeftMallet",
        "memberof": "Keyboard",
        "longname": "Keyboard.disableLeftMallet",
        "scope": "static"
    },
    {
        "description": "Disables the right mallet so that it is not displayed when in HMD mode.",
        "kind": "function",
        "name": "disableRightMallet",
        "memberof": "Keyboard",
        "longname": "Keyboard.disableRightMallet",
        "scope": "static"
    },
    {
        "description": "Configures the virtual keyboard to recognize a ray pointer as the left hand's laser.",
        "kind": "function",
        "name": "setLeftHandLaser",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of a ray pointer created by {@link Pointers.createPointer}.",
                "name": "leftHandLaser"
            }
        ],
        "memberof": "Keyboard",
        "longname": "Keyboard.setLeftHandLaser",
        "scope": "static"
    },
    {
        "description": "Configures the virtual keyboard to recognize a ray pointer as the right hand's laser.",
        "kind": "function",
        "name": "setRightHandLaser",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of a ray pointer created by {@link Pointers.createPointer}.",
                "name": "rightHandLaser"
            }
        ],
        "memberof": "Keyboard",
        "longname": "Keyboard.setRightHandLaser",
        "scope": "static"
    },
    {
        "description": "Checks whether an entity is part of the virtual keyboard.",
        "kind": "function",
        "name": "containsID",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The entity ID.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the entity is part of the virtual keyboard, <code>false</code> if it isn't."
            }
        ],
        "memberof": "Keyboard",
        "longname": "Keyboard.containsID",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Menu</code> API provides access to the menu that is displayed at the top of the window on a user's desktop and in \rthe tablet when the \"MENU\" button is pressed.\r\r<h3>Groupings</h3>\r\r<p>A \"grouping\" provides a way to group a set of menus or menu items together so that they can all be set visible or invisible \ras a group.</p>\r<p>There is currently only one available group: <code>\"Developer\"</code>. This grouping can be toggled in the \r\"Settings\" menu.</p>\r<p>If a menu item doesn't belong to a group, it is always displayed.</p>",
        "kind": "namespace",
        "name": "Menu",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "longname": "Menu",
        "scope": "global"
    },
    {
        "description": "Adds a new top-level menu.",
        "kind": "function",
        "name": "addMenu",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name that will be displayed for the menu. Nested menus can be specified using the \r    <code>\"&gt;\"</code> character.",
                "name": "menuName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "Name of the grouping, if any, to add this menu to.",
                "name": "grouping"
            }
        ],
        "examples": [
            "<caption>Add a menu and a nested submenu.</caption>\rMenu.addMenu(\"Test Menu\");\rMenu.addMenu(\"Test Menu > Test Sub Menu\");",
            "<caption>Add a menu to the Settings menu that is only visible if Settings > Developer is enabled.</caption>\rMenu.addMenu(\"Settings > Test Grouping Menu\", \"Developer\");"
        ],
        "memberof": "Menu",
        "longname": "Menu.addMenu",
        "scope": "static"
    },
    {
        "description": "Removes a top-level menu.",
        "kind": "function",
        "name": "removeMenu",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu to remove.",
                "name": "menuName"
            }
        ],
        "examples": [
            "<caption>Remove a menu and nested submenu.</caption>\rMenu.removeMenu(\"Test Menu > Test Sub Menu\");\rMenu.removeMenu(\"Test Menu\");"
        ],
        "memberof": "Menu",
        "longname": "Menu.removeMenu",
        "scope": "static"
    },
    {
        "description": "Checks whether a top-level menu exists.",
        "kind": "function",
        "name": "menuExists",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu to check exists.",
                "name": "menuName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the menu exists, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Check if the \"Developer\" menu exists.</caption>\rif (Menu.menuExists(\"Developer\")) {\r    print(\"Developer menu exists.\");\r}"
        ],
        "memberof": "Menu",
        "longname": "Menu.menuExists",
        "scope": "static"
    },
    {
        "description": "Adds a separator with an unclickable label below it. The separator will be placed at the bottom of the menu. To add a \rseparator at a specific point in the menu, use {@link Menu.addMenuItem} with {@link Menu.MenuItemProperties} instead.",
        "kind": "function",
        "name": "addSeparator",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu to add the separator to.",
                "name": "menuName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the separator that will be displayed as the label below the separator line.",
                "name": "separatorName"
            }
        ],
        "examples": [
            "<caption>Add a separator.</caption>\rMenu.addSeparator(\"Developer\", \"Test Separator\");"
        ],
        "memberof": "Menu",
        "longname": "Menu.addSeparator",
        "scope": "static"
    },
    {
        "description": "Removes a separator from a menu.",
        "kind": "function",
        "name": "removeSeparator",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu to remove the separator from.",
                "name": "menuName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the separator to remove.",
                "name": "separatorName"
            }
        ],
        "examples": [
            "<caption>Remove a separator.</caption>\rMenu.removeSeparator(\"Developer\", \"Test Separator\");"
        ],
        "memberof": "Menu",
        "longname": "Menu.removeSeparator",
        "scope": "static"
    },
    {
        "description": "Adds a new menu item to a menu. The menu item is specified using {@link Menu.MenuItemProperties}.",
        "kind": "function",
        "name": "addMenuItem",
        "params": [
            {
                "type": {
                    "names": [
                        "Menu.MenuItemProperties"
                    ]
                },
                "description": "Properties of the menu item to create.",
                "name": "properties"
            }
        ],
        "examples": [
            "<caption>Add a menu item at a particular position in the \"Developer\" menu.</caption>\rMenu.addMenuItem({\r    menuName:     \"Developer\",\r    menuItemName: \"Test\",\r    afterItem:    \"Log\",\r    shortcutKey:  \"Ctrl+Shift+T\"\r});"
        ],
        "memberof": "Menu",
        "longname": "Menu.addMenuItem",
        "scope": "static"
    },
    {
        "description": "Adds a new menu item to a menu. The new item is added at the end of the menu.",
        "kind": "function",
        "name": "addMenuItem",
        "variation": "0",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu to add the menu item to.",
                "name": "menuName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu item. This is what will be displayed in the menu.",
                "name": "menuItem"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "A shortcut key that can be used to trigger the menu item.",
                "name": "shortcutKey"
            }
        ],
        "examples": [
            "<caption>Add a menu item to the end of the \"Developer\" menu.</caption>\rMenu.addMenuItem(\"Developer\", \"Test\", \"Ctrl+Shift+T\");"
        ],
        "memberof": "Menu",
        "longname": "Menu.addMenuItem(0)",
        "scope": "static"
    },
    {
        "description": "Removes a menu item from a menu.",
        "kind": "function",
        "name": "removeMenuItem",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu to remove a menu item from.",
                "name": "menuName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu item to remove.",
                "name": "menuItem"
            }
        ],
        "examples": [
            "<caption>Remove a menu item from the \"Developer\" menu.</caption>\rMenu.removeMenuItem(\"Developer\", \"Test\");"
        ],
        "memberof": "Menu",
        "longname": "Menu.removeMenuItem",
        "scope": "static"
    },
    {
        "description": "Checks whether a menu item exists.",
        "kind": "function",
        "name": "menuItemExists",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu that the menu item is in.",
                "name": "menuName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu item to check for existence of.",
                "name": "menuItem"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the menu item exists, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Determine if the Developer &gt; Stats menu exists.</caption>\rif (Menu.menuItemExists(\"Developer\", \"Stats\")) {\r    print(\"Developer > Stats menu item exists.\");\r}"
        ],
        "memberof": "Menu",
        "longname": "Menu.menuItemExists",
        "scope": "static"
    },
    {
        "description": "Checks whether a checkable menu item is checked.",
        "kind": "function",
        "name": "isOptionChecked",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the menu item.",
                "name": "menuOption"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the option is checked, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Report whether the Settings > Developer menu item is turned on.</caption>\rprint(\"Developer menu showing: \" + Menu.isOptionChecked(\"Developer Menu\"));"
        ],
        "memberof": "Menu",
        "longname": "Menu.isOptionChecked",
        "scope": "static"
    },
    {
        "description": "Sets a checkable menu item as checked or unchecked.",
        "kind": "function",
        "name": "setIsOptionChecked",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the menu item to modify.",
                "name": "menuOption"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If <code>true</code>, the menu item will be checked, otherwise it will not be checked.",
                "name": "isChecked"
            }
        ],
        "examples": [
            "<caption>Turn on Settings > Developer Menu.</caption>\rMenu.setIsOptionChecked(\"Developer Menu\", true);\rprint(\"Developer menu showing: \" + Menu.isOptionChecked(\"Developer Menu\"));"
        ],
        "memberof": "Menu",
        "longname": "Menu.setIsOptionChecked",
        "scope": "static"
    },
    {
        "description": "Triggers a menu item as if the user clicked on it.",
        "kind": "function",
        "name": "triggerOption",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the menu item to trigger.",
                "name": "menuOption"
            }
        ],
        "examples": [
            "<caption>Open the Asset Browser dialog.</caption>\rMenu.triggerOption('Asset Browser');"
        ],
        "memberof": "Menu",
        "longname": "Menu.triggerOption",
        "scope": "static"
    },
    {
        "description": "Checks whether a menu or menu item is enabled. If disabled, the item is grayed out and unusable.\rMenus are enabled by default.",
        "kind": "function",
        "name": "isMenuEnabled",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the menu or menu item to check.",
                "name": "menuName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the menu is enabled, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Report whether the Settings > Developer Menu item is enabled.</caption>\rprint(\"Developer Menu item enabled: \" + Menu.isMenuEnabled(\"Settings > Developer Menu\"));"
        ],
        "memberof": "Menu",
        "longname": "Menu.isMenuEnabled",
        "scope": "static"
    },
    {
        "description": "Sets a menu or menu item to be enabled or disabled. If disabled, the item is grayed out and unusable.",
        "kind": "function",
        "name": "setMenuEnabled",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the menu or menu item to modify.",
                "name": "menuName"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If <code>true</code>, the menu will be enabled, otherwise it will be disabled.",
                "name": "isEnabled"
            }
        ],
        "examples": [
            "<caption>Disable the Settings > Developer Menu item.</caption>\rMenu.setMenuEnabled(\"Settings > Developer Menu\", false);\rprint(\"Developer Menu item enabled: \" + Menu.isMenuEnabled(\"Settings > Developer Menu\"));"
        ],
        "memberof": "Menu",
        "longname": "Menu.setMenuEnabled",
        "scope": "static"
    },
    {
        "description": "Triggered when a menu item is clicked or triggered by {@link Menu.triggerOption}.",
        "kind": "signal",
        "name": "menuItemEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu item that was clicked or triggered.",
                "name": "menuItem"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Detect menu item events.</caption>\rfunction onMenuItemEvent(menuItem) {\r    print(\"Menu item clicked: \" + menuItem);\r}\r\rMenu.menuItemEvent.connect(onMenuItemEvent);\r\n     "
        ],
        "memberof": "Menu",
        "longname": "Menu.menuItemEvent",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>PlatformInfo</code> API provides information about the hardware platform being used.",
        "kind": "namespace",
        "name": "PlatformInfo",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "longname": "PlatformInfo",
        "scope": "global"
    },
    {
        "description": "<p>The platform tier of a computer is an indication of its rendering capability.</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Name</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>0</code></td><td>UNKNOWN</td><td>Unknown rendering capability.</td></tr>\r    <tr><td><code>1</code></td><td>LOW</td><td>Low-end PC, capable of rendering low-quality graphics.</td></tr>\r    <tr><td><code>2</code></td><td>MID</td><td>Business-class PC, capable of rendering medium-quality graphics.</td></tr>\r    <tr><td><code>3</code></td><td>HIGH</td><td>High-end PC, capable of rendering high-quality graphics.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "PlatformTier",
        "type": {
            "names": [
                "number"
            ]
        },
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.PlatformTier",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getInstance",
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.getInstance",
        "scope": "static"
    },
    {
        "description": "Gets the operating system type.",
        "kind": "function",
        "name": "getOperatingSystemType",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The operating system type: <code>\"WINDOWS\"</code>, <code>\"MACOS\"</code>, or <code>\"UNKNOWN\"</code>."
            }
        ],
        "deprecated": "This function is deprecated and will be removed.\r    Use <code>JSON.parse({@link PlatformInfo.getComputer|PlatformInfo.getComputer()}).OS</code> instead.",
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.getOperatingSystemType",
        "scope": "static"
    },
    {
        "description": "Gets information on the CPU model.",
        "kind": "function",
        "name": "getCPUBrand",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Information on the CPU."
            }
        ],
        "deprecated": "This function is deprecated and will be removed.\r    Use <code>JSON.parse({@link PlatformInfo.getCPU|PlatformInfo.getCPU(0)}).model</code> instead.",
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.getCPUBrand",
        "scope": "static"
    },
    {
        "description": "Gets the number of logical CPU cores.",
        "kind": "function",
        "name": "getNumLogicalCores",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The number of logical CPU cores."
            }
        ],
        "deprecated": "This function is deprecated and will be removed.\r    Use <code>JSON.parse({@link PlatformInfo.getCPU|PlatformInfo.getCPU(0)}).numCores</code> instead.",
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.getNumLogicalCores",
        "scope": "static"
    },
    {
        "description": "Gets the total amount of usable physical memory, in MB.",
        "kind": "function",
        "name": "getTotalSystemMemoryMB",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The total system memory in megabytes."
            }
        ],
        "deprecated": "This function is deprecated and will be removed.\r    Use <code>JSON.parse({@link PlatformInfo.getMemory|PlatformInfo.getMemory()}).memTotal</code> instead.",
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.getTotalSystemMemoryMB",
        "scope": "static"
    },
    {
        "description": "Gets the model of the graphics card currently being used.",
        "kind": "function",
        "name": "getGraphicsCardType",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The model of the graphics card currently being used."
            }
        ],
        "deprecated": "This function is deprecated and will be removed.\r    Use <code>JSON.parse({@link PlatformInfo.getGPU|PlatformInfo.getGPU(} \r    {@link PlatformInfo.getMasterGPU|PlatformInfo.getMasterGPU() )}).model</code> \r    instead.",
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.getGraphicsCardType",
        "scope": "static"
    },
    {
        "description": "Checks whether Oculus Touch controllers are connected.",
        "kind": "function",
        "name": "hasRiftControllers",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if Oculus Touch controllers are connected, <code>false</code> if they aren't."
            }
        ],
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.hasRiftControllers",
        "scope": "static"
    },
    {
        "description": "Checks whether Vive controllers are connected.",
        "kind": "function",
        "name": "hasViveControllers",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if Vive controllers are connected, <code>false</code> if they aren't."
            }
        ],
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.hasViveControllers",
        "scope": "static"
    },
    {
        "description": "Checks whether HTML on 3D surfaces (e.g., Web entities) is supported.",
        "kind": "function",
        "name": "has3DHTML",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the current display supports HTML on 3D surfaces, <code>false</code> if it \r    doesn't."
            }
        ],
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.has3DHTML",
        "scope": "static"
    },
    {
        "description": "Checks whether Interface is running on a stand-alone HMD device (CPU incorporated into the HMD display).",
        "kind": "function",
        "name": "isStandalone",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if Interface is running on a stand-alone HMD device, <code>false</code> if it isn't."
            }
        ],
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.isStandalone",
        "scope": "static"
    },
    {
        "description": "Gets the number of CPUs.",
        "kind": "function",
        "name": "getNumCPUs",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The number of CPUs."
            }
        ],
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.getNumCPUs",
        "scope": "static"
    },
    {
        "description": "Gets the index number of the master CPU.",
        "kind": "function",
        "name": "getMasterCPU",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the master CPU."
            }
        ],
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.getMasterCPU",
        "scope": "static"
    },
    {
        "description": "Gets the platform description of a CPU.",
        "kind": "function",
        "name": "getCPU",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index number of the CPU.",
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The CPU's {@link PlatformInfo.CPUDescription|CPUDescription} information as a JSON string."
            }
        ],
        "examples": [
            "<caption>Report details of the computer's CPUs.</caption>\rvar numCPUs = PlatformInfo.getNumCPUs();\rprint(\"Number of CPUs: \" + numCPUs);\rfor (var i = 0; i < numCPUs; i++) {\r    var cpuDescription = PlatformInfo.getCPU(i);\r    print(\"CPU \" + i + \": \" + cpuDescription);\r}"
        ],
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.getCPU",
        "scope": "static"
    },
    {
        "description": "Gets the number of GPUs.",
        "kind": "function",
        "name": "getNumGPUs",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The number of GPUs."
            }
        ],
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.getNumGPUs",
        "scope": "static"
    },
    {
        "description": "Gets the index number of the master GPU.",
        "kind": "function",
        "name": "getMasterGPU",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the master GPU."
            }
        ],
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.getMasterGPU",
        "scope": "static"
    },
    {
        "description": "Gets the platform description of a GPU.",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index number of the GPU.",
                "name": "index"
            }
        ],
        "kind": "function",
        "name": "getGPU",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The GPU's {@link PlatformInfo.GPUDescription|GPUDescription} information as a JSON string."
            }
        ],
        "examples": [
            "<caption>Report details of the computer's GPUs.</caption>\rvar numGPUs = PlatformInfo.getNumGPUs();\rprint(\"Number of GPUs: \" + numGPUs);\rfor (var i = 0; i < numGPUs; i++) {\r    var gpuDescription = PlatformInfo.getGPU(i);\r    print(\"GPU \" + i + \": \" + gpuDescription);\r}"
        ],
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.getGPU",
        "scope": "static"
    },
    {
        "description": "Gets the number of displays.",
        "kind": "function",
        "name": "getNumDisplays",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The number of displays."
            }
        ],
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.getNumDisplays",
        "scope": "static"
    },
    {
        "description": "Gets the index number of the master display.",
        "kind": "function",
        "name": "getMasterDisplay",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the master display."
            }
        ],
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.getMasterDisplay",
        "scope": "static"
    },
    {
        "description": "Gets the platform description of a display.",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index number of the display.",
                "name": "index"
            }
        ],
        "kind": "function",
        "name": "getDisplay",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The display's {@link PlatformInfo.DisplayDescription|DisplayDescription} information as a JSON string."
            }
        ],
        "examples": [
            "<caption>Report details of the systems's displays.</caption>\rvar numDisplays = PlatformInfo.getNumDisplays();\rprint(\"Number of displays: \" + numDisplays);\rfor (var i = 0; i < numDisplays; i++) {\r    var displayDescription = PlatformInfo.getDisplay(i);\r    print(\"Display \" + i + \": \" + displayDescription);\r}"
        ],
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.getDisplay",
        "scope": "static"
    },
    {
        "description": "Gets the platform description of computer memory.",
        "kind": "function",
        "name": "getMemory",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The computer's {@link PlatformInfo.MemoryDescription|MemoryDescription} information as a JSON string."
            }
        ],
        "examples": [
            "<caption>Report details of the computer's memory.</caption>\rprint(\"Memory: \" + PlatformInfo.getMemory());"
        ],
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.getMemory",
        "scope": "static"
    },
    {
        "description": "Gets the platform description of the computer.",
        "kind": "function",
        "name": "getComputer",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The {@link PlatformInfo.ComputerDescription|ComputerDescription} information as a JSON string."
            }
        ],
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.getComputer",
        "scope": "static"
    },
    {
        "description": "Gets the complete description of the computer as a whole.",
        "kind": "function",
        "name": "getPlatform",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The {@link PlatformInfo.PlatformDescription|PlatformDescription} information as a JSON string."
            }
        ],
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.getPlatform",
        "scope": "static"
    },
    {
        "description": "Gets the platform tier of the computer, profiled at Interface start-up.",
        "kind": "function",
        "name": "getTierProfiled",
        "returns": [
            {
                "type": {
                    "names": [
                        "PlatformInfo.PlatformTier"
                    ]
                },
                "description": "The platform tier of the computer."
            }
        ],
        "examples": [
            "<caption>Report the platform tier of the computer.</caption>\rvar platformTier = PlatformInfo.getTierProfiled();\rvar platformTierName = PlatformInfo.getPlatformTierNames()[platformTier];\rprint(\"Platform tier: \" + platformTier + \", \" + platformTierName);"
        ],
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.getTierProfiled",
        "scope": "static"
    },
    {
        "description": "Gets the names of the possible platform tiers, per {@link PlatformInfo.PlatformTier}.",
        "kind": "function",
        "name": "getPlatformTierNames",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "The names of the possible platform tiers."
            }
        ],
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.getPlatformTierNames",
        "scope": "static"
    },
    {
        "description": "Gets whether the current hardware can use deferred rendering.",
        "kind": "function",
        "name": "isRenderMethodDeferredCapable",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the current hardware can use deferred rendering, <code>false</code> if it can't."
            }
        ],
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.isRenderMethodDeferredCapable",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Render</code> API enables you to configure the graphics engine.",
        "kind": "namespace",
        "name": "Render",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "Render.RenderMethod"
                    ]
                },
                "description": "The render method being used.",
                "name": "renderMethod"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if shadows are enabled, <code>false</code> if they're disabled.",
                "name": "shadowsEnabled"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if ambient occlusion is enabled, <code>false</code> if it's \r    disabled.",
                "name": "ambientOcclusionEnabled"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if anti-aliasing is enabled, <code>false</code> if it's disabled.",
                "name": "antialiasingEnabled"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The view port resolution scale, <code>&gt; 0.0</code>.",
                "name": "viewportResolutionScale"
            }
        ],
        "longname": "Render",
        "scope": "global"
    },
    {
        "description": "<p>The rendering method is specified by the following values:</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Name</th><th>Description</th>\r  </thead>\r  <tbody>\r    <tr><td><code>0</code></td><td>DEFERRED</td><td>More complex rendering pipeline where lighting is applied to the \r      scene as a whole after all objects have been rendered.</td></tr>\r    <tr><td><code>1</code></td><td>FORWARD</td><td>Simpler rendering pipeline where each object in the scene, in turn, \r      is rendered and has lighting applied.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "RenderMethod",
        "type": {
            "names": [
                "number"
            ]
        },
        "memberof": "Render",
        "longname": "Render.RenderMethod",
        "scope": "static"
    },
    {
        "description": "Gets the configuration for a rendering job by name.\r<p><strong>Warning:</strong> For internal, debugging purposes. Subject to change.</p>",
        "kind": "function",
        "name": "getConfig",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the rendering job.",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The configuration for the rendering job."
            }
        ],
        "memberof": "Render",
        "longname": "Render.getConfig",
        "scope": "static"
    },
    {
        "description": "Gets the render method being used.",
        "kind": "function",
        "name": "getRenderMethod",
        "returns": [
            {
                "type": {
                    "names": [
                        "Render.RenderMethod"
                    ]
                },
                "description": "The render method being used."
            }
        ],
        "examples": [
            "<caption>Report the current render method.</caption>\rvar renderMethod = Render.getRenderMethod();\rprint(\"Current render method: \" + Render.getRenderMethodNames()[renderMethod]);"
        ],
        "memberof": "Render",
        "longname": "Render.getRenderMethod",
        "scope": "static"
    },
    {
        "description": "Sets the render method to use.",
        "kind": "function",
        "name": "setRenderMethod",
        "params": [
            {
                "type": {
                    "names": [
                        "Render.RenderMethod"
                    ]
                },
                "description": "The render method to use.",
                "name": "renderMethod"
            }
        ],
        "memberof": "Render",
        "longname": "Render.setRenderMethod",
        "scope": "static"
    },
    {
        "description": "Gets the names of the possible render methods, per {@link Render.RenderMethod}.",
        "kind": "function",
        "name": "getRenderMethodNames",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "The names of the possible render methods."
            }
        ],
        "examples": [
            "<caption>Report the names of the possible render methods.</caption>\rvar renderMethods = Render.getRenderMethodNames();\rprint(\"Render methods:\");\rfor (var i = 0; i < renderMethods.length; i++) {\r    print(\"- \" + renderMethods[i]);\r}"
        ],
        "memberof": "Render",
        "longname": "Render.getRenderMethodNames",
        "scope": "static"
    },
    {
        "description": "Gets whether or not shadows are enabled.",
        "kind": "function",
        "name": "getShadowsEnabled",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if shadows are enabled, <code>false</code> if they're disabled."
            }
        ],
        "memberof": "Render",
        "longname": "Render.getShadowsEnabled",
        "scope": "static"
    },
    {
        "description": "Sets whether or not shadows are enabled.",
        "kind": "function",
        "name": "setShadowsEnabled",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to enable shadows, <code>false</code> to disable.",
                "name": "enabled"
            }
        ],
        "memberof": "Render",
        "longname": "Render.setShadowsEnabled",
        "scope": "static"
    },
    {
        "description": "Gets whether or not ambient occlusion is enabled.",
        "kind": "function",
        "name": "getAmbientOcclusionEnabled",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if ambient occlusion is enabled, <code>false</code> if it's disabled."
            }
        ],
        "memberof": "Render",
        "longname": "Render.getAmbientOcclusionEnabled",
        "scope": "static"
    },
    {
        "description": "Sets whether or not ambient occlusion is enabled.",
        "kind": "function",
        "name": "setAmbientOcclusionEnabled",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to enable ambient occlusion, <code>false</code> to disable.",
                "name": "enabled"
            }
        ],
        "memberof": "Render",
        "longname": "Render.setAmbientOcclusionEnabled",
        "scope": "static"
    },
    {
        "description": "Gets whether or not anti-aliasing is enabled.",
        "kind": "function",
        "name": "getAntialiasingEnabled",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if anti-aliasing is enabled, <code>false</code> if it's disabled."
            }
        ],
        "memberof": "Render",
        "longname": "Render.getAntialiasingEnabled",
        "scope": "static"
    },
    {
        "description": "Sets whether or not anti-aliasing is enabled.",
        "kind": "function",
        "name": "setAntialiasingEnabled",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to enable anti-aliasing, <code>false</code> to disable.",
                "name": "enabled"
            }
        ],
        "memberof": "Render",
        "longname": "Render.setAntialiasingEnabled",
        "scope": "static"
    },
    {
        "description": "Gets the view port resolution scale.",
        "kind": "function",
        "name": "getViewportResolutionScale",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The view port resolution scale, <code>&gt; 0.0</code>."
            }
        ],
        "memberof": "Render",
        "longname": "Render.getViewportResolutionScale",
        "scope": "static"
    },
    {
        "description": "Sets the view port resolution scale.",
        "kind": "function",
        "name": "setViewportResolutionScale",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The view port resolution scale to set, <code>&gt; 0.0</code>.",
                "name": "resolutionScale"
            }
        ],
        "memberof": "Render",
        "longname": "Render.setViewportResolutionScale",
        "scope": "static"
    },
    {
        "description": "Triggered when one of the <code>Render</code> API's properties changes.",
        "kind": "signal",
        "name": "settingsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when a render setting changes.</caption>\rRender.settingsChanged.connect(function () {\r    print(\"Render setting changed\");\r});\r// Toggle Developer > Render > Shadows or similar to trigger.\r\n     "
        ],
        "memberof": "Render",
        "longname": "Render.settingsChanged",
        "scope": "static"
    },
    {
        "description": "<p>The type of a specific item in a selection list.</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"avatar\"</code></td><td>The item is an avatar.</td></tr>\r    <tr><td><code>\"entity\"</code></td><td>The item is an entity.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "ItemType",
        "type": {
            "names": [
                "string"
            ]
        },
        "memberof": "Selection",
        "longname": "Selection.ItemType",
        "scope": "static"
    },
    {
        "description": "A selection list.",
        "kind": "typedef",
        "name": "SelectedItemsList",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "The IDs of the avatars in the selection list.",
                "name": "avatars"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "The IDs of the entities in the selection list.",
                "name": "entities"
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.SelectedItemsList",
        "scope": "static"
    },
    {
        "description": "The highlighting style of a selection list.",
        "kind": "typedef",
        "name": "HighlightStyle",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,178,51",
                "description": "Unoccluded outline color.",
                "name": "outlineUnoccludedColor"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,178,51",
                "description": "Occluded outline color.",
                "name": "outlineOccludedColor"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "51,178,255",
                "description": "Unoccluded fill color.",
                "name": "fillUnoccludedColor"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "51,178,255",
                "description": "Occluded fill color.",
                "name": "fillOccludedColor"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.9,
                "description": "Unoccluded outline alpha, range <code>0.0</code> &ndash; <code>1.0</code>.",
                "name": "outlineUnoccludedAlpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.9,
                "description": "Occluded outline alpha, range <code>0.0</code> &ndash; <code>1.0</code>.",
                "name": "outlineOccludedAlpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "0.0",
                "description": "Unoccluded fill alpha, range <code>0.0</code> &ndash; <code>1.0</code>.",
                "name": "fillUnoccludedAlpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "0.0",
                "description": "Occluded fill alpha, range <code>0.0</code> &ndash; <code>1.0</code>.",
                "name": "fillOccludedAlpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 2,
                "description": "Width of the outline, in pixels.",
                "name": "outlineWidth"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> to fade the outside edge of the outline, <code>false</code> \r    to have a sharp edge.",
                "name": "isOutlineSmooth"
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.HighlightStyle",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Selection</code> API provides a means of grouping together and highlighting avatars and entities in named lists.",
        "kind": "namespace",
        "name": "Selection",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "examples": [
            "<caption>Outline an entity when it is grabbed by the mouse or a controller.</caption>\r// Create an entity and copy the following script into the entity's \"Script URL\" field.\r// Move the entity behind another entity to see the occluded outline.\r(function () {\r    var LIST_NAME = \"SelectionExample\",\r        ITEM_TYPE = \"entity\",\r        HIGHLIGHT_STYLE = {\r            outlineUnoccludedColor: { red: 0, green: 180, blue: 239 },\r            outlineUnoccludedAlpha: 0.5,\r            outlineOccludedColor: { red: 239, green: 180, blue: 0 },\r            outlineOccludedAlpha: 0.5,\r            outlineWidth: 4\r        };\r\r    Selection.enableListHighlight(LIST_NAME, HIGHLIGHT_STYLE);\r\r    this.startNearGrab = function (entityID) {\r        Selection.addToSelectedItemsList(LIST_NAME, ITEM_TYPE, entityID);\r    };\r\r    this.startDistanceGrab = function (entityID) {\r        Selection.addToSelectedItemsList(LIST_NAME, ITEM_TYPE, entityID);\r    };\r\r    this.releaseGrab = function (entityID) {\r        Selection.removeFromSelectedItemsList(LIST_NAME, ITEM_TYPE, entityID);\r    };\r\r    Script.scriptEnding.connect(function () {\r        Selection.removeListFromMap(LIST_NAME);\r    });\r});"
        ],
        "longname": "Selection",
        "scope": "global"
    },
    {
        "description": "Gets the names of all current selection lists.",
        "kind": "function",
        "name": "getListNames",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "The names of all current selection lists."
            }
        ],
        "examples": [
            "<caption>List all the current selection lists.</caption>\rprint(\"Selection lists: \" + Selection.getListNames());"
        ],
        "memberof": "Selection",
        "longname": "Selection.getListNames",
        "scope": "static"
    },
    {
        "description": "Deletes a selection list.",
        "kind": "function",
        "name": "removeListFromMap",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the selection list to delete.",
                "name": "listName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the selection existed and was successfully removed, otherwise <code>false</code>."
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.removeListFromMap",
        "scope": "static"
    },
    {
        "description": "Adds an item to a selection list. The list is created if it doesn't exist.",
        "kind": "function",
        "name": "addToSelectedItemsList",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the selection list to add the item to.",
                "name": "listName"
            },
            {
                "type": {
                    "names": [
                        "Selection.ItemType"
                    ]
                },
                "description": "The type of item being added.",
                "name": "itemType"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the item to add.",
                "name": "itemID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the item was successfully added or already existed in the list, otherwise \r    <code>false</code>."
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.addToSelectedItemsList",
        "scope": "static"
    },
    {
        "description": "Removes an item from a selection list.",
        "kind": "function",
        "name": "removeFromSelectedItemsList",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the selection list to remove the item from.",
                "name": "listName"
            },
            {
                "type": {
                    "names": [
                        "Selection.ItemType"
                    ]
                },
                "description": "The type of item being removed.",
                "name": "itemType"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the item to remove.",
                "name": "itemID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the item was successfully removed or was not in the list, otherwise \r    <code>false</code>."
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.removeFromSelectedItemsList",
        "scope": "static"
    },
    {
        "description": "Removes all items from a selection list.",
        "kind": "function",
        "name": "clearSelectedItemsList",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the selection list.",
                "name": "listName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> always."
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.clearSelectedItemsList",
        "scope": "static"
    },
    {
        "description": "Prints the list of avatars and entities in a selection to the program log (but not the Script Log window).",
        "kind": "function",
        "name": "printList",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the selection list.",
                "name": "listName"
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.printList",
        "scope": "static"
    },
    {
        "description": "Gets the list of avatars and entities in a selection list.",
        "kind": "function",
        "name": "getSelectedItemsList",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the selection list.",
                "name": "listName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Selection.SelectedItemsList"
                    ]
                },
                "description": "The content of the selection list if the list exists, otherwise an empty object."
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.getSelectedItemsList",
        "scope": "static"
    },
    {
        "description": "Gets the names of all current selection lists that have highlighting enabled.",
        "kind": "function",
        "name": "getHighlightedListNames",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "The names of the selection lists that currently have highlighting enabled."
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.getHighlightedListNames",
        "scope": "static"
    },
    {
        "description": "Enables highlighting for a selection list. All items in or subsequently added to the list are displayed with the \rhighlight effect specified. The method can be called multiple times with different values in the style to modify the \rhighlighting.\r<p>Note: This function implicitly calls {@link Selection.enableListToScene|enableListToScene}.</p>",
        "kind": "function",
        "name": "enableListHighlight",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the selection list.",
                "name": "listName"
            },
            {
                "type": {
                    "names": [
                        "Selection.HighlightStyle"
                    ]
                },
                "description": "The highlight style.",
                "name": "highlightStyle"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> always."
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.enableListHighlight",
        "scope": "static"
    },
    {
        "description": "Disables highlighting for a selection list.\r<p>Note: This function implicitly calls {@link Selection.disableListToScene|disableListToScene}.</p>",
        "kind": "function",
        "name": "disableListHighlight",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the selection list.",
                "name": "listName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> always."
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.disableListHighlight",
        "scope": "static"
    },
    {
        "description": "Enables scene selection for a selection list. All items in or subsequently added to the list are sent to a scene \rselection in the rendering engine for debugging purposes.",
        "kind": "function",
        "name": "enableListToScene",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the selection list.",
                "name": "listName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> always."
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.enableListToScene",
        "scope": "static"
    },
    {
        "description": "Disables scene selection for a selection list.",
        "kind": "function",
        "name": "disableListToScene",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the selection list.",
                "name": "listName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> always."
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.disableListToScene",
        "scope": "static"
    },
    {
        "description": "Gets the current highlighting style for a selection list.",
        "kind": "function",
        "name": "getListHighlightStyle",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the selection list.",
                "name": "listName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Selection.HighlightStyle"
                    ]
                },
                "description": "The highlight style of the selection list if the list exists and highlighting is \r    enabled, otherwise an empty object."
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.getListHighlightStyle",
        "scope": "static"
    },
    {
        "description": "Triggered when a selection list's content changes or the list is deleted.",
        "kind": "signal",
        "name": "selectedItemsListChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the selection list that changed.",
                "name": "listName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.selectedItemsListChanged",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Settings</code> API provides a facility to store and retrieve values that persist between Interface runs.",
        "kind": "namespace",
        "name": "Settings",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "longname": "Settings",
        "scope": "global"
    },
    {
        "description": "Retrieves the value from a named setting.",
        "kind": "function",
        "name": "getValue",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the setting.",
                "name": "key"
            },
            {
                "type": {
                    "names": [
                        "string",
                        "number",
                        "boolean",
                        "object"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The value to return if the setting doesn't exist.",
                "name": "defaultValue"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string",
                        "number",
                        "boolean",
                        "object"
                    ]
                },
                "description": "The value stored in the named setting if it exists, otherwise the \r    <code>defaultValue</code>."
            }
        ],
        "examples": [
            "<caption>Retrieve non-existent setting values.</caption>\rvar value1 = Settings.getValue(\"Script Example/Nonexistent Key\");\rprint(\"Value: \" + (typeof value1) + \" \" + JSON.stringify(value1));  // string \"\"\r\rvar value2 = Settings.getValue(\"Script Example/Nonexistent Key\", true);\rprint(\"Value: \" + (typeof value2) + \" \" + JSON.stringify(value2));  // boolean true"
        ],
        "memberof": "Settings",
        "longname": "Settings.getValue",
        "scope": "static"
    },
    {
        "description": "Stores a value in a named setting. If the setting already exists, its value is overwritten. If the value is \r<code>null</code> or <code>undefined</code>, the setting is deleted.",
        "kind": "function",
        "name": "setValue",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the setting. Be sure to use a unique name if creating a new setting.",
                "name": "key"
            },
            {
                "type": {
                    "names": [
                        "string",
                        "number",
                        "boolean",
                        "object",
                        "undefined"
                    ]
                },
                "description": "The value to store in the setting. If <code>null</code> or \r    <code>undefined</code> is specified, the setting is deleted.",
                "name": "value"
            }
        ],
        "examples": [
            "<caption>Store and retrieve an object value.</caption>\rSettings.setValue(\"Script Example/My Key\", { x: 0, y: 10, z: 0 });\r\rvar value = Settings.getValue(\"Script Example/My Key\");\rprint(\"Value: \" + (typeof value) + \" \" + JSON.stringify(value));  // object {\"x\":0,\"y\":10,\"z\":0}\r\n     "
        ],
        "memberof": "Settings",
        "longname": "Settings.setValue",
        "scope": "static"
    },
    {
        "description": "Exits the application",
        "kind": "function",
        "name": "quit",
        "memberof": "Test",
        "longname": "Test.quit",
        "scope": "static"
    },
    {
        "description": "Waits for all texture transfers to be complete",
        "kind": "function",
        "name": "waitForTextureIdle",
        "memberof": "Test",
        "longname": "Test.waitForTextureIdle",
        "scope": "static"
    },
    {
        "description": "Waits for all pending downloads to be complete",
        "kind": "function",
        "name": "waitForDownloadIdle",
        "memberof": "Test",
        "longname": "Test.waitForDownloadIdle",
        "scope": "static"
    },
    {
        "description": "Waits for all file parsing operations to be complete",
        "kind": "function",
        "name": "waitForProcessingIdle",
        "memberof": "Test",
        "longname": "Test.waitForProcessingIdle",
        "scope": "static"
    },
    {
        "description": "Waits for all pending downloads, parsing and texture transfers to be complete",
        "kind": "function",
        "name": "waitIdle",
        "memberof": "Test",
        "longname": "Test.waitIdle",
        "scope": "static"
    },
    {
        "description": "Waits for establishment of connection to server",
        "kind": "function",
        "name": "waitForConnection",
        "params": [
            {
                "type": {
                    "names": [
                        "int"
                    ]
                },
                "description": "[default=10000] - Number of milliseconds to wait",
                "name": "maxWaitMs"
            }
        ],
        "memberof": "Test",
        "longname": "Test.waitForConnection",
        "scope": "static"
    },
    {
        "description": "Waits a specific number of milliseconds",
        "kind": "function",
        "name": "wait",
        "params": [
            {
                "type": {
                    "names": [
                        "int"
                    ]
                },
                "description": "Number of milliseconds to wait",
                "name": "milliseconds"
            }
        ],
        "memberof": "Test",
        "longname": "Test.wait",
        "scope": "static"
    },
    {
        "description": "Waits for all pending downloads, parsing and texture transfers to be complete",
        "kind": "function",
        "name": "loadTestScene",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "URL of scene to load",
                "name": "sceneFile"
            }
        ],
        "memberof": "Test",
        "longname": "Test.loadTestScene",
        "scope": "static"
    },
    {
        "description": "Clears all caches",
        "kind": "function",
        "name": "clear",
        "memberof": "Test",
        "longname": "Test.clear",
        "scope": "static"
    },
    {
        "description": "Start recording Chrome compatible tracing events\rlogRules can be used to specify a set of logging category rules to limit what gets captured",
        "kind": "function",
        "name": "startTracing",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "[defaultValue=\"\"] - See implementation for explanation",
                "name": "logrules"
            }
        ],
        "memberof": "Test",
        "longname": "Test.startTracing",
        "scope": "static"
    },
    {
        "description": "Stop recording Chrome compatible tracing events and serialize recorded events to a file\rUsing a filename with a .gz extension will automatically compress the output file",
        "kind": "function",
        "name": "stopTracing",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of file to save to",
                "name": "filename"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "bool"
                    ]
                },
                "description": "True if successful."
            }
        ],
        "memberof": "Test",
        "longname": "Test.stopTracing",
        "scope": "static"
    },
    {
        "description": "Starts a specific trace event",
        "kind": "function",
        "name": "startTraceEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of event",
                "name": "name"
            }
        ],
        "memberof": "Test",
        "longname": "Test.startTraceEvent",
        "scope": "static"
    },
    {
        "description": "Stop a specific name event\rUsing a filename with a .gz extension will automatically compress the output file",
        "kind": "function",
        "name": "endTraceEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of event",
                "name": "filename"
            }
        ],
        "memberof": "Test",
        "longname": "Test.endTraceEvent",
        "scope": "static"
    },
    {
        "description": "Write detailed timing stats of next physics stepSimulation() to filename",
        "kind": "function",
        "name": "savePhysicsSimulationStats",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of file to save to",
                "name": "filename"
            }
        ],
        "memberof": "Test",
        "longname": "Test.savePhysicsSimulationStats",
        "scope": "static"
    },
    {
        "description": "Profiles a specific function",
        "kind": "function",
        "name": "savePhysicsSimulationStats",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name used to reference the function",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function to profile",
                "name": "function"
            }
        ],
        "memberof": "Test",
        "longname": "Test.savePhysicsSimulationStats",
        "scope": "static"
    },
    {
        "description": "Clear all caches (menu command Reload Content)",
        "kind": "function",
        "name": "clearCaches",
        "memberof": "Test",
        "longname": "Test.clearCaches",
        "scope": "static"
    },
    {
        "description": "Save a JSON object to a file in the test results location",
        "kind": "function",
        "name": "saveObject",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the object",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of file to save to",
                "name": "filename"
            }
        ],
        "memberof": "Test",
        "longname": "Test.saveObject",
        "scope": "static"
    },
    {
        "description": "Maximizes the window",
        "kind": "function",
        "name": "showMaximized",
        "memberof": "Test",
        "longname": "Test.showMaximized",
        "scope": "static"
    },
    {
        "description": "Values higher than 0 will create replicas of other-avatars when entering a domain for testing purpouses",
        "kind": "function",
        "name": "setOtherAvatarsReplicaCount",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Number of replicas we want to create",
                "name": "count"
            }
        ],
        "memberof": "Test",
        "longname": "Test.setOtherAvatarsReplicaCount",
        "scope": "static"
    },
    {
        "description": "Return the number of replicas that are being created of other-avatars when entering a domain",
        "kind": "function",
        "name": "getOtherAvatarsReplicaCount",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Current number of replicas of other-avatars."
            }
        ],
        "memberof": "Test",
        "longname": "Test.getOtherAvatarsReplicaCount",
        "scope": "static"
    },
    {
        "description": "Set number of cycles texture size is required to be stable",
        "kind": "function",
        "name": "setMinimumGPUTextureMemStabilityCount",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Number of cycles to wait",
                "name": "count"
            }
        ],
        "memberof": "Test",
        "longname": "Test.setMinimumGPUTextureMemStabilityCount",
        "scope": "static"
    },
    {
        "description": "Check whether all textures have been loaded.",
        "kind": "function",
        "name": "isTextureLoadingComplete",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> texture memory usage is not increasing"
            }
        ],
        "memberof": "Test",
        "longname": "Test.isTextureLoadingComplete",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>WalletScriptingInterface</code> API provides functions related to the user's wallet and verification of certified \ravatar entities.",
        "kind": "namespace",
        "name": "WalletScriptingInterface",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "WalletScriptingInterface.WalletStatus"
                    ]
                },
                "description": "The status of the user's wallet. <em>Read-only.</em>",
                "name": "walletStatus"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if Interface is running in limited commerce mode. In limited commerce \r    mode, certain Interface functionalities are disabled, e.g., users can't buy items that are not free from the Marketplace. \r    The Oculus Store and Steam versions of Interface run in limited commerce mode. <em>Read-only.</em>",
                "name": "limitedCommerce"
            }
        ],
        "longname": "WalletScriptingInterface",
        "scope": "global"
    },
    {
        "description": "Checks and updates the user's wallet status.",
        "kind": "function",
        "name": "refreshWalletStatus",
        "memberof": "WalletScriptingInterface",
        "longname": "WalletScriptingInterface.refreshWalletStatus",
        "scope": "static"
    },
    {
        "description": "Gets the current status of the user's wallet.",
        "kind": "function",
        "name": "getWalletStatus",
        "returns": [
            {
                "type": {
                    "names": [
                        "WalletScriptingInterface.WalletStatus"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Use two methods to report your wallet's status.</caption>\rprint(\"Wallet status: \" + WalletScriptingInterface.walletStatus);  // Same value as next line.\rprint(\"Wallet status: \" + WalletScriptingInterface.getWalletStatus());"
        ],
        "memberof": "WalletScriptingInterface",
        "longname": "WalletScriptingInterface.getWalletStatus",
        "scope": "static"
    },
    {
        "description": "Check that a certified avatar entity is owned by the avatar whose entity it is. The result of the check is provided via \rthe {@link WalletScriptingInterface.ownershipVerificationSuccess|ownershipVerificationSuccess} and \r{@link WalletScriptingInterface.ownershipVerificationFailed|ownershipVerificationFailed} signals.\r<p><strong>Warning:</strong> Neither of these signals are triggered if the entity is not an avatar entity or is not \rcertified.</p>",
        "kind": "function",
        "name": "proveAvatarEntityOwnershipVerification",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The avatar entity's ID.",
                "name": "entityID"
            }
        ],
        "examples": [
            "<caption>Check the ownership of all nearby certified avatar entities.</caption>\r// Set up response handling.\rfunction ownershipSuccess(entityID) {\r    print(\"Ownership test succeeded for: \" + entityID);\r}\rfunction ownershipFailed(entityID) {\r    print(\"Ownership test failed for: \" + entityID);\r}\rWalletScriptingInterface.ownershipVerificationSuccess.connect(ownershipSuccess);\rWalletScriptingInterface.ownershipVerificationFailed.connect(ownershipFailed);\r\r// Check ownership of all nearby certified avatar entities.\rvar entityIDs = Entities.findEntities(MyAvatar.position, 10);\rvar i, length;\rfor (i = 0, length = entityIDs.length; i < length; i++) {\r    var properties = Entities.getEntityProperties(entityIDs[i], [\"entityHostType\", \"certificateID\"]);\r    if (properties.entityHostType === \"avatar\" && properties.certificateID !== \"\") {\r        print(\"Prove ownership of: \" + entityIDs[i]);\r        WalletScriptingInterface.proveAvatarEntityOwnershipVerification(entityIDs[i]);\r    }\r}\r\r// Tidy up.\rScript.scriptEnding.connect(function () {\r    WalletScriptingInterface.ownershipVerificationFailed.disconnect(ownershipFailed);\r    WalletScriptingInterface.ownershipVerificationSuccess.disconnect(ownershipSuccess);\r});"
        ],
        "memberof": "WalletScriptingInterface",
        "longname": "WalletScriptingInterface.proveAvatarEntityOwnershipVerification",
        "scope": "static"
    },
    {
        "description": "Triggered when the user's wallet status changes.",
        "kind": "signal",
        "name": "walletStatusChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when your wallet status changes, e.g., when you log in and out.</caption>\rWalletScriptingInterface.walletStatusChanged.connect(function () {\r    print(\"Wallet status changed to: \" + WalletScriptingInterface.walletStatus\");\r});"
        ],
        "memberof": "WalletScriptingInterface",
        "longname": "WalletScriptingInterface.walletStatusChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the user's limited commerce status changes.",
        "kind": "signal",
        "name": "limitedCommerceChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "WalletScriptingInterface",
        "longname": "WalletScriptingInterface.limitedCommerceChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the user rezzes a certified entity but the user's wallet is not ready. So the certified location of the\rentity cannot be updated in the metaverse.",
        "kind": "signal",
        "name": "walletNotSetup",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "WalletScriptingInterface",
        "longname": "WalletScriptingInterface.walletNotSetup",
        "scope": "static"
    },
    {
        "description": "Triggered when a certified avatar entity's ownership check requested via \r{@link WalletScriptingInterface.proveAvatarEntityOwnershipVerification|proveAvatarEntityOwnershipVerification} succeeds.",
        "kind": "signal",
        "name": "ownershipVerificationSuccess",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the avatar entity checked.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "WalletScriptingInterface",
        "longname": "WalletScriptingInterface.ownershipVerificationSuccess",
        "scope": "static"
    },
    {
        "description": "Triggered when a certified avatar entity's ownership check requested via\r{@link WalletScriptingInterface.proveAvatarEntityOwnershipVerification|proveAvatarEntityOwnershipVerification} fails.",
        "kind": "signal",
        "name": "ownershipVerificationFailed",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the avatar entity checked.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "WalletScriptingInterface",
        "longname": "WalletScriptingInterface.ownershipVerificationFailed",
        "scope": "static"
    },
    {
        "description": "<p>The buttons that may be included in a message box created by {@link Window.openMessageBox|openMessageBox} are defined by\rnumeric values:\r<table>\r  <thead>\r    <tr>\r      <th>Button</th>\r      <th>Value</th>\r      <th>Description</th>\r    </tr>\r  </thead>\r  <tbody>\r    <tr> <td><strong>NoButton</strong></td> <td><code>0x0</code></td> <td>An invalid button.</td> </tr>\r    <tr> <td><strong>Ok</strong></td> <td><code>0x400</code></td> <td>\"OK\"</td> </tr>\r    <tr> <td><strong>Save</strong></td> <td><code>0x800</code></td> <td>\"Save\"</td> </tr>\r    <tr> <td><strong>SaveAll</strong></td> <td><code>0x1000</code></td> <td>\"Save All\"</td> </tr>\r    <tr> <td><strong>Open</strong></td> <td><code>0x2000</code></td> <td>\"Open\"</td> </tr>\r    <tr> <td><strong>Yes</strong></td> <td><code>0x4000</code></td> <td>\"Yes\"</td> </tr>\r    <tr> <td><strong>YesToAll</strong></td> <td><code>0x8000</code></td> <td>\"Yes to All\"</td> </tr>\r    <tr> <td><strong>No</strong></td> <td><code>0x10000</code></td> <td>\"No\"</td> </tr>\r    <tr> <td><strong>NoToAll</strong></td> <td><code>0x20000</code></td> <td>\"No to All\"</td> </tr>\r    <tr> <td><strong>Abort</strong></td> <td><code>0x40000</code></td> <td>\"Abort\"</td> </tr>\r    <tr> <td><strong>Retry</strong></td> <td><code>0x80000</code></td> <td>\"Retry\"</td> </tr>\r    <tr> <td><strong>Ignore</strong></td> <td><code>0x100000</code></td> <td>\"Ignore\"</td> </tr>\r    <tr> <td><strong>Close</strong></td> <td><code>0x200000</code></td> <td>\"Close\"</td> </tr>\r    <tr> <td><strong>Cancel</strong></td> <td><code>0x400000</code></td> <td>\"Cancel\"</td> </tr>\r    <tr> <td><strong>Discard</strong></td> <td><code>0x800000</code></td> <td>\"Discard\" or \"Don't Save\"</td> </tr>\r    <tr> <td><strong>Help</strong></td> <td><code>0x1000000</code></td> <td>\"Help\"</td> </tr>\r    <tr> <td><strong>Apply</strong></td> <td><code>0x2000000</code></td> <td>\"Apply\"</td> </tr>\r    <tr> <td><strong>Reset</strong></td> <td><code>0x4000000</code></td> <td>\"Reset\"</td> </tr>\r    <tr> <td><strong>RestoreDefaults</strong></td> <td><code>0x8000000</code></td> <td>\"Restore Defaults\"</td> </tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "MessageBoxButton",
        "type": {
            "names": [
                "number"
            ]
        },
        "memberof": "Window",
        "longname": "Window.MessageBoxButton",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Window</code> API provides various facilities not covered elsewhere, including: window dimensions, window focus, \rcamera view, announcements, user connections, common dialog boxes, snapshots, file import, domain navigation, domain changes, \rdomain physics, OS clipboard, build number.",
        "kind": "namespace",
        "name": "Window",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The width of the drawable area of the Interface window (i.e., without borders or other\r    chrome), in pixels. <em>Read-only.</em>",
                "name": "innerWidth"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The height of the drawable area of the Interface window (i.e., without borders or other\r    chrome), in pixels. <em>Read-only.</em>",
                "name": "innerHeight"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The x display coordinate of the top left corner of the drawable area of the Interface window. \r    <em>Read-only.</em>",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The y display coordinate of the top left corner of the drawable area of the Interface window. \r    <em>Read-only.</em>",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the interstitial graphics are displayed when a \r    domain is loading, otherwise <code>false</code>.",
                "name": "interstitialModeEnabled"
            },
            {
                "type": {
                    "names": [
                        "location"
                    ]
                },
                "description": "Provides facilities for working with your current metaverse location.",
                "name": "location"
            }
        ],
        "longname": "Window",
        "scope": "global"
    },
    {
        "description": "Checks whether the Interface window has focus.",
        "kind": "function",
        "name": "hasFocus",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the Interface window has focus, <code>false</code> if it doesn't."
            }
        ],
        "memberof": "Window",
        "longname": "Window.hasFocus",
        "scope": "static"
    },
    {
        "description": "Makes the Interface window have focus. On Windows, if Interface doesn't already have focus, the task bar icon flashes to \rindicate that Interface wants attention but focus isn't taken away from the application that the user is using.",
        "kind": "function",
        "name": "setFocus",
        "memberof": "Window",
        "longname": "Window.setFocus",
        "scope": "static"
    },
    {
        "description": "Raises the Interface window if it is minimized. If raised, the window gains focus.",
        "kind": "function",
        "name": "raise",
        "memberof": "Window",
        "longname": "Window.raise",
        "scope": "static"
    },
    {
        "description": "Displays a dialog with the specified message and an \"OK\" button. The dialog is non-modal; the script continues without\rwaiting for a user response.",
        "kind": "function",
        "name": "alert",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The message to display.",
                "name": "message"
            }
        ],
        "examples": [
            "<caption>Display a friendly greeting.</caption>\rWindow.alert(\"Welcome!\");\rprint(\"Script continues without waiting\");"
        ],
        "memberof": "Window",
        "longname": "Window.alert",
        "scope": "static"
    },
    {
        "description": "Prompts the user to confirm something. Displays a modal dialog with a message plus \"Yes\" and \"No\" buttons.",
        "kind": "function",
        "name": "confirm",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The question to display.",
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the user selects \"Yes\", otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Ask the user a question requiring a yes/no answer.</caption>\rvar answer = Window.confirm(\"Are you sure?\");\rprint(answer);  // true or false"
        ],
        "memberof": "Window",
        "longname": "Window.confirm",
        "scope": "static"
    },
    {
        "description": "Prompts the user to enter some text. Displays a modal dialog with a message and a text box, plus \"OK\" and \"Cancel\" \rbuttons.",
        "kind": "function",
        "name": "prompt",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The question to display.",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The default answer text.",
                "name": "defaultText"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The text that the user entered if they select \"OK\", otherwise \"\"."
            }
        ],
        "examples": [
            "<caption>Ask the user a question requiring a text answer.</caption>\rvar answer = Window.prompt(\"Question\", \"answer\");\rif (answer === \"\") {\r    print(\"User canceled\");\r} else {\r    print(\"User answer: \" + answer);\r}"
        ],
        "memberof": "Window",
        "longname": "Window.prompt",
        "scope": "static"
    },
    {
        "description": "Prompts the user to enter some text. Displays a non-modal dialog with a message and a text box, plus \"OK\" and \"Cancel\" \rbuttons. A {@link Window.promptTextChanged|promptTextChanged} signal is emitted when the user OKs the dialog; no signal \ris emitted if the user cancels the dialog.",
        "kind": "function",
        "name": "promptAsync",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The question to display.",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The default answer text.",
                "name": "defaultText"
            }
        ],
        "examples": [
            "<caption>Ask the user a question requiring a text answer without waiting for the answer.</caption>\rfunction onPromptTextChanged(text) {\r    print(\"User answer: \" + text);\r}\rWindow.promptTextChanged.connect(onPromptTextChanged);\r\rWindow.promptAsync(\"Question\", \"answer\");\rprint(\"Script continues without waiting\");"
        ],
        "memberof": "Window",
        "longname": "Window.promptAsync",
        "scope": "static"
    },
    {
        "description": "Prompts the user to choose a directory. Displays a modal dialog that navigates the directory tree.",
        "kind": "function",
        "name": "browseDir",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The title to display at the top of the dialog.",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The initial directory to start browsing at.",
                "name": "directory"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path of the directory if one is chosen, otherwise <code>null</code>."
            }
        ],
        "examples": [
            "<caption>Ask the user to choose a directory.</caption>\rvar directory = Window.browseDir(\"Select Directory\", Paths.resources);\rprint(\"Directory: \" + directory);"
        ],
        "memberof": "Window",
        "longname": "Window.browseDir",
        "scope": "static"
    },
    {
        "description": "Prompts the user to choose a directory. Displays a non-modal dialog that navigates the directory tree. A\r{@link Window.browseDirChanged|browseDirChanged} signal is emitted when a directory is chosen; no signal is emitted if\rthe user cancels the dialog.",
        "kind": "function",
        "name": "browseDirAsync",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The title to display at the top of the dialog.",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The initial directory to start browsing at.",
                "name": "directory"
            }
        ],
        "examples": [
            "<caption>Ask the user to choose a directory without waiting for the answer.</caption>\rfunction onBrowseDirChanged(directory) {\r    print(\"Directory: \" + directory);\r}\rWindow.browseDirChanged.connect(onBrowseDirChanged);\r\rWindow.browseDirAsync(\"Select Directory\", Paths.resources);\rprint(\"Script continues without waiting\");"
        ],
        "memberof": "Window",
        "longname": "Window.browseDirAsync",
        "scope": "static"
    },
    {
        "description": "Prompts the user to choose a file. Displays a modal dialog that navigates the directory tree.",
        "kind": "function",
        "name": "browse",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The title to display at the top of the dialog.",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The initial directory to start browsing at.",
                "name": "directory"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The types of files to display. Examples: <code>\"*.json\"</code> and \r    <code>\"Images (*.png *.jpg *.svg)\"</code>. All files are displayed if a filter isn't specified.",
                "name": "nameFilter"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the file if one is chosen, otherwise <code>null</code>."
            }
        ],
        "examples": [
            "<caption>Ask the user to choose an image file.</caption>\rvar filename = Window.browse(\"Select Image File\", Paths.resources, \"Images (*.png *.jpg *.svg)\");\rprint(\"File: \" + filename);"
        ],
        "memberof": "Window",
        "longname": "Window.browse",
        "scope": "static"
    },
    {
        "description": "Prompts the user to choose a file. Displays a non-modal dialog that navigates the directory tree. A\r{@link Window.browseChanged|browseChanged} signal is emitted when a file is chosen; no signal is emitted if the user\rcancels the dialog.",
        "kind": "function",
        "name": "browseAsync",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The title to display at the top of the dialog.",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The initial directory to start browsing at.",
                "name": "directory"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The types of files to display. Examples: <code>\"*.json\"</code> and\r    <code>\"Images (*.png *.jpg *.svg)\"</code>. All files are displayed if a filter isn't specified.",
                "name": "nameFilter"
            }
        ],
        "examples": [
            "<caption>Ask the user to choose an image file without waiting for the answer.</caption>\rfunction onBrowseChanged(filename) {\r    print(\"File: \" + filename);\r}\rWindow.browseChanged.connect(onBrowseChanged);\r\rWindow.browseAsync(\"Select Image File\", Paths.resources, \"Images (*.png *.jpg *.svg)\");\rprint(\"Script continues without waiting\");"
        ],
        "memberof": "Window",
        "longname": "Window.browseAsync",
        "scope": "static"
    },
    {
        "description": "Prompts the user to specify the path and name of a file to save to. Displays a model dialog that navigates the directory\rtree and allows the user to type in a file name.",
        "kind": "function",
        "name": "save",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The title to display at the top of the dialog.",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The initial directory to start browsing at.",
                "name": "directory"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The types of files to display. Examples: <code>\"*.json\"</code> and\r    <code>\"Images (*.png *.jpg *.svg)\"</code>. All files are displayed if a filter isn't specified.",
                "name": "nameFilter"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the file if one is specified, otherwise <code>null</code>. If a single file type\r    is specified in the nameFilter, that file type extension is automatically appended to the result when appropriate."
            }
        ],
        "examples": [
            "<caption>Ask the user to specify a file to save to.</caption>\rvar filename = Window.save(\"Save to JSON file\", Paths.resources, \"*.json\");\rprint(\"File: \" + filename);"
        ],
        "memberof": "Window",
        "longname": "Window.save",
        "scope": "static"
    },
    {
        "description": "Prompts the user to specify the path and name of a file to save to. Displays a non-model dialog that navigates the\rdirectory tree and allows the user to type in a file name. A {@link Window.saveFileChanged|saveFileChanged} signal is\remitted when a file is specified; no signal is emitted if the user cancels the dialog.",
        "kind": "function",
        "name": "saveAsync",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The title to display at the top of the dialog.",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The initial directory to start browsing at.",
                "name": "directory"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The types of files to display. Examples: <code>\"*.json\"</code> and\r    <code>\"Images (*.png *.jpg *.svg)\"</code>. All files are displayed if a filter isn't specified.",
                "name": "nameFilter"
            }
        ],
        "examples": [
            "<caption>Ask the user to specify a file to save to without waiting for an answer.</caption>\rfunction onSaveFileChanged(filename) {\r    print(\"File: \" + filename);\r}\rWindow.saveFileChanged.connect(onSaveFileChanged);\r\rWindow.saveAsync(\"Save to JSON file\", Paths.resources, \"*.json\");\rprint(\"Script continues without waiting\");"
        ],
        "memberof": "Window",
        "longname": "Window.saveAsync",
        "scope": "static"
    },
    {
        "description": "Prompts the user to choose an Asset Server item. Displays a modal dialog that navigates the tree of assets on the Asset\rServer.",
        "kind": "function",
        "name": "browseAssets",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The title to display at the top of the dialog.",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The initial directory to start browsing at.",
                "name": "directory"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The types of files to display. Examples: <code>\"*.json\"</code> and \r    <code>\"Images (*.png *.jpg *.svg)\"</code>. All files are displayed if a filter isn't specified.",
                "name": "nameFilter"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the asset if one is chosen, otherwise <code>null</code>."
            }
        ],
        "examples": [
            "<caption>Ask the user to select an FBX asset.</caption>\rvar asset = Window.browseAssets(\"Select FBX File\", \"/\", \"*.fbx\");\rprint(\"FBX file: \" + asset);"
        ],
        "memberof": "Window",
        "longname": "Window.browseAssets",
        "scope": "static"
    },
    {
        "description": "Prompts the user to choose an Asset Server item. Displays a non-modal dialog that navigates the tree of assets on the \rAsset Server. An {@link Window.assetsDirChanged|assetsDirChanged} signal is emitted when an asset is chosen; no signal is\remitted if the user cancels the dialog.",
        "kind": "function",
        "name": "browseAssetsAsync",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The title to display at the top of the dialog.",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The initial directory to start browsing at.",
                "name": "directory"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The types of files to display. Examples: <code>\"*.json\"</code> and\r    <code>\"Images (*.png *.jpg *.svg)\"</code>. All files are displayed if a filter isn't specified.",
                "name": "nameFilter"
            }
        ],
        "examples": [
            "function onAssetsDirChanged(asset) {\r    print(\"FBX file: \" + asset);\r}\rWindow.assetsDirChanged.connect(onAssetsDirChanged);\r\rWindow.browseAssetsAsync(\"Select FBX File\", \"/\", \"*.fbx\");\rprint(\"Script continues without waiting\");"
        ],
        "memberof": "Window",
        "longname": "Window.browseAssetsAsync",
        "scope": "static"
    },
    {
        "description": "Opens the Asset Browser dialog. If a file to upload is specified, the user is prompted to enter the folder and name to\rmap the file to on the asset server.",
        "kind": "function",
        "name": "showAssetServer",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The path and name of a file to upload to the asset server.",
                "name": "uploadFile"
            }
        ],
        "examples": [
            "<caption>Upload a file to the asset server.</caption>\rvar filename = Window.browse(\"Select File to Add to Asset Server\", Paths.resources);\rprint(\"File: \" + filename);\rWindow.showAssetServer(filename);"
        ],
        "memberof": "Window",
        "longname": "Window.showAssetServer",
        "scope": "static"
    },
    {
        "description": "Gets Interface's build number.",
        "kind": "function",
        "name": "checkVersion",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Interface's build number."
            }
        ],
        "memberof": "Window",
        "longname": "Window.checkVersion",
        "scope": "static"
    },
    {
        "description": "Gets the signature for Interface's protocol version.",
        "kind": "function",
        "name": "protocolSignature",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "A string uniquely identifying the version of the metaverse protocol that Interface is using."
            }
        ],
        "memberof": "Window",
        "longname": "Window.protocolSignature",
        "scope": "static"
    },
    {
        "description": "Copies text to the operating system's clipboard.",
        "kind": "function",
        "name": "copyToClipboard",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The text to copy to the operating system's clipboard.",
                "name": "text"
            }
        ],
        "memberof": "Window",
        "longname": "Window.copyToClipboard",
        "scope": "static"
    },
    {
        "description": "Takes a snapshot of the current Interface view from the primary camera. When a still image only is captured, \r{@link Window.stillSnapshotTaken|stillSnapshotTaken} is emitted; when a still image plus moving images are captured, \r{@link Window.processingGifStarted|processingGifStarted} and {@link Window.processingGifCompleted|processingGifCompleted}\rare emitted.\r<p>Snapshots are saved to the path specified in Settings &gt; General &gt; Snapshots, which can be accessed via the \r{@link Snapshot} API.</p>",
        "kind": "function",
        "name": "takeSnapshot",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "This value is passed on through the {@link Window.stillSnapshotTaken|stillSnapshotTaken}\r    signal.",
                "name": "notify"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If <code>true</code>, a moving image is captured as an animated GIF in addition \r    to a still image.",
                "name": "includeAnimated"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "The width/height ratio of the snapshot required. If the value is <code>0</code>, the\r    full resolution is used (window dimensions in desktop mode; HMD display dimensions in HMD mode), otherwise one of the\r    dimensions is adjusted in order to match the aspect ratio.",
                "name": "aspectRatio"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "If a filename is not provided, the image is saved as \"hifi-snap-by-&lt;user \r    name&gt;-on-YYYY-MM-DD_HH-MM-SS\".\r    <p>Still images are saved in JPEG or PNG format according to the extension provided &mdash; <code>\".jpg\"</code>, \r    <code>\".jpeg\"</code>, or <code>\".png\"</code> &mdash; or if not provided then in JPEG format with an extension of \r    <code>\".jpg\"</code>. Animated images are saved in GIF format.</p>",
                "name": "filename"
            }
        ],
        "examples": [
            "<caption>Using the snapshot function and signals.</caption>\rfunction onStillSnapshotTaken(path, notify) {\r    print(\"Still snapshot taken: \" + path);\r    print(\"Notify: \" + notify);\r}\r\rfunction onProcessingGifStarted(stillPath) {\r    print(\"Still snapshot taken: \" + stillPath);\r}\r\rfunction onProcessingGifCompleted(animatedPath) {\r    print(\"Animated snapshot taken: \" + animatedPath);\r}\r\rWindow.stillSnapshotTaken.connect(onStillSnapshotTaken);\rWindow.processingGifStarted.connect(onProcessingGifStarted);\rWindow.processingGifCompleted.connect(onProcessingGifCompleted);\r\rvar notify = true;\rvar animated = true;\rvar aspect = 1920 / 1080;\rvar filename = \"example-snapshot\";\rWindow.takeSnapshot(notify, animated, aspect, filename);"
        ],
        "memberof": "Window",
        "longname": "Window.takeSnapshot",
        "scope": "static"
    },
    {
        "description": "Takes a still snapshot of the current view from the secondary camera that can be set up through the {@link Render} API.\r<p>Snapshots are saved to the path specified in Settings &gt; General &gt; Snapshots, which can be accessed via the\r{@link Snapshot} API.</p>",
        "kind": "function",
        "name": "takeSecondaryCameraSnapshot",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "This value is passed on through the {@link Window.stillSnapshotTaken|stillSnapshotTaken}\r    signal.",
                "name": "notify"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "If a filename is not provided, the image is saved as \"hifi-snap-by-&lt;user\r    name&gt;-on-YYYY-MM-DD_HH-MM-SS\".\r    <p>Images are saved in JPEG or PNG format according to the extension provided &mdash; <code>\".jpg\"</code>,\r    <code>\".jpeg\"</code>, or <code>\".png\"</code> &mdash; or if not provided then in JPEG format with an extension of\r    <code>\".jpg\"</code>.</p>",
                "name": "filename"
            }
        ],
        "memberof": "Window",
        "longname": "Window.takeSecondaryCameraSnapshot",
        "scope": "static"
    },
    {
        "description": "Takes a 360&deg; snapshot at a given position for the secondary camera. The secondary camera does not need to have been \r    set up.\r<p>Snapshots are saved to the path specified in Settings &gt; General &gt; Snapshots, which can be accessed via the\r{@link Snapshot} API.</p>",
        "kind": "function",
        "name": "takeSecondaryCamera360Snapshot",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the camera for the snapshot.",
                "name": "cameraPosition"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If <code>true</code> then the snapshot is saved as a cube map image, \r    otherwise it is saved as an equirectangular image.",
                "name": "cubemapOutputFormat"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "This value is passed on through the {@link Window.stillSnapshotTaken|stillSnapshotTaken}\r    signal.",
                "name": "notify"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "If a filename is not provided, the image is saved as \"hifi-snap-by-&lt;user\r    name&gt;-on-YYYY-MM-DD_HH-MM-SS\".\r    <p>Images are saved in JPEG or PNG format according to the extension provided &mdash; <code>\".jpg\"</code>,\r    <code>\".jpeg\"</code>, or <code>\".png\"</code> &mdash; or if not provided then in JPEG format with an extension of\r    <code>\".jpg\"</code>.</p>",
                "name": "filename"
            }
        ],
        "memberof": "Window",
        "longname": "Window.takeSecondaryCamera360Snapshot",
        "scope": "static"
    },
    {
        "description": "Emits a {@link Window.connectionAdded|connectionAdded} or a {@link Window.connectionError|connectionError} signal that\rindicates whether or not a user connection was successfully made using the Web API.",
        "kind": "function",
        "name": "makeConnection",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If <code>true</code> then {@link Window.connectionAdded|connectionAdded} is emitted, otherwise\r    {@link Window.connectionError|connectionError} is emitted.",
                "name": "success"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Descriptive text about the connection success or error. This is sent in the signal emitted.",
                "name": "description"
            }
        ],
        "memberof": "Window",
        "longname": "Window.makeConnection",
        "scope": "static"
    },
    {
        "description": "Displays a notification message. Notifications are displayed in panels by the default script, nofications.js. An\r{@link Window.announcement|announcement} signal is emitted when this function is called.",
        "kind": "function",
        "name": "displayAnnouncement",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The announcement message.",
                "name": "message"
            }
        ],
        "examples": [
            "<caption>Send and capture an announcement message.</caption>\rfunction onAnnouncement(message) {\r    // The message is also displayed as a notification by notifications.js.\r    print(\"Announcement: \" + message);\r}\rWindow.announcement.connect(onAnnouncement);\r\rWindow.displayAnnouncement(\"Hello\");"
        ],
        "memberof": "Window",
        "longname": "Window.displayAnnouncement",
        "scope": "static"
    },
    {
        "description": "Prepares a snapshot ready for sharing. A {@link Window.snapshotShared|snapshotShared} signal is emitted when the snapshot\rhas been prepared.",
        "kind": "function",
        "name": "shareSnapshot",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the image file to share.",
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The metaverse location where the snapshot was taken.",
                "name": "href"
            }
        ],
        "memberof": "Window",
        "longname": "Window.shareSnapshot",
        "scope": "static"
    },
    {
        "description": "Checks to see if physics is active for you in the domain you're visiting - there is a delay between your arrival at a\rdomain and physics becoming active for you in that domain.",
        "kind": "function",
        "name": "isPhysicsEnabled",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if physics is currently active for you, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Wait for physics to be enabled when you change domains.</caption>\rfunction checkForPhysics() {\r    var isPhysicsEnabled = Window.isPhysicsEnabled();\r    print(\"Physics enabled: \" + isPhysicsEnabled);\r    if (!isPhysicsEnabled) {\r        Script.setTimeout(checkForPhysics, 1000);\r    }\r}\r\rfunction onDomainChanged(domain) {\r    print(\"Domain changed: \" + domain);\r    Script.setTimeout(checkForPhysics, 1000);\r}\r\rWindow.domainChanged.connect(onDomainChanged);"
        ],
        "memberof": "Window",
        "longname": "Window.isPhysicsEnabled",
        "scope": "static"
    },
    {
        "description": "Sets what to show on the PC display. For entity camera view, the entity camera is configured using \r{@link Camera.setCameraEntity} and {@link Camera|Camera.mode}.",
        "kind": "function",
        "name": "setDisplayTexture",
        "params": [
            {
                "type": {
                    "names": [
                        "Window.DisplayTexture"
                    ]
                },
                "description": "The view to display.",
                "name": "texture"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the display texture was successfully set, otherwise <code>false</code>."
            }
        ],
        "memberof": "Window",
        "longname": "Window.setDisplayTexture",
        "scope": "static"
    },
    {
        "description": "Checks if a 2D point is within the desktop window if in desktop mode, or the drawable area of the HUD overlay if in HMD\rmode.",
        "kind": "function",
        "name": "isPointOnDesktopWindow",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "The point to check.",
                "name": "point"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the point is within the window or HUD, otherwise <code>false</code>."
            }
        ],
        "memberof": "Window",
        "longname": "Window.isPointOnDesktopWindow",
        "scope": "static"
    },
    {
        "description": "Gets the size of the drawable area of the Interface window if in desktop mode or the HMD rendering surface if in HMD mode.",
        "kind": "function",
        "name": "getDeviceSize",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "The width and height of the Interface window or HMD rendering surface, in pixels."
            }
        ],
        "memberof": "Window",
        "longname": "Window.getDeviceSize",
        "scope": "static"
    },
    {
        "description": "Gets the last domain connection error when a connection is refused.",
        "kind": "function",
        "name": "getLastDomainConnectionError",
        "returns": [
            {
                "type": {
                    "names": [
                        "Window.ConnectionRefusedReason"
                    ]
                },
                "description": "Integer number that enumerates the last domain connection refused."
            }
        ],
        "memberof": "Window",
        "longname": "Window.getLastDomainConnectionError",
        "scope": "static"
    },
    {
        "description": "Opens a non-modal message box that can have a variety of button combinations. See also, \r{@link Window.updateMessageBox|updateMessageBox} and {@link Window.closeMessageBox|closeMessageBox}.",
        "kind": "function",
        "name": "openMessageBox",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The title to display for the message box.",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Text to display in the message box.",
                "name": "text"
            },
            {
                "type": {
                    "names": [
                        "Window.MessageBoxButton"
                    ]
                },
                "description": "The buttons to display on the message box; one or more button values added\r    together.",
                "name": "buttons"
            },
            {
                "type": {
                    "names": [
                        "Window.MessageBoxButton"
                    ]
                },
                "description": "The button that has focus when the message box is opened.",
                "name": "defaultButton"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the message box created."
            }
        ],
        "examples": [
            "<caption>Ask the user whether that want to reset something.</caption>\rvar messageBox;\rvar resetButton = 0x4000000;\rvar cancelButton = 0x400000;\r\rfunction onMessageBoxClosed(id, button) {\r    if (id === messageBox) {\r        if (button === resetButton) {\r            print(\"Reset\");\r        } else {\r            print(\"Don't reset\");\r        }\r    }\r}\rWindow.messageBoxClosed.connect(onMessageBoxClosed);\r\rmessageBox = Window.openMessageBox(\"Reset Something\", \r    \"Do you want to reset something?\",\r    resetButton + cancelButton, cancelButton);"
        ],
        "memberof": "Window",
        "longname": "Window.openMessageBox",
        "scope": "static"
    },
    {
        "description": "Opens a URL in the Interface window or other application, depending on the URL's scheme. The following schemes are \rsupported:\r<ul>\r  <li><code>hifi</code>: Navigate to the URL in Interface.</li>\r  <li><code>hifiapp</code>: Open a system app in Interface.</li>\r</ul>\r<p>Other schemes will either be handled by the OS (e.g. <code>http</code>, <code>https</code>, or <code>mailto</code>) or \rwill display a dialog asking the user to confirm that they want to try to open the URL.</p>",
        "kind": "function",
        "name": "openUrl",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL to open.",
                "name": "url"
            }
        ],
        "memberof": "Window",
        "longname": "Window.openUrl",
        "scope": "static"
    },
    {
        "description": "Opens an Android activity and optionally return back to the scene when the activity is completed. <em>Android only.</em>",
        "kind": "function",
        "name": "openAndroidActivity",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the activity to open: one of <code>\"Home\"</code>, <code>\"Login\"</code>, or \r    <code>\"Privacy Policy\"</code>.",
                "name": "activityName"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If <code>true</code>, the user is automatically returned back to the scene when the \r    activity is completed.",
                "name": "backToScene"
            }
        ],
        "memberof": "Window",
        "longname": "Window.openAndroidActivity",
        "scope": "static"
    },
    {
        "description": "Updates the content of a message box that was opened with {@link Window.openMessageBox|openMessageBox}.",
        "kind": "function",
        "name": "updateMessageBox",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the message box.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The title to display for the message box.",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Text to display in the message box.",
                "name": "text"
            },
            {
                "type": {
                    "names": [
                        "Window.MessageBoxButton"
                    ]
                },
                "description": "The buttons to display on the message box; one or more button values added\r    together.",
                "name": "buttons"
            },
            {
                "type": {
                    "names": [
                        "Window.MessageBoxButton"
                    ]
                },
                "description": "The button that has focus when the message box is opened.",
                "name": "defaultButton"
            }
        ],
        "memberof": "Window",
        "longname": "Window.updateMessageBox",
        "scope": "static"
    },
    {
        "description": "Closes a message box that was opened with {@link Window.openMessageBox|openMessageBox}.",
        "kind": "function",
        "name": "closeMessageBox",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the message box.",
                "name": "id"
            }
        ],
        "memberof": "Window",
        "longname": "Window.closeMessageBox",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "domainLoadingProgress",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Progress."
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Window",
        "longname": "Window.domainLoadingProgress",
        "scope": "static"
    },
    {
        "description": "Gets the number of display plugins currently available.",
        "kind": "function",
        "name": "getDisplayPluginCount",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The number of display plugins currently available."
            }
        ],
        "memberof": "Window",
        "longname": "Window.getDisplayPluginCount",
        "scope": "static"
    },
    {
        "description": "Gets the name of a display plugin.",
        "kind": "function",
        "name": "getDisplayPluginName",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the display plugin. Must be less than the value returned by \r    {@link Window.getDisplayPluginCount|getDisplayPluginCount}. The first display plugin has an index of <code>0</code>.",
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the display plugin."
            }
        ],
        "examples": [
            "<caption>Print the names of all available display plugins.</caption>\rfor (var i = 0, length = Window.getDisplayPluginCount(); i < length; i++) {\r    print(Window.getDisplayPluginName(i));\r}"
        ],
        "memberof": "Window",
        "longname": "Window.getDisplayPluginName",
        "scope": "static"
    },
    {
        "description": "Checks whether a display plugin is an HMD.",
        "kind": "function",
        "name": "isDisplayPluginHmd",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the display plugin. Must be less than the value returned by \r    {@link Window.getDisplayPluginCount|getDisplayPluginCount}. The first display plugin has an index of <code>0</code>.",
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the display plugin is a HMD, <code>false</code> if it isn't."
            }
        ],
        "memberof": "Window",
        "longname": "Window.isDisplayPluginHmd",
        "scope": "static"
    },
    {
        "description": "Gets the index of the currently active display plugin.",
        "kind": "function",
        "name": "getActiveDisplayPlugin",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the currently active display plugin. The first display plugin has an index of \r    <code>0</code>."
            }
        ],
        "memberof": "Window",
        "longname": "Window.getActiveDisplayPlugin",
        "scope": "static"
    },
    {
        "description": "Sets the currently active display plugin.",
        "kind": "function",
        "name": "setActiveDisplayPlugin",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the display plugin. Must be less than the value returned by \r    {@link Window.getDisplayPluginCount|getDisplayPluginCount}. The first display plugin has an index of <code>0</code>.",
                "name": "index"
            }
        ],
        "memberof": "Window",
        "longname": "Window.setActiveDisplayPlugin",
        "scope": "static"
    },
    {
        "description": "Opens a web browser in a pop-up window.",
        "kind": "function",
        "name": "openWebBrowser",
        "memberof": "Window",
        "longname": "Window.openWebBrowser",
        "scope": "static"
    },
    {
        "description": "Triggered when you change the domain you're visiting.\r<p><strong>Warning:</strong> Is not emitted if you go to a domain that isn't running.</p>",
        "kind": "signal",
        "name": "domainChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The domain's URL.",
                "name": "domainURL"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when you change domains.</caption>\rfunction onDomainChanged(domain) {\r    print(\"Domain changed: \" + domain);\r}\r\rWindow.domainChanged.connect(onDomainChanged);"
        ],
        "memberof": "Window",
        "longname": "Window.domainChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when you try to navigate to a *.json, *.svo, or *.svo.json URL in a Web browser within Interface.",
        "kind": "signal",
        "name": "svoImportRequested",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the file to import.",
                "name": "url"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.svoImportRequested",
        "scope": "static"
    },
    {
        "description": "Triggered when you try to visit a domain but are refused connection.",
        "kind": "signal",
        "name": "domainConnectionRefused",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "A description of the refusal.",
                "name": "reasonMessage"
            },
            {
                "type": {
                    "names": [
                        "Window.ConnectionRefusedReason"
                    ]
                },
                "description": "Integer number that enumerates the reason for the refusal.",
                "name": "reasonCode"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Extra information about the refusal.",
                "name": "extraInfo"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.domainConnectionRefused",
        "scope": "static"
    },
    {
        "description": "Triggered when you try to visit a domain but are redirected into the error state.",
        "kind": "signal",
        "name": "redirectErrorStateChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the user has been redirected to the error URL, <code>false</code> \r    if they haven't.",
                "name": "isInErrorState"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.redirectErrorStateChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the interstitial mode changes.",
        "kind": "signal",
        "name": "interstitialModeChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the interstitial graphics are displayed when the domain is \r    loading, <code>false</code> if they are not.",
                "name": "interstitialMode"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.interstitialModeChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when a still snapshot has been taken by calling {@link Window.takeSnapshot|takeSnapshot} with \r    <code>includeAnimated = false</code> or {@link Window.takeSecondaryCameraSnapshot|takeSecondaryCameraSnapshot}.",
        "kind": "signal",
        "name": "stillSnapshotTaken",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the snapshot image file.",
                "name": "pathStillSnapshot"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "The value of the <code>notify</code> parameter that {@link Window.takeSnapshot|takeSnapshot}\r    was called with.",
                "name": "notify"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.stillSnapshotTaken",
        "scope": "static"
    },
    {
        "description": "Triggered when a still 360&deg; snapshot has been taken by calling \r    {@link Window.takeSecondaryCamera360Snapshot|takeSecondaryCamera360Snapshot}.",
        "kind": "signal",
        "name": "snapshot360Taken",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the snapshot image file.",
                "name": "pathStillSnapshot"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "The value of the <code>notify</code> parameter that {@link Window.takeSecondaryCamera360Snapshot|takeSecondaryCamera360Snapshot}\r    was called with.",
                "name": "notify"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.snapshot360Taken",
        "scope": "static"
    },
    {
        "description": "Triggered when a snapshot submitted via {@link Window.shareSnapshot|shareSnapshot} is ready for sharing. The snapshot\rmay then be shared via the {@link Account.metaverseServerURL} Web API.",
        "kind": "signal",
        "name": "snapshotShared",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if an error was encountered preparing the snapshot for sharing, otherwise\r    <code>false</code>.",
                "name": "isError"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "JSON-formatted information about the snapshot.",
                "name": "reply"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.snapshotShared",
        "scope": "static"
    },
    {
        "description": "Triggered when the snapshot images have been captured by {@link Window.takeSnapshot|takeSnapshot} and the GIF is\r    starting to be processed.",
        "kind": "signal",
        "name": "processingGifStarted",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the still snapshot image file.",
                "name": "pathStillSnapshot"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.processingGifStarted",
        "scope": "static"
    },
    {
        "description": "Triggered when a GIF has been prepared of the snapshot images captured by {@link Window.takeSnapshot|takeSnapshot}.",
        "kind": "signal",
        "name": "processingGifCompleted",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the moving snapshot GIF file.",
                "name": "pathAnimatedSnapshot"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.processingGifCompleted",
        "scope": "static"
    },
    {
        "description": "Triggered when you've successfully made a user connection.",
        "kind": "signal",
        "name": "connectionAdded",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "A description of the success.",
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.connectionAdded",
        "scope": "static"
    },
    {
        "description": "Triggered when you failed to make a user connection.",
        "kind": "signal",
        "name": "connectionError",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "A description of the error.",
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.connectionError",
        "scope": "static"
    },
    {
        "description": "Triggered when a message is announced by {@link Window.displayAnnouncement|displayAnnouncement}.",
        "kind": "signal",
        "name": "announcement",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The message text.",
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.announcement",
        "scope": "static"
    },
    {
        "description": "Triggered when the user closes a message box that was opened with {@link Window.openMessageBox|openMessageBox}.",
        "kind": "signal",
        "name": "messageBoxClosed",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the message box that was closed.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The button that the user clicked. If the user presses Esc, the Cancel button value is returned,\r   whether or not the Cancel button is displayed in the message box.",
                "name": "button"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.messageBoxClosed",
        "scope": "static"
    },
    {
        "description": "Triggered when the user chooses a directory in a {@link Window.browseDirAsync|browseDirAsync} dialog.",
        "kind": "signal",
        "name": "browseDirChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The directory the user chose in the dialog.",
                "name": "directory"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.browseDirChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the user chooses an asset in a {@link Window.browseAssetsAsync|browseAssetsAsync} dialog.",
        "kind": "signal",
        "name": "assetsDirChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the asset the user chose in the dialog.",
                "name": "asset"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.assetsDirChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the user specifies a file in a {@link Window.saveAsync|saveAsync} dialog.",
        "kind": "signal",
        "name": "saveFileChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the file that the user specified in the dialog.",
                "name": "filename"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.saveFileChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the user chooses a file in a {@link Window.browseAsync|browseAsync} dialog.",
        "kind": "signal",
        "name": "browseChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the file the user chose in the dialog.",
                "name": "filename"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.browseChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the user OKs a {@link Window.promptAsync|promptAsync} dialog.",
        "kind": "signal",
        "name": "promptTextChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The text the user entered in the dialog.",
                "name": "text"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.promptTextChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the position or size of the Interface window changes.",
        "kind": "signal",
        "name": "geometryChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "Rect"
                    ]
                },
                "description": "The position and size of the drawable area of the Interface window.",
                "name": "geometry"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report the position of size of the Interface window when it changes.</caption>\rfunction onWindowGeometryChanged(rect) {\r    print(\"Window geometry: \" + JSON.stringify(rect));\r}\r\rWindow.geometryChanged.connect(onWindowGeometryChanged);"
        ],
        "memberof": "Window",
        "longname": "Window.geometryChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when \"minimized\" state of the Interface window changes.",
        "kind": "signal",
        "name": "minimizedChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "bool"
                    ]
                },
                "description": "true if the Interface window is now minimized; false otherwise.",
                "name": "isMinimized"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                },
                "description": "Window.minimizedChanged.connect(onWindowMinimizedChanged);"
            }
        ],
        "memberof": "Window",
        "longname": "Window.minimizedChanged",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>AvatarInputs</code> API provides facilities to manage user inputs.",
        "kind": "namespace",
        "name": "AvatarInputs",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if webcam face tracking is enabled, <code>false</code> if it is \r    disabled.\r    <em>Read-only.</em>\r    <p class=\"important\">Deprecated: This property is deprecated and has been removed.</p>",
                "name": "cameraEnabled"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if webcam face tracking is muted (temporarily disabled), \r    <code>false</code> it if isn't.\r    <em>Read-only.</em>\r    <p class=\"important\">Deprecated: This property is deprecated and has been removed.</p>",
                "name": "cameraMuted"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the privacy shield is enabled, <code>false</code> if it\r    is disabled.\r    <em>Read-only.</em>",
                "name": "ignoreRadiusEnabled"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the display mode is HMD, <code>false</code> if it isn't. \r    <em>Read-only.</em>",
                "name": "isHMD"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the microphone mute button and audio level meter are shown, \r    <code>false</code> if they are hidden.",
                "name": "showAudioTools"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the privacy shield UI button is shown, <code>false</code> if \r    it is hidden.",
                "name": "showBubbleTools"
            }
        ],
        "longname": "AvatarInputs",
        "scope": "global"
    },
    {
        "description": "Converts non-linear audio loudness to a linear audio level.",
        "kind": "function",
        "name": "loudnessToAudioLevel",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The non-linear audio loudness.",
                "name": "loudness"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The linear audio level."
            }
        ],
        "memberof": "AvatarInputs",
        "longname": "AvatarInputs.loudnessToAudioLevel",
        "scope": "static"
    },
    {
        "description": "Sets whether or not the microphone mute button and audio level meter is shown.",
        "kind": "function",
        "name": "setShowAudioTools",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to show the microphone mute button and audio level meter, \r    <code>false</code> to hide it.",
                "name": "showAudioTools"
            }
        ],
        "memberof": "AvatarInputs",
        "longname": "AvatarInputs.setShowAudioTools",
        "scope": "static"
    },
    {
        "description": "Sets whether or not the privacy shield button is shown.",
        "kind": "function",
        "name": "setShowBubbleTools",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to show the privacy shield button, <code>false</code> to hide it.",
                "name": "showBubbleTools"
            }
        ],
        "memberof": "AvatarInputs",
        "longname": "AvatarInputs.setShowBubbleTools",
        "scope": "static"
    },
    {
        "description": "Triggered when webcam face tracking is enabled or disabled.",
        "deprecated": "This signal is deprecated and has been removed.",
        "kind": "signal",
        "name": "cameraEnabledChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AvatarInputs",
        "longname": "AvatarInputs.cameraEnabledChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when webcam face tracking is muted (temporarily disabled) or unmuted.",
        "deprecated": "This signal is deprecated and has been removed.",
        "kind": "signal",
        "name": "cameraMutedChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AvatarInputs",
        "longname": "AvatarInputs.cameraMutedChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the display mode changes between desktop and HMD.",
        "kind": "signal",
        "name": "isHMDChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AvatarInputs",
        "longname": "AvatarInputs.isHMDChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the visibility of the microphone mute button and audio level meter changes.",
        "kind": "signal",
        "name": "showAudioToolsChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the microphone mute button and audio level meter are shown, \r    <code>false</code> if they are is hidden.",
                "name": "show"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AvatarInputs",
        "longname": "AvatarInputs.showAudioToolsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the visibility of the privacy shield button changes.",
        "kind": "signal",
        "name": "showBubbleToolsChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the privacy shield UI button is shown, <code>false</code> if \r    it is hidden.",
                "name": "show"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AvatarInputs",
        "longname": "AvatarInputs.showBubbleToolsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when another user enters the privacy shield.",
        "kind": "signal",
        "name": "avatarEnteredIgnoreRadius",
        "params": [
            {
                "type": {
                    "names": [
                        "QUuid"
                    ]
                },
                "description": "The session ID of the user that entered the privacy shield.",
                "name": "avatarID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when a user enters the privacy shield.</caption>\rAvatarInputs.avatarEnteredIgnoreRadius.connect(function(avatarID) {\r    print(\"User entered the privacy shield: \" + avatarID);\r};"
        ],
        "memberof": "AvatarInputs",
        "longname": "AvatarInputs.avatarEnteredIgnoreRadius",
        "scope": "static"
    },
    {
        "description": "Triggered when another user leaves the privacy shield.\r<p><strong>Note:</strong> Currently doesn't work.</p>",
        "kind": "signal",
        "name": "avatarLeftIgnoreRadius",
        "params": [
            {
                "type": {
                    "names": [
                        "QUuid"
                    ]
                },
                "description": "The session ID of the user that exited the privacy shield.",
                "name": "avatarID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "deprecated": "This signal is deprecated and will be removed.",
        "memberof": "AvatarInputs",
        "longname": "AvatarInputs.avatarLeftIgnoreRadius",
        "scope": "static"
    },
    {
        "description": "Triggered when the privacy shield is enabled or disabled.",
        "kind": "signal",
        "name": "ignoreRadiusEnabledChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the privacy shield is enabled, <code>false</code> if it is disabled.",
                "name": "enabled"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AvatarInputs",
        "longname": "AvatarInputs.ignoreRadiusEnabledChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when another user enters the privacy shield.",
        "kind": "signal",
        "name": "enteredIgnoreRadiusChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AvatarInputs",
        "longname": "AvatarInputs.enteredIgnoreRadiusChanged",
        "scope": "static"
    },
    {
        "description": "Resets sensors, audio, avatar animations, and the avatar rig.",
        "kind": "function",
        "name": "resetSensors",
        "memberof": "AvatarInputs",
        "longname": "AvatarInputs.resetSensors",
        "scope": "static"
    },
    {
        "description": "Toggles the muting (temporary disablement) of webcam face tracking on/off.\r<p class=\"important\">Deprecated: This function is deprecated and has been removed.</p>",
        "kind": "function",
        "name": "toggleCameraMute",
        "memberof": "AvatarInputs",
        "longname": "AvatarInputs.toggleCameraMute",
        "scope": "static"
    },
    {
        "description": "A set of properties used when creating an <code>InteractiveWindow</code>.",
        "kind": "typedef",
        "name": "Properties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"InteractiveWindow",
                "description": "The title of the window.",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "optional": true,
                "description": "The initial position of the window, in pixels.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "optional": true,
                "description": "The initial size of the window, in pixels",
                "name": "size"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "<code>true</code> to make the window visible when created, <code>false</code> to make\r    it invisible.",
                "name": "visible"
            },
            {
                "type": {
                    "names": [
                        "InteractiveWindow.PresentationMode"
                    ]
                },
                "optional": true,
                "defaultvalue": "Desktop.PresentationMode.VIRTUAL",
                "description": "<code>Desktop.PresentationMode.VIRTUAL</code> to display the window inside Interface, <code>.NATIVE</code> to display it\r    as its own separate window.",
                "name": "presentationMode"
            },
            {
                "type": {
                    "names": [
                        "InteractiveWindow.PresentationWindowInfo"
                    ]
                },
                "optional": true,
                "description": "Controls how a <code>NATIVE</code> window is\r    displayed. If used, the window is docked to the specified edge of the Interface window, otherwise the window is\r    displayed as its own separate window.",
                "name": "presentationWindowInfo"
            },
            {
                "type": {
                    "names": [
                        "InteractiveWindow.AdditionalFlags"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "Window behavior flags in addition to \"native window flags\" (minimize/maximize/close),\r    set at window creation. Possible flag values are provided as {@link Desktop|Desktop.ALWAYS_ON_TOP} and {@link Desktop|Desktop.CLOSE_BUTTON_HIDES}.\r    Additional flag values can be found on Qt's website at https://doc.qt.io/qt-5/qt.html#WindowType-enum.",
                "name": "additionalFlags"
            },
            {
                "type": {
                    "names": [
                        "InteractiveWindow.OverrideFlags"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "Window behavior flags instead of the default window flags.\r    Set at window creation. Possible flag values are provided as {@link Desktop|Desktop.ALWAYS_ON_TOP} and {@link Desktop|Desktop.CLOSE_BUTTON_HIDES}.\r    Additional flag values can be found on Qt's website at https://doc.qt.io/qt-5/qt.html#WindowType-enum.",
                "name": "overrideFlags"
            }
        ],
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.Properties",
        "scope": "static"
    },
    {
        "description": "Configures how a <code>NATIVE</code> window is displayed.",
        "kind": "typedef",
        "name": "PresentationWindowInfo",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "InteractiveWindow.DockArea"
                    ]
                },
                "description": "The edge of the Interface window to dock to.",
                "name": "dockArea"
            }
        ],
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.PresentationWindowInfo",
        "scope": "static"
    },
    {
        "description": "<p>A set of  flags controlling <code>InteractiveWindow</code> behavior. The value is constructed by using the \r<code>|</code> (bitwise OR) operator on the individual flag values.</p>\r<table>\r  <thead>\r    <tr><th>Flag Name</th><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td>ALWAYS_ON_TOP</td><td><code>1</code></td><td>The window always displays on top.</td></tr>\r    <tr><td>CLOSE_BUTTON_HIDES</td><td><code>2</code></td><td>The window hides instead of closing when the user clicks \r      the \"close\" button.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "Flags",
        "type": {
            "names": [
                "number"
            ]
        },
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.Flags",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>An <code>InteractiveWindow</code> can display either inside Interface or in its own window separate from the Interface \rwindow. The window content is defined by a QML file, which can optionally include a <code>WebView</code> control that embeds \ran HTML web page. (The <code>WebView</code> control is defined by a \"WebView.qml\" file included in the Interface install.)\r\r<p>Create using {@link Desktop.createWindow}.</p>",
        "kind": "class",
        "name": "InteractiveWindow",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The title of the window.",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "The position of the window, in pixels.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "The size of the window, in pixels.",
                "name": "size"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the window is visible, <code>false</code> if it isn't.",
                "name": "visible"
            },
            {
                "type": {
                    "names": [
                        "InteractiveWindow.PresentationMode"
                    ]
                },
                "description": "The presentation mode of the window: \r    <code>Desktop.PresentationMode.VIRTUAL</code> to display the window inside Interface, <code>.NATIVE</code> to display it\r    as its own separate window.",
                "name": "presentationMode"
            }
        ],
        "longname": "InteractiveWindow",
        "scope": "global"
    },
    {
        "description": "Sends a message to the QML page. To receive the message, the QML page must implement a function:\r<pre class=\"prettyprint\"><code>function fromScript(message) {\r  ...\r}</code></pre>",
        "kind": "function",
        "name": "sendToQml",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "object"
                    ]
                },
                "description": "The message to send to the QML page.",
                "name": "message"
            }
        ],
        "examples": [
            "<caption>Send and receive messages with a QML window.</caption>\r// JavaScript file.\r\rvar qmlWindow = Desktop.createWindow(Script.resolvePath(\"QMLWindow.qml\"), {\r    title: \"QML Window\",\r    size: { x: 400, y: 300 }\r});\r\rqmlWindow.fromQml.connect(function (message) {\r    print(\"Message received: \" + message);\r});\r\rScript.setTimeout(function () {\r    qmlWindow.sendToQml(\"Hello world!\");\r}, 2000);\r\rScript.scriptEnding.connect(function () {\r    qmlWindow.close();\r});",
            "// QML file, \"QMLWindow.qml\".\r\rimport QtQuick 2.5\rimport QtQuick.Controls 1.4\r\rRectangle {\r\r    function fromScript(message) {\r        text.text = message;\r        sendToScript(\"Hello back!\");\r    }\r\r    Label {\r        id: text\r        anchors.centerIn: parent\r        text: \"...\"\r    }\r}"
        ],
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.sendToQml",
        "scope": "static"
    },
    {
        "description": "Sends a message to an embedded HTML web page. To receive the message, the HTML page's script must connect to the \r<code>EventBridge</code> that is automatically provided to the script:\r<pre class=\"prettyprint\"><code>EventBridge.scriptEventReceived.connect(function(message) {\r    ...\r});</code></pre>",
        "kind": "function",
        "name": "emitScriptEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "object"
                    ]
                },
                "description": "The message to send to the embedded HTML web page.",
                "name": "message"
            }
        ],
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.emitScriptEvent",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "emitWebEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "object",
                        "string"
                    ]
                },
                "description": "The message.",
                "name": "message"
            }
        ],
        "deprecated": "This function is deprecated and will be removed from the API.",
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.emitWebEvent",
        "scope": "static"
    },
    {
        "description": "Closes the window. It can then no longer be used.",
        "kind": "function",
        "name": "close",
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.close",
        "scope": "static"
    },
    {
        "description": "Makes the window visible and raises it to the top.",
        "kind": "function",
        "name": "show",
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.show",
        "scope": "static"
    },
    {
        "description": "Raises the window to the top.",
        "kind": "function",
        "name": "raise",
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.raise",
        "scope": "static"
    },
    {
        "description": "Triggered when the window is made visible or invisible, or is closed.",
        "kind": "signal",
        "name": "visibleChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.visibleChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the window's position changes.",
        "kind": "signal",
        "name": "positionChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.positionChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the window's size changes.",
        "kind": "signal",
        "name": "sizeChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.sizeChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the window's presentation mode changes.",
        "kind": "signal",
        "name": "presentationModeChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.presentationModeChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when window's title changes.",
        "kind": "signal",
        "name": "titleChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.titleChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the window is closed.",
        "kind": "signal",
        "name": "closed",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.closed",
        "scope": "static"
    },
    {
        "description": "Triggered when a message from the QML page is received. The QML page can send a message (string or object) by calling:\r<pre class=\"prettyprint\"><code>sendToScript(message);</code></pre>",
        "kind": "signal",
        "name": "fromQml",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "object"
                    ]
                },
                "description": "The message received.",
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.fromQml",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "scriptEventReceived",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The message.",
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "deprecated": "This signal is deprecated and will be removed from the API.",
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.scriptEventReceived",
        "scope": "static"
    },
    {
        "description": "Triggered when a message from an embedded HTML web page is received. The HTML web page can send a message by calling:\r<pre class=\"prettyprint\"><code>EventBridge.emitWebEvent(message);</code></pre>",
        "kind": "signal",
        "name": "webEventReceived",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "object"
                    ]
                },
                "description": "The message received.",
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.webEventReceived",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "qmlToScript",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "deprecated": "This signal is deprecated and will be removed from the API.",
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.qmlToScript",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Snapshot</code> API provides access to the path that snapshots are saved to. This path is that provided in \rSettings &gt; General &gt; Snapshots. Snapshots may be taken using <code>Window</code> API functions such as \r{@link Window.takeSnapshot}.",
        "kind": "namespace",
        "name": "Snapshot",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "longname": "Snapshot",
        "scope": "global"
    },
    {
        "description": "Triggered when the path that snapshots are saved to is changed.",
        "kind": "signal",
        "name": "snapshotLocationSet",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The new snapshots location.",
                "name": "location"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when the snapshots location is changed.</caption>\r// Run this script then change the snapshots location in Settings > General > Snapshots.\rSnapshot.snapshotLocationSet.connect(function (path) {\r    print(\"New snapshot location: \" + path);\r});"
        ],
        "memberof": "Snapshot",
        "longname": "Snapshot.snapshotLocationSet",
        "scope": "static"
    },
    {
        "description": "Gets the path that snapshots are saved to.",
        "kind": "function",
        "name": "getSnapshotsLocation",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path to save snapshots to."
            }
        ],
        "memberof": "Snapshot",
        "longname": "Snapshot.getSnapshotsLocation",
        "scope": "static"
    },
    {
        "description": "Sets the path that snapshots are saved to.",
        "kind": "function",
        "name": "setSnapshotsLocation",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "The path to save snapshots to.",
                "name": "location"
            }
        ],
        "memberof": "Snapshot",
        "longname": "Snapshot.setSnapshotsLocation",
        "scope": "static"
    },
    {
        "kind": "namespace",
        "name": "Stats",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "expanded"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "timingExpanded"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "monospaceFont"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "serverCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "How often the app is creating new gpu::Frames. <em>Read-only.</em>",
                "name": "renderrate"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "How often the display plugin is presenting to the device. <em>Read-only.</em>",
                "name": "presentrate"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "How often the display device is reprojecting old frames. <em>Read-only.</em>",
                "name": "stutterrate"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "appdropped"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "longsubmits"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "longrenders"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "longframes"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "presentnewrate"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "presentdroprate"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "gameLoopRate"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "avatarCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "heroAvatarCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "physicsObjectCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "updatedAvatarCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "updatedHeroAvatarCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "notUpdatedAvatarCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "packetInCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "packetOutCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "mbpsIn"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "mbpsOut"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "assetMbpsIn"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "assetMbpsOut"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "audioPing"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "avatarPing"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "entitiesPing"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "assetPing"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "messagePing"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "speed"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "yaw"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "avatarMixerInKbps"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "avatarMixerInPps"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "avatarMixerOutKbps"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "avatarMixerOutPps"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "myAvatarSendRate"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "audioMixerInKbps"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "audioMixerInPps"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "audioMixerOutKbps"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "audioMixerOutPps"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "audioMixerKbps"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "audioMixerPps"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "audioOutboundPPS"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "audioSilentOutboundPPS"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "audioAudioInboundPPS"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "audioSilentInboundPPS"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "audioPacketLoss"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "audioCodec"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "audioNoiseGate"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "audioInjectors"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "entityPacketsInKbps"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "downloads"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "downloadLimit"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "downloadsPending"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "downloadUrls"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "processing"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "processingPending"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "triangles"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "materialSwitches"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "itemConsidered"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "itemOutOfView"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "itemTooSmall"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "itemRendered"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "shadowConsidered"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "shadowOutOfView"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "shadowTooSmall"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "shadowRendered"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "sendingMode"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "packetStats"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "lodAngle"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "lodTargetFramerate"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "lodStatus"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "timingStats"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "gameUpdateStats"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "serverElements"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "serverInternal"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "serverLeaves"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "localElements"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "localInternal"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "localLeaves"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "rectifiedTextureCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "decimatedTextureCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "gpuBuffers"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "gpuBufferMemory"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "gpuTextures"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "glContextSwapchainMemory"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "qmlTextureMemory"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "texturePendingTransfers"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "gpuTextureMemory"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "gpuTextureResidentMemory"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "gpuTextureFramebufferMemory"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "gpuTextureResourceMemory"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "gpuTextureResourceIdealMemory"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "gpuTextureResourcePopulatedMemory"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "gpuTextureExternalMemory"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "gpuTextureMemoryPressureState"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "gpuFreeMemory"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "gpuFrameTime"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "batchFrameTime"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "engineFrameTime"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "avatarSimulationTime"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "z"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "width"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "height"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "opacity"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enabled"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "visible"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "state"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "anchors"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "baselineOffset"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "clip"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "focus"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "activeFocus"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "activeFocusOnTab"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "scale"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "transformOrigin"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "smooth"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "antialiasing"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "implicitWidth"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "implicitHeight"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "layer"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "stylusPicksCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "rayPicksCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "parabolaPicksCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "collisionPicksCount"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "stylusPicksUpdated"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "rayPicksUpdated"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "parabolaPicksUpdated"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "collisionPicksUpdated"
            },
            {
                "type": {
                    "names": [
                        "bool"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "eventQueueDebuggingOn"
            }
        ],
        "longname": "Stats",
        "scope": "global",
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>"
    },
    {
        "description": "Triggered when the value of the <code>longsubmits</code> property changes.",
        "kind": "signal",
        "name": "longsubmitsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.longsubmitsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>longrenders</code> property changes.",
        "kind": "signal",
        "name": "longrendersChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.longrendersChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>longframes</code> property changes.",
        "kind": "signal",
        "name": "longframesChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.longframesChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>appdropped</code> property changes.",
        "kind": "signal",
        "name": "appdroppedChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.appdroppedChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>expanded</code> property changes.",
        "kind": "signal",
        "name": "expandedChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.expandedChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>timingExpanded</code> property changes.",
        "kind": "signal",
        "name": "timingExpandedChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.timingExpandedChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>serverCount</code> property changes.",
        "kind": "signal",
        "name": "serverCountChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.serverCountChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>renderrate</code> property changes.",
        "kind": "signal",
        "name": "renderrateChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.renderrateChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>presentrate</code> property changes.",
        "kind": "signal",
        "name": "presentrateChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.presentrateChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>presentnewrate</code> property changes.",
        "kind": "signal",
        "name": "presentnewrateChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.presentnewrateChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>presentdroprate</code> property changes.",
        "kind": "signal",
        "name": "presentdroprateChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.presentdroprateChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>stutterrate</code> property changes.",
        "kind": "signal",
        "name": "stutterrateChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.stutterrateChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>gameLoopRate</code> property changes.",
        "kind": "signal",
        "name": "gameLoopRateChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.gameLoopRateChanged",
        "scope": "static"
    },
    {
        "description": "Trigered when",
        "kind": "signal",
        "name": "numPhysicsBodiesChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.numPhysicsBodiesChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>avatarCount</code> property changes.",
        "kind": "signal",
        "name": "avatarCountChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.avatarCountChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>heroAvatarCount</code> property changes.",
        "kind": "signal",
        "name": "heroAvatarCountChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.heroAvatarCountChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>updatedAvatarCount</code> property changes.",
        "kind": "signal",
        "name": "updatedAvatarCountChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.updatedAvatarCountChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>updatedHeroAvatarCount</code> property changes.",
        "kind": "signal",
        "name": "updatedHeroAvatarCountChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.updatedHeroAvatarCountChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>notUpdatedAvatarCount</code> property changes.",
        "kind": "signal",
        "name": "notUpdatedAvatarCountChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.notUpdatedAvatarCountChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>packetInCount</code> property changes.",
        "kind": "signal",
        "name": "packetInCountChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.packetInCountChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>packetOutCount</code> property changes.",
        "kind": "signal",
        "name": "packetOutCountChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.packetOutCountChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>mbpsIn</code> property changes.",
        "kind": "signal",
        "name": "mbpsInChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.mbpsInChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>mbpsOut</code> property changes.",
        "kind": "signal",
        "name": "mbpsOutChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.mbpsOutChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>assetMbpsIn</code> property changes.",
        "kind": "signal",
        "name": "assetMbpsInChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.assetMbpsInChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>assetMbpsOut</code> property changes.",
        "kind": "signal",
        "name": "assetMbpsOutChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.assetMbpsOutChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>audioPing</code> property changes.",
        "kind": "signal",
        "name": "audioPingChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.audioPingChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>avatarPing</code> property changes.",
        "kind": "signal",
        "name": "avatarPingChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.avatarPingChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>entitiesPing</code> property changes.",
        "kind": "signal",
        "name": "entitiesPingChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.entitiesPingChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>assetPing</code> property changes.",
        "kind": "signal",
        "name": "assetPingChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.assetPingChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>messagePing</code> property changes.",
        "kind": "signal",
        "name": "messagePingChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.messagePingChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>position</code> property changes.",
        "kind": "signal",
        "name": "positionChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.positionChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>speed</code> property changes.",
        "kind": "signal",
        "name": "speedChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.speedChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>yaw</code> property changes.",
        "kind": "signal",
        "name": "yawChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.yawChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>avatarMixerInKbps</code> property changes.",
        "kind": "signal",
        "name": "avatarMixerInKbpsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.avatarMixerInKbpsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>avatarMixerInPps</code> property changes.",
        "kind": "signal",
        "name": "avatarMixerInPpsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.avatarMixerInPpsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>avatarMixerOutKbps</code> property changes.",
        "kind": "signal",
        "name": "avatarMixerOutKbpsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.avatarMixerOutKbpsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>avatarMixerOutPps</code> property changes.",
        "kind": "signal",
        "name": "avatarMixerOutPpsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.avatarMixerOutPpsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>myAvatarSendRate</code> property changes.",
        "kind": "signal",
        "name": "myAvatarSendRateChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.myAvatarSendRateChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>audioMixerInKbps</code> property changes.",
        "kind": "signal",
        "name": "audioMixerInKbpsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.audioMixerInKbpsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>audioMixerInPps</code> property changes.",
        "kind": "signal",
        "name": "audioMixerInPpsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.audioMixerInPpsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>audioMixerOutKbps</code> property changes.",
        "kind": "signal",
        "name": "audioMixerOutKbpsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.audioMixerOutKbpsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>audioMixerOutPps</code> property changes.",
        "kind": "signal",
        "name": "audioMixerOutPpsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.audioMixerOutPpsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>audioMixerKbps</code> property changes.",
        "kind": "signal",
        "name": "audioMixerKbpsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.audioMixerKbpsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>audioMixerPps</code> property changes.",
        "kind": "signal",
        "name": "audioMixerPpsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.audioMixerPpsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>audioOutboundPPS</code> property changes.",
        "kind": "signal",
        "name": "audioOutboundPPSChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.audioOutboundPPSChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>audioSilentOutboundPPS</code> property changes.",
        "kind": "signal",
        "name": "audioSilentOutboundPPSChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.audioSilentOutboundPPSChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>audioAudioInboundPPS</code> property changes.",
        "kind": "signal",
        "name": "audioAudioInboundPPSChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.audioAudioInboundPPSChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>audioSilentInboundPPS</code> property changes.",
        "kind": "signal",
        "name": "audioSilentInboundPPSChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.audioSilentInboundPPSChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>audioPacketLoss</code> property changes.",
        "kind": "signal",
        "name": "audioPacketLossChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.audioPacketLossChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>audioCodec</code> property changes.",
        "kind": "signal",
        "name": "audioCodecChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.audioCodecChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>audioNoiseGate</code> property changes.",
        "kind": "signal",
        "name": "audioNoiseGateChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.audioNoiseGateChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>audioInjectors</code> property changes.",
        "kind": "signal",
        "name": "audioInjectorsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.audioInjectorsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>entityPacketsInKbps</code> property changes.",
        "kind": "signal",
        "name": "entityPacketsInKbpsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.entityPacketsInKbpsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>downloads</code> property changes.",
        "kind": "signal",
        "name": "downloadsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.downloadsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>downloadLimit</code> property changes.",
        "kind": "signal",
        "name": "downloadLimitChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.downloadLimitChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>downloadsPending</code> property changes.",
        "kind": "signal",
        "name": "downloadsPendingChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.downloadsPendingChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>downloadUrls</code> property changes.",
        "kind": "signal",
        "name": "downloadUrlsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.downloadUrlsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>processing</code> property changes.",
        "kind": "signal",
        "name": "processingChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.processingChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>processingPending</code> property changes.",
        "kind": "signal",
        "name": "processingPendingChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.processingPendingChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>triangles</code> property changes.",
        "kind": "signal",
        "name": "trianglesChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.trianglesChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>drawcalls</code> property changes.\rThis",
        "kind": "signal",
        "name": "drawcallsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.drawcallsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>materialSwitches</code> property changes.",
        "kind": "signal",
        "name": "materialSwitchesChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.materialSwitchesChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>itemConsidered</code> property changes.",
        "kind": "signal",
        "name": "itemConsideredChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.itemConsideredChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>itemOutOfView</code> property changes.",
        "kind": "signal",
        "name": "itemOutOfViewChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.itemOutOfViewChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>itemTooSmall</code> property changes.",
        "kind": "signal",
        "name": "itemTooSmallChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.itemTooSmallChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>itemRendered</code> property changes.",
        "kind": "signal",
        "name": "itemRenderedChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.itemRenderedChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>shadowConsidered</code> property changes.",
        "kind": "signal",
        "name": "shadowConsideredChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.shadowConsideredChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>shadowOutOfView</code> property changes.",
        "kind": "signal",
        "name": "shadowOutOfViewChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.shadowOutOfViewChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>shadowTooSmall</code> property changes.",
        "kind": "signal",
        "name": "shadowTooSmallChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.shadowTooSmallChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>shadowRendered</code> property changes.",
        "kind": "signal",
        "name": "shadowRenderedChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.shadowRenderedChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>sendingMode</code> property changes.",
        "kind": "signal",
        "name": "sendingModeChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.sendingModeChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>packetStats</code> property changes.",
        "kind": "signal",
        "name": "packetStatsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.packetStatsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>lodAngle</code> property changes.",
        "kind": "signal",
        "name": "lodAngleChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.lodAngleChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>lodTargetFramerate</code> property changes.",
        "kind": "signal",
        "name": "lodTargetFramerateChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.lodTargetFramerateChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>lodStatus</code> property changes.",
        "kind": "signal",
        "name": "lodStatusChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.lodStatusChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>serverElements</code> property changes.",
        "kind": "signal",
        "name": "serverElementsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.serverElementsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>serverInternal</code> property changes.",
        "kind": "signal",
        "name": "serverInternalChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.serverInternalChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>serverLeaves</code> property changes.",
        "kind": "signal",
        "name": "serverLeavesChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.serverLeavesChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>localElements</code> property changes.",
        "kind": "signal",
        "name": "localElementsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.localElementsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>localInternal</code> property changes.",
        "kind": "signal",
        "name": "localInternalChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.localInternalChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>localLeaves</code> property changes.",
        "kind": "signal",
        "name": "localLeavesChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.localLeavesChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>timingStats</code> property changes.",
        "kind": "signal",
        "name": "timingStatsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.timingStatsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>gameUpdateStats</code> property changes.",
        "kind": "signal",
        "name": "gameUpdateStatsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.gameUpdateStatsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>glContextSwapchainMemory</code> property changes.",
        "kind": "signal",
        "name": "glContextSwapchainMemoryChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.glContextSwapchainMemoryChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>qmlTextureMemory</code> property changes.",
        "kind": "signal",
        "name": "qmlTextureMemoryChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.qmlTextureMemoryChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>texturePendingTransfers</code> property changes.",
        "kind": "signal",
        "name": "texturePendingTransfersChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.texturePendingTransfersChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>gpuBuffers</code> property changes.",
        "kind": "signal",
        "name": "gpuBuffersChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.gpuBuffersChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>gpuBufferMemory</code> property changes.",
        "kind": "signal",
        "name": "gpuBufferMemoryChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.gpuBufferMemoryChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>gpuTextures</code> property changes.",
        "kind": "signal",
        "name": "gpuTexturesChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.gpuTexturesChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>gpuTextureMemory</code> property changes.",
        "kind": "signal",
        "name": "gpuTextureMemoryChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.gpuTextureMemoryChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>gpuTextureResidentMemory</code> property changes.",
        "kind": "signal",
        "name": "gpuTextureResidentMemoryChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.gpuTextureResidentMemoryChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>gpuTextureFramebufferMemory</code> property changes.",
        "kind": "signal",
        "name": "gpuTextureFramebufferMemoryChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.gpuTextureFramebufferMemoryChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>gpuTextureResourceMemory</code> property changes.",
        "kind": "signal",
        "name": "gpuTextureResourceMemoryChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.gpuTextureResourceMemoryChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>gpuTextureResourceIdealMemory</code> property changes.",
        "kind": "signal",
        "name": "gpuTextureResourceIdealMemoryChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.gpuTextureResourceIdealMemoryChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>gpuTextureResourcePopulatedMemory</code> property changes.",
        "kind": "signal",
        "name": "gpuTextureResourcePopulatedMemoryChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.gpuTextureResourcePopulatedMemoryChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>gpuTextureExternalMemory</code> property changes.",
        "kind": "signal",
        "name": "gpuTextureExternalMemoryChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.gpuTextureExternalMemoryChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>gpuTextureMemoryPressureState</code> property changes.",
        "kind": "signal",
        "name": "gpuTextureMemoryPressureStateChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.gpuTextureMemoryPressureStateChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>gpuFreeMemory</code> property changes.",
        "kind": "signal",
        "name": "gpuFreeMemoryChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.gpuFreeMemoryChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>gpuFrameTime</code> property changes.",
        "kind": "signal",
        "name": "gpuFrameTimeChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.gpuFrameTimeChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>gpuFrameTime</code> property changes.",
        "kind": "signal",
        "name": "gpuFrameTimeChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.gpuFrameTimeChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>gpuFrameTime</code> property changes.",
        "kind": "signal",
        "name": "gpuFrameTimeChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.gpuFrameTimeChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>batchFrameTime</code> property changes.",
        "kind": "signal",
        "name": "batchFrameTimeChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.batchFrameTimeChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>engineFrameTime</code> property changes.",
        "kind": "signal",
        "name": "engineFrameTimeChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.engineFrameTimeChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>avatarSimulationTime</code> property changes.",
        "kind": "signal",
        "name": "avatarSimulationTimeChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.avatarSimulationTimeChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>rectifiedTextureCount</code> property changes.",
        "kind": "signal",
        "name": "rectifiedTextureCountChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.rectifiedTextureCountChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>decimatedTextureCount</code> property changes.",
        "kind": "signal",
        "name": "decimatedTextureCountChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.decimatedTextureCountChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the parent item changes.",
        "kind": "signal",
        "name": "parentChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "parent"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.parentChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>x</code> property changes.",
        "kind": "signal",
        "name": "xChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.xChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>y</code> property changes.",
        "kind": "signal",
        "name": "yChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.yChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>z</code> property changes.",
        "kind": "signal",
        "name": "zChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.zChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>width</code> property changes.",
        "kind": "signal",
        "name": "widthChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.widthChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>height</code> property changes.",
        "kind": "signal",
        "name": "heightChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.heightChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>opacity</code> property changes.",
        "kind": "signal",
        "name": "opacityChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.opacityChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>enabled</code> property changes.",
        "kind": "signal",
        "name": "enabledChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.enabledChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>visibleChanged</code> property changes.",
        "kind": "signal",
        "name": "visibleChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.visibleChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the list of visible children changes.",
        "kind": "signal",
        "name": "visibleChildrenChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.visibleChildrenChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>state</code> property changes.",
        "kind": "signal",
        "name": "stateChanged",
        "tags": [
            {
                "originalTitle": "paramm",
                "title": "paramm",
                "text": "{string} state",
                "value": "{string} state"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.stateChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the position and size of the rectangle containing the children changes.",
        "kind": "signal",
        "name": "childrenRectChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "Rect"
                    ]
                },
                "name": "childrenRect"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.childrenRectChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>baselineOffset</code> property changes.",
        "kind": "signal",
        "name": "baselineOffsetChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "baselineOffset"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.baselineOffsetChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>clip</code> property changes.",
        "kind": "signal",
        "name": "clipChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "clip"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.clipChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>focus</code> property changes.",
        "kind": "signal",
        "name": "focusChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "focus"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.focusChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>activeFocus</code> property changes.",
        "kind": "signal",
        "name": "activeFocusChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "activeFocus"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.activeFocusChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>activeFocusOnTab</code> property changes.",
        "kind": "signal",
        "name": "activeFocusOnTabChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "activeFocusOnTab"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.activeFocusOnTabChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>rotation</code> property changes.",
        "kind": "signal",
        "name": "rotationChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.rotationChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>scaleChanged</code> property changes.",
        "kind": "signal",
        "name": "scaleChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.scaleChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>transformOrigin</code> property changes.",
        "kind": "signal",
        "name": "transformOriginChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "transformOrigin"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.transformOriginChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>smooth</code> property changes.",
        "kind": "signal",
        "name": "smoothChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "smooth"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.smoothChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>antialiasing</code> property changes.",
        "kind": "signal",
        "name": "antialiasingChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "antialiasing"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.antialiasingChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>implicitWidth</code> property changes.",
        "kind": "signal",
        "name": "implicitWidthChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.implicitWidthChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>implicitHeight</code> property changes.",
        "kind": "signal",
        "name": "implicitHeightChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.implicitHeightChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "windowChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "window"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.windowChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "grabToImage",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "callback"
            },
            {
                "type": {
                    "names": [
                        "Size"
                    ]
                },
                "optional": true,
                "defaultvalue": "0,0",
                "name": "targetSize"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.grabToImage",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "contains",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "name": "point"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.contains",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "mapFromItem",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "item"
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.mapFromItem",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "mapToItem",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "item"
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.mapToItem",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "mapFromGlobal",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "global"
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.mapFromGlobal",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "mapToGlobal",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "global"
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.mapToGlobal",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "forceActiveFocus",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 7,
                "name": "reason"
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.forceActiveFocus",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "nextItemInFocusChain",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "name": "forward"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.nextItemInFocusChain",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "childAt",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "y"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.childAt",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "update",
        "memberof": "Stats",
        "longname": "Stats.update",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>stylusPicksCount</code> property changes.",
        "kind": "signal",
        "name": "stylusPicksCountChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.stylusPicksCountChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>rayPicksCount</code> property changes.",
        "kind": "signal",
        "name": "rayPicksCountChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.rayPicksCountChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>parabolaPicksCount</code> property changes.",
        "kind": "signal",
        "name": "parabolaPicksCountChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.parabolaPicksCountChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>collisionPicksCount</code> property changes.",
        "kind": "signal",
        "name": "collisionPicksCountChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.collisionPicksCountChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>stylusPicksUpdated</code> property changes.",
        "kind": "signal",
        "name": "stylusPicksUpdatedChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.stylusPicksUpdatedChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>rayPicksUpdated</code> property changes.",
        "kind": "signal",
        "name": "rayPicksUpdatedChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.rayPicksUpdatedChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>parabolaPicksUpdated</code> property changes.",
        "kind": "signal",
        "name": "parabolaPicksUpdatedChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.parabolaPicksUpdatedChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>collisionPicksUpdated</code> property changes.",
        "kind": "signal",
        "name": "collisionPicksUpdatedChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.collisionPicksUpdatedChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>eventQueueDebuggingOn</code> property changes.",
        "kind": "signal",
        "name": "eventQueueDebuggingOn",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.eventQueueDebuggingOn",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>nodeListThreadQueueDepth</code> property changes.",
        "kind": "signal",
        "name": "nodeListThreadQueueDepth",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.nodeListThreadQueueDepth",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>nodeListThreadQueueDepth</code> property changes.",
        "kind": "signal",
        "name": "nodeListThreadQueueDepth",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.nodeListThreadQueueDepth",
        "scope": "static"
    },
    {
        "description": "<p>An overlay may be one of the following types:</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>2D/3D</th><th>Description</th><th>Properties</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"rectangle\"</code></td><td>2D</td>\r      <td>A rectangle.</td>\r      <td>{@link Overlays.OverlayProperties-Rectangle|OverlayProperties-Rectangle}</td></tr>\r    <tr><td><code>\"image\"</code></td><td>2D</td>\r      <td>An image.</td>\r      <td>{@link Overlays.OverlayProperties-Image|OverlayProperties-Image}</td></tr>\r    <tr><td><code>\"text\"</code></td><td>2D</td>\r      <td>Some text.</td>\r      <td>{@link Overlays.OverlayProperties-Text|OverlayProperties-Text}</td></tr>\r    <tr><td><code>\"cube\"</code></td><td>3D</td>\r      <td><p>A cube. A <code>\"shape\"</code> overlay can also be used to create a cube.</p>\r      <p class=\"important\">Deprecated.</p></td>\r      <td>{@link Overlays.OverlayProperties-Cube|OverlayProperties-Cube}</td></tr>\r    <tr><td><code>\"sphere\"</code></td><td>3D</td>\r      <td><p>A sphere. A <code>\"shape\"</code> overlay can also be used to create a sphere.</p>\r      <p class=\"important\">Deprecated.</p></td>\r      <td>{@link Overlays.OverlayProperties-Sphere|OverlayProperties-Sphere}</td></tr>\r    <tr><td><code>\"shape\"</code></td><td>3D</td>\r      <td><p>A geometric shape, such as a cube, sphere, or cylinder.</p>\r      <p class=\"important\">Deprecated.</p></td>\r      <td>{@link Overlays.OverlayProperties-Shape|OverlayProperties-Shape}</td></tr>\r    <tr><td><code>\"model\"</code></td><td>3D</td>\r      <td><p>A model.</p>\r      <p class=\"important\">Deprecated.</p></td>\r      <td>{@link Overlays.OverlayProperties-Model|OverlayProperties-Model}</td></tr>\r    <tr><td><code>\"image3d\"</code></td><td>3D</td>\r      <td><p>An image. Synonym: <code>\"billboard\"</code>.</p>\r      <p class=\"important\">Deprecated.</p></td>\r      <td>{@link Overlays.OverlayProperties-Image3D|OverlayProperties-Image3D}</td></tr>\r    <tr><td><code>\"rectangle3d\"</code></td><td>3D</td>\r      <td><p>A rectangle.</p>\r      <p class=\"important\">Deprecated.</p></td>\r      <td>{@link Overlays.OverlayProperties-Rectangle3D|OverlayProperties-Rectangle3D}</td></tr>\r    <tr><td><code>\"text3d\"</code></td><td>3D</td>\r      <td><p>Some text.</p>\r      <p class=\"important\">Deprecated.</p></td>\r      <td>{@link Overlays.OverlayProperties-Text3D|OverlayProperties-Text3D}</td></tr>\r    <tr><td><code>\"web3d\"</code></td><td>3D</td>\r      <td><p>Web content.</p>\r      <p class=\"important\">Deprecated.</p></td>\r      <td>{@link Overlays.OverlayProperties-Web3D|OverlayProperties-Web3D}</td></tr>\r    <tr><td><code>\"line3d\"</code></td><td>3D</td>\r      <td><p>A line.</p>\r      <p class=\"important\">Deprecated.</p></td>\r      <td>{@link Overlays.OverlayProperties-Line3D|OverlayProperties-Line3D}</td></tr>\r    <tr><td><code>\"grid\"</code></td><td>3D</td>\r      <td><p>A grid of lines in a plane.</p>\r      <p class=\"important\">Deprecated.</p></td>\r      <td>{@link Overlays.OverlayProperties-Grid|OverlayProperties-Grid}</td></tr>\r    <tr><td><code>\"circle3d\"</code></td><td>3D</td>\r      <td><p>A circle.</p>\r      <p class=\"important\">Deprecated.</p></td>\r      <td>{@link Overlays.OverlayProperties-Circle3D|OverlayProperties-Circle3D}</td></tr>\r  </tbody>\r</table>\r<p>2D overlays are rendered on the display surface in desktop mode and on the HUD surface in HMD mode. 3D overlays are\rrendered at a position and orientation in-world.</p>\r<p class=\"important\">3D overlays are deprecated. Use local {@link Entities} instead.</p>",
        "kind": "typedef",
        "name": "OverlayType",
        "type": {
            "names": [
                "string"
            ]
        },
        "memberof": "Overlays",
        "longname": "Overlays.OverlayType",
        "scope": "static"
    },
    {
        "description": "Different overlay types have different properties: some common to all overlays (listed in the table) and some specific to \reach {@link Overlays.OverlayType|OverlayType} (linked to below).\r<p>3D overlays are local entities, internally, so they also support the relevant entity's properties.</p>",
        "kind": "typedef",
        "name": "OverlayProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay. <em>Read-only.</em>",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Overlays.OverlayType"
                    ]
                },
                "description": "The overlay's type. <em>Read-only.</em>",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "<code>true</code> if the overlay is rendered, <code>false</code> if it isn't.",
                "name": "visible"
            }
        ],
        "see": [
            "{@link Overlays.OverlayProperties-Rectangle|OverlayProperties-Rectangle}",
            "{@link Overlays.OverlayProperties-Image|OverlayProperties-Image}",
            "{@link Overlays.OverlayProperties-Text|OverlayProperties-Text}",
            "{@link Overlays.OverlayProperties-Cube|OverlayProperties-Cube} &mdash; <span class=\"important\">Deprecated.</span>",
            "{@link Overlays.OverlayProperties-Sphere|OverlayProperties-Sphere} &mdash; <span class=\"important\">Deprecated.</span>",
            "{@link Overlays.OverlayProperties-Shape|OverlayProperties-Shape} &mdash; <span class=\"important\">Deprecated.</span>",
            "{@link Overlays.OverlayProperties-Model|OverlayProperties-Model} &mdash; <span class=\"important\">Deprecated.</span>",
            "{@link Overlays.OverlayProperties-Rectangle3D|OverlayProperties-Rectangle3D} &mdash; <span class=\"important\">Deprecated.</span>",
            "{@link Overlays.OverlayProperties-Image3D|OverlayProperties-Image3D} &mdash; <span class=\"important\">Deprecated.</span>",
            "{@link Overlays.OverlayProperties-Text3D|OverlayProperties-Text3D} &mdash; <span class=\"important\">Deprecated.</span>",
            "{@link Overlays.OverlayProperties-Web3D|OverlayProperties-Web3D} &mdash; <span class=\"important\">Deprecated.</span>",
            "{@link Overlays.OverlayProperties-Line3D|OverlayProperties-Line3D} &mdash; <span class=\"important\">Deprecated.</span>",
            "{@link Overlays.OverlayProperties-Grid|OverlayProperties-Grid} &mdash; <span class=\"important\">Deprecated.</span>",
            "{@link Overlays.OverlayProperties-Circle3D|OverlayProperties-Circle3D} &mdash; <span class=\"important\">Deprecated.</span>"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.OverlayProperties",
        "scope": "static"
    },
    {
        "description": "The <code>\"image\"</code> {@link Overlays.OverlayType|OverlayType} is for 2D images.\rIt has properties in addition to the common {@link Overlays.OverlayProperties|OverlayProperties}.",
        "kind": "typedef",
        "name": "OverlayProperties-Image",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Rect"
                    ]
                },
                "description": "The position and size of the image display area, in pixels. <em>Write-only.</em>",
                "name": "bounds"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer left, x-coordinate value of the image display area = <code>bounds.x</code>.\r    <em>Write-only.</em>",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer top, y-coordinate value of the image display area = <code>bounds.y</code>.\r    <em>Write-only.</em>",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer width of the image display area = <code>bounds.width</code>. <em>Write-only.</em>",
                "name": "width"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer height of the image display area = <code>bounds.height</code>. <em>Write-only.</em>",
                "name": "height"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the image file to display. The image is scaled to fit to the <code>bounds</code>.\r    <em>Write-only.</em>",
                "name": "imageURL"
            },
            {
                "type": {
                    "names": [
                        "Rect"
                    ]
                },
                "description": "The portion of the image to use. If not specified, the whole image is used.\r    <em>Write-only.</em>",
                "name": "subImage"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The color to apply over the top of the image to colorize it. <em>Write-only.</em>",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "0.0",
                "description": "The opacity of the color applied over the top of the image, <code>0.0</code> &ndash;\r    <code>1.0</code>. <em>Write-only.</em>",
                "name": "alpha"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.OverlayProperties-Image",
        "scope": "static"
    },
    {
        "description": "The <code>\"text\"</code> {@link Overlays.OverlayType|OverlayType} is for 2D text.\rIt has properties in addition to the common {@link Overlays.OverlayProperties|OverlayProperties}.",
        "kind": "typedef",
        "name": "OverlayProperties-Text",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Rect"
                    ]
                },
                "description": "The position and size of the rectangle, in pixels. <em>Write-only.</em>",
                "name": "bounds"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer left, x-coordinate value = <code>bounds.x</code>. <em>Write-only.</em>",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer top, y-coordinate value = <code>bounds.y</code>. <em>Write-only.</em>",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer width of the rectangle = <code>bounds.width</code>. <em>Write-only.</em>",
                "name": "width"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer height of the rectangle = <code>bounds.height</code>. <em>Write-only.</em>",
                "name": "height"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The <code>leftMargin</code> and <code>topMargin</code> values, in pixels.\r    <em>Write-only.</em>",
                "name": "margin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The left margin's size, in pixels. This value is also used for the right margin.\r    <em>Write-only.</em>",
                "name": "leftMargin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The top margin's size, in pixels. This value is also used for the bottom margin.\r    <em>Write-only.</em>",
                "name": "topMargin"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The text to display. Text does not automatically wrap; use <code>\"\\n\"</code> for a line break. \r    Text is clipped to the <code>bounds</code>. <em>Write-only.</em>",
                "name": "text"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 18,
                "description": "The size of the text, in pixels. <em>Write-only.</em>",
                "name": "font.size"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 18,
                "description": "The height of a line of text, in pixels. <em>Write-only.</em>",
                "name": "lineHeight"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the text. Synonym: <code>textColor</code>. <em>Write-only.</em>",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "1.0",
                "description": "The opacity of the overlay, <code>0.0</code> &ndash; <code>1.0</code>. <em>Write-only.</em>",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The color of the background rectangle. <em>Write-only.</em>",
                "name": "backgroundColor"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity of the background rectangle, <code>0.0</code> &ndash; <code>1.0</code>. \r    <em>Write-only.</em>",
                "name": "backgroundAlpha"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.OverlayProperties-Text",
        "scope": "static"
    },
    {
        "description": "The <code>\"rectangle\"</code> {@link Overlays.OverlayType|OverlayType} is for 2D rectangles.\rIt has properties in addition to the common {@link Overlays.OverlayProperties|OverlayProperties}.",
        "kind": "typedef",
        "name": "OverlayProperties-Rectangle",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Rect"
                    ]
                },
                "description": "The position and size of the rectangle, in pixels. <em>Write-only.</em>",
                "name": "bounds"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer left, x-coordinate value = <code>bounds.x</code>. <em>Write-only.</em>",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer top, y-coordinate value = <code>bounds.y</code>. <em>Write-only.</em>",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer width of the rectangle = <code>bounds.width</code>. <em>Write-only.</em>",
                "name": "width"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer height of the rectangle = <code>bounds.height</code>. <em>Write-only.</em>",
                "name": "height"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "Integer corner radius, in pixels. <em>Write-only.</em>",
                "name": "radius"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The color of the overlay. <em>Write-only.</em>",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "1.0",
                "description": "The opacity of the overlay, <code>0.0</code> &ndash; <code>1.0</code>. <em>Write-only.</em>",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "Integer width of the border, in pixels. The border is drawn within the rectangle's bounds.\r    It is not drawn unless either <code>borderColor</code> or <code>borderAlpha</code> are specified. <em>Write-only.</em>",
                "name": "borderWidth"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The color of the border. <em>Write-only.</em>",
                "name": "borderColor"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "1.0",
                "description": "The opacity of the border, <code>0.0</code> &ndash; <code>1.0</code>.\r    <em>Write-only.</em>",
                "name": "borderAlpha"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.OverlayProperties-Rectangle",
        "scope": "static"
    },
    {
        "description": "The <code>\"cube\"</code> {@link Overlays.OverlayType|OverlayType} is for 3D cubes.\rIt has properties in addition to the common {@link Overlays.OverlayProperties|OverlayProperties}.\rIt additionally has properties per the {@link Entities.EntityProperties-Box|Box} entity.\r<p class=\"important\">Deprecated: Use local {@link Entities} instead.</p>",
        "kind": "typedef",
        "name": "OverlayProperties-Cube",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the overlay.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the overlay.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity of the overlay, <code>0.0</code> &ndash; <code>1.0</code>.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The maximum value of the pulse multiplier.",
                "name": "pulseMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The minimum value of the pulse multiplier.",
                "name": "pulseMin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The duration of the color and alpha pulse, in seconds. A pulse multiplier value goes from\r    <code>pulseMin</code> to <code>pulseMax</code>, then <code>pulseMax</code> to <code>pulseMin</code> in one period.",
                "name": "pulsePeriod"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the alpha of the overlay is pulsed: the alpha value is multiplied by the\r    current pulse multiplier value each frame. If &gt; 0 the pulse multiplier is applied in phase with the pulse period; if &lt; 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "alphaPulse"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the color of the overlay is pulsed: the color value is multiplied by the\r    current pulse multiplier value each frame. If &gt; 0 the pulse multiplier is applied in phase with the pulse period; if &lt; 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "colorPulse"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the overlay center. Synonyms: <code>p1</code>, <code>point</code>, and\r    <code>start</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The dimensions of the overlay. Synonyms: <code>scale</code>, <code>size</code>.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay. Synonym: <code>orientation</code>.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>position</code>.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>rotation</code>.  Synonym: <code>localOrientation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay is rendered as a solid, <code>false</code> if it is \r    rendered as a wire frame. \r    Synonyms: <code>solid</code>, <code>isFilled</code>, and <code>filled</code>.\r    Antonyms: <code>isWire</code> and <code>wire</code>.",
                "name": "isSolid"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if {@link Picks} ignore the overlay, <code>false</code> \r    if they don't. \r    Synonym: <code>ignoreRayIntersection</code>.",
                "name": "ignorePickIntersection"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay is rendered on top of the world layer but behind \r    the HUD surface.",
                "name": "drawInFront"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay is rendered in front of everything, including the \r    HUD surface.",
                "name": "drawHUDLayer"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay can be grabbed, <code>false</code> if it can't be.",
                "name": "grabbable"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the overlay is parented to.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the joint of the entity or avatar that the entity is \r    parented to if <code>parentID</code> is set. Use 65535 or -1 to parent to the parent's position and orientation rather \r    than a joint.",
                "name": "parentJointIndex"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.OverlayProperties-Cube",
        "scope": "static"
    },
    {
        "description": "The <code>\"sphere\"</code> {@link Overlays.OverlayType|OverlayType} is for 3D spheres.\rIt has properties in addition to the common {@link Overlays.OverlayProperties|OverlayProperties}.\rIt additionally has properties per the {@link Entities.EntityProperties-Sphere|Sphere} entity.\r<p class=\"important\">Deprecated: Use local {@link Entities} instead.</p>",
        "kind": "typedef",
        "name": "OverlayProperties-Sphere",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the overlay.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the overlay.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity of the overlay, <code>0.0</code> &ndash; <code>1.0</code>.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The maximum value of the pulse multiplier.",
                "name": "pulseMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The minimum value of the pulse multiplier.",
                "name": "pulseMin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The duration of the color and alpha pulse, in seconds. A pulse multiplier value goes from\r    <code>pulseMin</code> to <code>pulseMax</code>, then <code>pulseMax</code> to <code>pulseMin</code> in one period.",
                "name": "pulsePeriod"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the alpha of the overlay is pulsed: the alpha value is multiplied by the\r    current pulse multiplier value each frame. If &gt; 0 the pulse multiplier is applied in phase with the pulse period; if &lt; 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "alphaPulse"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the color of the overlay is pulsed: the color value is multiplied by the\r    current pulse multiplier value each frame. If &gt; 0 the pulse multiplier is applied in phase with the pulse period; if &lt; 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "colorPulse"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the overlay center. Synonyms: <code>p1</code>, <code>point</code>, and\r    <code>start</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The dimensions of the overlay. Synonyms: <code>scale</code>, <code>size</code>.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay. Synonym: <code>orientation</code>.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>position</code>.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>rotation</code>.  Synonym: <code>localOrientation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay is rendered as a solid, <code>false</code> if it is \r    rendered as a wire frame. \r    Synonyms: <code>solid</code>, <code>isFilled</code>, and <code>filled</code>.\r    Antonyms: <code>isWire</code> and <code>wire</code>.",
                "name": "isSolid"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if {@link Picks} ignore the overlay, <code>false</code>\r    if they don't.\r    Synonym: <code>ignoreRayIntersection</code>.",
                "name": "ignorePickIntersection"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay is rendered on top of the world layer but behind\r    the HUD surface.",
                "name": "drawInFront"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay is rendered in front of everything, including the\r    HUD surface.",
                "name": "drawHUDLayer"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay can be grabbed, <code>false</code> if it can't be.",
                "name": "grabbable"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the overlay is parented to.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the joint of the entity or avatar that the entity is\r    parented to if <code>parentID</code> is set. Use 65535 or -1 to parent to the parent's position and orientation rather\r    than a joint.",
                "name": "parentJointIndex"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.OverlayProperties-Sphere",
        "scope": "static"
    },
    {
        "description": "The <code>\"rectangle3D\"</code> {@link Overlays.OverlayType|OverlayType} is for 3D rectangles.\rIt has properties in addition to the common {@link Overlays.OverlayProperties|OverlayProperties}.\rIt additionally has properties per the {@link Entities.EntityProperties-Shape|Shape} entity, with the <code>shape</code> \rproperty value being <code>\"Quad\"</code>.\r<p class=\"important\">Deprecated: Use local {@link Entities} instead.</p>",
        "kind": "typedef",
        "name": "OverlayProperties-Rectangle3D",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the overlay.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the overlay.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity of the overlay, <code>0.0</code> &ndash; <code>1.0</code>.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The maximum value of the pulse multiplier.",
                "name": "pulseMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The minimum value of the pulse multiplier.",
                "name": "pulseMin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The duration of the color and alpha pulse, in seconds. A pulse multiplier value goes from\r    <code>pulseMin</code> to <code>pulseMax</code>, then <code>pulseMax</code> to <code>pulseMin</code> in one period.",
                "name": "pulsePeriod"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the alpha of the overlay is pulsed: the alpha value is multiplied by the\r    current pulse multiplier value each frame. If &gt; 0 the pulse multiplier is applied in phase with the pulse period; if &lt; 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "alphaPulse"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the color of the overlay is pulsed: the color value is multiplied by the\r    current pulse multiplier value each frame. If &gt; 0 the pulse multiplier is applied in phase with the pulse period; if &lt; 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "colorPulse"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the overlay center. Synonyms: <code>p1</code>, <code>point</code>, and\r    <code>start</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The dimensions of the overlay. Synonyms: <code>scale</code>, <code>size</code>.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay. Synonym: <code>orientation</code>.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>position</code>.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>rotation</code>.  Synonym: <code>localOrientation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay is rendered as a solid, <code>false</code> if it is \r    rendered as a wire frame. \r    Synonyms: <code>solid</code>, <code>isFilled</code>, and <code>filled</code>.\r    Antonyms: <code>isWire</code> and <code>wire</code>.",
                "name": "isSolid"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if {@link Picks} ignore the overlay, <code>false</code>\r    if they don't.\r    Synonym: <code>ignoreRayIntersection</code>.",
                "name": "ignorePickIntersection"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay is rendered on top of the world layer but behind\r    the HUD surface.",
                "name": "drawInFront"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay is rendered in front of everything, including the\r    HUD surface.",
                "name": "drawHUDLayer"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay can be grabbed, <code>false</code> if it can't be.",
                "name": "grabbable"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the overlay is parented to.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the joint of the entity or avatar that the entity is \r    parented to if <code>parentID</code> is set. Use 65535 or -1 to parent to the parent's position and orientation rather \r    than a joint.",
                "name": "parentJointIndex"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.OverlayProperties-Rectangle3D",
        "scope": "static"
    },
    {
        "description": "<p>A <code>\"shape\"</code> {@link Overlays.OverlayType|OverlayType} may display as one of the following geometrical \rshapes:</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Dimensions</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"Circle\"</code></td><td>2D</td><td>A circle oriented in 3D.</td></tr>\r    <tr><td><code>\"Cone\"</code></td><td>3D</td><td></td></tr>\r    <tr><td><code>\"Cube\"</code></td><td>3D</td><td></td></tr>\r    <tr><td><code>\"Cylinder\"</code></td><td>3D</td><td></td></tr>\r    <tr><td><code>\"Dodecahedron\"</code></td><td>3D</td><td></td></tr>\r    <tr><td><code>\"Hexagon\"</code></td><td>3D</td><td>A hexagonal prism.</td></tr>\r    <tr><td><code>\"Icosahedron\"</code></td><td>3D</td><td></td></tr>\r    <tr><td><code>\"Octagon\"</code></td><td>3D</td><td>An octagonal prism.</td></tr>\r    <tr><td><code>\"Octahedron\"</code></td><td>3D</td><td></td></tr>\r    <tr><td><code>\"Quad\"</code></td><td>2D</td><td>A square oriented in 3D.</tr>\r    <tr><td><code>\"Sphere\"</code></td><td>3D</td><td></td></tr>\r    <tr><td><code>\"Tetrahedron\"</code></td><td>3D</td><td></td></tr>\r    <tr><td><code>\"Torus\"</code></td><td>3D</td><td><em>Not implemented.</em></td></tr>\r    <tr><td><code>\"Triangle\"</code></td><td>3D</td><td>A triangular prism.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "Shape",
        "type": {
            "names": [
                "string"
            ]
        },
        "memberof": "Overlays",
        "longname": "Overlays.Shape",
        "scope": "static"
    },
    {
        "description": "The <code>\"shape\"</code> {@link Overlays.OverlayType|OverlayType} is for 3D shapes.\rIt has properties in addition to the common {@link Overlays.OverlayProperties|OverlayProperties}.\rIt additionally has properties per the {@link Entities.EntityProperties-Shape|Shape} entity.\r<p class=\"important\">Deprecated: Use local {@link Entities} instead.</p>",
        "kind": "typedef",
        "name": "OverlayProperties-Shape",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the overlay.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the overlay.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity of the overlay, <code>0.0</code> &ndash; <code>1.0</code>.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The maximum value of the pulse multiplier.",
                "name": "pulseMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The minimum value of the pulse multiplier.",
                "name": "pulseMin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The duration of the color and alpha pulse, in seconds. A pulse multiplier value goes from\r    <code>pulseMin</code> to <code>pulseMax</code>, then <code>pulseMax</code> to <code>pulseMin</code> in one period.",
                "name": "pulsePeriod"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the alpha of the overlay is pulsed: the alpha value is multiplied by the\r    current pulse multiplier value each frame. If &gt; 0 the pulse multiplier is applied in phase with the pulse period; if &lt; 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "alphaPulse"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the color of the overlay is pulsed: the color value is multiplied by the\r    current pulse multiplier value each frame. If &gt; 0 the pulse multiplier is applied in phase with the pulse period; if &lt; 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "colorPulse"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the overlay center. Synonyms: <code>p1</code>, <code>point</code>, and\r    <code>start</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The dimensions of the overlay. Synonyms: <code>scale</code>, <code>size</code>.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay. Synonym: <code>orientation</code>.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>position</code>.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>rotation</code>.  Synonym: <code>localOrientation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay is rendered as a solid, <code>false</code> if it is \r    rendered as a wire frame. \r    Synonyms: <code>solid</code>, <code>isFilled</code>, and <code>filled</code>.\r    Antonyms: <code>isWire</code> and <code>wire</code>.",
                "name": "isSolid"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if {@link Picks} ignore the overlay, <code>false</code>\r    if they don't.\r    Synonym: <code>ignoreRayIntersection</code>.",
                "name": "ignorePickIntersection"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay is rendered on top of the world layer but behind\r    the HUD surface.",
                "name": "drawInFront"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay is rendered in front of everything, including the\r    HUD surface.",
                "name": "drawHUDLayer"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay can be grabbed, <code>false</code> if it can't be.",
                "name": "grabbable"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the overlay is parented to.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the joint of the entity or avatar that the entity is\r    parented to if <code>parentID</code> is set. Use 65535 or -1 to parent to the parent's position and orientation rather\r    than a joint.",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "Overlays.Shape"
                    ]
                },
                "defaultvalue": "Hexagon",
                "description": "The geometrical shape of the overlay.",
                "name": "shape"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.OverlayProperties-Shape",
        "scope": "static"
    },
    {
        "description": "The <code>\"model\"</code> {@link Overlays.OverlayType|OverlayType} is for 3D models.\rIt has properties in addition to the common {@link Overlays.OverlayProperties|OverlayProperties}.\rIt additionally has properties per the {@link Entities.EntityProperties-Model|Model} entity.\r<p class=\"important\">Deprecated: Use local {@link Entities} instead.</p>",
        "kind": "typedef",
        "name": "OverlayProperties-Model",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the overlay.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the overlay center. Synonyms: <code>p1</code>, <code>point</code>, and\r    <code>start</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The dimensions of the overlay. Synonyms: <code>size</code>.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The scale factor applied to the model's dimensions.",
                "name": "scale"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay. Synonym: <code>orientation</code>.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>position</code>.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>rotation</code>.  Synonym: <code>localOrientation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if {@link Picks} ignore the overlay, <code>false</code>\r    if they don't.\r    Synonym: <code>ignoreRayIntersection</code>.",
                "name": "ignorePickIntersection"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay is rendered on top of the world layer but behind\r    the HUD surface.",
                "name": "drawInFront"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay is rendered in front of everything, including the\r    HUD surface.",
                "name": "drawHUDLayer"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay can be grabbed, <code>false</code> if it can't be.",
                "name": "grabbable"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the overlay is parented to.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the joint of the entity or avatar that the entity is\r    parented to if <code>parentID</code> is set. Use 65535 or -1 to parent to the parent's position and orientation rather\r    than a joint.",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the glTF, FBX, or OBJ model used for the overlay. glTF models may be in JSON or binary \r    format (\".gltf\" or \".glb\" URLs respectively). Baked models' URLs have \".baked\" before the file type. Model files may \r    also be compressed in GZ format, in which case the URL ends in \".gz\".",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "0.0",
                "description": "The priority for loading and displaying the overlay. Overlays with higher values load\r    first. <em>Currently not used.</em>",
                "name": "loadPriority"
            },
            {
                "type": {
                    "names": [
                        "Object.<string, string>",
                        "string"
                    ]
                },
                "description": "Texture name, URL pairs used when rendering the model in place of the \r    model's original textures, per the {@link Entities.EntityProperties-Model} property of the same name.\r    <p>The value can be an object or a JSON string when setting the value; it is a JSON string when getting the value.</p>",
                "name": "textures"
            },
            {
                "type": {
                    "names": [
                        "Entities.AnimationProperties"
                    ]
                },
                "description": "An animation to play on the model.",
                "name": "animationSettings"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.OverlayProperties-Model",
        "scope": "static"
    },
    {
        "description": "The <code>\"text3D\"</code> {@link Overlays.OverlayType|OverlayType} is for 3D text.\rIt has properties in addition to the common {@link Overlays.OverlayProperties|OverlayProperties}.\rIt additionally has properties per the {@link Entities.EntityProperties-Text|Text} entity.\r<p class=\"important\">Deprecated: Use local {@link Entities} instead.</p>",
        "kind": "typedef",
        "name": "OverlayProperties-Text3D",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the overlay.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the overlay text. Synonym: <code>textColor</code>.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity of the overlay text, <code>0.0</code> &ndash; <code>1.0</code>.\r    <p><em>Currently not used; use <code>textAlpha</code> instead.</em></p>",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The maximum value of the pulse multiplier.",
                "name": "pulseMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The minimum value of the pulse multiplier.",
                "name": "pulseMin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The duration of the color and alpha pulse, in seconds. A pulse multiplier value goes from\r    <code>pulseMin</code> to <code>pulseMax</code>, then <code>pulseMax</code> to <code>pulseMin</code> in one period.",
                "name": "pulsePeriod"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the alpha of the overlay is pulsed: the alpha value is multiplied by the\r    current pulse multiplier value each frame. If &gt; 0 the pulse multiplier is applied in phase with the pulse period; if &lt; 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "alphaPulse"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the color of the overlay is pulsed: the color value is multiplied by the\r    current pulse multiplier value each frame. If &gt; 0 the pulse multiplier is applied in phase with the pulse period; if &lt; 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "colorPulse"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the overlay center. Synonyms: <code>p1</code>, <code>point</code>, and\r    <code>start</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The dimensions of the overlay. Synonyms: <code>scale</code>, <code>size</code>.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay. Synonym: <code>orientation</code>.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>position</code>.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>rotation</code>.  Synonym: <code>localOrientation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if {@link Picks} ignore the overlay, <code>false</code>\r    if they don't.\r    Synonym: <code>ignoreRayIntersection</code>.",
                "name": "ignorePickIntersection"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay is rendered on top of the world layer but behind\r    the HUD surface.",
                "name": "drawInFront"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay is rendered in front of everything, including the\r    HUD surface.",
                "name": "drawHUDLayer"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay can be grabbed, <code>false</code> if it can't be.",
                "name": "grabbable"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the overlay is parented to.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the joint of the entity or avatar that the entity is\r    parented to if <code>parentID</code> is set. Use 65535 or -1 to parent to the parent's position and orientation rather\r    than a joint.",
                "name": "parentJointIndex"
            }
        ],
        "tags": [
            {
                "originalTitle": "comment",
                "title": "comment",
                "text": "CURRENTLY BROKEN",
                "value": "CURRENTLY BROKEN"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.OverlayProperties-Text3D",
        "scope": "static"
    },
    {
        "description": "The <code>\"image3D\"</code> {@link Overlays.OverlayType|OverlayType} is for 3D images.\rIt has properties in addition to the common {@link Overlays.OverlayProperties|OverlayProperties}.\rIt additionally has properties per the {@link Entities.EntityProperties-Image|Image} entity.\r<p class=\"important\">Deprecated: Use local {@link Entities} instead.</p>",
        "kind": "typedef",
        "name": "OverlayProperties-Image3D",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the overlay.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the overlay.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity of the overlay, <code>0.0</code> &ndash; <code>1.0</code>.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The maximum value of the pulse multiplier.",
                "name": "pulseMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The minimum value of the pulse multiplier.",
                "name": "pulseMin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The duration of the color and alpha pulse, in seconds. A pulse multiplier value goes from\r    <code>pulseMin</code> to <code>pulseMax</code>, then <code>pulseMax</code> to <code>pulseMin</code> in one period.",
                "name": "pulsePeriod"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the alpha of the overlay is pulsed: the alpha value is multiplied by the\r    current pulse multiplier value each frame. If &gt; 0 the pulse multiplier is applied in phase with the pulse period; if &lt; 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "alphaPulse"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the color of the overlay is pulsed: the color value is multiplied by the\r    current pulse multiplier value each frame. If &gt; 0 the pulse multiplier is applied in phase with the pulse period; if &lt; 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "colorPulse"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the overlay center. Synonyms: <code>p1</code>, <code>point</code>, and\r    <code>start</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The dimensions of the overlay. Synonyms: <code>scale</code>, <code>size</code>.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay. Synonym: <code>orientation</code>.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>position</code>.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>rotation</code>.  Synonym: <code>localOrientation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if {@link Picks} ignore the overlay, <code>false</code>\r    if they don't.\r    Synonym: <code>ignoreRayIntersection</code>.",
                "name": "ignorePickIntersection"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay is rendered on top of the world layer but behind\r    the HUD surface.",
                "name": "drawInFront"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay is rendered in front of everything, including the\r    HUD surface.",
                "name": "drawHUDLayer"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay can be grabbed, <code>false</code> if it can't be.",
                "name": "grabbable"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the overlay is parented to.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the joint of the entity or avatar that the entity is\r    parented to if <code>parentID</code> is set. Use 65535 or -1 to parent to the parent's position and orientation rather\r    than a joint.",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the image to display.",
                "name": "url"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.OverlayProperties-Image3D",
        "scope": "static"
    },
    {
        "description": "The <code>\"web3d\"</code> {@link Overlays.OverlayType|OverlayType} is for 3D web surfaces.\rIt has properties in addition to the common {@link Overlays.OverlayProperties|OverlayProperties}.\rIt additionally has properties per the {@link Entities.EntityProperties-Web|Web} entity.\r<p class=\"important\">Deprecated: Use local {@link Entities} instead.</p>",
        "kind": "typedef",
        "name": "OverlayProperties-Web3D",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the overlay.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the overlay.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity of the overlay, <code>0.0</code> &ndash; <code>1.0</code>.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The maximum value of the pulse multiplier.",
                "name": "pulseMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The minimum value of the pulse multiplier.",
                "name": "pulseMin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The duration of the color and alpha pulse, in seconds. A pulse multiplier value goes from\r    <code>pulseMin</code> to <code>pulseMax</code>, then <code>pulseMax</code> to <code>pulseMin</code> in one period.",
                "name": "pulsePeriod"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the alpha of the overlay is pulsed: the alpha value is multiplied by the\r    current pulse multiplier value each frame. If &gt; 0 the pulse multiplier is applied in phase with the pulse period; if &lt; 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "alphaPulse"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the color of the overlay is pulsed: the color value is multiplied by the\r    current pulse multiplier value each frame. If &gt; 0 the pulse multiplier is applied in phase with the pulse period; if &lt; 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "colorPulse"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the overlay center. Synonyms: <code>p1</code>, <code>point</code>, and\r    <code>start</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The dimensions of the overlay. Synonyms: <code>scale</code>, <code>size</code>.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay. Synonym: <code>orientation</code>.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>position</code>.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>rotation</code>.  Synonym: <code>localOrientation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if {@link Picks} ignore the overlay, <code>false</code>\r    if they don't.\r    Synonym: <code>ignoreRayIntersection</code>.",
                "name": "ignorePickIntersection"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay is rendered on top of the world layer but behind\r    the HUD surface.",
                "name": "drawInFront"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay is rendered in front of everything, including the\r    HUD surface.",
                "name": "drawHUDLayer"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay can be grabbed, <code>false</code> if it can't be.",
                "name": "grabbable"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the overlay is parented to.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the joint of the entity or avatar that the entity is\r    parented to if <code>parentID</code> is set. Use 65535 or -1 to parent to the parent's position and orientation rather\r    than a joint.",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the web page to display.",
                "name": "url"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.OverlayProperties-Web3D",
        "scope": "static"
    },
    {
        "description": "The <code>\"line3d\"</code> {@link Overlays.OverlayType|OverlayType} is for 3D lines.\rIt has properties in addition to the common {@link Overlays.OverlayProperties|OverlayProperties}.\rIt additionally has properties per the {@link Entities.EntityProperties-PolyLine|PolyLine} entity.\r<p class=\"important\">Deprecated: Use local {@link Entities} instead.</p>",
        "kind": "typedef",
        "name": "OverlayProperties-Line3D",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the overlay.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the overlay.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity of the overlay, <code>0.0</code> &ndash; <code>1.0</code>.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the overlay center. Synonyms: <code>p1</code>, <code>point</code>, and\r    <code>start</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The dimensions of the overlay. Synonyms: <code>scale</code>, <code>size</code>.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay. Synonym: <code>orientation</code>.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>position</code>.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>rotation</code>.  Synonym: <code>localOrientation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if {@link Picks} ignore the overlay, <code>false</code>\r    if they don't.\r    Synonym: <code>ignoreRayIntersection</code>.",
                "name": "ignorePickIntersection"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay is rendered on top of the world layer but behind\r    the HUD surface.",
                "name": "drawInFront"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay is rendered in front of everything, including the\r    HUD surface.",
                "name": "drawHUDLayer"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay can be grabbed, <code>false</code> if it can't be.",
                "name": "grabbable"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the overlay is parented to.\r    <p><em>Currently doesn't work.</em></p>",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the joint of the entity or avatar that the entity is\r    parented to if <code>parentID</code> is set. Use 65535 or -1 to parent to the parent's position and orientation rather\r    than a joint.",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the end point of the line is parented to.\r    <p><em>Currently doesn't work.</em></p>",
                "name": "endParentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the skeleton joint that the end point of the line is\r    attached to if <code>parentID</code> is an avatar skeleton. A value of <code>65535</code> means \"no joint\". \r    <p><em>Currently doesn't work.</em></p>",
                "name": "endParentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The start point of the line. Synonyms: <code>startPoint</code> and <code>p1</code>.\r    <p><strong>Note:</strong> If <code>parentID</code> is set, use <code>localStart</code> to set the local position of the \r    start point.</p>",
                "name": "start"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The end point of the line. Synonyms: <code>endPoint</code> and <code>p2</code>.\r    <p><strong>Note:</strong> If <code>parentID</code> is set, use <code>localEnd</code> to set the local position of the \r    end point.</p>",
                "name": "end"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>start</code>.\r    <p><em>Currently doesn't work.</em></p>",
                "name": "localStart"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>endParentID</code> set, otherwise the same value as <code>end</code>.\r    <p><em>Currently doesn't work.</em></p>",
                "name": "localEnd"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The length of the line, in meters. This can be set after creating a line with start and end\r    points.\r    <p><em>Currently doesn't work.</em></p>",
                "name": "length"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If <code>glow > 0</code>, the line is rendered with a glow.",
                "name": "glow"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.02,
                "description": "Width of the line, in meters.\r    <p><em>You can set this property's value but currently cannot retrieve its value. Use the <code>strokeWidths</code> \r    property to retrieve its value instead.</em></p>",
                "name": "lineWidth"
            }
        ],
        "tags": [
            {
                "originalTitle": "comment",
                "title": "comment",
                "text": "CURRENTLY BROKEN",
                "value": "CURRENTLY BROKEN"
            },
            {
                "originalTitle": "comment",
                "title": "comment",
                "text": "CURRENTLY BROKEN",
                "value": "CURRENTLY BROKEN"
            },
            {
                "originalTitle": "comment",
                "title": "comment",
                "text": "CURRENTLY BROKEN",
                "value": "CURRENTLY BROKEN"
            },
            {
                "originalTitle": "comment",
                "title": "comment",
                "text": "CURRENTLY BROKEN",
                "value": "CURRENTLY BROKEN"
            },
            {
                "originalTitle": "comment",
                "title": "comment",
                "text": "CURRENTLY BROKEN",
                "value": "CURRENTLY BROKEN"
            },
            {
                "originalTitle": "comment",
                "title": "comment",
                "text": "CURRENTLY BROKEN",
                "value": "CURRENTLY BROKEN"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.OverlayProperties-Line3D",
        "scope": "static"
    },
    {
        "description": "The <code>\"grid\"</code> {@link Overlays.OverlayType|OverlayType} is for 3D grids.\rIt has properties in addition to the common {@link Overlays.OverlayProperties|OverlayProperties}.\rIt additionally has properties per the {@link Entities.EntityProperties-Grid|Grid} entity.\r<p class=\"important\">Deprecated: Use local {@link Entities} instead.</p>",
        "kind": "typedef",
        "name": "OverlayProperties-Grid",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the overlay.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the overlay.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity of the overlay, <code>0.0</code> &ndash; <code>1.0</code>.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The maximum value of the pulse multiplier.",
                "name": "pulseMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The minimum value of the pulse multiplier.",
                "name": "pulseMin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The duration of the color and alpha pulse, in seconds. A pulse multiplier value goes from\r    <code>pulseMin</code> to <code>pulseMax</code>, then <code>pulseMax</code> to <code>pulseMin</code> in one period.",
                "name": "pulsePeriod"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the alpha of the overlay is pulsed: the alpha value is multiplied by the\r    current pulse multiplier value each frame. If &gt; 0 the pulse multiplier is applied in phase with the pulse period; if &lt; 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "alphaPulse"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the color of the overlay is pulsed: the color value is multiplied by the\r    current pulse multiplier value each frame. If &gt; 0 the pulse multiplier is applied in phase with the pulse period; if &lt; 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "colorPulse"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the overlay center. Synonyms: <code>p1</code>, <code>point</code>, and\r    <code>start</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The dimensions of the overlay. Synonyms: <code>scale</code>, <code>size</code>.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay. Synonym: <code>orientation</code>.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>position</code>.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>rotation</code>. Synonym: <code>localOrientation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if {@link Picks} ignore the overlay, <code>false</code>\r    if they don't.\r    Synonym: <code>ignoreRayIntersection</code>.",
                "name": "ignorePickIntersection"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay is rendered on top of the world layer but behind\r    the HUD surface.",
                "name": "drawInFront"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay is rendered in front of everything, including the\r    HUD surface.",
                "name": "drawHUDLayer"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay can be grabbed, <code>false</code> if it can't be.",
                "name": "grabbable"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the overlay is parented to.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the joint of the entity or avatar that the entity is\r    parented to if <code>parentID</code> is set. Use 65535 or -1 to parent to the parent's position and orientation rather\r    than a joint.",
                "name": "parentJointIndex"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.OverlayProperties-Grid",
        "scope": "static"
    },
    {
        "description": "The <code>\"circle3d\"</code> {@link Overlays.OverlayType|OverlayType} is for 3D circles.\rIt has properties in addition to the common {@link Overlays.OverlayProperties|OverlayProperties}.\rIt additionally has properties per the {@link Entities.EntityProperties-Gizmo|Gizmo} entity, with the \r<code>gizmoType</code> property value being <code>\"ring\"</code>.\r<p class=\"important\">Deprecated: Use local {@link Entities} instead.</p>",
        "kind": "typedef",
        "name": "OverlayProperties-Circle3D",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the overlay.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The maximum value of the pulse multiplier.",
                "name": "pulseMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The minimum value of the pulse multiplier.",
                "name": "pulseMin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The duration of the color and alpha pulse, in seconds. A pulse multiplier value goes from\r    <code>pulseMin</code> to <code>pulseMax</code>, then <code>pulseMax</code> to <code>pulseMin</code> in one period.",
                "name": "pulsePeriod"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the alpha of the overlay is pulsed: the alpha value is multiplied by the\r    current pulse multiplier value each frame. If &gt; 0 the pulse multiplier is applied in phase with the pulse period; if &lt; 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "alphaPulse"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the color of the overlay is pulsed: the color value is multiplied by the\r    current pulse multiplier value each frame. If &gt; 0 the pulse multiplier is applied in phase with the pulse period; if &lt; 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "colorPulse"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the overlay center. Synonyms: <code>p1</code>, <code>point</code>, and\r    <code>start</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The dimensions of the overlay. Synonyms: <code>scale</code>, <code>size</code>.\r    <em>Read-only.</em>",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay. Synonym: <code>orientation</code>.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>position</code>.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>rotation</code>. Synonym: <code>localOrientation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay is rendered as a solid, <code>false</code> if it is \r    rendered as a wire frame. \r    Synonyms: <code>solid</code>, <code>isFilled</code>, and <code>filled</code>.\r    Antonyms: <code>isWire</code> and <code>wire</code>.",
                "name": "isSolid"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if {@link Picks} ignore the overlay, <code>false</code>\r    if they don't.\r    Synonym: <code>ignoreRayIntersection</code>.",
                "name": "ignorePickIntersection"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay is rendered on top of the world layer but behind\r    the HUD surface.",
                "name": "drawInFront"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay is rendered in front of everything, including the\r    HUD surface.",
                "name": "drawHUDLayer"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the overlay can be grabbed, <code>false</code> if it can't be.",
                "name": "grabbable"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the overlay is parented to.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the joint of the entity or avatar that the entity is\r    parented to if <code>parentID</code> is set. Use 65535 or -1 to parent to the parent's position and orientation rather\r    than a joint.",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The counter-clockwise angle from the overlay's x-axis that drawing starts at, in degrees.",
                "name": "startAt"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 360,
                "description": "The counter-clockwise angle from the overlay's x-axis that drawing ends at, in degrees.",
                "name": "endAt"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The outer radius of the overlay in meters. Synonym: <code>radius</code>.",
                "name": "outerRadius"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The inner radius of the overlay in meters.",
                "name": "innerRadius"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "description": "Sets the color of the overlay. Setting this value sets the values of <code>innerStartColor</code>, \r    <code>innerEndColor</code>, <code>outerStartColor</code>, and <code>outerEndColor</code>.\r    <em>Write-only.</em>",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "description": "Sets the values of <code>innerStartColor</code> and <code>outerStartColor</code>.\r    <em>Write-only.</em>",
                "name": "startColor"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "description": "Sets the values of <code>innerEndColor</code> and <code>outerEndColor</code>.\r    <em>Write-only.</em>",
                "name": "endColor"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "description": "Sets the values of <code>innerStartColor</code> and <code>innerEndColor</code>.\r    <em>Write-only.</em>",
                "name": "innerColor"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "description": "Sets the values of <code>outerStartColor</code> and <code>outerEndColor</code>.\r    <em>Write-only.</em>",
                "name": "outerColor"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color at the inner start point of the overlay.",
                "name": "innerStartcolor"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color at the inner end point of the overlay.",
                "name": "innerEndColor"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color at the outer start point of the overlay.",
                "name": "outerStartColor"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color at the outer end point of the overlay.",
                "name": "outerEndColor"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Sets the opacity of the overlay, <code>0.0</code> &ndash; <code>1.0</code>. Setting this value \r    sets the values of <code>innerStartAlpha</code>, <code>innerEndAlpha</code>, <code>outerStartAlpha</code>, and\r    <code>outerEndAlpha</code>. Synonym: <code>Alpha</code>.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Sets the values of <code>innerStartAlpha</code> and <code>outerStartAlpha</code>.\r    <em>Write-only.</em>",
                "name": "startAlpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Sets the values of <code>innerEndAlpha</code> and <code>outerEndAlpha</code>.\r    <em>Write-only.</em>",
                "name": "endAlpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Sets the values of <code>innerStartAlpha</code> and <code>innerEndAlpha</code>.\r    <em>Write-only.</em>",
                "name": "innerAlpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Sets the values of <code>outerStartAlpha</code> and <code>outerEndAlpha</code>.\r    <em>Write-only.</em>",
                "name": "outerAlpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity at the inner start point of the overlay, <code>0.0</code> &ndash; \r    <code>1.0</code>.",
                "name": "innerStartAlpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity at the inner end point of the overlay, <code>0.0</code> &ndash; \r    <code>1.0</code>.",
                "name": "innerEndAlpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity at the outer start point of the overlay, <code>0.0</code> &ndash; \r    <code>1.0</code>.",
                "name": "outerStartAlpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity at the outer end point of the overlay, <code>0.0</code> &ndash; \r    <code>1.0</code>.",
                "name": "outerEndAlpha"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if tick marks are drawn, <code>false</code> if they aren't.",
                "name": "hasTickMarks"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The angle between major tick marks, in degrees.",
                "name": "majorTickMarksAngle"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The angle between minor tick marks, in degrees.",
                "name": "minorTickMarksAngle"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The length of the major tick marks, in meters. A positive value draws tick marks\r    outwards from the inner radius; a negative value draws tick marks inwards from the outer radius.",
                "name": "majorTickMarksLength"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The length of the minor tick marks, in meters. A positive value draws tick marks\r    outwards from the inner radius; a negative value draws tick marks inwards from the outer radius.",
                "name": "minorTickMarksLength"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The color of the major tick marks.",
                "name": "majorTickMarksColor"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The color of the minor tick marks.",
                "name": "minorTickMarksColor"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.OverlayProperties-Circle3D",
        "scope": "static"
    },
    {
        "description": "The result of a {@link PickRay} search using {@link Overlays.findRayIntersection|findRayIntersection}.",
        "kind": "typedef",
        "name": "RayToOverlayIntersectionResult",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the {@link PickRay} intersected with a 3D overlay, otherwise\r    <code>false</code>.",
                "name": "intersects"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID of the local entity that was intersected.",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The distance from the {@link PickRay} origin to the intersection point.",
                "name": "distance"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The normal of the overlay surface at the intersection point.",
                "name": "surfaceNormal"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the intersection point.",
                "name": "intersection"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Additional intersection details, if available.",
                "name": "extraInfo"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.RayToOverlayIntersectionResult",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Overlays</code> API provides facilities to create and interact with overlays. These are 2D and 3D objects visible \ronly to yourself and that aren't persisted to the domain. They are used for UI.\r\r<p><strong>Note:</strong> 3D overlays are local {@link Entities}, internally, so many of the methods also work with \rentities.</p>\r\r<p class=\"important\">3D overlays are deprecated: Use local {@link Entities} for these instead.</p>",
        "kind": "namespace",
        "name": "Overlays",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The <code>{@link Overlays.OverlayProperties-Web3D|\"web3d\"}</code> overlay \r    ({@link Entities.EntityProperties-Web|Web} entity) that has keyboard focus. If no overlay (entity) has keyboard focus, \r    returns <code>null</code>; set to <code>null</code> or {@link Uuid(0)|Uuid.NULL} to clear keyboard focus.",
                "name": "keyboardFocusOverlay"
            }
        ],
        "longname": "Overlays",
        "scope": "global"
    },
    {
        "description": "Adds an overlay to the scene.",
        "kind": "function",
        "name": "addOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Overlays.OverlayType"
                    ]
                },
                "description": "The type of the overlay to add.",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Overlays.OverlayProperties"
                    ]
                },
                "description": "The properties of the overlay to add.",
                "name": "properties"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the newly created overlay if successful, otherwise {@link Uuid(0)|Uuid.NULL}."
            }
        ],
        "examples": [
            "<caption>Add a cube overlay in front of your avatar.</caption>\rvar overlay = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.addOverlay",
        "scope": "static"
    },
    {
        "description": "Creates a clone of an existing overlay (or entity).\r<p>Note: For cloning behavior of 3D overlays and entities, see {@link Entities.cloneEntity}.</p>",
        "kind": "function",
        "name": "cloneOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay (or entity) to clone.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the new overlay (or entity) if successful, otherwise {@link Uuid(0)|Uuid.NULL}."
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.cloneOverlay",
        "scope": "static"
    },
    {
        "description": "Edits an overlay's (or entity's) properties.",
        "kind": "function",
        "name": "editOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay (or entity) to edit.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Overlays.OverlayProperties"
                    ]
                },
                "description": "The properties changes to make.",
                "name": "properties"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>false</code> if Interface is exiting. Otherwise, if a 2D overlay then <code>true</code> always, \r   and if a 3D overlay then <code>true</code> if the overlay was found and edited, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Add an overlay in front of your avatar then change its color.</caption>\rvar overlay = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\r\rvar success = Overlays.editOverlay(overlay, {\r    color: { red: 255, green: 0, blue: 0 }\r});\rprint(\"Success: \" + success);"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.editOverlay",
        "scope": "static"
    },
    {
        "description": "Edits the properties of multiple overlays (or entities).",
        "kind": "function",
        "name": "editOverlays",
        "params": [
            {
                "type": {
                    "names": [
                        "object.<Uuid, Overlays.OverlayProperties>"
                    ]
                },
                "description": "An object with overlay (or entity) IDs as keys and\r    {@link Overlays.OverlayProperties|OverlayProperties} edits to make as values.",
                "name": "propertiesById"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>false</code> if Interface is exiting, otherwise <code>true</code>."
            }
        ],
        "examples": [
            "<caption>Create two overlays in front of your avatar then change their colors.</caption>\rvar overlayA = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: -0.3, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rvar overlayB = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0.3, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\r\rvar overlayEdits = {};\roverlayEdits[overlayA] = { color: { red: 255, green: 0, blue: 0 } };\roverlayEdits[overlayB] = { color: { red: 0, green: 255, blue: 0 } };\rvar success = Overlays.editOverlays(overlayEdits);\rprint(\"Success: \" + success);"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.editOverlays",
        "scope": "static"
    },
    {
        "description": "Deletes an overlay (or entity).",
        "kind": "function",
        "name": "deleteOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay (or entity) to delete.",
                "name": "id"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.deleteOverlay",
        "scope": "static"
    },
    {
        "description": "Gets the type of an overlay.",
        "kind": "function",
        "name": "getOverlayType",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay to get the type of.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Overlays.OverlayType"
                    ]
                },
                "description": "The type of the overlay if found, otherwise <code>\"unknown\"</code>."
            }
        ],
        "examples": [
            "<caption>Create an overlay in front of your avatar then get and report its type.</caption>\rvar overlay = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rvar type = Overlays.getOverlayType(overlay);\rprint(\"Type: \" + type); // cube"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.getOverlayType",
        "scope": "static"
    },
    {
        "description": "Gets an overlay's (or entity's) script object. In particular, this is useful for accessing a \r<code>{@link Overlays.OverlayProperties-Web3D|\"web3d\"}</code> overlay's <code>EventBridge</code> script object to \rexchange messages with the web page script.\r<p>To send a message from an Interface script to a <code>\"web3d\"</code> overlay over its event bridge:</p>\r<pre class=\"prettyprint\"><code>var overlayObject = Overlays.getOverlayObject(overlayID);\roverlayObject.emitScriptEvent(message);</code></pre>\r<p>To receive a message from a <code>\"web3d\"</code> overlay over its event bridge in an Interface script:</p>\r<pre class=\"prettyprint\"><code>var overlayObject = Overlays.getOverlayObject(overlayID);\roverlayObject.webEventReceived.connect(function(message) {\r    ...\r};</code></pre>",
        "kind": "function",
        "name": "getOverlayObject",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay to get the script object of.",
                "name": "overlayID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The script object for the overlay if found."
            }
        ],
        "examples": [
            "<caption>Exchange messages with a <code>\"web3d\"</code> overlay.</caption>\r// HTML file, name: \"web3d.html\".\r<!DOCTYPE html>\r<html>\r<head>\r    <title>HELLO</title>\r</head>\r<body>\r    <h1>HELLO</h1>\r    <script>\r        function onScriptEventReceived(message) {\r            // Message received from the script.\r            console.log(\"Message received: \" + message);\r        }\r\r        EventBridge.scriptEventReceived.connect(onScriptEventReceived);\r\r        setInterval(function () {\r            // Send a message to the script.\r            EventBridge.emitWebEvent(\"hello\");\r        }, 2000);\r    </script>\r</body>\r</html>\r\r// Interface script file.\rvar web3DOverlay = Overlays.addOverlay(\"web3d\", {\r    type: \"Web\",\r    position : Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y : 0.5, z : -3 })),\r    rotation : MyAvatar.orientation,\r    sourceUrl : Script.resolvePath(\"web3d.html\"),\r    alpha : 1.0\r    });\r\rvar overlayObject;\r\rfunction onWebEventReceived(message) {\r    // Message received.\r    print(\"Message received: \" + message);\r\r    // Send a message back.\r    overlayObject.emitScriptEvent(message + \" back\");\r}\r\rScript.setTimeout(function() {\r    overlayObject = Overlays.getOverlayObject(web3DOverlay);\r    overlayObject.webEventReceived.connect(onWebEventReceived);\r}, 500);\r\rScript.scriptEnding.connect(function() {\r    Overlays.deleteOverlay(web3DOverlay);\r});"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.getOverlayObject",
        "scope": "static"
    },
    {
        "description": "Gets the ID of the 2D overlay at a particular point on the desktop screen or HUD surface.",
        "kind": "function",
        "name": "getOverlayAtPoint",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "The point to check for an overlay.",
                "name": "point"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the 2D overlay at the specified point if found, otherwise <code>null</code>."
            }
        ],
        "examples": [
            "<caption>Create a 2D overlay and add an event function that reports the overlay clicked on, if any.</caption>\rvar overlay = Overlays.addOverlay(\"rectangle\", {\r    bounds: { x: 100, y: 100, width: 200, height: 100 },\r    color: { red: 255, green: 255, blue: 255 }\r});\rprint(\"Created: \" + overlay);\r\rController.mousePressEvent.connect(function (event) {\r    var overlay = Overlays.getOverlayAtPoint({ x: event.x, y: event.y });\r    print(\"Clicked: \" + overlay);\r});"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.getOverlayAtPoint",
        "scope": "static"
    },
    {
        "description": "Gets a specified property value of a 3D overlay (or entity).\r<p><strong>Note:</strong> 2D overlays' property values cannot be retrieved.</p>",
        "kind": "function",
        "name": "getProperty",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the 3D overlay (or entity).",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the property to get the value of.",
                "name": "property"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The value of the property if the 3D overlay and property can be found, otherwise\r    <code>undefined</code>."
            }
        ],
        "examples": [
            "<caption>Create an overlay in front of your avatar then report its alpha property value.</caption>\rvar overlay = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rvar alpha = Overlays.getProperty(overlay, \"alpha\");\rprint(\"Overlay alpha: \" + alpha);"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.getProperty",
        "scope": "static"
    },
    {
        "description": "Gets specified property values of a 3D overlay (or entity).\r<p><strong>Note:</strong> 2D overlays' property values cannot be retrieved.</p>",
        "kind": "function",
        "name": "getProperties",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay (or entity).",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "The names of the properties to get the values of.",
                "name": "properties"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Overlays.OverlayProperties"
                    ]
                },
                "description": "The values of valid properties if the overlay can be found, otherwise an empty \r    object."
            }
        ],
        "examples": [
            "<caption>Create an overlay in front of your avatar then report some of its properties.</caption>\rvar overlay = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rvar properties = Overlays.getProperties(overlay, [\"color\", \"alpha\", \"grabbable\"]);\rprint(\"Overlay properties: \" + JSON.stringify(properties));"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.getProperties",
        "scope": "static"
    },
    {
        "description": "Gets the values of multiple overlays' (or entities') properties.",
        "kind": "function",
        "name": "getOverlaysProperties",
        "params": [
            {
                "type": {
                    "names": [
                        "object.<Uuid, Array.<string>>"
                    ]
                },
                "description": "An object with overlay (or entity) IDs as keys and arrays of the \r    names of properties to get for each as values.",
                "name": "propertiesById"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object.<Uuid, Overlays.OverlayProperties>"
                    ]
                },
                "description": "An object with overlay (or entity) IDs as keys and\r    {@link Overlays.OverlayProperties|OverlayProperties} as values."
            }
        ],
        "examples": [
            "<caption>Create two cube overlays in front of your avatar then get some of their properties.</caption>\rvar overlayA = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: -0.3, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rvar overlayB = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0.3, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rvar propertiesToGet = {};\rpropertiesToGet[overlayA] = [\"color\", \"alpha\"];\rpropertiesToGet[overlayB] = [\"dimensions\"];\rvar properties = Overlays.getOverlaysProperties(propertiesToGet);\rprint(\"Overlays properties: \" + JSON.stringify(properties));"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.getOverlaysProperties",
        "scope": "static"
    },
    {
        "description": "Finds the closest 3D overlay (or local entity) intersected by a {@link PickRay}.",
        "kind": "function",
        "name": "findRayIntersection",
        "params": [
            {
                "type": {
                    "names": [
                        "PickRay"
                    ]
                },
                "description": "The PickRay to use for finding overlays.",
                "name": "pickRay"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> to pick against precise meshes, <code>false</code> to pick \r    against coarse meshes. If <code>true</code> and the intersected entity is a model, the result's \r    <code>extraInfo</code> property includes more information than it otherwise would.",
                "name": "precisionPicking"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "If not empty, then the search is restricted to these overlays (and local entities).",
                "name": "include"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "Overlays (and local entities) to ignore during the search.",
                "name": "discard"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> if only overlays (and local entities) that are \r    <code>{@link Overlays.OverlayProperties|visible}</code> should be searched.",
                "name": "visibleOnly"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> if only local entities that are not \r    <code>{@link Entities.EntityProperties|collisionless}</code> should be searched.",
                "name": "collideableOnly"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Overlays.RayToOverlayIntersectionResult"
                    ]
                },
                "description": "The result of the search for the first intersected overlay (or local \r    entity."
            }
        ],
        "examples": [
            "<caption>Create a cube overlay in front of your avatar. Report 3D overlay intersection details for mouse \r    clicks.</caption>\rvar overlay = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\r\rController.mousePressEvent.connect(function (event) {\r    var pickRay = Camera.computePickRay(event.x, event.y);\r    var intersection = Overlays.findRayIntersection(pickRay);\r    print(\"Intersection: \" + JSON.stringify(intersection));\r});"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.findRayIntersection",
        "scope": "static"
    },
    {
        "description": "Gets a list of visible 3D overlays (local entities) with bounding boxes that touch a search sphere.",
        "kind": "function",
        "name": "findOverlays",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The center of the search sphere.",
                "name": "center"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The radius of the search sphere.",
                "name": "radius"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "The IDs of the overlays (local entities) that are visible and have bounding boxes that touch a search \r    sphere."
            }
        ],
        "examples": [
            "<caption>Create two overlays in front of your avatar then search for overlays near your avatar.</caption>\rvar overlayA = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: -0.3, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rprint(\"Overlay A: \" + overlayA);\rvar overlayB = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0.3, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rprint(\"Overlay B: \" + overlayB);\r\rvar overlaysFound = Overlays.findOverlays(MyAvatar.position, 5.0);\rprint(\"Overlays found: \" + JSON.stringify(overlaysFound));"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.findOverlays",
        "scope": "static"
    },
    {
        "description": "Checks whether an overlay's (or entity's) assets have been loaded. For example, for an \r<code>{@link Overlays.OverlayProperties-Image|\"image\"}</code> overlay, the result indicates whether its image has been \rloaded.",
        "kind": "function",
        "name": "isLoaded",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay (or entity) to check.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the overlay's (or entity's) assets have been loaded, otherwise \r    <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Create an image overlay and report whether its image is loaded after 1s.</caption>\rvar overlay = Overlays.addOverlay(\"image\", {\r    bounds: { x: 100, y: 100, width: 200, height: 200 },\r    imageURL: \"https://content.highfidelity.com/DomainContent/production/Particles/wispy-smoke.png\"\r});\rScript.setTimeout(function () {\r    var isLoaded = Overlays.isLoaded(overlay);\r    print(\"Image loaded: \" + isLoaded);\r}, 1000);"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.isLoaded",
        "scope": "static"
    },
    {
        "description": "Calculates the size of some text in a text overlay (or entity). The overlay (or entity) need not be set visible.\r<p><strong>Note:</strong> The size of text in a 3D overlay (or entity) cannot be calculated immediately after the \roverlay (or entity) is created; a short delay is required while the overlay (or entity) finishes being created.</p>",
        "kind": "function",
        "name": "textSize",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay (or entity) to use for calculation.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The string to calculate the size of.",
                "name": "text"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Size"
                    ]
                },
                "description": "The size of the <code>text</code> if the object is a text overlay (or entity), otherwise\r    <code>{ height: 0, width : 0 }</code>. If the object is a 2D overlay, the size is in pixels; if the object is a 3D \r    overlay (or entity), the size is in meters."
            }
        ],
        "examples": [
            "<caption>Calculate the size of \"hello\" in a 3D text entity.</caption>\rvar overlay = Overlays.addOverlay(\"text3d\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -2 })),\r    rotation: MyAvatar.orientation,\r    lineHeight: 0.2,\r    visible: false\r});\r\rScript.setTimeout(function() {\r    var textSize = Overlays.textSize(overlay, \"hello\");\r    print(\"Size of \\\"hello\\\": \" + JSON.stringify(textSize));\r}, 500);"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.textSize",
        "scope": "static"
    },
    {
        "description": "Gets the width of the Interface window or HUD surface.",
        "kind": "function",
        "name": "width",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The width, in pixels, of the Interface window if in desktop mode or the HUD surface if in HMD mode."
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.width",
        "scope": "static"
    },
    {
        "description": "Gets the height of the Interface window or HUD surface.",
        "kind": "function",
        "name": "height",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The height, in pixels, of the Interface window if in desktop mode or the HUD surface if in HMD mode."
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.height",
        "scope": "static"
    },
    {
        "description": "Checks if an overlay (or entity) exists.",
        "kind": "function",
        "name": "isAddedOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay (or entity) to check.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if an overlay (or entity) with the given ID exists, <code>false</code> if it doesn't."
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.isAddedOverlay",
        "scope": "static"
    },
    {
        "description": "Generates a mouse press event on an overlay (or local entity).",
        "kind": "function",
        "name": "sendMousePressOnOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay (or local entity) to generate a mouse press event on.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The mouse press event details.",
                "name": "event"
            }
        ],
        "examples": [
            "<caption>Create a 2D rectangle overlay plus a 3D cube overlay and generate mousePressOnOverlay events for the \r2D overlay.</caption>\rvar overlay3D = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rprint(\"3D overlay: \" + overlay);\r\rvar overlay2D = Overlays.addOverlay(\"rectangle\", {\r    bounds: { x: 100, y: 100, width: 200, height: 100 },\r    color: { red: 255, green: 255, blue: 255 }\r});\rprint(\"2D overlay: \" + overlay);\r\r// Overlays.mousePressOnOverlay by default applies only to 3D overlays.\rOverlays.mousePressOnOverlay.connect(function(overlayID, event) {\r    print(\"Clicked: \" + overlayID);\r});\r\rController.mousePressEvent.connect(function (event) {\r    // Overlays.getOverlayAtPoint applies only to 2D overlays.\r    var overlay = Overlays.getOverlayAtPoint({ x: event.x, y: event.y });\r    if (overlay) {\r        Overlays.sendMousePressOnOverlay(overlay, {\r            type: \"press\",\r            id: 0,\r            pos2D: event\r        });\r    }\r});"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.sendMousePressOnOverlay",
        "scope": "static"
    },
    {
        "description": "Generates a mouse release event on an overlay (or local entity).",
        "kind": "function",
        "name": "sendMouseReleaseOnOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay (or local entity) to generate a mouse release event on.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The mouse release event details.",
                "name": "event"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.sendMouseReleaseOnOverlay",
        "scope": "static"
    },
    {
        "description": "Generates a mouse move event on an overlay (or local entity).",
        "kind": "function",
        "name": "sendMouseMoveOnOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay (or local entity) to generate a mouse move event on.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The mouse move event details.",
                "name": "event"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.sendMouseMoveOnOverlay",
        "scope": "static"
    },
    {
        "description": "Generates a hover enter event on an overlay (or local entity).",
        "kind": "function",
        "name": "sendHoverEnterOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay (or local entity) to generate a hover enter event on.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The hover enter event details.",
                "name": "event"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.sendHoverEnterOverlay",
        "scope": "static"
    },
    {
        "description": "Generates a hover over event on an overlay (or entity).",
        "kind": "function",
        "name": "sendHoverOverOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay (or local entity) to generate a hover over event on.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The hover over event details.",
                "name": "event"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.sendHoverOverOverlay",
        "scope": "static"
    },
    {
        "description": "Generates a hover leave event on an overlay (or local entity).",
        "kind": "function",
        "name": "sendHoverLeaveOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay (or local entity) to generate a hover leave event on.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The hover leave event details.",
                "name": "event"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.sendHoverLeaveOverlay",
        "scope": "static"
    },
    {
        "description": "Gets the ID of the <code>{@link Overlays.OverlayProperties-Web3D|\"web3d\"}</code> overlay \r({@link Entities.EntityProperties-Web|Web} entity) that has keyboard focus.",
        "kind": "function",
        "name": "getKeyboardFocusOverlay",
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the <code>{@link Overlays.OverlayProperties-Web3D|\"web3d\"}</code> overlay \r({@link Entities.EntityProperties-Web|Web} entity) that has focus, if any, otherwise <code>null</code>."
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.getKeyboardFocusOverlay",
        "scope": "static"
    },
    {
        "description": "Sets the <code>{@link Overlays.OverlayProperties-Web3D|\"web3d\"}</code> overlay \r({@link Entities.EntityProperties-Web|Web} entity) that has keyboard focus.",
        "kind": "function",
        "name": "setKeyboardFocusOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the <code>{@link Overlays.OverlayProperties-Web3D|\"web3d\"}</code> overlay \r({@link Entities.EntityProperties-Web|Web} entity) to set keyboard focus to. Use <code>null</code> or \r{@link Uuid(0)|Uuid.NULL} to unset keyboard focus from an overlay (entity).",
                "name": "id"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.setKeyboardFocusOverlay",
        "scope": "static"
    },
    {
        "description": "Triggered when an overlay (or entity) is deleted.",
        "kind": "signal",
        "name": "overlayDeleted",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay (or entity) that was deleted.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Create an overlay then delete it after 1s.</caption>\rvar overlay = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rprint(\"Overlay: \" + overlay);\r\rOverlays.overlayDeleted.connect(function(overlayID) {\r    print(\"Deleted: \" + overlayID);\r});\rScript.setTimeout(function () {\r    Overlays.deleteOverlay(overlay);\r}, 1000);"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.overlayDeleted",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse press event occurs on an overlay. Only occurs for 3D overlays (unless you use \r    {@link Overlays.sendMousePressOnOverlay|sendMousePressOnOverlay} for a 2D overlay).",
        "kind": "signal",
        "name": "mousePressOnOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay the mouse press event occurred on.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The mouse press event details.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Create a cube overlay in front of your avatar and report mouse clicks on it.</caption>\rvar overlay = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rprint(\"My overlay: \" + overlay);\r\rOverlays.mousePressOnOverlay.connect(function(overlayID, event) {\r    if (overlayID === overlay) {\r        print(\"Clicked on my overlay\");\r    }\r});"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.mousePressOnOverlay",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse double press event occurs on an overlay. Only occurs for 3D overlays.",
        "kind": "signal",
        "name": "mouseDoublePressOnOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay the mouse double press event occurred on.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The mouse double press event details.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.mouseDoublePressOnOverlay",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse release event occurs on an overlay. Only occurs for 3D overlays (unless you use \r    {@link Overlays.sendMouseReleaseOnOverlay|sendMouseReleaseOnOverlay} for a 2D overlay).",
        "kind": "signal",
        "name": "mouseReleaseOnOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay the mouse release event occurred on.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The mouse release event details.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.mouseReleaseOnOverlay",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse move event occurs on an overlay. Only occurs for 3D overlays (unless you use \r    {@link Overlays.sendMouseMoveOnOverlay|sendMouseMoveOnOverlay} for a 2D overlay).",
        "kind": "signal",
        "name": "mouseMoveOnOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay the mouse moved event occurred on.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The mouse move event details.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.mouseMoveOnOverlay",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse press event occurs on something other than a 3D overlay.",
        "kind": "signal",
        "name": "mousePressOffOverlay",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.mousePressOffOverlay",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse double press event occurs on something other than a 3D overlay.",
        "kind": "signal",
        "name": "mouseDoublePressOffOverlay",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.mouseDoublePressOffOverlay",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse cursor starts hovering over an overlay. Only occurs for 3D overlays (unless you use \r    {@link Overlays.sendHoverEnterOverlay|sendHoverEnterOverlay} for a 2D overlay).",
        "kind": "signal",
        "name": "hoverEnterOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay the mouse moved event occurred on.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The mouse move event details.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Create a cube overlay in front of your avatar and report when you start hovering your mouse over\r    it.</caption>\rvar overlay = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rprint(\"Overlay: \" + overlay);\rOverlays.hoverEnterOverlay.connect(function(overlayID, event) {\r    print(\"Hover enter: \" + overlayID);\r});"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.hoverEnterOverlay",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse cursor continues hovering over an overlay. Only occurs for 3D overlays (unless you use \r    {@link Overlays.sendHoverOverOverlay|sendHoverOverOverlay} for a 2D overlay).",
        "kind": "signal",
        "name": "hoverOverOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay the hover over event occurred on.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The hover over event details.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.hoverOverOverlay",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse cursor finishes hovering over an overlay. Only occurs for 3D overlays (unless you use \r    {@link Overlays.sendHoverLeaveOverlay|sendHoverLeaveOverlay} for a 2D overlay).",
        "kind": "signal",
        "name": "hoverLeaveOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay the hover leave event occurred on.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The hover leave event details.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.hoverLeaveOverlay",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Assignment Client Scripts</p>The <code>AnimationCache</code> API manages animation cache resources.",
        "kind": "namespace",
        "name": "AnimationCache",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Total number of total resources. <em>Read-only.</em>",
                "name": "numTotal"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Total number of cached resource. <em>Read-only.</em>",
                "name": "numCached"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Size in bytes of all resources. <em>Read-only.</em>",
                "name": "sizeTotal"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Size in bytes of all cached resources. <em>Read-only.</em>",
                "name": "sizeCached"
            }
        ],
        "longname": "AnimationCache",
        "scope": "global"
    },
    {
        "description": "Gets information about an animation resource.",
        "kind": "function",
        "name": "getAnimation",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the animation.",
                "name": "url"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "AnimationObject"
                    ]
                },
                "description": "An animation object."
            }
        ],
        "memberof": "AnimationCache",
        "longname": "AnimationCache.getAnimation",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>Information about an animation resource, created by {@link AnimationCache.getAnimation}.",
        "kind": "class",
        "name": "AnimationObject",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "The names of the joints that are animated. <em>Read-only.</em>",
                "name": "jointNames"
            },
            {
                "type": {
                    "names": [
                        "Array.<AnimationFrameObject>"
                    ]
                },
                "description": "The frames in the animation. <em>Read-only.</em>",
                "name": "frames"
            }
        ],
        "longname": "AnimationObject",
        "scope": "global"
    },
    {
        "description": "Gets the names of the joints that are animated.",
        "kind": "function",
        "name": "getJointNames",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "The names of the joints that are animated."
            }
        ],
        "memberof": "AnimationObject",
        "longname": "AnimationObject.getJointNames",
        "scope": "static"
    },
    {
        "description": "Gets the frames in the animation.",
        "kind": "function",
        "name": "getFrames",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<AnimationFrameObject>"
                    ]
                },
                "description": "The frames in the animation."
            }
        ],
        "memberof": "AnimationObject",
        "longname": "AnimationObject.getFrames",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>Joint rotations in one frame of an animation.",
        "kind": "class",
        "name": "AnimationFrameObject",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "Array.<Quat>"
                    ]
                },
                "description": "Joint rotations. <em>Read-only.</em>",
                "name": "rotations"
            }
        ],
        "longname": "AnimationFrameObject",
        "scope": "global"
    },
    {
        "description": "Gets the joint rotations in the animation frame.",
        "kind": "function",
        "name": "getRotations",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Quat>"
                    ]
                },
                "description": "The joint rotations in the animation frame."
            }
        ],
        "memberof": "AnimationFrameObject",
        "longname": "AnimationFrameObject.getRotations",
        "scope": "static"
    },
    {
        "description": "<p>Specifies the initial conditions of the IK solver.</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Name</th><th>Description</th>\r  </thead>\r  <tbody>\r    <tr><td><code>0</code></td><td>RelaxToUnderPoses</td><td>This is a blend: it is 15/16 <code>PreviousSolution</code> \r      and 1/16 <code>UnderPoses</code>. This provides some of the benefits of using <code>UnderPoses</code> so that the \r      underlying animation is still visible, while at the same time converging faster then using the \r      <code>UnderPoses</code> as the only initial solution.</td></tr>\r    <tr><td><code>1</code></td><td>RelaxToLimitCenterPoses</td><td>This is a blend: it is 15/16 \r      <code>PreviousSolution</code> and 1/16 <code>LimitCenterPoses</code>. This should converge quickly because it is \r      close to the previous solution, but still provides the benefits of avoiding limb locking.</td></tr>\r    <tr><td><code>2</code></td><td>PreviousSolution</td><td>\r      <p>The IK system will begin to solve from the same position and orientations for each joint that was the result \r      from the previous frame.</p>\r      <p>Pros: As the end effectors typically do not move much from frame to frame, this is likely to converge quickly \r      to a valid solution.</p>\r      <p>Cons: If the previous solution resulted in an awkward or uncomfortable posture, the next frame will also be \r      awkward and uncomfortable. It can also result in locked elbows and knees.</p>\r      </td></tr>\r    <tr><td><code>3</code></td><td>UnderPoses</td><td>The IK occurs at one of the top-most layers. It has access to the \r      full posture that was computed via canned animations and blends. We call this animated set of poses the \"under \r      pose\". The under poses are what would be visible if IK was completely disabled. Using the under poses as the \r      initial conditions of the CCD solve will cause some of the animated motion to be blended into the result of the \r      IK. This can result in very natural results, especially if there are only a few IK targets enabled. On the other \r      hand, because the under poses might be quite far from the desired end effector, it can converge slowly in some \r      cases, causing it to never reach the IK target in the allotted number of iterations. Also, in situations where all \r      of the IK targets are being controlled by external sensors, sometimes starting from the under poses can cause \r      awkward motions from the underlying animations to leak into the IK result.</td></tr>\r    <tr><td><code>4</code></td><td>LimitCenterPoses</td><td>This pose is taken to be the center of all the joint \r      constraints. This can prevent the IK solution from getting locked or stuck at a particular constraint. For \r      example, if the arm is pointing straight outward from the body, as the end effector moves towards the body, at \r      some point the elbow should bend to accommodate. However, because the CCD solver is stuck at a local maximum, it \r      will not rotate the elbow, unless the initial conditions already have the elbow bent, which is the case for \r      <code>LimitCenterPoses</code>. When all the IK targets are enabled, this result will provide a consistent starting \r      point for each IK solve, hopefully resulting in a consistent, natural result.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "AnimIKSolutionSource",
        "type": {
            "names": [
                "number"
            ]
        },
        "memberof": "MyAvatar",
        "longname": "MyAvatar.AnimIKSolutionSource",
        "scope": "static"
    },
    {
        "description": "<p>Specifies sets of joints.</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Name</th><th>Description</th>\r  </thead>\r  <tbody>\r    <tr><td><code>0</code></td><td>FullBodyBoneSet</td><td>All joints.</td></tr>\r    <tr><td><code>1</code></td><td>UpperBodyBoneSet</td><td>Only the \"Spine\" joint and its children.</td></tr>\r    <tr><td><code>2</code></td><td>LowerBodyBoneSet</td><td>Only the leg joints and their children.</td></tr>\r    <tr><td><code>3</code></td><td>LeftArmBoneSet</td><td>Joints that are the children of the \"LeftShoulder\" \r      joint.</td></tr>\r    <tr><td><code>4</code></td><td>RightArmBoneSet</td><td>Joints that are the children of the \"RightShoulder\" \r      joint.</td></tr>\r    <tr><td><code>5</code></td><td>AboveTheHeadBoneSet</td><td>Joints that are the children of the \"Head\" \r      joint.</td></tr>\r    <tr><td><code>6</code></td><td>BelowTheHeadBoneSet</td><td>Joints that are NOT the children of the \"head\" \r      joint.</td></tr>\r    <tr><td><code>7</code></td><td>HeadOnlyBoneSet</td><td>The \"Head\" joint.</td></tr>\r    <tr><td><code>8</code></td><td>SpineOnlyBoneSet</td><td>The \"Spine\" joint.</td></tr>\r    <tr><td><code>9</code></td><td>EmptyBoneSet</td><td>No joints.</td></tr>\r    <tr><td><code>10</code></td><td>LeftHandBoneSet</td><td>joints that are the children of the \"LeftHand\" \r      joint.</td></tr>\r    <tr><td><code>11</code></td><td>RightHandBoneSet</td><td>Joints that are the children of the \"RightHand\" \r      joint.</td></tr>\r    <tr><td><code>12</code></td><td>HipsOnlyBoneSet</td><td>The \"Hips\" joint.</td></tr>\r    <tr><td><code>13</code></td><td>BothFeetBoneSet</td><td>The \"LeftFoot\" and \"RightFoot\" joints.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "AnimOverlayBoneSet",
        "type": {
            "names": [
                "number"
            ]
        },
        "memberof": "MyAvatar",
        "longname": "MyAvatar.AnimOverlayBoneSet",
        "scope": "static"
    },
    {
        "description": "<p>An IK target type.</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Name</th><th>Description</th>\r  </thead>\r  <tbody>\r    <tr><td><code>0</code></td><td>RotationAndPosition</td><td>Attempt to reach the rotation and position end \r      effector.</td></tr>\r    <tr><td><code>1</code></td><td>RotationOnly</td><td>Attempt to reach the end effector rotation only.</td></tr>\r    <tr><td><code>2</code></td><td>HmdHead</td><td>\r      <p>A special mode of IK that would attempt to prevent unnecessary bending of the spine.</p>\r      <p class=\"important\">Deprecated: This target type is deprecated and will be removed.</p></td></tr>\r    <tr><td><code>3</code></td><td>HipsRelativeRotationAndPosition</td><td>Attempt to reach a rotation and position end \r      effector that is not in absolute rig coordinates but is offset by the avatar hips translation.</td></tr>\r    <tr><td><code>4</code></td><td>Spline</td><td>Use a cubic Hermite spline to model the human spine. This prevents \r      kinks in the spine and allows for a small amount of stretch and squash.</td></tr>\r    <tr><td><code>5</code></td><td>Unknown</td><td>IK is disabled.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "IKTargetType",
        "type": {
            "names": [
                "number"
            ]
        },
        "memberof": "MyAvatar",
        "longname": "MyAvatar.IKTargetType",
        "scope": "static"
    },
    {
        "description": "<p>An <code>AnimStateDictionary</code> object may have the following properties. It may also have other properties, set by \rscripts.</p>\r<p><strong>Warning:</strong> These properties are subject to change.\r<table>\r  <thead>\r    <tr><th>Name</th><th>Type</th><th>Description</th>\r  </thead>\r  <tbody>\r    <tr><td><code>userAnimNone</code></td><td>boolean</td><td><code>true</code> when no user overrideAnimation is \r      playing.</td></tr>\r    <tr><td><code>userAnimA</code></td><td>boolean</td><td><code>true</code> when a user overrideAnimation is \r      playing.</td></tr>\r    <tr><td><code>userAnimB</code></td><td>boolean</td><td><code>true</code> when a user overrideAnimation is \r      playing.</td></tr>\r\r    <tr><td><code>sine</code></td><td>number</td><td>Oscillating sine wave.</td></tr>\r    <tr><td><code>moveForwardSpeed</code></td><td>number</td><td>Controls the blend between the various forward walking \r      &amp; running animations.</td></tr>\r    <tr><td><code>moveBackwardSpeed</code></td><td>number</td><td>Controls the blend between the various backward walking \r      &amp; running animations.</td></tr>\r    <tr><td><code>moveLateralSpeed</code></td><td>number</td><td>Controls the blend between the various sidestep walking \r      &amp; running animations.</td></tr>\r\r    <tr><td><code>isMovingForward</code></td><td>boolean</td><td><code>true</code> if the avatar is moving \r      forward.</td></tr>\r    <tr><td><code>isMovingBackward</code></td><td>boolean</td><td><code>true</code> if the avatar is moving \r      backward.</td></tr>\r    <tr><td><code>isMovingRight</code></td><td>boolean</td><td><code>true</code> if the avatar is moving to the \r      right.</td></tr>\r    <tr><td><code>isMovingLeft</code></td><td>boolean</td><td><code>true</code> if the avatar is moving to the \r      left.</td></tr>\r    <tr><td><code>isMovingRightHmd</code></td><td>boolean</td><td><code>true</code> if the avatar is moving to the right \r      while the user is in HMD mode.</td></tr>\r    <tr><td><code>isMovingLeftHmd</code></td><td>boolean</td><td><code>true</code> if the avatar is moving to the left while \r      the user is in HMD mode.</td></tr>\r    <tr><td><code>isNotMoving</code></td><td>boolean</td><td><code>true</code> if the avatar is stationary.</td></tr>\r\r    <tr><td><code>isTurningRight</code></td><td>boolean</td><td><code>true</code> if the avatar is turning \r      clockwise.</td></tr>\r    <tr><td><code>isTurningLeft</code></td><td>boolean</td><td><code>true</code> if the avatar is turning \r      counter-clockwise.</td></tr>\r    <tr><td><code>isNotTurning</code></td><td>boolean</td><td><code>true</code> if the avatar is not turning.</td></tr>\r    <tr><td><code>isFlying</code></td><td>boolean</td><td><code>true</code> if the avatar is flying.</td></tr>\r    <tr><td><code>isNotFlying</code></td><td>boolean</td><td><code>true</code> if the avatar is not flying.</td></tr>\r    <tr><td><code>isTakeoffStand</code></td><td>boolean</td><td><code>true</code> if the avatar is about to execute a \r      standing jump.</td></tr>\r    <tr><td><code>isTakeoffRun</code></td><td>boolean</td><td><code>true</code> if the avatar is about to execute a running \r      jump.</td></tr>\r    <tr><td><code>isNotTakeoff</code></td><td>boolean</td><td><code>true</code> if the avatar is not jumping.</td></tr>\r    <tr><td><code>isInAirStand</code></td><td>boolean</td><td><code>true</code> if the avatar is in the air after a standing \r      jump.</td></tr>\r    <tr><td><code>isInAirRun</code></td><td>boolean</td><td><code>true</code> if the avatar is in the air after a running \r      jump.</td></tr>\r    <tr><td><code>isNotInAir</code></td><td>boolean</td><td><code>true</code> if the avatar on the ground.</td></tr>\r\r    <tr><td><code>inAirAlpha</code></td><td>number</td><td>Used to interpolate between the up, apex, and down in-air \r      animations.</td></tr>\r    <tr><td><code>ikOverlayAlpha</code></td><td>number</td><td>The blend between upper body and spline IK versus the \r      underlying animation</td></tr>\r\r    <tr><td><code>headPosition</code></td><td>{@link Vec3}</td><td>The desired position of the <code>Head</code> joint in \r      rig coordinates.</td></tr>\r    <tr><td><code>headRotation</code></td><td>{@link Quat}</td><td>The desired orientation of the <code>Head</code> joint in \r      rig coordinates.</td></tr>\r    <tr><td><code>headType</code></td><td>{@link MyAvatar.IKTargetType|IKTargetType}</td><td>The type of IK used for the \r      head.</td></tr>\r    <tr><td><code>headWeight</code></td><td>number</td><td>How strongly the head chain blends with the other IK \r      chains.</td></tr>\r\r    <tr><td><code>leftHandPosition</code></td><td>{@link Vec3}</td><td>The desired position of the <code>LeftHand</code> \r      joint in rig coordinates.</td></tr>\r    <tr><td><code>leftHandRotation</code></td><td>{@link Quat}</td><td>The desired orientation of the <code>LeftHand</code> \r      joint in rig coordinates.</td></tr>\r    <tr><td><code>leftHandType</code></td><td>{@link MyAvatar.IKTargetType|IKTargetType}</td><td>The type of IK used for the \r      left arm.</td></tr>\r    <tr><td><code>leftHandPoleVectorEnabled</code></td><td>boolean</td><td>When <code>true</code>, the elbow angle is \r      controlled by the <code>rightHandPoleVector</code> property value. Otherwise the elbow direction comes from the \r      underlying animation.</td></tr>\r    <tr><td><code>leftHandPoleReferenceVector</code></td><td>{@link Vec3}</td><td>The direction of the elbow in the local \r      coordinate system of the elbow.</td></tr>\r    <tr><td><code>leftHandPoleVector</code></td><td>{@link Vec3}</td><td>The direction the elbow should point in rig \r      coordinates.</td></tr>\r\r    <tr><td><code>rightHandPosition</code></td><td>{@link Vec3}</td><td>The desired position of the <code>RightHand</code>\r      joint in rig coordinates.</td></tr>\r    <tr><td><code>rightHandRotation</code></td><td>{@link Quat}</td><td>The desired orientation of the \r      <code>RightHand</code> joint in rig coordinates.</td></tr>\r    <tr><td><code>rightHandType</code></td><td>{@link MyAvatar.IKTargetType|IKTargetType}</td><td>The type of IK used for \r      the right arm.</td></tr>\r    <tr><td><code>rightHandPoleVectorEnabled</code></td><td>boolean</td><td>When <code>true</code>, the elbow angle is \r      controlled by the <code>rightHandPoleVector</code> property value. Otherwise the elbow direction comes from the \r      underlying animation.</td></tr>\r    <tr><td><code>rightHandPoleReferenceVector</code></td><td>{@link Vec3}</td><td>The direction of the elbow in the local \r      coordinate system of the elbow.</td></tr>\r    <tr><td><code>rightHandPoleVector</code></td><td>{@link Vec3}</td><td>The direction the elbow should point in rig \r      coordinates.</td></tr>\r\r    <tr><td><code>leftFootIKEnabled</code></td><td>boolean</td><td><code>true</code> if IK is enabled for the left \r      foot.</td></tr>\r    <tr><td><code>rightFootIKEnabled</code></td><td>boolean</td><td><code>true</code> if IK is enabled for the right \r      foot.</td></tr>\r\r    <tr><td><code>leftFootIKPositionVar</code></td><td>string</td><td>The name of the source for the desired position  \r      of the <code>LeftFoot</code> joint. If not set, the foot rotation of the underlying animation will be used.</td></tr>\r    <tr><td><code>leftFootIKRotationVar</code></td><td>string</td><td>The name of the source for the desired rotation\r      of the <code>LeftFoot</code> joint. If not set, the foot rotation of the underlying animation will be used.</td></tr>\r    <tr><td><code>leftFootPoleVectorEnabled</code></td><td>boolean</td><td>When <code>true</code>, the knee angle is \r      controlled by the <code>leftFootPoleVector</code> property value. Otherwise the knee direction comes from the \r      underlying animation.</td></tr>\r    <tr><td><code>leftFootPoleVector</code></td><td>{@link Vec3}</td><td>The direction the knee should face in rig \r      coordinates.</td></tr>\r    <tr><td><code>rightFootIKPositionVar</code></td><td>string</td><td>The name of the source for the desired position  \r      of the <code>RightFoot</code> joint. If not set, the foot rotation of the underlying animation will be used.</td></tr>\r    <tr><td><code>rightFootIKRotationVar</code></td><td>string</td><td>The name of the source for the desired rotation\r      of the <code>RightFoot</code> joint. If not set, the foot rotation of the underlying animation will be used.</td></tr>\r    <tr><td><code>rightFootPoleVectorEnabled</code></td><td>boolean</td><td>When <code>true</code>, the knee angle is \r      controlled by the <code>rightFootPoleVector</code> property value. Otherwise the knee direction comes from the \r      underlying animation.</td></tr>\r    <tr><td><code>rightFootPoleVector</code></td><td>{@link Vec3}</td><td>The direction the knee should face in rig \r      coordinates.</td></tr>\r\r    <tr><td><code>isTalking</code></td><td>boolean</td><td><code>true</code> if the avatar is talking.</td></tr>\r    <tr><td><code>notIsTalking</code></td><td>boolean</td><td><code>true</code> if the avatar is not talking.</td></tr>\r\r    <tr><td><code>solutionSource</code></td><td>{@link MyAvatar.AnimIKSolutionSource|AnimIKSolutionSource}</td>\r      <td>Determines the initial conditions of the IK solver.</td></tr>\r    <tr><td><code>defaultPoseOverlayAlpha</code></td><td>number</td><td>Controls the blend between the main animation state \r      machine and the default pose. Mostly used during full body tracking so that walking &amp; jumping animations do not \r      affect the IK of the figure.</td></tr>\r    <tr><td><code>defaultPoseOverlayBoneSet</code></td><td>{@link MyAvatar.AnimOverlayBoneSet|AnimOverlayBoneSet}</td>\r      <td>Specifies which bones will be replace by the source overlay.</td></tr>\r    <tr><td><code>hipsType</code></td><td>{@link MyAvatar.IKTargetType|IKTargetType}</td><td>The type of IK used for the \r      hips.</td></tr>\r    <tr><td><code>hipsPosition</code></td><td>{@link Vec3}</td><td>The desired position of <code>Hips</code> joint in rig \r      coordinates.</td></tr>\r    <tr><td><code>hipsRotation</code></td><td>{@link Quat}</td><td>the desired orientation of the <code>Hips</code> joint in \r      rig coordinates.</td></tr>\r    <tr><td><code>spine2Type</code></td><td>{@link MyAvatar.IKTargetType|IKTargetType}</td><td>The type of IK used for the \r      <code>Spine2</code> joint.</td></tr>\r    <tr><td><code>spine2Position</code></td><td>{@link Vec3}</td><td>The desired position of the <code>Spine2</code> joint \r      in rig coordinates.</td></tr>\r    <tr><td><code>spine2Rotation</code></td><td>{@link Quat}</td><td>The desired orientation of the <code>Spine2</code> \r      joint in rig coordinates.</td></tr>\r\r    <tr><td><code>leftFootIKAlpha</code></td><td>number</td><td>Blends between full IK for the leg and the underlying\r      animation.</td></tr>\r    <tr><td><code>rightFootIKAlpha</code></td><td>number</td><td>Blends between full IK for the leg and the underlying\r      animation.</td></tr>\r    <tr><td><code>hipsWeight</code></td><td>number</td><td>How strongly the hips target blends with the IK solution for \r      other IK chains.</td></tr>\r    <tr><td><code>leftHandWeight</code></td><td>number</td><td>How strongly the left hand blends with IK solution of other \r       IK chains.</td></tr>\r    <tr><td><code>rightHandWeight</code></td><td>number</td><td>How strongly the right hand blends with IK solution of other\r      IK chains.</td></tr>\r    <tr><td><code>spine2Weight</code></td><td>number</td><td>How strongly the spine2 chain blends with the rest of the IK \r      solution.</td></tr>\r\r    <tr><td><code>leftHandOverlayAlpha</code></td><td>number</td><td>Used to blend in the animated hand gesture poses, such \r      as point and thumbs up.</td></tr>\r    <tr><td><code>leftHandGraspAlpha</code></td><td>number</td><td>Used to blend between an open hand and a closed hand.  \r      Usually changed as you squeeze the trigger of the hand controller.</td></tr>\r    <tr><td><code>rightHandOverlayAlpha</code></td><td>number</td><td>Used to blend in the animated hand gesture poses, \r      such as point and thumbs up.</td></tr>\r    <tr><td><code>rightHandGraspAlpha</code></td><td>number</td><td>Used to blend between an open hand and a closed hand.  \r      Usually changed as you squeeze the trigger of the hand controller.</td></tr>\r    <tr><td><code>isLeftIndexPoint</code></td><td>boolean</td><td><code>true</code> if the left hand should be\r      pointing.</td></tr>\r    <tr><td><code>isLeftThumbRaise</code></td><td>boolean</td><td><code>true</code> if the left hand should be \r      thumbs-up.</td></tr>\r    <tr><td><code>isLeftIndexPointAndThumbRaise</code></td><td>boolean</td><td><code>true</code> if the left hand should be \r      pointing and thumbs-up.</td></tr>\r    <tr><td><code>isLeftHandGrasp</code></td><td>boolean</td><td><code>true</code> if the left hand should be at rest, \r      grasping the controller.</td></tr>\r    <tr><td><code>isRightIndexPoint</code></td><td>boolean</td><td><code>true</code> if the right hand should be\r      pointing.</td></tr>\r    <tr><td><code>isRightThumbRaise</code></td><td>boolean</td><td><code>true</code> if the right hand should be \r      thumbs-up.</td></tr>\r    <tr><td><code>isRightIndexPointAndThumbRaise</code></td><td>boolean</td><td><code>true</code> if the right hand should \r      be pointing and thumbs-up.</td></tr>\r    <tr><td><code>isRightHandGrasp</code></td><td>boolean</td><td><code>true</code> if the right hand should be at rest, \r      grasping the controller.</td></tr>\r\r  </tbody>\r</table>\r<p>Note: Rig coordinates are <code>+z</code> forward and <code>+y</code> up.</p>",
        "kind": "typedef",
        "name": "AnimStateDictionary",
        "type": {
            "names": [
                "object"
            ]
        },
        "memberof": "MyAvatar",
        "longname": "MyAvatar.AnimStateDictionary",
        "scope": "static"
    },
    {
        "kind": "class",
        "name": "AudioStreamStats",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "lossRate"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "lossCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "lossRateWindow"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "lossCountWindow"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "framesDesired"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "framesAvailable"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "framesAvailableAvg"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "unplayedMsMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "starveCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "lastStarveDurationCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "dropCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "overflowCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "timegapMsMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "timegapMsAvg"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "timegapMsMaxWindow"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "timegapMsAvgWindow"
            }
        ],
        "memberof": "AudioStats",
        "longname": "AudioStats.AudioStreamStats",
        "scope": "static",
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>"
    },
    {
        "kind": "signal",
        "name": "lossRateChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "lossRate"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats.AudioStreamStats",
        "longname": "AudioStats.AudioStreamStats.lossRateChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "lossCountChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "lossCount"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats.AudioStreamStats",
        "longname": "AudioStats.AudioStreamStats.lossCountChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "lossRateWindowChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "lossRateWindow"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats.AudioStreamStats",
        "longname": "AudioStats.AudioStreamStats.lossRateWindowChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "lossCountWindowChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "lossCountWindow"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats.AudioStreamStats",
        "longname": "AudioStats.AudioStreamStats.lossCountWindowChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "framesDesiredChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "framesDesired"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats.AudioStreamStats",
        "longname": "AudioStats.AudioStreamStats.framesDesiredChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "framesAvailableChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "framesAvailable"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats.AudioStreamStats",
        "longname": "AudioStats.AudioStreamStats.framesAvailableChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "framesAvailableAvgChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "framesAvailableAvg"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats.AudioStreamStats",
        "longname": "AudioStats.AudioStreamStats.framesAvailableAvgChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "unplayedMsMaxChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "unplayedMsMax"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats.AudioStreamStats",
        "longname": "AudioStats.AudioStreamStats.unplayedMsMaxChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "starveCountChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "starveCount"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats.AudioStreamStats",
        "longname": "AudioStats.AudioStreamStats.starveCountChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "lastStarveDurationCountChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "lastStarveDurationCount"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats.AudioStreamStats",
        "longname": "AudioStats.AudioStreamStats.lastStarveDurationCountChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "dropCountChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "dropCount"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats.AudioStreamStats",
        "longname": "AudioStats.AudioStreamStats.dropCountChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "overflowCountChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "overflowCount"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats.AudioStreamStats",
        "longname": "AudioStats.AudioStreamStats.overflowCountChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "timegapMsMaxChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "timegapMsMax"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats.AudioStreamStats",
        "longname": "AudioStats.AudioStreamStats.timegapMsMaxChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "timegapMsAvgChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "timegapMsAvg"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats.AudioStreamStats",
        "longname": "AudioStats.AudioStreamStats.timegapMsAvgChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "timegapMsMaxWindowChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "timegapMsMaxWindow"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats.AudioStreamStats",
        "longname": "AudioStats.AudioStreamStats.timegapMsMaxWindowChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "timegapMsAvgWindowChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "timegapMsAvgWindow"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats.AudioStreamStats",
        "longname": "AudioStats.AudioStreamStats.timegapMsAvgWindowChanged",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>Audio stats from the client.",
        "kind": "namespace",
        "name": "AudioStats",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "pingMs"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "inputReadMsMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "inputUnplayedMsMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "outputUnplayedMsMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "sentTimegapMsMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "sentTimegapMsAvg"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "sentTimegapMsMaxWindow"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "sentTimegapMsAvgWindow"
            },
            {
                "type": {
                    "names": [
                        "AudioStats.AudioStreamStats"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "clientStream"
            },
            {
                "type": {
                    "names": [
                        "AudioStats.AudioStreamStats"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "mixerStream"
            }
        ],
        "longname": "AudioStats",
        "scope": "global"
    },
    {
        "kind": "signal",
        "name": "pingMsChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "pingMs"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats",
        "longname": "AudioStats.pingMsChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "inputReadMsMaxChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "inputReadMsMax"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats",
        "longname": "AudioStats.inputReadMsMaxChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "inputUnplayedMsMaxChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "inputUnplayedMsMax"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats",
        "longname": "AudioStats.inputUnplayedMsMaxChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "outputUnplayedMsMaxChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "outputUnplayedMsMax"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats",
        "longname": "AudioStats.outputUnplayedMsMaxChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "sentTimegapMsMaxChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "sentTimegapMsMax"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats",
        "longname": "AudioStats.sentTimegapMsMaxChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "sentTimegapMsAvgChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "sentTimegapMsAvg"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats",
        "longname": "AudioStats.sentTimegapMsAvgChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "sentTimegapMsMaxWindowChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "sentTimegapMsMaxWindow"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats",
        "longname": "AudioStats.sentTimegapMsMaxWindowChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "sentTimegapMsAvgWindowChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "sentTimegapMsAvgWindow"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats",
        "longname": "AudioStats.sentTimegapMsAvgWindowChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "mixerStreamChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats",
        "longname": "AudioStats.mixerStreamChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "clientStreamChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats",
        "longname": "AudioStats.clientStreamChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "injectorStreamsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats",
        "longname": "AudioStats.injectorStreamsChanged",
        "scope": "static"
    },
    {
        "description": "Reverberation options that can be used to initialize an {@link AudioEffectOptions} object when created.",
        "kind": "typedef",
        "name": "ReverbOptions",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 10000,
                "description": "The corner frequency (Hz) of the low-pass filter at reverb input.",
                "name": "bandwidth"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 20,
                "description": "The delay (milliseconds) between dry signal and the onset of early reflections.",
                "name": "preDelay"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The delay (milliseconds) between early reflections and the onset of reverb tail.",
                "name": "lateDelay"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 2,
                "description": "The time (seconds) for the reverb tail to decay by 60dB, also known as RT60.",
                "name": "reverbTime"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 100,
                "description": "Adjusts the buildup of echo density in the early reflections, normally 100%.",
                "name": "earlyDiffusion"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 100,
                "description": "Adjusts the buildup of echo density in the reverb tail, normally 100%.",
                "name": "lateDiffusion"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 50,
                "description": "The apparent room size, from small (0%) to large (100%).",
                "name": "roomSize"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 100,
                "description": "Adjusts the echo density in the reverb tail, normally 100%.",
                "name": "density"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1.5,
                "description": "Adjusts the bass-frequency reverb time, as multiple of reverbTime.",
                "name": "bassMult"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 250,
                "description": "The crossover frequency (Hz) for the onset of bassMult.",
                "name": "bassFreq"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": -6,
                "description": "Reduces the high-frequency reverb time, as attenuation (dB).",
                "name": "highGain"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 3000,
                "description": "The crossover frequency (Hz) for the onset of highGain.",
                "name": "highFreq"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 2.3,
                "description": "The rate of modulation (Hz) of the LFO-modulated delay lines.",
                "name": "modRate"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 50,
                "description": "The depth of modulation (percent) of the LFO-modulated delay lines.",
                "name": "modDepth"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "Adjusts the relative level (dB) of the early reflections.",
                "name": "earlyGain"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "Adjusts the relative level (dB) of the reverb tail.",
                "name": "lateGain"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 20,
                "description": "The apparent distance of the source (percent) in the early reflections.",
                "name": "earlyMixLeft"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 20,
                "description": "The apparent distance of the source (percent) in the early reflections.",
                "name": "earlyMixRight"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 90,
                "description": "The apparent distance of the source (percent) in the reverb tail.",
                "name": "lateMixLeft"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 90,
                "description": "The apparent distance of the source (percent) in the reverb tail.",
                "name": "lateMixRight"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 50,
                "description": "Adjusts the wet/dry ratio, from completely dry (0%) to completely wet (100%).",
                "name": "wetDryMix"
            }
        ],
        "memberof": "AudioEffectOptions",
        "longname": "AudioEffectOptions.ReverbOptions",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>Audio effect options used by the {@link Audio} API.\r\r<p>Create using <code>new AudioEffectOptions(reverbOptions)</code>.</p>",
        "kind": "class",
        "name": "AudioEffectOptions",
        "params": [
            {
                "type": {
                    "names": [
                        "AudioEffectOptions.ReverbOptions"
                    ]
                },
                "optional": true,
                "defaultvalue": null,
                "description": "Reverberation options.",
                "name": "reverbOptions"
            }
        ],
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 10000,
                "description": "The corner frequency (Hz) of the low-pass filter at reverb input.",
                "name": "bandwidth"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 20,
                "description": "The delay (milliseconds) between dry signal and the onset of early reflections.",
                "name": "preDelay"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The delay (milliseconds) between early reflections and the onset of reverb tail.",
                "name": "lateDelay"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 2,
                "description": "The time (seconds) for the reverb tail to decay by 60dB, also known as RT60.",
                "name": "reverbTime"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 100,
                "description": "Adjusts the buildup of echo density in the early reflections, normally 100%.",
                "name": "earlyDiffusion"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 100,
                "description": "Adjusts the buildup of echo density in the reverb tail, normally 100%.",
                "name": "lateDiffusion"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 50,
                "description": "The apparent room size, from small (0%) to large (100%).",
                "name": "roomSize"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 100,
                "description": "Adjusts the echo density in the reverb tail, normally 100%.",
                "name": "density"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1.5,
                "description": "Adjusts the bass-frequency reverb time, as multiple of reverbTime.",
                "name": "bassMult"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 250,
                "description": "The crossover frequency (Hz) for the onset of bassMult.",
                "name": "bassFreq"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": -6,
                "description": "Reduces the high-frequency reverb time, as attenuation (dB).",
                "name": "highGain"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 3000,
                "description": "The crossover frequency (Hz) for the onset of highGain.",
                "name": "highFreq"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 2.3,
                "description": "The rate of modulation (Hz) of the LFO-modulated delay lines.",
                "name": "modRate"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 50,
                "description": "The depth of modulation (percent) of the LFO-modulated delay lines.",
                "name": "modDepth"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "Adjusts the relative level (dB) of the early reflections.",
                "name": "earlyGain"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "Adjusts the relative level (dB) of the reverb tail.",
                "name": "lateGain"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 20,
                "description": "The apparent distance of the source (percent) in the early reflections.",
                "name": "earlyMixLeft"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 20,
                "description": "The apparent distance of the source (percent) in the early reflections.",
                "name": "earlyMixRight"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 90,
                "description": "The apparent distance of the source (percent) in the reverb tail.",
                "name": "lateMixLeft"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 90,
                "description": "The apparent distance of the source (percent) in the reverb tail.",
                "name": "lateMixRight"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 50,
                "description": "Adjusts the wet/dry ratio, from completely dry (0%) to completely wet (100%).",
                "name": "wetDryMix"
            }
        ],
        "longname": "AudioEffectOptions",
        "scope": "global"
    },
    {
        "description": "Configures where and how an audio injector plays its audio.",
        "kind": "typedef",
        "name": "AudioInjectorOptions",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "Vec3.ZERO",
                "description": "The position in the domain to play the sound.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "defaultvalue": "Quat.IDENTITY",
                "description": "The orientation in the domain to play the sound in.",
                "name": "orientation"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "1.0",
                "description": "Playback volume, between <code>0.0</code> and <code>1.0</code>.",
                "name": "volume"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "1.0",
                "description": "Alter the pitch of the sound, within +/- 2 octaves. The value is the relative sample rate to \r    resample the sound at, range <code>0.0625</code> &ndash; <code>16.0</code>.<br />\r    A value of <code>0.0625</code> lowers the pitch by 2 octaves.<br />\r    A value of <code>1.0</code> means there is no change in pitch.<br />\r    A value of <code>16.0</code> raises the pitch by 2 octaves.",
                "name": "pitch"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, the sound is played repeatedly until playback is stopped.",
                "name": "loop"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "Starts playback from a specified time (seconds) within the sound file, &ge; \r    <code>0</code>.",
                "name": "secondOffset"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, the sound is played back locally on the client rather than to\r    others via the audio mixer.",
                "name": "localOnly"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<p class=\"important\">Deprecated: This property is deprecated and will be\r    removed.</p>",
                "name": "ignorePenumbra"
            }
        ],
        "memberof": "AudioInjector",
        "longname": "AudioInjector.AudioInjectorOptions",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>An audio resource, created by {@link SoundCache.getSound}, to be played back using {@link Audio.playSound}.\r<p>Supported formats:</p>\r<ul>\r  <li>WAV: 16-bit uncompressed at any sample rate, with 1 (mono), 2 (stereo), or 4 (ambisonic) channels.</li>\r  <li>MP3: Mono or stereo, at any sample rate.</li>\r  <li>RAW: 48khz 16-bit mono or stereo. File name must include <code>\".stereo\"</code> to be interpreted as stereo.</li>\r</ul>",
        "kind": "class",
        "name": "SoundObject",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the sound has been downloaded and is ready to be played, otherwise \r    <code>false</code>. <em>Read-only.</em>",
                "name": "downloaded"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The duration of the sound, in seconds. <em>Read-only.</em>",
                "name": "duration"
            }
        ],
        "longname": "SoundObject",
        "scope": "global"
    },
    {
        "description": "Triggered when the sound has been downloaded and is ready to be played.",
        "kind": "signal",
        "name": "ready",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "SoundObject",
        "longname": "SoundObject.ready",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>The <code>SoundCache</code> API manages sound cache resources.",
        "kind": "namespace",
        "name": "SoundCache",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Total number of total resources. <em>Read-only.</em>",
                "name": "numTotal"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Total number of cached resource. <em>Read-only.</em>",
                "name": "numCached"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Size in bytes of all resources. <em>Read-only.</em>",
                "name": "sizeTotal"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Size in bytes of all cached resources. <em>Read-only.</em>",
                "name": "sizeCached"
            }
        ],
        "longname": "SoundCache",
        "scope": "global"
    },
    {
        "description": "Loads the content of an audio file into a {@link SoundObject}, ready for playback by {@link Audio.playSound}.",
        "kind": "function",
        "name": "getSound",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the audio file to load &mdash; Web, ATP, or file. See {@link SoundObject} for supported \r    formats.",
                "name": "url"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "SoundObject"
                    ]
                },
                "description": "The sound ready for playback."
            }
        ],
        "memberof": "SoundCache",
        "longname": "SoundCache.getSound",
        "scope": "static"
    },
    {
        "description": "<p>The avatar mixer data comprises different types of data, with the data rates of each being tracked in kbps.</p>\r\r<table>\r  <thead>\r    <tr><th>Rate Name</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"globalPosition\"</code></td><td>Incoming global position.</td></tr>\r    <tr><td><code>\"localPosition\"</code></td><td>Incoming local position.</td></tr>\r    <tr><td><code>\"handControllers\"</code></td><td>Incoming hand controllers.</td></tr>\r    <tr><td><code>\"avatarBoundingBox\"</code></td><td>Incoming avatar bounding box.</td></tr>\r    <tr><td><code>\"avatarOrientation\"</code></td><td>Incoming avatar orientation.</td></tr>\r    <tr><td><code>\"avatarScale\"</code></td><td>Incoming avatar scale.</td></tr>\r    <tr><td><code>\"lookAtPosition\"</code></td><td>Incoming look-at position.</td></tr>\r    <tr><td><code>\"audioLoudness\"</code></td><td>Incoming audio loudness.</td></tr>\r    <tr><td><code>\"sensorToWorkMatrix\"</code></td><td>Incoming sensor-to-world matrix.</td></tr>\r    <tr><td><code>\"additionalFlags\"</code></td><td>Incoming additional avatar flags.</td></tr>\r    <tr><td><code>\"parentInfo\"</code></td><td>Incoming parent information.</td></tr>\r    <tr><td><code>\"faceTracker\"</code></td><td>Incoming face tracker data.</td></tr>\r    <tr><td><code>\"jointData\"</code></td><td>Incoming joint data.</td></tr>\r    <tr><td><code>\"jointDefaultPoseFlagsRate\"</code></td><td>Incoming joint default pose flags.</td></tr>\r    <tr><td><code>\"farGrabJointRate\"</code></td><td>Incoming far grab joint.</td></tr>\r    <tr><td><code>\"globalPositionOutbound\"</code></td><td>Outgoing global position.</td></tr>\r    <tr><td><code>\"localPositionOutbound\"</code></td><td>Outgoing local position.</td></tr>\r    <tr><td><code>\"avatarBoundingBoxOutbound\"</code></td><td>Outgoing avatar bounding box.</td></tr>\r    <tr><td><code>\"avatarOrientationOutbound\"</code></td><td>Outgoing avatar orientation.</td></tr>\r    <tr><td><code>\"avatarScaleOutbound\"</code></td><td>Outgoing avatar scale.</td></tr>\r    <tr><td><code>\"lookAtPositionOutbound\"</code></td><td>Outgoing look-at position.</td></tr>\r    <tr><td><code>\"audioLoudnessOutbound\"</code></td><td>Outgoing audio loudness.</td></tr>\r    <tr><td><code>\"sensorToWorkMatrixOutbound\"</code></td><td>Outgoing sensor-to-world matrix.</td></tr>\r    <tr><td><code>\"additionalFlagsOutbound\"</code></td><td>Outgoing additional avatar flags.</td></tr>\r    <tr><td><code>\"parentInfoOutbound\"</code></td><td>Outgoing parent information.</td></tr>\r    <tr><td><code>\"faceTrackerOutbound\"</code></td><td>Outgoing face tracker data.</td></tr>\r    <tr><td><code>\"jointDataOutbound\"</code></td><td>Outgoing joint data.</td></tr>\r    <tr><td><code>\"jointDefaultPoseFlagsOutbound\"</code></td><td>Outgoing joint default pose flags.</td></tr>\r    <tr><td><code>\"\"</code></td><td>When no rate name is specified, the total incoming data rate is provided.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "AvatarDataRate",
        "type": {
            "names": [
                "string"
            ]
        },
        "longname": "AvatarDataRate",
        "scope": "global"
    },
    {
        "description": "<p>The avatar mixer data comprises different types of data updated at different rates, in Hz.</p>\r\r<table>\r  <thead>\r    <tr><th>Rate Name</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"globalPosition\"</code></td><td>Global position.</td></tr>\r    <tr><td><code>\"localPosition\"</code></td><td>Local position.</td></tr>\r    <tr><td><code>\"handControllers\"</code></td><td>Hand controller positions and orientations.</td></tr>\r    <tr><td><code>\"avatarBoundingBox\"</code></td><td>Avatar bounding box.</td></tr>\r    <tr><td><code>\"avatarOrientation\"</code></td><td>Avatar orientation.</td></tr>\r    <tr><td><code>\"avatarScale\"</code></td><td>Avatar scale.</td></tr>\r    <tr><td><code>\"lookAtPosition\"</code></td><td>Look-at position.</td></tr>\r    <tr><td><code>\"audioLoudness\"</code></td><td>Audio loudness.</td></tr>\r    <tr><td><code>\"sensorToWorkMatrix\"</code></td><td>Sensor-to-world matrix.</td></tr>\r    <tr><td><code>\"additionalFlags\"</code></td><td>Additional avatar flags.</td></tr>\r    <tr><td><code>\"parentInfo\"</code></td><td>Parent information.</td></tr>\r    <tr><td><code>\"faceTracker\"</code></td><td>Face tracker data.</td></tr>\r    <tr><td><code>\"jointData\"</code></td><td>Joint data.</td></tr>\r    <tr><td><code>\"farGrabJointData\"</code></td><td>Far grab joint data.</td></tr>\r    <tr><td><code>\"\"</code></td><td>When no rate name is specified, the overall update rate is provided.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "AvatarUpdateRate",
        "type": {
            "names": [
                "string"
            ]
        },
        "longname": "AvatarUpdateRate",
        "scope": "global"
    },
    {
        "description": "Information on an attachment worn by the avatar.",
        "kind": "typedef",
        "name": "AttachmentData",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the glTF, FBX, or OBJ model file. glTF models may be in JSON or binary format \r    (\".gltf\" or \".glb\" URLs respectively).",
                "name": "modelUrl"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the joint that the attachment is parented to.",
                "name": "jointName"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The offset from the joint that the attachment is positioned at.",
                "name": "translation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The rotation applied to the model relative to the joint orientation.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The scale applied to the attachment model.",
                "name": "scale"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If <code>true</code> and the model has a skeleton, the bones of the attached model's skeleton are \r  rotated to fit the avatar's current pose. If <code>true</code>, the <code>translation</code>, <code>rotation</code>, and \r  <code>scale</code> parameters are ignored.",
                "name": "soft"
            }
        ],
        "longname": "AttachmentData",
        "scope": "global"
    },
    {
        "description": "Information about a ray-to-avatar intersection.",
        "kind": "typedef",
        "name": "RayToAvatarIntersectionResult",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if an avatar is intersected, <code>false</code> if it isn't.",
                "name": "intersects"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The ID of the avatar that is intersected.",
                "name": "avatarID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The distance from the ray origin to the intersection.",
                "name": "distance"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the box face that is intersected; <code>\"UNKNOWN_FACE\"</code> if mesh was picked \r    against.",
                "name": "face"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The ray intersection point in world coordinates.",
                "name": "intersection"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The surface normal at the intersection point.",
                "name": "surfaceNormal"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint intersected.",
                "name": "jointIndex"
            },
            {
                "type": {
                    "names": [
                        "SubmeshIntersection"
                    ]
                },
                "description": "Extra information on the mesh intersected if mesh was picked against, \r    <code>{}</code> if it wasn't.",
                "name": "extraInfo"
            }
        ],
        "longname": "RayToAvatarIntersectionResult",
        "scope": "global"
    },
    {
        "description": "An object with the UUIDs of avatar entities as keys and avatar entity properties objects as values.",
        "kind": "typedef",
        "name": "AvatarEntityMap",
        "type": {
            "names": [
                "Object.<Uuid, Entities.EntityProperties>"
            ]
        },
        "longname": "AvatarEntityMap",
        "scope": "global"
    },
    {
        "description": "<p>The pointing state of the hands is specified by the following values:</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th>\r  </thead>\r  <tbody>\r    <tr><td><code>0</code></td><td>No hand is pointing.</td></tr>\r    <tr><td><code>1</code></td><td>The left hand is pointing.</td></tr>\r    <tr><td><code>2</code></td><td>The right hand is pointing.</td></tr>\r    <tr><td><code>4</code></td><td>It is the index finger that is pointing.</td></tr>\r  </tbody>\r</table>\r<p>The values for the hand states are added together to give the <code>HandState</code> value. For example, if the left\rhand's finger is pointing, the value is <code>1 + 4 == 5</code>.",
        "kind": "typedef",
        "name": "HandState",
        "type": {
            "names": [
                "number"
            ]
        },
        "longname": "HandState",
        "scope": "global"
    },
    {
        "description": "Gets the minimum scale allowed for this avatar in the current domain.\rThis value can change as the user changes avatars or when changing domains.",
        "kind": "function",
        "name": "getDomainMinScale",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The minimum scale allowed for this avatar in the current domain."
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getDomainMinScale",
        "scope": "static"
    },
    {
        "description": "Gets the maximum scale allowed for this avatar in the current domain.\rThis value can change as the user changes avatars or when changing domains.",
        "kind": "function",
        "name": "getDomainMaxScale",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The maximum scale allowed for this avatar in the current domain."
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getDomainMaxScale",
        "scope": "static"
    },
    {
        "description": "Gets the current eye height of the avatar.\rThis height is only an estimate and might be incorrect for avatars that are missing standard joints.",
        "kind": "function",
        "name": "getEyeHeight",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The eye height of the avatar."
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getEyeHeight",
        "scope": "static"
    },
    {
        "description": "Gets the current height of the avatar.\rThis height is only an estimate and might be incorrect for avatars that are missing standard joints.",
        "kind": "function",
        "name": "getHeight",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The height of the avatar."
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getHeight",
        "scope": "static"
    },
    {
        "description": "Sets the pointing state of the hands to control where the laser emanates from. If the right index finger is pointing, the \rlaser emanates from the tip of that finger, otherwise it emanates from the palm.",
        "kind": "function",
        "name": "setHandState",
        "params": [
            {
                "type": {
                    "names": [
                        "HandState"
                    ]
                },
                "description": "The pointing state of the hand.",
                "name": "state"
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.setHandState",
        "scope": "static"
    },
    {
        "description": "Gets the pointing state of the hands to control where the laser emanates from. If the right index finger is pointing, the\rlaser emanates from the tip of that finger, otherwise it emanates from the palm.",
        "kind": "function",
        "name": "getHandState",
        "returns": [
            {
                "type": {
                    "names": [
                        "HandState"
                    ]
                },
                "description": "The pointing state of the hand."
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getHandState",
        "scope": "static"
    },
    {
        "description": "Sets joint translations and rotations from raw joint data.",
        "kind": "function",
        "name": "setRawJointData",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<JointData>"
                    ]
                },
                "description": "The raw joint data.",
                "name": "data"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Avatar",
        "longname": "Avatar.setRawJointData",
        "scope": "static"
    },
    {
        "description": "Sets a specific joint's rotation and position relative to its parent, in model coordinates.\r<p><strong>Warning:</strong> These coordinates are not necessarily in meters.</p>\r<p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse\rkinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints, \rthe avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate \rjoints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set \rthe rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>",
        "kind": "function",
        "name": "setJointData",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint.",
                "name": "index"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation of the joint relative to its parent.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The translation of the joint relative to its parent, in model coordinates.",
                "name": "translation"
            }
        ],
        "examples": [
            "<caption>Set your avatar to it's default T-pose for a while.<br />\r<img alt=\"Avatar in T-pose\" src=\"https://docs.highfidelity.com/images/t-pose.png\" /></caption>\r// Set all joint translations and rotations to defaults.\rvar i, length, rotation, translation;\rfor (i = 0, length = MyAvatar.getJointNames().length; i < length; i++) {\r    rotation = MyAvatar.getDefaultJointRotation(i);\r    translation = MyAvatar.getDefaultJointTranslation(i);\r    MyAvatar.setJointData(i, rotation, translation);\r}\r\r// Restore your avatar's motion after 5s.\rScript.setTimeout(function () {\r    MyAvatar.clearJointsData();\r}, 5000);\r\r// Note: If using from the Avatar API, replace all occurrences of \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "Avatar",
        "longname": "Avatar.setJointData",
        "scope": "static"
    },
    {
        "description": "Sets a specific joint's rotation relative to its parent.\r<p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse \rkinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints, \rthe avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate \rjoints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set \rthe rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>",
        "kind": "function",
        "name": "setJointRotation",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint.",
                "name": "index"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation of the joint relative to its parent.",
                "name": "rotation"
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.setJointRotation",
        "scope": "static"
    },
    {
        "description": "Sets a specific joint's translation relative to its parent, in model coordinates.\r<p><strong>Warning:</strong> These coordinates are not necessarily in meters.</p>\r<p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse\rkinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints, \rthe avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate \rjoints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set \rthe rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>",
        "kind": "function",
        "name": "setJointTranslation",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint.",
                "name": "index"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The translation of the joint relative to its parent, in model coordinates.",
                "name": "translation"
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.setJointTranslation",
        "scope": "static"
    },
    {
        "description": "Clears joint translations and rotations set by script for a specific joint. This restores all motion from the default \ranimation system including inverse kinematics for that joint.\r<p>Note: This is slightly faster than the function variation that specifies the joint name.</p>",
        "kind": "function",
        "name": "clearJointData",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint.",
                "name": "index"
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.clearJointData",
        "scope": "static"
    },
    {
        "description": "Checks that the data for a joint are valid.",
        "kind": "function",
        "name": "isJointDataValid",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint.",
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the joint data are valid, <code>false</code> if not."
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.isJointDataValid",
        "scope": "static"
    },
    {
        "description": "Gets the rotation of a joint relative to its parent. For information on the joint hierarchy used, see \r<a href=\"https://docs.highfidelity.com/create/avatars/avatar-standards\">Avatar Standards</a>.",
        "kind": "function",
        "name": "getJointRotation",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint.",
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation of the joint relative to its parent."
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getJointRotation",
        "scope": "static"
    },
    {
        "description": "Gets the translation of a joint relative to its parent, in model coordinates.\r<p><strong>Warning:</strong> These coordinates are not necessarily in meters.</p>\r<p>For information on the joint hierarchy used, see \r<a href=\"https://docs.highfidelity.com/create/avatars/avatar-standards\">Avatar Standards</a>.</p>",
        "kind": "function",
        "name": "getJointTranslation",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint.",
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The translation of the joint relative to its parent, in model coordinates."
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getJointTranslation",
        "scope": "static"
    },
    {
        "description": "Sets a specific joint's rotation and position relative to its parent, in model coordinates.\r<p><strong>Warning:</strong> These coordinates are not necessarily in meters.</p>\r<p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse\rkinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints, \rthe avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate \rjoints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set \rthe rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>",
        "kind": "function",
        "name": "setJointData",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the joint.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation of the joint relative to its parent.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The translation of the joint relative to its parent, in model coordinates.",
                "name": "translation"
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.setJointData",
        "scope": "static"
    },
    {
        "description": "Sets a specific joint's rotation relative to its parent.\r<p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse \rkinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints, \rthe avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate \rjoints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set \rthe rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>",
        "kind": "function",
        "name": "setJointRotation",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the joint.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation of the joint relative to its parent.",
                "name": "rotation"
            }
        ],
        "examples": [
            "<caption>Set your avatar to its default T-pose then rotate its right arm.<br />\r<img alt=\"Avatar in T-pose with arm rotated\" src=\"https://docs.highfidelity.com/images/armpose.png\" /></caption>\r// Set all joint translations and rotations to defaults.\rvar i, length, rotation, translation;\rfor (i = 0, length = MyAvatar.getJointNames().length; i < length; i++) {\r    rotation = MyAvatar.getDefaultJointRotation(i);\r    translation = MyAvatar.getDefaultJointTranslation(i);\r    MyAvatar.setJointData(i, rotation, translation);\r}\r\r// Rotate the right arm.\rvar newArmRotation = { x: 0.47, y: 0.22, z: -0.02, w: 0.87 };\rMyAvatar.setJointRotation(\"RightArm\", newArmRotation);\r\r// Restore your avatar's motion after 5s.\rScript.setTimeout(function () {\r    MyAvatar.clearJointsData();\r}, 5000);\r\r// Note: If using from the Avatar API, replace all occurrences of \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "Avatar",
        "longname": "Avatar.setJointRotation",
        "scope": "static"
    },
    {
        "description": "Sets a specific joint's translation relative to its parent, in model coordinates.\r<p><strong>Warning:</strong> These coordinates are not necessarily in meters.</p>\r<p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse\rkinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints, \rthe avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate \rjoints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set \rthe rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>",
        "kind": "function",
        "name": "setJointTranslation",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the joint.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The translation of the joint relative to its parent, in model coordinates.",
                "name": "translation"
            }
        ],
        "examples": [
            "<caption>Stretch your avatar's neck. Depending on the avatar you are using, you will either see a gap between \rthe head and body or you will see the neck stretched.<br />\r<img alt=\"Avatar with neck stretched\" src=\"https://docs.highfidelity.com/images/stretched-neck.png\" /></caption>\r// Stretch your avatar's neck.\rMyAvatar.setJointTranslation(\"Neck\", Vec3.multiply(2, MyAvatar.getJointTranslation(\"Neck\")));\r\r// Restore your avatar's neck after 5s.\rScript.setTimeout(function () {\r    MyAvatar.clearJointData(\"Neck\");\r}, 5000);\r\r// Note: If using from the Avatar API, replace all occurrences of \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "Avatar",
        "longname": "Avatar.setJointTranslation",
        "scope": "static"
    },
    {
        "description": "Clears joint translations and rotations set by script for a specific joint. This restores all motion from the default \ranimation system including inverse kinematics for that joint.\r<p>Note: This is slightly slower than the function variation that specifies the joint index.</p>",
        "kind": "function",
        "name": "clearJointData",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the joint.",
                "name": "name"
            }
        ],
        "examples": [
            "<caption>Offset and restore the position of your avatar's head.</caption>\r// Stretch your avatar's neck.\rMyAvatar.setJointTranslation(\"Neck\", Vec3.multiply(2, MyAvatar.getJointTranslation(\"Neck\")));\r\r// Restore your avatar's neck after 5s.\rScript.setTimeout(function () {\r    MyAvatar.clearJointData(\"Neck\");\r}, 5000);\r\r// Note: If using from the Avatar API, replace all occurrences of \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "Avatar",
        "longname": "Avatar.clearJointData",
        "scope": "static"
    },
    {
        "description": "Checks if the data for a joint are valid.",
        "kind": "function",
        "name": "isJointDataValid",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the joint.",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the joint data are valid, <code>false</code> if not."
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.isJointDataValid",
        "scope": "static"
    },
    {
        "description": "Gets the rotation of a joint relative to its parent. For information on the joint hierarchy used, see \r<a href=\"https://docs.highfidelity.com/create/avatars/avatar-standards\">Avatar Standards</a>.",
        "kind": "function",
        "name": "getJointRotation",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the joint.",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation of the joint relative to its parent."
            }
        ],
        "examples": [
            "<caption>Report the rotation of your avatar's hips joint.</caption>\rprint(JSON.stringify(MyAvatar.getJointRotation(\"Hips\")));\r\r// Note: If using from the Avatar API, replace \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getJointRotation",
        "scope": "static"
    },
    {
        "description": "Gets the translation of a joint relative to its parent, in model coordinates.\r<p><strong>Warning:</strong> These coordinates are not necessarily in meters.</p>\r<p>For information on the joint hierarchy used, see\r<a href=\"https://docs.highfidelity.com/create/avatars/avatar-standards\">Avatar Standards</a>.</p>",
        "kind": "function",
        "name": "getJointTranslation",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The name of the joint.",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The translation of the joint relative to its parent, in model coordinates."
            }
        ],
        "examples": [
            "<caption>Report the translation of your avatar's hips joint.</caption>\rprint(JSON.stringify(MyAvatar.getJointRotation(\"Hips\")));\r\r// Note: If using from the Avatar API, replace \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getJointTranslation",
        "scope": "static"
    },
    {
        "description": "Gets the rotations of all joints in the current avatar. Each joint's rotation is relative to its parent joint.",
        "kind": "function",
        "name": "getJointRotations",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Quat>"
                    ]
                },
                "description": "The rotations of all joints relative to each's parent. The values are in the same order as the array \rreturned by {@link MyAvatar.getJointNames}, or {@link Avatar.getJointNames} if using the <code>Avatar</code> API."
            }
        ],
        "examples": [
            "<caption>Report the rotations of all your avatar's joints.</caption>\rprint(JSON.stringify(MyAvatar.getJointRotations()));\r\r// Note: If using from the Avatar API, replace all \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getJointRotations",
        "scope": "static"
    },
    {
        "description": "Gets the translations of all joints in the current avatar. Each joint's translation is relative to its parent joint, in\rmodel coordinates.\r<p><strong>Warning:</strong> These coordinates are not necessarily in meters.</p>",
        "kind": "function",
        "name": "getJointTranslations",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "description": "The translations of all joints relative to each's parent, in model coordinates. The values are in the \r    same order as the array returned by {@link MyAvatar.getJointNames}, or {@link Avatar.getJointNames} if using the \r    <code>Avatar</code> API."
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getJointTranslations",
        "scope": "static"
    },
    {
        "description": "Sets the rotations of all joints in the current avatar. Each joint's rotation is relative to its parent joint.\r<p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse\rkinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints,\rthe avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate\rjoints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set\rthe rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>",
        "kind": "function",
        "name": "setJointRotations",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<Quat>"
                    ]
                },
                "description": "The rotations for all joints in the avatar. The values are in the same order as the \rarray returned by {@link MyAvatar.getJointNames}, or {@link Avatar.getJointNames} if using the <code>Avatar</code> API.",
                "name": "jointRotations"
            }
        ],
        "examples": [
            "<caption>Set your avatar to its default T-pose then rotate its right arm.<br />\r<img alt=\"Avatar in T-pose\" src=\"https://docs.highfidelity.com/images/armpose.png\" /></caption>\r// Set all joint translations and rotations to defaults.\rvar i, length, rotation, translation;\rfor (i = 0, length = MyAvatar.getJointNames().length; i < length; i++) {\r    rotation = MyAvatar.getDefaultJointRotation(i);\r    translation = MyAvatar.getDefaultJointTranslation(i);\r    MyAvatar.setJointData(i, rotation, translation);\r}\r\r// Get all join rotations.\rvar jointRotations = MyAvatar.getJointRotations(); \r\r// Update the rotation of the right arm in the array.\rjointRotations[MyAvatar.getJointIndex(\"RightArm\")] = { x: 0.47, y: 0.22, z: -0.02, w: 0.87 };\r\r// Update all joint rotations.\rMyAvatar.setJointRotations(jointRotations);\r\r// Restore your avatar's motion after 5s.\rScript.setTimeout(function () {\r    MyAvatar.clearJointsData();\r}, 5000);\r\r// Note: If using from the Avatar API, replace all occurrences of \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "Avatar",
        "longname": "Avatar.setJointRotations",
        "scope": "static"
    },
    {
        "description": "Sets the translations of all joints in the current avatar. Each joint's translation is relative to its parent joint, in \rmodel coordinates.\r<p><strong>Warning:</strong> These coordinates are not necessarily in meters.</p>\r<p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse\rkinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints,\rthe avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate\rjoints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set\rthe rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>",
        "kind": "function",
        "name": "setJointTranslations",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "description": "The translations for all joints in the avatar, in model coordinates. The values are in \r    the same order as the array returned by {@link MyAvatar.getJointNames}, or {@link Avatar.getJointNames} if using the \r    <code>Avatar</code> API.",
                "name": "translations"
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.setJointTranslations",
        "scope": "static"
    },
    {
        "description": "Clears all joint translations and rotations that have been set by script. This restores all motion from the default \ranimation system including inverse kinematics for all joints.",
        "kind": "function",
        "name": "clearJointsData",
        "examples": [
            "<caption>Set your avatar to it's default T-pose for a while.</caption>\r// Set all joint translations and rotations to defaults.\rvar i, length, rotation, translation;\rfor (i = 0, length = MyAvatar.getJointNames().length; i < length; i++) {\r    rotation = MyAvatar.getDefaultJointRotation(i);\r    translation = MyAvatar.getDefaultJointTranslation(i);\r    MyAvatar.setJointData(i, rotation, translation);\r}\r\r// Restore your avatar's motion after 5s.\rScript.setTimeout(function () {\r    MyAvatar.clearJointsData();\r}, 5000);\r\r// Note: If using from the Avatar API, replace all occurrences of \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "Avatar",
        "longname": "Avatar.clearJointsData",
        "scope": "static"
    },
    {
        "description": "Gets the joint index for a named joint. The joint index value is the position of the joint in the array returned by \r{@link MyAvatar.getJointNames}, or {@link Avatar.getJointNames} if using the <code>Avatar</code> API.",
        "kind": "function",
        "name": "getJointIndex",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the joint.",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint if valid, otherwise <code>-1</code>."
            }
        ],
        "examples": [
            "<caption>Report the index of your avatar's left arm joint.</caption>\rprint(JSON.stringify(MyAvatar.getJointIndex(\"LeftArm\")));\r\r// Note: If using from the Avatar API, replace \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getJointIndex",
        "scope": "static"
    },
    {
        "description": "Gets the names of all the joints in the current avatar.",
        "kind": "function",
        "name": "getJointNames",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "The joint names."
            }
        ],
        "examples": [
            "<caption>Report the names of all the joints in your current avatar.</caption>\rprint(JSON.stringify(MyAvatar.getJointNames()));\r\r// Note: If using from the Avatar API, replace \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getJointNames",
        "scope": "static"
    },
    {
        "description": "Sets the value of a blendshape to animate your avatar's face. To enable other users to see the resulting animation of \ryour avatar's face, set {@link Avatar.hasScriptedBlendshapes} to true while using this API and back to false when your\ranimation is complete.",
        "kind": "function",
        "name": "setBlendshape",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the blendshape, per the \r    {@link https://docs.highfidelity.com/create/avatars/avatar-standards.html#blendshapes Avatar Standards}.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "A value between <code>0.0</code> and <code>1.0</code>.",
                "name": "value"
            }
        ],
        "examples": [
            "<caption>Open your avatar's mouth wide.</caption>\rMyAvatar.hasScriptedBlendshapes = true;\rMyAvatar.setBlendshape(\"JawOpen\", 1.0);\r\r// Note: If using from the Avatar API, replace \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "Avatar",
        "longname": "Avatar.setBlendshape",
        "scope": "static"
    },
    {
        "description": "Gets information about the models currently attached to your avatar.",
        "kind": "function",
        "name": "getAttachmentsVariant",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<AttachmentData>"
                    ]
                },
                "description": "Information about all models attached to your avatar."
            }
        ],
        "deprecated": "This function is deprecated and will be removed. Use avatar entities instead.",
        "memberof": "Avatar",
        "longname": "Avatar.getAttachmentsVariant",
        "scope": "static"
    },
    {
        "description": "Sets all models currently attached to your avatar. For example, if you retrieve attachment data using\r{@link MyAvatar.getAttachmentsVariant} or {@link Avatar.getAttachmentsVariant}, make changes to it, and then want to \rupdate your avatar's attachments per the changed data.",
        "kind": "function",
        "name": "setAttachmentsVariant",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<AttachmentData>"
                    ]
                },
                "description": "The attachment data defining the models to have attached to your avatar.",
                "name": "variant"
            }
        ],
        "deprecated": "This function is deprecated and will be removed. Use avatar entities instead.",
        "memberof": "Avatar",
        "longname": "Avatar.setAttachmentsVariant",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "updateAvatarEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The entity ID.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Array.<byte>"
                    ]
                },
                "description": "Entity data.",
                "name": "entityData"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Avatar",
        "longname": "Avatar.updateAvatarEntity",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "clearAvatarEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The entity ID.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Requires removal from tree.",
                "name": "requiresRemovalFromTree"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Avatar",
        "longname": "Avatar.clearAvatarEntity",
        "scope": "static"
    },
    {
        "description": "<p class=\"important\">Deprecated: This method is deprecated and will be removed.</p>\rUse Avatar.hasScriptedBlendshapes property instead.\rEnables blendshapes set using {@link Avatar.setBlendshape} or {@link MyAvatar.setBlendshape} to be transmitted to other \rusers so that they can see the animation of your avatar's face.",
        "kind": "function",
        "name": "setForceFaceTrackerConnected",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to enable blendshape changes to be transmitted to other users, \r    <code>false</code> to disable.",
                "name": "connected"
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.setForceFaceTrackerConnected",
        "scope": "static"
    },
    {
        "description": "Sets the avatar's skeleton model.",
        "kind": "function",
        "name": "setSkeletonModelURL",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The avatar's FST file.",
                "name": "url"
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.setSkeletonModelURL",
        "scope": "static"
    },
    {
        "description": "Gets information about the models currently attached to your avatar.",
        "kind": "function",
        "name": "getAttachmentData",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<AttachmentData>"
                    ]
                },
                "description": "Information about all models attached to your avatar."
            }
        ],
        "deprecated": "This function is deprecated and will be removed. Use avatar entities instead.",
        "examples": [
            "<caption>Report the URLs of all current attachments.</caption>\rvar attachments = MyAvatar.getaAttachmentData();\rfor (var i = 0; i < attachments.length; i++) {\r    print(attachments[i].modelURL);\r}\r\r// Note: If using from the Avatar API, replace \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getAttachmentData",
        "scope": "static"
    },
    {
        "description": "Sets all models currently attached to your avatar. For example, if you retrieve attachment data using\r{@link MyAvatar.getAttachmentData} or {@link Avatar.getAttachmentData}, make changes to it, and then want to update your avatar's attachments per the \rchanged data. You can also remove all attachments by using setting <code>attachmentData</code> to <code>null</code>.",
        "kind": "function",
        "name": "setAttachmentData",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<AttachmentData>"
                    ]
                },
                "description": "The attachment data defining the models to have attached to your avatar. Use\r    <code>null</code> to remove all attachments.",
                "name": "attachmentData"
            }
        ],
        "deprecated": "This function is deprecated and will be removed. Use avatar entities instead.",
        "examples": [
            "<caption>Remove a hat attachment if your avatar is wearing it.</caption>\rvar hatURL = \"https://s3.amazonaws.com/hifi-public/tony/cowboy-hat.fbx\";\rvar attachments = MyAvatar.getAttachmentData();\r\rfor (var i = 0; i < attachments.length; i++) {\r    if (attachments[i].modelURL === hatURL) {\r        attachments.splice(i, 1);\r        MyAvatar.setAttachmentData(attachments);\r        break;\r    }\r }\r\r// Note: If using from the Avatar API, replace all occurrences of \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "Avatar",
        "longname": "Avatar.setAttachmentData",
        "scope": "static"
    },
    {
        "description": "Attaches a model to your avatar. For example, you can give your avatar a hat to wear, a guitar to hold, or a surfboard to\rstand on.",
        "kind": "function",
        "name": "attach",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the glTF, FBX, or OBJ model to attach. glTF models may be in JSON or binary format \r    (\".gltf\" or \".glb\" URLs respectively).",
                "name": "modelURL"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The name of the avatar joint (see {@link MyAvatar.getJointNames} or \r    {@link Avatar.getJointNames}) to attach the model to.",
                "name": "jointName"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "optional": true,
                "defaultvalue": "Vec3.ZERO",
                "description": "The offset to apply to the model relative to the joint position.",
                "name": "translation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "optional": true,
                "defaultvalue": "Quat.IDENTITY",
                "description": "The rotation to apply to the model relative to the joint orientation.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": "1.0",
                "description": "The scale to apply to the model.",
                "name": "scale"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If the model has a skeleton, set this to <code>true</code> so that the bones of the \r    attached model's skeleton are rotated to fit the avatar's current pose. <code>isSoft</code> is used, for example, \r    to have clothing that moves with the avatar.\r    <p>If <code>true</code>, the <code>translation</code>, <code>rotation</code>, and <code>scale</code> parameters are \r    ignored.</p>",
                "name": "isSoft"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If <code>true</code> then more than one copy of any particular model may be \r    attached to the same joint; if <code>false</code> then the same model cannot be attached to the same joint.",
                "name": "allowDuplicates"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "<em>Not used.</em>",
                "name": "useSaved"
            }
        ],
        "deprecated": "This function is deprecated and will be removed. Use avatar entities instead.",
        "examples": [
            "<caption>Attach a cowboy hat to your avatar's head.</caption>\rvar attachment = {\r    modelURL: \"https://s3.amazonaws.com/hifi-public/tony/cowboy-hat.fbx\",\r    jointName: \"Head\",\r    translation: {\"x\": 0, \"y\": 0.25, \"z\": 0},\r    rotation: {\"x\": 0, \"y\": 0, \"z\": 0, \"w\": 1},\r    scale: 0.01,\r    isSoft: false\r};\r\r MyAvatar.attach(attachment.modelURL,\r                 attachment.jointName,\r                 attachment.translation,\r                 attachment.rotation,\r                 attachment.scale,\r                 attachment.isSoft);\r\r// Note: If using from the Avatar API, replace \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "Avatar",
        "longname": "Avatar.attach",
        "scope": "static"
    },
    {
        "description": "Detaches the most recently attached instance of a particular model from either a specific joint or any joint.",
        "kind": "function",
        "name": "detachOne",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the model to detach.",
                "name": "modelURL"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The name of the joint to detach the model from. If <code>\"\"</code>, then the most \r    recently attached model is removed from which ever joint it was attached to.",
                "name": "jointName"
            }
        ],
        "deprecated": "This function is deprecated and will be removed. Use avatar entities instead.",
        "memberof": "Avatar",
        "longname": "Avatar.detachOne",
        "scope": "static"
    },
    {
        "description": "Detaches all instances of a particular model from either a specific joint or all joints.",
        "kind": "function",
        "name": "detachAll",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the model to detach.",
                "name": "modelURL"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The name of the joint to detach the model from. If <code>\"\"</code>, then the model is \r    detached from all joints.",
                "name": "jointName"
            }
        ],
        "deprecated": "This function is deprecated and will be removed. Use avatar entities instead.",
        "memberof": "Avatar",
        "longname": "Avatar.detachAll",
        "scope": "static"
    },
    {
        "description": "Gets the transform from the user's real world to the avatar's size, orientation, and position in the virtual world.",
        "kind": "function",
        "name": "getSensorToWorldMatrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The scale, rotation, and translation transform from the user's real world to the avatar's size, \r    orientation, and position in the virtual world."
            }
        ],
        "examples": [
            "<caption>Report the sensor to world matrix.</caption>\rvar sensorToWorldMatrix = MyAvatar.getSensorToWorldMatrix();\rprint(\"Sensor to woprld matrix: \" + JSON.stringify(sensorToWorldMatrix));\rprint(\"Rotation: \" + JSON.stringify(Mat4.extractRotation(sensorToWorldMatrix)));\rprint(\"Translation: \" + JSON.stringify(Mat4.extractTranslation(sensorToWorldMatrix)));\rprint(\"Scale: \" + JSON.stringify(Mat4.extractScale(sensorToWorldMatrix)));\r\r// Note: If using from the Avatar API, replace \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getSensorToWorldMatrix",
        "scope": "static"
    },
    {
        "description": "Gets the scale that transforms dimensions in the user's real world to the avatar's size in the virtual world.",
        "kind": "function",
        "name": "getSensorToWorldScale",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The scale that transforms dimensions in the user's real world to the avatar's size in the virtual \r    world."
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getSensorToWorldScale",
        "scope": "static"
    },
    {
        "description": "Gets the rotation and translation of the left hand controller relative to the avatar.",
        "kind": "function",
        "name": "getControllerLeftHandMatrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The rotation and translation of the left hand controller relative to the avatar."
            }
        ],
        "examples": [
            "<caption>Report the left hand controller matrix.</caption>\rvar leftHandMatrix = MyAvatar.getControllerLeftHandMatrix();\rprint(\"Controller left hand matrix: \" + JSON.stringify(leftHandMatrix));\rprint(\"Rotation: \" + JSON.stringify(Mat4.extractRotation(leftHandMatrix)));\rprint(\"Translation: \" + JSON.stringify(Mat4.extractTranslation(leftHandMatrix)));\rprint(\"Scale: \" + JSON.stringify(Mat4.extractScale(leftHandMatrix))); // Always 1,1,1.\r\r// Note: If using from the Avatar API, replace \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getControllerLeftHandMatrix",
        "scope": "static"
    },
    {
        "description": "Gets the rotation and translation of the right hand controller relative to the avatar.",
        "kind": "function",
        "name": "getControllerRightHandMatrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The rotation and translation of the right hand controller relative to the avatar."
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getControllerRightHandMatrix",
        "scope": "static"
    },
    {
        "description": "Gets the amount of avatar mixer data being generated by the avatar.",
        "kind": "function",
        "name": "getDataRate",
        "params": [
            {
                "type": {
                    "names": [
                        "AvatarDataRate"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The type of avatar mixer data to get the data rate of.",
                "name": "rateName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The data rate in kbps."
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getDataRate",
        "scope": "static"
    },
    {
        "description": "Gets the update rate of avatar mixer data being generated by the avatar.",
        "kind": "function",
        "name": "getUpdateRate",
        "params": [
            {
                "type": {
                    "names": [
                        "AvatarUpdateRate"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The type of avatar mixer data to get the update rate of.",
                "name": "rateName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The update rate in Hz."
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getUpdateRate",
        "scope": "static"
    },
    {
        "description": "Triggered when the avatar's <code>displayName</code> property value changes.",
        "kind": "signal",
        "name": "displayNameChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when your avatar display name changes.</caption>\rMyAvatar.displayNameChanged.connect(function () {\r    print(\"Avatar display name changed to: \" + MyAvatar.displayName);\r});\r\r// Note: If using from the Avatar API, replace \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "Avatar",
        "longname": "Avatar.displayNameChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the avatar's <code>sessionDisplayName</code> property value changes.",
        "kind": "signal",
        "name": "sessionDisplayNameChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when your avatar's session display name changes.</caption>\rMyAvatar.sessionDisplayNameChanged.connect(function () {\r    print(\"Avatar session display name changed to: \" + MyAvatar.sessionDisplayName);\r});\r\r// Note: If using from the Avatar API, replace \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "Avatar",
        "longname": "Avatar.sessionDisplayNameChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the avatar's model (i.e., <code>skeletonModelURL</code> property value) is changed.",
        "kind": "signal",
        "name": "skeletonModelURLChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when your avatar's skeleton model changes.</caption>\rMyAvatar.skeletonModelURLChanged.connect(function () {\r    print(\"Skeleton model changed to: \" + MyAvatar.skeletonModelURL);\r});\r\r// Note: If using from the Avatar API, replace \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "Avatar",
        "longname": "Avatar.skeletonModelURLChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the avatar's <code>lookAtSnappingEnabled</code> property value changes.",
        "kind": "signal",
        "name": "lookAtSnappingChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if look-at snapping is enabled, <code>false</code> if not.",
                "name": "enabled"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when your look-at snapping setting changes.</caption>\rMyAvatar.lookAtSnappingChanged.connect(function () {\r    print(\"Avatar look-at snapping changed to: \" + MyAvatar.lookAtSnappingEnabled);\r});\r\r// Note: If using from the Avatar API, replace \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "Avatar",
        "longname": "Avatar.lookAtSnappingChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the avatar's <code>sessionUUID</code> property value changes.",
        "kind": "signal",
        "name": "sessionUUIDChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when your avatar's session UUID changes.</caption>\rMyAvatar.sessionUUIDChanged.connect(function () {\r    print(\"Avatar session UUID changed to: \" + MyAvatar.sessionUUID);\r});\r\r// Note: If using from the Avatar API, replace \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "Avatar",
        "longname": "Avatar.sessionUUIDChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "sendAvatarDataPacket",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Send all.",
                "name": "sendAll"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Avatar",
        "longname": "Avatar.sendAvatarDataPacket",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "sendIdentityPacket",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Avatar",
        "longname": "Avatar.sendIdentityPacket",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setSessionUUID",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "Session UUID.",
                "name": "sessionUUID"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Avatar",
        "longname": "Avatar.setSessionUUID",
        "scope": "static"
    },
    {
        "description": "Gets the rotation of a joint relative to the avatar.\r<p><strong>Warning:</strong> Not able to be used in the <code>Avatar</code> API.</p>",
        "kind": "function",
        "name": "getAbsoluteJointRotationInObjectFrame",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint. <em>Not used.</em>",
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "<code>Quat.IDENTITY</code>."
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getAbsoluteJointRotationInObjectFrame",
        "scope": "static"
    },
    {
        "description": "Gets the translation of a joint relative to the avatar.\r<p><strong>Warning:</strong> Not able to be used in the <code>Avatar</code> API.</p>",
        "kind": "function",
        "name": "getAbsoluteJointTranslationInObjectFrame",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint. <em>Not used.</em>",
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>Vec3.ZERO</code>."
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getAbsoluteJointTranslationInObjectFrame",
        "scope": "static"
    },
    {
        "description": "Sets the rotation of a joint relative to the avatar.\r<p><strong>Warning:</strong> Not able to be used in the <code>Avatar</code> API.</p>",
        "kind": "function",
        "name": "setAbsoluteJointRotationInObjectFrame",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint. <em>Not used.</em>",
                "name": "index"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation of the joint relative to the avatar. <em>Not used.</em>",
                "name": "rotation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>false</code>."
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.setAbsoluteJointRotationInObjectFrame",
        "scope": "static"
    },
    {
        "description": "Sets the translation of a joint relative to the avatar.\r<p><strong>Warning:</strong> Not able to be used in the <code>Avatar</code> API.</p>",
        "kind": "function",
        "name": "setAbsoluteJointTranslationInObjectFrame",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint. <em>Not used.</em>",
                "name": "index"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The translation of the joint relative to the avatar. <em>Not used.</em>",
                "name": "translation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>false</code>."
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.setAbsoluteJointTranslationInObjectFrame",
        "scope": "static"
    },
    {
        "description": "Gets the target scale of the avatar without any restrictions on permissible values imposed by the domain. In contrast, the \r<code>scale</code> property's value may be limited by the domain's settings.",
        "kind": "function",
        "name": "getTargetScale",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The target scale of the avatar."
            }
        ],
        "examples": [
            "<caption>Compare the target and current avatar scales.</caption>\rprint(\"Current avatar scale: \" + MyAvatar.scale);\rprint(\"Target avatar scale:  \" + MyAvatar.getTargetScale());\r\r// Note: If using from the Avatar API, replace all occurrences of \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getTargetScale",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "resetLastSent",
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Avatar",
        "longname": "Avatar.resetLastSent",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Server Entity Scripts &bull; Assignment Client Scripts</p>The <code>AvatarList</code> API provides information about avatars within the current domain.\r\r<p><strong>Warning:</strong> An API named \"<code>AvatarList</code>\" is also provided for Interface, client entity, and avatar \rscripts, however, it is a synonym for the {@link AvatarManager} API.</p>",
        "kind": "namespace",
        "name": "AvatarList",
        "hifiAssignmentClient": true,
        "hifiServerEntity": true,
        "longname": "AvatarList",
        "scope": "global"
    },
    {
        "description": "Gets the IDs of all avatars in the domain.\r<p><strong>Warning:</strong> If the AC script is acting as an avatar (i.e., <code>Agent.isAvatar == true</code>) the \ravatar's ID is NOT included in results.</p>",
        "kind": "function",
        "name": "getAvatarIdentifiers",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "The IDs of all avatars in the domain (excluding AC script's avatar)."
            }
        ],
        "examples": [
            "<caption>Report the IDS of all avatars within the domain.</caption>\rvar avatars = AvatarList.getAvatarIdentifiers();\rprint(\"Avatars in the domain: \" + JSON.stringify(avatars));"
        ],
        "memberof": "AvatarList",
        "longname": "AvatarList.getAvatarIdentifiers",
        "scope": "static"
    },
    {
        "description": "Gets the IDs of all avatars within a specified distance from a point.\r<p><strong>Warning:</strong> If the AC script is acting as an avatar (i.e., <code>Agent.isAvatar == true</code>) the\ravatar's ID is NOT included in results.</p>",
        "kind": "function",
        "name": "getAvatarsInRange",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The point about which the search is performed.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The search radius.",
                "name": "range"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "The IDs of all avatars within the search distance from the position (excluding AC script's avatar)."
            }
        ],
        "examples": [
            "<caption>Report the IDs of all avatars within 10m of the origin.</caption>\rvar RANGE = 10;\rvar avatars = AvatarList.getAvatarsInRange(Vec3.ZERO, RANGE);\rprint(\"Avatars near the origin: \" + JSON.stringify(avatars));"
        ],
        "memberof": "AvatarList",
        "longname": "AvatarList.getAvatarsInRange",
        "scope": "static"
    },
    {
        "description": "Gets information about an avatar.",
        "kind": "function",
        "name": "getAvatar",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the avatar.",
                "name": "avatarID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "AvatarData"
                    ]
                },
                "description": "Information about the avatar."
            }
        ],
        "memberof": "AvatarList",
        "longname": "AvatarList.getAvatar",
        "scope": "static"
    },
    {
        "description": "Triggered when an avatar arrives in the domain.",
        "kind": "signal",
        "name": "avatarAddedEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the avatar that arrived in the domain.",
                "name": "sessionUUID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when an avatar arrives in the domain.</caption>\rAvatarManager.avatarAddedEvent.connect(function (sessionID) {\r    print(\"Avatar arrived: \" + sessionID);\r});\r\r// Note: If using from the AvatarList API, replace \"AvatarManager\" with \"AvatarList\"."
        ],
        "memberof": "AvatarList",
        "longname": "AvatarList.avatarAddedEvent",
        "scope": "static"
    },
    {
        "description": "Triggered when an avatar leaves the domain.",
        "kind": "signal",
        "name": "avatarRemovedEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the avatar that left the domain.",
                "name": "sessionUUID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when an avatar leaves the domain.</caption>\rAvatarManager.avatarRemovedEvent.connect(function (sessionID) {\r    print(\"Avatar left: \" + sessionID);\r});\r\r// Note: If using from the AvatarList API, replace \"AvatarManager\" with \"AvatarList\"."
        ],
        "memberof": "AvatarList",
        "longname": "AvatarList.avatarRemovedEvent",
        "scope": "static"
    },
    {
        "description": "Triggered when an avatar's session ID changes.",
        "kind": "signal",
        "name": "avatarSessionChangedEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The new session ID.",
                "name": "newSessionUUID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The old session ID.",
                "name": "oldSessionUUID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when an avatar's session ID changes.</caption>\rAvatarManager.avatarSessionChangedEvent.connect(function (newSessionID, oldSessionID) {\r    print(\"Avatar session ID changed from \" + oldSessionID + \" to \" + newSessionID);\r});\r\r// Note: If using from the AvatarList API, replace \"AvatarManager\" with \"AvatarList\"."
        ],
        "memberof": "AvatarList",
        "longname": "AvatarList.avatarSessionChangedEvent",
        "scope": "static"
    },
    {
        "description": "Checks whether there is an avatar within a specified distance from a point.",
        "kind": "function",
        "name": "isAvatarInRange",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The test position.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The test distance.",
                "name": "range"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if there's an avatar within the specified distance of the point, <code>false</code> \r    if not."
            }
        ],
        "memberof": "AvatarList",
        "longname": "AvatarList.isAvatarInRange",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "sessionUUIDChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "New session ID.",
                "name": "sessionUUID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "Old session ID.",
                "name": "oldSessionUUID"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "AvatarList",
        "longname": "AvatarList.sessionUUIDChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "processAvatarDataPacket",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Message.",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Sending node.",
                "name": "sendingNode"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "AvatarList",
        "longname": "AvatarList.processAvatarDataPacket",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "processAvatarIdentityPacket",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Message.",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Sending node.",
                "name": "sendingNode"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "AvatarList",
        "longname": "AvatarList.processAvatarIdentityPacket",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "processBulkAvatarTraits",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Message.",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Sending node.",
                "name": "sendingNode"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "AvatarList",
        "longname": "AvatarList.processBulkAvatarTraits",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "processKillAvatar",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Message.",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Sending node.",
                "name": "sendingNode"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "AvatarList",
        "longname": "AvatarList.processKillAvatar",
        "scope": "static"
    },
    {
        "description": "Information about an avatar.",
        "kind": "typedef",
        "name": "AvatarData",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The avatar's position.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The target scale of the avatar without any restrictions on permissible values imposed by the \r    domain.",
                "name": "scale"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "A user-defined hand position, in world coordinates. The position moves with the avatar but \r   is otherwise not used or changed by Interface.",
                "name": "handPosition"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The pitch of the avatar's body, in degrees.",
                "name": "bodyPitch"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The yaw of the avatar's body, in degrees.",
                "name": "bodyYaw"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The roll of the avatar's body, in degrees.",
                "name": "bodyRoll"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the avatar's body.",
                "name": "orientation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the avatar's head.",
                "name": "headOrientation"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The pitch of the avatar's head relative to the body, in degrees.",
                "name": "headPitch"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The yaw of the avatar's head relative to the body, in degrees.",
                "name": "headYaw"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The roll of the avatar's head relative to the body, in degrees.",
                "name": "headRoll"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The linear velocity of the avatar.",
                "name": "velocity"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The angular velocity of the avatar.",
                "name": "angularVelocity"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The avatar's session ID.",
                "name": "sessionUUID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The avatar's display name.",
                "name": "displayName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The avatar's display name, sanitized and versioned, as defined by the avatar mixer. \r    It is unique among all avatars present in the domain at the time.",
                "name": "sessionDisplayName"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<span class=\"important\">Deprecated: This property is deprecated and will be \r    removed.</span>",
                "name": "isReplicated"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the avatar's eyes snap to look at another avatar's eyes \r    when the other avatar is in the line of sight and also has <code>lookAtSnappingEnabled == true</code>.",
                "name": "lookAtSnappingEnabled"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The avatar's FST file.",
                "name": "skeletonModelURL"
            },
            {
                "type": {
                    "names": [
                        "Array.<AttachmentData>"
                    ]
                },
                "description": "Information on the avatar's attachments.\r    <p class=\"important\">Deprecated: This property is deprecated and will be removed. Use avatar entities instead.</p>",
                "name": "attachmentData"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "The list of joints in the current avatar model.",
                "name": "jointNames"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The instantaneous loudness of the audio input that the avatar is injecting into the \r    domain.",
                "name": "audioLoudness"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The rolling average loudness of the audio input that the avatar is injecting into \r    the domain.",
                "name": "audioAverageLoudness"
            },
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The scale, rotation, and translation transform from the user's real world to the \r    avatar's size, orientation, and position in the virtual world.",
                "name": "sensorToWorldMatrix"
            },
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The rotation and translation of the left hand controller relative to the avatar.",
                "name": "controllerLeftHandMatrix"
            },
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The rotation and translation of the right hand controller relative to the \r    avatar.",
                "name": "controllerRightHandMatrix"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the avatar is in a \"hero\" zone, <code>false</code> if it isn't.",
                "name": "hasPriority"
            }
        ],
        "longname": "AvatarData",
        "scope": "global"
    },
    {
        "description": "<p>An avatar has different types of data simulated at different rates, in Hz.</p>\r\r<table>\r  <thead>\r    <tr><th>Rate Name</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"avatar\" or \"\"</code></td><td>The rate at which the avatar is updated even if not in view.</td></tr>\r    <tr><td><code>\"avatarInView\"</code></td><td>The rate at which the avatar is updated if in view.</td></tr>\r    <tr><td><code>\"skeletonModel\"</code></td><td>The rate at which the skeleton model is being updated, even if there are no\r      joint data available.</td></tr>\r    <tr><td><code>\"jointData\"</code></td><td>The rate at which joint data are being updated.</td></tr>\r    <tr><td><code>\"\"</code></td><td>When no rate name is specified, the <code>\"avatar\"</code> update rate is\r      provided.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "AvatarSimulationRate",
        "type": {
            "names": [
                "string"
            ]
        },
        "longname": "AvatarSimulationRate",
        "scope": "global"
    },
    {
        "description": "Gets the default rotation of a joint (in the current avatar) relative to its parent.\r<p>For information on the joint hierarchy used, see\r<a href=\"https://docs.highfidelity.com/create/avatars/avatar-standards\">Avatar Standards</a>.</p>",
        "kind": "function",
        "name": "getDefaultJointRotation",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The joint index.",
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The default rotation of the joint if the joint index is valid, otherwise {@link Quat(0)|Quat.IDENTITY}."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getDefaultJointRotation",
        "scope": "static"
    },
    {
        "description": "Gets the default translation of a joint (in the current avatar) relative to its parent, in model coordinates.\r<p><strong>Warning:</strong> These coordinates are not necessarily in meters.</p>\r<p>For information on the joint hierarchy used, see\r<a href=\"https://docs.highfidelity.com/create/avatars/avatar-standards\">Avatar Standards</a>.</p>",
        "kind": "function",
        "name": "getDefaultJointTranslation",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The joint index.",
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The default translation of the joint (in model coordinates) if the joint index is valid, otherwise \r    {@link Vec3(0)|Vec3.ZERO}."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getDefaultJointTranslation",
        "scope": "static"
    },
    {
        "description": "Gets the default joint rotations in avatar coordinates.\rThe default pose of the avatar is defined by the position and orientation of all bones\rin the avatar's model file. Typically this is a T-pose.",
        "kind": "function",
        "name": "getAbsoluteDefaultJointRotationInObjectFrame",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The joint index.",
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The default rotation of the joint in avatar coordinates."
            }
        ],
        "examples": [
            "<caption>Report the default rotation of your avatar's head joint relative to your avatar.</caption>\rvar headIndex = MyAvatar.getJointIndex(\"Head\");\rvar defaultHeadRotation = MyAvatar.getAbsoluteDefaultJointRotationInObjectFrame(headIndex);\rprint(\"Default head rotation: \" + JSON.stringify(Quat.safeEulerAngles(defaultHeadRotation))); // Degrees"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getAbsoluteDefaultJointRotationInObjectFrame",
        "scope": "static"
    },
    {
        "description": "Gets the default joint translations in avatar coordinates.\rThe default pose of the avatar is defined by the position and orientation of all bones\rin the avatar's model file. Typically this is a T-pose.",
        "kind": "function",
        "name": "getAbsoluteDefaultJointTranslationInObjectFrame",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The joint index.",
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The default position of the joint in avatar coordinates."
            }
        ],
        "examples": [
            "<caption>Report the default translation of your avatar's head joint relative to your avatar.</caption>\rvar headIndex = MyAvatar.getJointIndex(\"Head\");\rvar defaultHeadTranslation = MyAvatar.getAbsoluteDefaultJointTranslationInObjectFrame(headIndex);\rprint(\"Default head translation: \" + JSON.stringify(defaultHeadTranslation));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getAbsoluteDefaultJointTranslationInObjectFrame",
        "scope": "static"
    },
    {
        "description": "Sets the rotation of a joint relative to the avatar.\r<p><strong>Warning:</strong> Not able to be used in the <code>MyAvatar</code> API.</p>",
        "kind": "function",
        "name": "setAbsoluteJointRotationInObjectFrame",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint. <em>Not used.</em>",
                "name": "index"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation of the joint relative to the avatar. <em>Not used.</em>",
                "name": "rotation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>false</code>."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setAbsoluteJointRotationInObjectFrame",
        "scope": "static"
    },
    {
        "description": "Sets the translation of a joint relative to the avatar.\r<p><strong>Warning:</strong> Not able to be used in the <code>MyAvatar</code> API.</p>",
        "kind": "function",
        "name": "setAbsoluteJointTranslationInObjectFrame",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint. <em>Not used.</em>",
                "name": "index"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The translation of the joint relative to the avatar. <em>Not used.</em>",
                "name": "translation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>false</code>."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setAbsoluteJointTranslationInObjectFrame",
        "scope": "static"
    },
    {
        "description": "Transforms a position in world coordinates to a position in a joint's coordinates, or avatar coordinates if no joint is \rspecified.",
        "kind": "function",
        "name": "worldToJointPoint",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position in world coordinates.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "description": "The index of the joint.",
                "name": "jointIndex"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position in the joint's coordinate system, or avatar coordinate system if no joint is specified."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.worldToJointPoint",
        "scope": "static"
    },
    {
        "description": "Transforms a direction in world coordinates to a direction in a joint's coordinates, or avatar coordinates if no joint \ris specified.",
        "kind": "function",
        "name": "worldToJointDirection",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The direction in world coordinates.",
                "name": "direction"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "description": "The index of the joint.",
                "name": "jointIndex"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The direction in the joint's coordinate system, or avatar coordinate system if no joint is specified."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.worldToJointDirection",
        "scope": "static"
    },
    {
        "description": "Transforms a rotation in world coordinates to a rotation in a joint's coordinates, or avatar coordinates if no joint is \rspecified.",
        "kind": "function",
        "name": "worldToJointRotation",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation in world coordinates.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "description": "The index of the joint.",
                "name": "jointIndex"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation in the joint's coordinate system, or avatar coordinate system if no joint is specified."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.worldToJointRotation",
        "scope": "static"
    },
    {
        "description": "Transforms a position in a joint's coordinates, or avatar coordinates if no joint is specified, to a position in world \rcoordinates.",
        "kind": "function",
        "name": "jointToWorldPoint",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position in joint coordinates, or avatar coordinates if no joint is specified.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "description": "The index of the joint.",
                "name": "jointIndex"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position in world coordinates."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.jointToWorldPoint",
        "scope": "static"
    },
    {
        "description": "Transforms a direction in a joint's coordinates, or avatar coordinates if no joint is specified, to a direction in world \rcoordinates.",
        "kind": "function",
        "name": "jointToWorldDirection",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The direction in joint coordinates, or avatar coordinates if no joint is specified.",
                "name": "direction"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "description": "The index of the joint.",
                "name": "jointIndex"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The direction in world coordinates."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.jointToWorldDirection",
        "scope": "static"
    },
    {
        "description": "Transforms a rotation in a joint's coordinates, or avatar coordinates if no joint is specified, to a rotation in world \rcoordinates.",
        "kind": "function",
        "name": "jointToWorldRotation",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation in joint coordinates, or avatar coordinates if no joint is specified.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "description": "The index of the joint.",
                "name": "jointIndex"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation in world coordinates."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.jointToWorldRotation",
        "scope": "static"
    },
    {
        "description": "Sets the offset applied to the current avatar. The offset adjusts the position that the avatar is rendered. For example, \rwith an offset of <code>{ x: 0, y: 0.1, z: 0 }</code>, your avatar will appear to be raised off the ground slightly.",
        "kind": "function",
        "name": "setSkeletonOffset",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The skeleton offset to set.",
                "name": "offset"
            }
        ],
        "examples": [
            "<caption>Raise your avatar off the ground a little.</caption>\r// Raise your avatar off the ground a little.\rMyAvatar.setSkeletonOffset({ x: 0, y: 0.1: z: 0 });\r\r// Restore its offset after 5s.\rScript.setTimeout(function () {\r    MyAvatar.setSkeletonOffset(Vec3.ZERO);\r}, 5000);"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setSkeletonOffset",
        "scope": "static"
    },
    {
        "description": "Gets the offset applied to the current avatar. The offset adjusts the position that the avatar is rendered. For example, \rwith an offset of <code>{ x: 0, y: 0.1, z: 0 }</code>, your avatar will appear to be raised off the ground slightly.",
        "kind": "function",
        "name": "getSkeletonOffset",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The current skeleton offset."
            }
        ],
        "examples": [
            "<caption>Report your avatar's current skeleton offset.</caption>\rprint(JSON.stringify(MyAvatar.getSkeletonOffset());"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getSkeletonOffset",
        "scope": "static"
    },
    {
        "description": "Gets the position of a joint in the current avatar.",
        "kind": "function",
        "name": "getJointPosition",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint.",
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the joint in world coordinates."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getJointPosition",
        "scope": "static"
    },
    {
        "description": "Gets the position of a joint in the current avatar.",
        "kind": "function",
        "name": "getJointPosition",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the joint.",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the joint in world coordinates."
            }
        ],
        "examples": [
            "<caption>Report the position of your avatar's hips.</caption>\rprint(JSON.stringify(MyAvatar.getJointPosition(\"Hips\")));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getJointPosition",
        "scope": "static"
    },
    {
        "description": "Gets the position of the current avatar's neck in world coordinates.",
        "kind": "function",
        "name": "getNeckPosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the neck in world coordinates."
            }
        ],
        "examples": [
            "<caption>Report the position of your avatar's neck.</caption>\rprint(JSON.stringify(MyAvatar.getNeckPosition()));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getNeckPosition",
        "scope": "static"
    },
    {
        "description": "Gets the current acceleration of the avatar.",
        "kind": "function",
        "name": "getAcceleration",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The current acceleration of the avatar."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getAcceleration",
        "scope": "static"
    },
    {
        "description": "Gets the position of the current avatar's feet (or rather, bottom of its collision capsule) in world coordinates.",
        "kind": "function",
        "name": "getWorldFeetPosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the avatar's feet in world coordinates."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getWorldFeetPosition",
        "scope": "static"
    },
    {
        "description": "Gets the ID of the entity of avatar that the avatar is parented to.",
        "kind": "function",
        "name": "getParentID",
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity or avatar that the avatar is parented to. {@link Uuid(0)|Uuid.NULL} if not parented."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getParentID",
        "scope": "static"
    },
    {
        "description": "Sets the ID of the entity of avatar that the avatar is parented to.",
        "kind": "function",
        "name": "setParentID",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity or avatar that the avatar should be parented to. Set to \r   {@link Uuid(0)|Uuid.NULL} to unparent.",
                "name": "parentID"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setParentID",
        "scope": "static"
    },
    {
        "description": "Gets the joint of the entity or avatar that the avatar is parented to.",
        "kind": "function",
        "name": "getParentJointIndex",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The joint of the entity or avatar that the avatar is parented to. <code>65535</code> or \r    <code>-1</code> if parented to the entity or avatar's position and orientation rather than a joint."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getParentJointIndex",
        "scope": "static"
    },
    {
        "description": "Sets the joint of the entity or avatar that the avatar is parented to.",
        "kind": "function",
        "name": "setParentJointIndex",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The joint of the entity or avatar that the avatar should be parented to. Use\r    <code>65535</code> or <code>-1</code> to parent to the entity or avatar's position and orientation rather than a \r    joint.",
                "name": "parentJointIndex"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setParentJointIndex",
        "scope": "static"
    },
    {
        "description": "Gets information on all the joints in the avatar's skeleton.",
        "kind": "function",
        "name": "getSkeleton",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<MyAvatar.SkeletonJoint>"
                    ]
                },
                "description": "Information about each joint in the avatar's skeleton."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getSkeleton",
        "scope": "static"
    },
    {
        "description": "Information about a single joint in an Avatar's skeleton hierarchy.",
        "kind": "typedef",
        "name": "SkeletonJoint",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Joint name.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Joint index.",
                "name": "index"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Index of this joint's parent (-1 if no parent).",
                "name": "parentIndex"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.SkeletonJoint",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getSimulationRate",
        "params": [
            {
                "type": {
                    "names": [
                        "AvatarSimulationRate"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "Rate name.",
                "name": "rateName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Simulation rate in Hz."
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getSimulationRate",
        "scope": "static"
    },
    {
        "description": "Triggered when the avatar's target scale is changed. The target scale is the desired scale of the avatar without any \rrestrictions on permissible scale values imposed by the domain.",
        "kind": "function",
        "name": "targetScaleChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The avatar's target scale.",
                "name": "targetScale"
            }
        ],
        "returns": [
            {
                "description": "Signal"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.targetScaleChanged",
        "scope": "static"
    },
    {
        "description": "Gets the position of the left palm in world coordinates.",
        "kind": "function",
        "name": "getLeftPalmPosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the left palm in world coordinates."
            }
        ],
        "examples": [
            "<caption>Report the position of your avatar's left palm.</caption>\rprint(JSON.stringify(MyAvatar.getLeftPalmPosition()));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getLeftPalmPosition",
        "scope": "static"
    },
    {
        "description": "Gets the rotation of the left palm in world coordinates.",
        "kind": "function",
        "name": "getLeftPalmRotation",
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation of the left palm in world coordinates."
            }
        ],
        "examples": [
            "<caption>Report the rotation of your avatar's left palm.</caption>\rprint(JSON.stringify(MyAvatar.getLeftPalmRotation()));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getLeftPalmRotation",
        "scope": "static"
    },
    {
        "description": "Gets the position of the right palm in world coordinates.",
        "kind": "function",
        "name": "getRightPalmPosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the right palm in world coordinates."
            }
        ],
        "examples": [
            "<caption>Report the position of your avatar's right palm.</caption>\rprint(JSON.stringify(MyAvatar.getRightPalmPosition()));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getRightPalmPosition",
        "scope": "static"
    },
    {
        "description": "Get the rotation of the right palm in world coordinates.",
        "kind": "function",
        "name": "getRightPalmRotation",
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation of the right palm in world coordinates."
            }
        ],
        "examples": [
            "<caption>Report the rotation of your avatar's right palm.</caption>\rprint(JSON.stringify(MyAvatar.getRightPalmRotation()));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getRightPalmRotation",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setModelURLFinished",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "success"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setModelURLFinished",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "rigReady",
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.rigReady",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "rigReset",
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.rigReset",
        "scope": "static"
    },
    {
        "description": "<p>The <code>Controller.Actions</code> object has properties representing predefined actions on the user's avatar and \rInterface. The property values are integer IDs, uniquely identifying each action. <em>Read-only.</em></p>\r<p>These actions can be used as end points in the routes of a {@link MappingObject}. The data item routed to each action \ris either a number or a {@link Pose}.</p>\r\r<table>\r  <thead>\r    <tr><th>Property</th><th>Type</th><th>Data</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td colSpan=4><strong>Avatar Movement</strong></td></tr>\r    <tr><td><code>TranslateX</code></td><td>number</td><td>number</td><td>Move the user's avatar in the direction of its \r      x-axis, if the camera isn't in independent or mirror modes.</td></tr>\r    <tr><td><code>TranslateY</code></td><td>number</td><td>number</td><td>Move the user's avatar in the direction of its \r      y-axis, if the camera isn't in independent or mirror modes.</td></tr>\r    <tr><td><code>TranslateZ</code></td><td>number</td><td>number</td><td>Move the user's avatar in the direction of its \r      z-axis, if the camera isn't in independent or mirror modes.</td></tr>\r    <tr><td><code>Pitch</code></td><td>number</td><td>number</td><td>Rotate the user's avatar head and attached camera \r      about its negative x-axis (i.e., positive values pitch down) at a rate proportional to the control value, if the \r      camera isn't in HMD, independent, or mirror modes.</td></tr>\r    <tr><td><code>Yaw</code></td><td>number</td><td>number</td><td>Rotate the user's avatar about its y-axis at a rate \r      proportional to the control value, if the camera isn't in independent or mirror modes.</td></tr>\r    <tr><td><code>Roll</code></td><td>number</td><td>number</td><td>No action.</td></tr>\r    <tr><td><code>DeltaPitch</code></td><td>number</td><td>number</td><td>Rotate the user's avatar head and attached \r      camera about its negative x-axis (i.e., positive values pitch down) by an amount proportional to the control value, \r      if the camera isn't in HMD, independent, or mirror modes.</td></tr>\r    <tr><td><code>DeltaYaw</code></td><td>number</td><td>number</td><td>Rotate the user's avatar about its y-axis by an \r      amount proportional to the control value, if the camera isn't in independent or mirror modes.</td></tr>\r    <tr><td><code>DeltaRoll</code></td><td>number</td><td>number</td><td>No action.</td></tr>\r    <tr><td><code>StepTranslateX</code></td><td>number</td><td>number</td><td>No action.</td></tr>\r    <tr><td><code>StepTranslateY</code></td><td>number</td><td>number</td><td>No action.</td></tr>\r    <tr><td><code>StepTranslateZ</code></td><td>number</td><td>number</td><td>No action.</td></tr>\r    <tr><td><code>StepPitch</code></td><td>number</td><td>number</td><td>No action.</td></tr>\r    <tr><td><code>StepYaw</code></td><td>number</td><td>number</td><td>Rotate the user's avatar about its y-axis in a \r      step increment, if the camera isn't in independent or mirror modes.</td></tr>\r    <tr><td><code>StepRoll</code></td><td>number</td><td>number</td><td>No action.</td></tr>\r\r    <tr><td colSpan=4><strong>Avatar Skeleton</strong></td></tr>\r    <tr><td><code>Hips</code></td><td>number</td><td>{@link Pose}</td><td>Set the hips pose of the user's avatar.\r      </td></tr>\r    <tr><td><code>Spine2</code></td><td>number</td><td>{@link Pose}</td><td>Set the spine2 pose of the user's avatar.\r      </td></tr>\r    <tr><td><code>Head</code></td><td>number</td><td>{@link Pose}</td><td>Set the head pose of the user's avatar.\r      </td></tr>\r    <tr><td><code>LeftArm</code></td><td>number</td><td>{@link Pose}</td><td>Set the left arm pose of the user's avatar.\r      </td></tr>\r    <tr><td><code>RightArm</code></td><td>number</td><td>{@link Pose}</td><td>Set the right arm pose of the user's \r      avatar.</td></tr>\r    <tr><td><code>LeftHand</code></td><td>number</td><td>{@link Pose}</td><td>Set the left hand pose of the user's\r      avatar.</td></tr>\r    <tr><td><code>LeftHandThumb1</code></td><td>number</td><td>{@link Pose}</td><td>Set the left thumb 1 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandThumb2</code></td><td>number</td><td>{@link Pose}</td><td>Set the left thumb 2 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandThumb3</code></td><td>number</td><td>{@link Pose}</td><td>Set the left thumb 3 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandThumb4</code></td><td>number</td><td>{@link Pose}</td><td>Set the left thumb 4 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandIndex1</code></td><td>number</td><td>{@link Pose}</td><td>Set the left index 1 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandIndex2</code></td><td>number</td><td>{@link Pose}</td><td>Set the left index 2 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandIndex3</code></td><td>number</td><td>{@link Pose}</td><td>Set the left index 3 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandIndex4</code></td><td>number</td><td>{@link Pose}</td><td>Set the left index 4 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandMiddle1</code></td><td>number</td><td>{@link Pose}</td><td>Set the left middle 1 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandMiddle2</code></td><td>number</td><td>{@link Pose}</td><td>Set the left middle 2 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandMiddle3</code></td><td>number</td><td>{@link Pose}</td><td>Set the left middle 3 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandMiddle4</code></td><td>number</td><td>{@link Pose}</td><td>Set the left middle 4 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandRing1</code></td><td>number</td><td>{@link Pose}</td><td>Set the left ring 1 finger joint pose \r      of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandRing2</code></td><td>number</td><td>{@link Pose}</td><td>Set the left ring 2 finger joint pose \r      of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandRing3</code></td><td>number</td><td>{@link Pose}</td><td>Set the left ring 3 finger joint pose \r      of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandRing4</code></td><td>number</td><td>{@link Pose}</td><td>Set the left ring 4 finger joint pose \r      of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandPinky1</code></td><td>number</td><td>{@link Pose}</td><td>Set the left pinky 1 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandPinky2</code></td><td>number</td><td>{@link Pose}</td><td>Set the left pinky 2 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandPinky3</code></td><td>number</td><td>{@link Pose}</td><td>Set the left pinky 3 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandPinky4</code></td><td>number</td><td>{@link Pose}</td><td>Set the left pinky 4 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHand</code></td><td>number</td><td>{@link Pose}</td><td>Set the right hand of the user's avatar.\r      </td></tr>\r    <tr><td><code>RightHandThumb1</code></td><td>number</td><td>{@link Pose}</td><td>Set the right thumb 1 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandThumb2</code></td><td>number</td><td>{@link Pose}</td><td>Set the right thumb 2 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandThumb3</code></td><td>number</td><td>{@link Pose}</td><td>Set the right thumb 3 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandThumb4</code></td><td>number</td><td>{@link Pose}</td><td>Set the right thumb 4 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandIndex1</code></td><td>number</td><td>{@link Pose}</td><td>Set the right index 1 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandIndex2</code></td><td>number</td><td>{@link Pose}</td><td>Set the right index 2 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandIndex3</code></td><td>number</td><td>{@link Pose}</td><td>Set the right index 3 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandIndex4</code></td><td>number</td><td>{@link Pose}</td><td>Set the right index 4 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandMiddle1</code></td><td>number</td><td>{@link Pose}</td><td>Set the right middle 1 finger \r      joint pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandMiddle2</code></td><td>number</td><td>{@link Pose}</td><td>Set the right middle 2 finger \r      joint pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandMiddle3</code></td><td>number</td><td>{@link Pose}</td><td>Set the right middle 3 finger \r      joint pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandMiddle4</code></td><td>number</td><td>{@link Pose}</td><td>Set the right middle 4 finger \r      joint pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandRing1</code></td><td>number</td><td>{@link Pose}</td><td>Set the right ring 1 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandRing2</code></td><td>number</td><td>{@link Pose}</td><td>Set the right ring 2 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandRing3</code></td><td>number</td><td>{@link Pose}</td><td>Set the right ring 3 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandRing4</code></td><td>number</td><td>{@link Pose}</td><td>Set the right ring 4 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandPinky1</code></td><td>number</td><td>{@link Pose}</td><td>Set the right pinky 1 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandPinky2</code></td><td>number</td><td>{@link Pose}</td><td>Set the right pinky 2 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandPinky3</code></td><td>number</td><td>{@link Pose}</td><td>Set the right pinky 3 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandPinky4</code></td><td>number</td><td>{@link Pose}</td><td>Set the right pinky 4 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>LeftFoot</code></td><td>number</td><td>{@link Pose}</td><td>Set the left foot pose of the user's\r      avatar.</td></tr>\r    <tr><td><code>RightFoot</code></td><td>number</td><td>{@link Pose}</td><td>Set the right foot pose of the user's\r      avatar.</td></tr>\r\r    <tr><td colSpan=4><strong>Application</strong></td></tr>\r    <tr><td><code>BoomIn</code></td><td>number</td><td>number</td><td>Zoom camera in from third person toward first \r      person view.</td></tr>\r    <tr><td><code>BoomOut</code></td><td>number</td><td>number</td><td>Zoom camera out from first person to third \r      person view.</td></tr>\r    <tr><td><code>CycleCamera</code></td><td>number</td><td>number</td><td>Cycle the camera view from first person, to \r      third person, to full screen mirror, then back to first person and repeat.</td></tr>\r    <tr><td><code>ContextMenu</code></td><td>number</td><td>number</td><td>Show/hide the tablet.</td></tr>\r    <tr><td><code>ToggleMute</code></td><td>number</td><td>number</td><td>Toggle the microphone mute.</td></tr>\r    <tr><td><code>TogglePushToTalk</code></td><td>number</td><td>number</td><td>Toggle push to talk.</td></tr>\r    <tr><td><code>ToggleOverlay</code></td><td>number</td><td>number</td><td>Toggle the display of overlays.</td></tr>\r    <tr><td><code>Sprint</code></td><td>number</td><td>number</td><td>Set avatar sprint mode.</td></tr>\r    <tr><td><code>ReticleClick</code></td><td>number</td><td>number</td><td>Set mouse-pressed.</td></tr>\r    <tr><td><code>ReticleX</code></td><td>number</td><td>number</td><td>Move the cursor left/right in the x direction.\r      </td></tr>\r    <tr><td><code>ReticleY</code></td><td>number</td><td>number</td><td>move the cursor up/down in the y direction.\r      </td></tr>\r    <tr><td><code>ReticleLeft</code></td><td>number</td><td>number</td><td>Move the cursor left.</td></tr>\r    <tr><td><code>ReticleRight</code></td><td>number</td><td>number</td><td>Move the cursor right.</td></tr>\r    <tr><td><code>ReticleUp</code></td><td>number</td><td>number</td><td>Move the cursor up.</td></tr>\r    <tr><td><code>ReticleDown</code></td><td>number</td><td>number</td><td>Move the cursor down.</td></tr>\r    <tr><td><code>UiNavLateral</code></td><td>number</td><td>number</td><td>Generate a keyboard left or right arrow key \r      event.</td></tr>\r    <tr><td><code>UiNavVertical</code></td><td>number</td><td>number</td><td>Generate a keyboard up or down arrow key \r      event.</td></tr>\r    <tr><td><code>UiNavGroup</code></td><td>number</td><td>number</td><td>Generate a keyboard tab or back-tab key event.\r      </td></tr>\r    <tr><td><code>UiNavSelect</code></td><td>number</td><td>number</td><td>Generate a keyboard Enter key event.\r      </td></tr>\r    <tr><td><code>UiNavBack</code></td><td>number</td><td>number</td><td>Generate a keyboard Esc key event.</td></tr>\r    <tr><td><code>LeftHandClick</code></td><td>number</td><td>number</td><td><span class=\"important\">Deprecated: This \r      action is deprecated and will be removed. It takes no action.</span></td></tr>\r    <tr><td><code>RightHandClick</code></td><td>number</td><td>number</td><td><span class=\"important\">Deprecated: This \r      action is deprecated and will be removed. It takes no action.</span></td></tr>\r    <tr><td><code>Shift</code></td><td>number</td><td>number</td><td><span class=\"important\">Deprecated: This \r      action is deprecated and will be removed. It takes no action.</span></td></tr>\r    <tr><td><code>PrimaryAction</code></td><td>number</td><td>number</td><td><span class=\"important\">Deprecated: This \r      action is deprecated and will be removed. It takes no action.</span></td></tr>\r    <tr><td><code>SecondaryAction</code></td><td>number</td><td>number</td><td><span class=\"important\">Deprecated: This \r      action is deprecated and will be removed. It takes no action.</span></td></tr>\r\r    <tr><td colSpan=4><strong>Aliases</strong></td></tr>\r    <tr><td><code>Backward</code></td><td>number</td><td>number</td><td>Alias for <code>TranslateZ</code> in the \r      positive direction.</td></tr>\r    <tr><td><code>Forward</code></td><td>number</td><td>number</td><td>Alias for <code>TranslateZ</code> in the negative \r      direction.</td></tr>\r    <tr><td><code>StrafeRight</code></td><td>number</td><td>number</td><td>Alias for <code>TranslateX</code> in the\r      positive direction.</td></tr>\r    <tr><td><code>StrafeLeft</code></td><td>number</td><td>number</td><td>Alias for <code>TranslateX</code> in the\r      negative direction.</td></tr>\r    <tr><td><code>Up</code></td><td>number</td><td>number</td><td>Alias for <code>TranslateY</code> in the positive\r      direction.</td></tr>\r    <tr><td><code>Down</code></td><td>number</td><td>number</td><td>Alias for <code>TranslateY</code> in the negative \r      direction.</td></tr>\r    <tr><td><code>PitchDown</code></td><td>number</td><td>number</td><td>Alias for <code>Pitch</code> in the positive \r      direction.</td></tr>\r    <tr><td><code>PitchUp</code></td><td>number</td><td>number</td><td>Alias for <code>Pitch</code> in the negative\r      direction.</td></tr>\r    <tr><td><code>YawLeft</code></td><td>number</td><td>number</td><td>Alias for <code>Yaw</code> in the positive\r      direction.</td></tr>\r    <tr><td><code>YawRight</code></td><td>number</td><td>number</td><td>Alias for <code>Yaw</code> in the negative \r      direction.</td></tr>\r\r    <tr><td colSpan=4><strong>Deprecated Aliases</strong></td></tr>\r    <tr><td><code>LEFT_HAND</code></td><td>number</td><td>{@link Pose}</td><td><span class=\"important\">Deprecated: This \r      action is deprecated and will be removed. Use <code>LeftHand</code> instead.</span></td></tr>\r    <tr><td><code>RIGHT_HAND</code></td><td>number</td><td>{@link Pose}</td><td><span class=\"important\">Deprecated: This \r      action is deprecated and will be removed. Use <code>RightHand</code> instead.</span></td></tr>\r    <tr><td><code>BOOM_IN</code></td><td>number</td><td>number</td><td><span class=\"important\">Deprecated: This \r      action is deprecated and will be removed. Use <code>BoomIn</code> instead.</span></td></tr>\r    <tr><td><code>BOOM_OUT</code></td><td>number</td><td>number</td><td><span class=\"important\">Deprecated: This \r      action is deprecated and will be removed. Use <code>BoomOut</code> instead.</span></td></tr>\r    <tr><td><code>CONTEXT_MENU</code></td><td>number</td><td>number</td><td><span class=\"important\">Deprecated: This \r      action is deprecated and will be removed. Use <code>ContextMenu</code> instead.</span></td></tr>\r    <tr><td><code>TOGGLE_MUTE</code></td><td>number</td><td>number</td><td><span class=\"important\">Deprecated: This \r      action is deprecated and will be removed. Use <code>ToggleMute</code> instead.</span></td></tr>\r    <tr><td><code>TOGGLE_PUSHTOTALK</code></td><td>number</td><td>number</td><td><span class=\"important\">Deprecated: This \r      action is deprecated and will be removed. Use <code>TogglePushToTalk</code> instead.</span></td></tr>\r    <tr><td><code>SPRINT</code></td><td>number</td><td>number</td><td><span class=\"important\">Deprecated: This \r      action is deprecated and will be removed. Use <code>Sprint</code> instead.</span></td></tr>\r    <tr><td><code>LONGITUDINAL_BACKWARD</code></td><td>number</td><td>number</td><td><span class=\"important\">Deprecated: This \r      action is deprecated and will be removed. Use <code>Backward</code> instead.</span></td></tr>\r    <tr><td><code>LONGITUDINAL_FORWARD</code></td><td>number</td><td>number</td><td><span class=\"important\">Deprecated: This \r      action is deprecated and will be removed. Use <code>Forward</code> instead.</span></td></tr>\r    <tr><td><code>LATERAL_LEFT</code></td><td>number</td><td>number</td><td><span class=\"important\">Deprecated: This \r      action is deprecated and will be removed. Use <code>StrafeLeft</code> instead.</span></td></tr>\r    <tr><td><code>LATERAL_RIGHT</code></td><td>number</td><td>number</td><td><span class=\"important\">Deprecated: This \r      action is deprecated and will be removed. Use <code>StrafeRight</code> instead.</span></td></tr>\r    <tr><td><code>VERTICAL_UP</code></td><td>number</td><td>number</td><td><span class=\"important\">Deprecated: This \r      action is deprecated and will be removed. Use <code>Up</code> instead.</span></td></tr>\r    <tr><td><code>VERTICAL_DOWN</code></td><td>number</td><td>number</td><td><span class=\"important\">Deprecated: This \r      action is deprecated and will be removed. Use <code>Down</code> instead.</span></td></tr>\r    <tr><td><code>PITCH_DOWN</code></td><td>number</td><td>number</td><td><span class=\"important\">Deprecated: This \r      action is deprecated and will be removed. Use <code>PitchDown</code> instead.</span></td></tr>\r    <tr><td><code>PITCH_UP</code></td><td>number</td><td>number</td><td><span class=\"important\">Deprecated: This \r      action is deprecated and will be removed. Use <code>PitchUp</code> instead.</span></td></tr>\r    <tr><td><code>YAW_LEFT</code></td><td>number</td><td>number</td><td><span class=\"important\">Deprecated: This \r      action is deprecated and will be removed. Use <code>YawLeft</code> instead.</span></td></tr>\r    <tr><td><code>YAW_RIGHT</code></td><td>number</td><td>number</td><td><span class=\"important\">Deprecated: This \r      action is deprecated and will be removed. Use <code>YawRight</code> instead.</span></td></tr>\r    <tr><td><code>LEFT_HAND_CLICK</code></td><td>number</td><td>number</td><td><span class=\"important\">Deprecated: This \r      action is deprecated and will be removed. Use <code>LeftHandClick</code> instead.</span></td></tr>\r    <tr><td><code>RIGHT_HAND_CLICK</code></td><td>number</td><td>number</td><td><span class=\"important\">Deprecated: This \r      action is deprecated and will be removed. Use <code>RightHandClick</code> instead.</span></td></tr>\r    <tr><td><code>SHIFT</code></td><td>number</td><td>number</td><td><span class=\"important\">Deprecated: This \r      action is deprecated and will be removed. Use <code>Shift</code> instead.</span></td></tr>\r    <tr><td><code>ACTION1</code></td><td>number</td><td>number</td><td><span class=\"important\">Deprecated: This \r      action is deprecated and will be removed. Use <code>PrimaryAction</code> instead.</span></td></tr>\r    <tr><td><code>ACTION2</code></td><td>number</td><td>number</td><td><span class=\"important\">Deprecated: This \r      action is deprecated and will be removed. Use <code>SecondaryAction</code> instead.</span></td></tr>\r\r    <tr><td colSpan=4><strong>Deprecated Trackers</strong></td><tr>\r    <tr><td><code>TrackedObject00</code></td><td>number</td><td>{@link Pose}</td><td><span class=\"important\">Deprecated: \r      This action is deprecated and will be removed. It takes no action.</span></td></tr>\r    <tr><td><code>TrackedObject01</code></td><td>number</td><td>{@link Pose}</td><td><span class=\"important\">Deprecated: \r      This action is deprecated and will be removed. It takes no action.</span></td></tr>\r    <tr><td><code>TrackedObject02</code></td><td>number</td><td>{@link Pose}</td><td><span class=\"important\">Deprecated: \r      This action is deprecated and will be removed. It takes no action.</span></td></tr>\r    <tr><td><code>TrackedObject03</code></td><td>number</td><td>{@link Pose}</td><td><span class=\"important\">Deprecated: \r      This action is deprecated and will be removed. It takes no action.</span></td></tr>\r    <tr><td><code>TrackedObject04</code></td><td>number</td><td>{@link Pose}</td><td><span class=\"important\">Deprecated: \r      This action is deprecated and will be removed. It takes no action.</span></td></tr>\r    <tr><td><code>TrackedObject05</code></td><td>number</td><td>{@link Pose}</td><td><span class=\"important\">Deprecated: \r      This action is deprecated and will be removed. It takes no action.</span></td></tr>\r    <tr><td><code>TrackedObject06</code></td><td>number</td><td>{@link Pose}</td><td><span class=\"important\">Deprecated: \r      This action is deprecated and will be removed. It takes no action.</span></td></tr>\r    <tr><td><code>TrackedObject07</code></td><td>number</td><td>{@link Pose}</td><td><span class=\"important\">Deprecated: \r      This action is deprecated and will be removed. It takes no action.</span></td></tr>\r    <tr><td><code>TrackedObject08</code></td><td>number</td><td>{@link Pose}</td><td><span class=\"important\">Deprecated: \r      This action is deprecated and will be removed. It takes no action.</span></td></tr>\r    <tr><td><code>TrackedObject09</code></td><td>number</td><td>{@link Pose}</td><td><span class=\"important\">Deprecated: \r      This action is deprecated and will be removed. It takes no action.</span></td></tr>\r    <tr><td><code>TrackedObject10</code></td><td>number</td><td>{@link Pose}</td><td><span class=\"important\">Deprecated: \r      This action is deprecated and will be removed. It takes no action.</span></td></tr>\r    <tr><td><code>TrackedObject11</code></td><td>number</td><td>{@link Pose}</td><td><span class=\"important\">Deprecated: \r      This action is deprecated and will be removed. It takes no action.</span></td></tr>\r    <tr><td><code>TrackedObject12</code></td><td>number</td><td>{@link Pose}</td><td><span class=\"important\">Deprecated: \r      This action is deprecated and will be removed. It takes no action.</span></td></tr>\r    <tr><td><code>TrackedObject13</code></td><td>number</td><td>{@link Pose}</td><td><span class=\"important\">Deprecated: \r      This action is deprecated and will be removed. It takes no action.</span></td></tr>\r    <tr><td><code>TrackedObject14</code></td><td>number</td><td>{@link Pose}</td><td><span class=\"important\">Deprecated: \r      This action is deprecated and will be removed. It takes no action.</span></td></tr>\r    <tr><td><code>TrackedObject15</code></td><td>number</td><td>{@link Pose}</td><td><span class=\"important\">Deprecated: \r      This action is deprecated and will be removed. It takes no action.</span></td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "Actions",
        "type": {
            "names": [
                "object"
            ]
        },
        "memberof": "Controller",
        "longname": "Controller.Actions",
        "scope": "static"
    },
    {
        "description": "<p>Some controller actions may be associated with one or both hands:</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>0</code></td><td>Left hand.</td></tr>\r    <tr><td><code>1</code></td><td>Right hand.</td></tr>\r    <tr><td><code>2</code></td><td>Both hands.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "Hand",
        "type": {
            "names": [
                "number"
            ]
        },
        "memberof": "Controller",
        "longname": "Controller.Hand",
        "scope": "static"
    },
    {
        "description": "<p>The <code>Controller.Hardware</code> object has properties representing standard and hardware-specific controller and \rcomputer outputs, plus predefined actions on Interface and the user's avatar. <em>Read-only.</em></p>\r<p>The outputs can be mapped to actions or functions in a {@link RouteObject} mapping. Additionally, hardware-specific \rcontroller outputs can be mapped to standard controller outputs. \r<p>Controllers typically implement a subset of the {@link Controller.Standard} controls, plus they may implement some extras. \rSome common controllers are included in the table. You can see the outputs provided by these and others by \rviewing their {@link Controller.MappingJSON|MappingJSON} files at \r<a href=\"https://github.com/highfidelity/hifi/tree/master/interface/resources/controllers\">\rhttps://github.com/highfidelity/hifi/tree/master/interface/resources/controllers</a>.</p>\r\r<table>\r  <thead>\r    <tr><th>Property</th><th>Type</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>Controller.Hardware.Actions</code></td><td>object</td><td>Synonym for {@link Controller.Actions}.</td></tr>\r    <tr><td><code>Controller.Hardware.Application</code></td><td>object</td><td>Interface state outputs. See \r      {@link Controller.Hardware-Application}.</td></tr>\r    <tr><td><code>Controller.Hardware.Keyboard</code></td><td>object</td><td>Keyboard, mouse, and touch pad outputs. See\r      {@link Controller.Hardware-Keyboard}.</td></tr>\r    <tr><td><code>Controller.Hardware.OculusTouch</code></td><td>object</td><td>Oculus Rift HMD outputs. See\r      {@link Controller.Hardware-OculusTouch}.</td></tr>\r    <tr><td><code>Controller.Hardware.Vive</code></td><td>object</td><td>Vive HMD outputs. See\r      {@link Controller.Hardware-Vive}.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "Hardware",
        "type": {
            "names": [
                "object"
            ]
        },
        "examples": [
            "<caption>List all the currently available <code>Controller.Hardware</code> properties.</caption>\rfunction printProperties(string, item) {\r    print(string);\r    for (var key in item) {\r        if (item.hasOwnProperty(key)) {\r            printProperties(string + \".\" + key, item[key]);\r        }\r    }\r}\r\rprintProperties(\"Controller.Hardware\", Controller.Hardware);\r\n "
        ],
        "memberof": "Controller",
        "longname": "Controller.Hardware",
        "scope": "static"
    },
    {
        "description": "The pose of a joint or other item relative to the world or a parent.",
        "kind": "typedef",
        "name": "Pose",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "Translation.",
                "name": "translation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "Rotation.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "Velocity in m/s.",
                "name": "velocity"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "Angular velocity in rad/s.",
                "name": "angularVelocity"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the pose is valid, otherwise <code>false</code>.",
                "name": "valid"
            }
        ],
        "longname": "Pose",
        "scope": "global"
    },
    {
        "description": "Gets a list of all available actions.",
        "kind": "function",
        "name": "getAllActions",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Action>"
                    ]
                },
                "description": "All available actions."
            }
        ],
        "deprecated": "This function is deprecated and will be removed. It no longer works.",
        "memberof": "Controller",
        "longname": "Controller.getAllActions",
        "scope": "static"
    },
    {
        "description": "Gets a list of all available inputs for a hardware device.",
        "kind": "function",
        "name": "getAvailableInputs",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer ID of the hardware device.",
                "name": "deviceID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<NamedPair>"
                    ]
                },
                "description": "All available inputs for the device."
            }
        ],
        "deprecated": "This function is deprecated and will be removed. It no longer works.",
        "memberof": "Controller",
        "longname": "Controller.getAvailableInputs",
        "scope": "static"
    },
    {
        "description": "Finds the name of a particular controller from its device ID.",
        "kind": "function",
        "name": "getDeviceName",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The integer ID of the device.",
                "name": "deviceID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the device if found, otherwise <code>\"unknown\"</code>."
            }
        ],
        "examples": [
            "<caption>Get the name of the Oculus Touch controller from its ID.</caption>\rvar deviceID = Controller.findDevice(\"OculusTouch\");\rprint(\"Device ID = \" + deviceID);\r\rvar deviceName = Controller.getDeviceName(deviceID);\rprint(\"Device name = \" + deviceName);"
        ],
        "memberof": "Controller",
        "longname": "Controller.getDeviceName",
        "scope": "static"
    },
    {
        "description": "Gets the current value of an action.",
        "kind": "function",
        "name": "getActionValue",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The integer ID of the action.",
                "name": "actionID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The current value of the action."
            }
        ],
        "examples": [
            "<caption>Periodically report the value of the \"TranslateX\" action.</caption>\rvar actionID = Controller.findAction(\"TranslateX\");\r\rfunction reportValue() {\r    print(Controller.getActionValue(actionID));\r}\rreportTimer = Script.setInterval(reportValue, 1000);"
        ],
        "memberof": "Controller",
        "longname": "Controller.getActionValue",
        "scope": "static"
    },
    {
        "description": "Finds the ID of a specific controller from its device name.",
        "kind": "function",
        "name": "findDevice",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the device to find.",
                "name": "deviceName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The integer ID of the device if available, otherwise <code>65535</code>."
            }
        ],
        "examples": [
            "<caption>Get the ID of the Oculus Touch.</caption>\rvar deviceID = Controller.findDevice(\"OculusTouch\");\rprint(\"Device ID = \" + deviceID);"
        ],
        "memberof": "Controller",
        "longname": "Controller.findDevice",
        "scope": "static"
    },
    {
        "description": "Gets the names of all currently available controller devices plus \"Actions\", \"Application\", and \"Standard\".",
        "kind": "function",
        "name": "getDeviceNames",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "An array of device names."
            }
        ],
        "examples": [
            "<caption>Get the names of all currently available controller devices.</caption>\rvar deviceNames = Controller.getDeviceNames();\rprint(JSON.stringify(deviceNames));\r// [\"Standard\",\"Keyboard\",\"LeapMotion\",\"OculusTouch\",\"Application\",\"Actions\"] or similar."
        ],
        "memberof": "Controller",
        "longname": "Controller.getDeviceNames",
        "scope": "static"
    },
    {
        "description": "Finds the ID of an action from its name.",
        "kind": "function",
        "name": "findAction",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the action: one of the {@link Controller.Actions} property names.",
                "name": "actionName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The integer ID of the action if found, otherwise <code>4095</code>. Note that this value is not \rthe same as the value of the relevant {@link Controller.Actions} property."
            }
        ],
        "examples": [
            "<caption>Get the ID of the \"TranslateY\" action. Compare with the property value.</caption>\rvar actionID = Controller.findAction(\"TranslateY\");\rprint(\"Action ID = \" + actionID);  // 1\rprint(\"Property value = \" + Controller.Actions.TranslateY);  // 537001728 or similar value."
        ],
        "memberof": "Controller",
        "longname": "Controller.findAction",
        "scope": "static"
    },
    {
        "description": "Gets the names of all actions available as properties of {@link Controller.Actions}.",
        "kind": "function",
        "name": "getActionNames",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "An array of action names."
            }
        ],
        "examples": [
            "<caption>Get the names of all actions.</caption>\rvar actionNames = Controller.getActionNames();\rprint(\"Action names: \" + JSON.stringify(actionNames));\r// [\"TranslateX\",\"TranslateY\",\"TranslateZ\",\"Roll\", ..."
        ],
        "memberof": "Controller",
        "longname": "Controller.getActionNames",
        "scope": "static"
    },
    {
        "description": "Gets the value of a controller button or axis output. Note: Also gets the value of a controller axis output.",
        "kind": "function",
        "name": "getValue",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The {@link Controller.Standard} or {@link Controller.Hardware} item.",
                "name": "source"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The current value of the controller item output if <code>source</code> is valid, otherwise \r    <code>0</code>."
            }
        ],
        "examples": [
            "<caption>Report the Standard and Vive right trigger values.</caption>\rvar triggerValue = Controller.getValue(Controller.Standard.RT);\rprint(\"Trigger value: \" + triggerValue);\r\rif (Controller.Hardware.Vive) {\r    triggerValue = Controller.getValue(Controller.Hardware.Vive.RT);\r    print(\"Vive trigger value: \" + triggerValue);\r} else {\r    print(\"No Vive present\");\r}"
        ],
        "memberof": "Controller",
        "longname": "Controller.getValue",
        "scope": "static"
    },
    {
        "description": "Gets the value of a controller axis output. Note: Also gets the value of a controller button output.",
        "kind": "function",
        "name": "getAxisValue",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The {@link Controller.Standard} or {@link Controller.Hardware} item.",
                "name": "source"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The current value of the controller item output if <code>source</code> is valid, otherwise \r    <code>0</code>."
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.getAxisValue",
        "scope": "static"
    },
    {
        "description": "Gets the value of a controller pose output.",
        "kind": "function",
        "name": "getPoseValue",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The {@link Controller.Standard} or {@link Controller.Hardware} pose output.",
                "name": "source"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Pose"
                    ]
                },
                "description": "The current value of the controller pose output if <code>source</code> is a pose output, otherwise \r    an invalid pose with <code>Pose.valid == false</code>."
            }
        ],
        "tags": [
            {
                "originalTitle": "exammple",
                "title": "exammple",
                "text": "<caption>Report the right hand's pose.</caption>\rvar pose = Controller.getPoseValue(Controller.Standard.RightHand);\rprint(\"Pose: \" + JSON.stringify(pose));",
                "value": "<caption>Report the right hand's pose.</caption>\rvar pose = Controller.getPoseValue(Controller.Standard.RightHand);\rprint(\"Pose: \" + JSON.stringify(pose));"
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.getPoseValue",
        "scope": "static"
    },
    {
        "description": "Triggers a haptic pulse on connected and enabled devices that have the capability.",
        "kind": "function",
        "name": "triggerHapticPulse",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The strength of the haptic pulse, range <code>0.0</code> &ndash; <code>1.0</code>.",
                "name": "strength"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The duration of the haptic pulse, in milliseconds.",
                "name": "duration"
            },
            {
                "type": {
                    "names": [
                        "Controller.Hand"
                    ]
                },
                "optional": true,
                "defaultvalue": 2,
                "description": "The hand or hands to trigger the haptic pulse on.",
                "name": "hand"
            }
        ],
        "examples": [
            "<caption>Trigger a haptic pulse on the right hand.</caption>\rvar HAPTIC_STRENGTH = 0.5;\rvar HAPTIC_DURATION = 10;\rvar RIGHT_HAND = 1;\rController.triggerHapticPulse(HAPTIC_STRENGTH, HAPTIC_DURATION, RIGHT_HAND);"
        ],
        "memberof": "Controller",
        "longname": "Controller.triggerHapticPulse",
        "scope": "static"
    },
    {
        "description": "Triggers a 250ms haptic pulse on connected and enabled devices that have the capability.",
        "kind": "function",
        "name": "triggerShortHapticPulse",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The strength of the haptic pulse, range <code>0.0</code> &ndash; <code>1.0</code>.",
                "name": "strength"
            },
            {
                "type": {
                    "names": [
                        "Controller.Hand"
                    ]
                },
                "optional": true,
                "defaultvalue": 2,
                "description": "The hand or hands to trigger the haptic pulse on.",
                "name": "hand"
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.triggerShortHapticPulse",
        "scope": "static"
    },
    {
        "description": "Triggers a haptic pulse on a particular device if connected and enabled and it has the capability.",
        "kind": "function",
        "name": "triggerHapticPulseOnDevice",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the device to trigger the haptic pulse on.",
                "name": "deviceID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The strength of the haptic pulse, range <code>0.0</code> &ndash; <code>1.0</code>.",
                "name": "strength"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The duration of the haptic pulse, in milliseconds.",
                "name": "duration"
            },
            {
                "type": {
                    "names": [
                        "Controller.Hand"
                    ]
                },
                "optional": true,
                "defaultvalue": 2,
                "description": "The hand or hands to trigger the haptic pulse on.",
                "name": "hand"
            }
        ],
        "examples": [
            "<caption>Trigger a haptic pulse on an Oculus Touch controller.</caption>\rvar HAPTIC_STRENGTH = 0.5;\rvar deviceID = Controller.findDevice(\"OculusTouch\");\rvar HAPTIC_DURATION = 10;\rvar RIGHT_HAND = 1;\rController.triggerHapticPulseOnDevice(deviceID, HAPTIC_STRENGTH, HAPTIC_DURATION, RIGHT_HAND);"
        ],
        "memberof": "Controller",
        "longname": "Controller.triggerHapticPulseOnDevice",
        "scope": "static"
    },
    {
        "description": "Triggers a 250ms haptic pulse on a particular device if connected and enabled and it has the capability.",
        "kind": "function",
        "name": "triggerShortHapticPulseOnDevice",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the device to trigger the haptic pulse on.",
                "name": "deviceID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The strength of the haptic pulse, range <code>0.0</code> &ndash; <code>1.0</code>.",
                "name": "strength"
            },
            {
                "type": {
                    "names": [
                        "Controller.Hand"
                    ]
                },
                "optional": true,
                "defaultvalue": 2,
                "description": "The hand or hands to trigger the haptic pulse on.",
                "name": "hand"
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.triggerShortHapticPulseOnDevice",
        "scope": "static"
    },
    {
        "description": "Creates a new controller mapping. Routes can then be added to the mapping using {@link MappingObject} methods and \rrouted to <code>Standard</code> controls, <code>Actions</code>, or script functions using {@link RouteObject} \rmethods. The mapping can then be enabled using {@link Controller.enableMapping|enableMapping} for it to take effect.",
        "kind": "function",
        "name": "newMapping",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "Uuid.generate()",
                "description": "A unique name for the mapping. If not specified a new UUID generated \r    by {@link Uuid(0).generate|Uuid.generate} is used.",
                "name": "mappingName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "MappingObject"
                    ]
                },
                "description": "A controller mapping object."
            }
        ],
        "examples": [
            "<caption>Create a simple mapping that makes the right trigger move your avatar up.</caption>\rvar MAPPING_NAME = \"com.highfidelity.controllers.example.newMapping\";\rvar mapping = Controller.newMapping(MAPPING_NAME);\r\rmapping.from(Controller.Standard.RT).to(Controller.Actions.TranslateY);\rController.enableMapping(MAPPING_NAME);\r\rScript.scriptEnding.connect(function () {\r    Controller.disableMapping(MAPPING_NAME);\r});"
        ],
        "memberof": "Controller",
        "longname": "Controller.newMapping",
        "scope": "static"
    },
    {
        "description": "Enables or disables a controller mapping. When enabled, the routes in the mapping have effect.",
        "kind": "function",
        "name": "enableMapping",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the mapping.",
                "name": "mappingName"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "If <code>true</code> then the mapping is enabled, otherwise it is disabled.",
                "name": "[enable"
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.enableMapping",
        "scope": "static"
    },
    {
        "description": "Disables a controller mapping. When disabled, the routes in the mapping have no effect.",
        "kind": "function",
        "name": "disableMapping",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the mapping.",
                "name": "mappingName"
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.disableMapping",
        "scope": "static"
    },
    {
        "description": "Creates a new controller mapping from a {@link Controller.MappingJSON|MappingJSON} string. Use \r{@link Controller.enableMapping|enableMapping} to enable the mapping for it to take effect.",
        "kind": "function",
        "name": "parseMapping",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "A JSON string of the {@link Controller.MappingJSON|MappingJSON}.",
                "name": "jsonString"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "MappingObject"
                    ]
                },
                "description": "A controller mapping object."
            }
        ],
        "examples": [
            "<caption>Create a simple mapping that makes the right trigger move your avatar up.</caption>\rvar mappingJSON = {\r    \"name\": \"com.highfidelity.controllers.example.jsonMapping\",\r    \"channels\": [\r        { \"from\": \"Standard.RT\", \"to\": \"Actions.TranslateY\" }\r    ]\r};\r\rvar mapping = Controller.parseMapping(JSON.stringify(mappingJSON));\rmapping.enable();\r\rScript.scriptEnding.connect(function () {\r    mapping.disable();\r});"
        ],
        "memberof": "Controller",
        "longname": "Controller.parseMapping",
        "scope": "static"
    },
    {
        "description": "Creates a new controller mapping from a {@link Controller.MappingJSON|MappingJSON} JSON file at a URL. Use \r{@link Controller.enableMapping|enableMapping} to enable the mapping for it to take effect.\r<p><strong>Warning:</strong> This function is not yet implemented; it doesn't load a mapping and just returns \r<code>null</code>.",
        "kind": "function",
        "name": "loadMapping",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL the {@link Controller.MappingJSON|MappingJSON} JSON file.",
                "name": "jsonURL"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "MappingObject"
                    ]
                },
                "description": "A controller mapping object."
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.loadMapping",
        "scope": "static"
    },
    {
        "description": "Gets the {@link Controller.Hardware} property tree. Calling this function is the same as using the {@link Controller} \rproperty, <code>Controller.Hardware</code>.",
        "kind": "function",
        "name": "getHardware",
        "returns": [
            {
                "type": {
                    "names": [
                        "Controller.Hardware"
                    ]
                },
                "description": "The {@link Controller.Hardware} property tree."
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.getHardware",
        "scope": "static"
    },
    {
        "description": "Gets the {@link Controller.Actions} property tree. Calling this function is the same as using the {@link Controller} \rproperty, <code>Controller.Actions</code>.",
        "kind": "function",
        "name": "getActions",
        "returns": [
            {
                "type": {
                    "names": [
                        "Controller.Actions"
                    ]
                },
                "description": "The {@link Controller.Actions} property tree."
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.getActions",
        "scope": "static"
    },
    {
        "description": "Gets the {@link Controller.Standard} property tree. Calling this function is the same as using the {@link Controller} \rproperty, <code>Controller.Standard</code>.",
        "kind": "function",
        "name": "getStandard",
        "returns": [
            {
                "type": {
                    "names": [
                        "Controller.Standard"
                    ]
                },
                "description": "The {@link Controller.Standard} property tree."
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.getStandard",
        "scope": "static"
    },
    {
        "description": "Starts making a recording of currently active controllers.",
        "kind": "function",
        "name": "startInputRecording",
        "examples": [
            "<caption>Make a controller recording.</caption>\r// Delay start of recording for 2s.\rScript.setTimeout(function () {\r    print(\"Start input recording\");\r    Controller.startInputRecording();\r}, 2000);\r\r// Make a 10s recording.\rScript.setTimeout(function () {\r    print(\"Stop input recording\");\r    Controller.stopInputRecording();\r    Controller.saveInputRecording();\r    print(\"Input recording saved in: \" + Controller.getInputRecorderSaveDirectory());\r}, 12000);"
        ],
        "memberof": "Controller",
        "longname": "Controller.startInputRecording",
        "scope": "static"
    },
    {
        "description": "Stops making a recording started by {@link Controller.startInputRecording|startInputRecording}.",
        "kind": "function",
        "name": "stopInputRecording",
        "memberof": "Controller",
        "longname": "Controller.stopInputRecording",
        "scope": "static"
    },
    {
        "description": "Plays back the current recording from the beginning. The current recording may have been recorded by \r{@link Controller.startInputRecording|startInputRecording} and \r{@link Controller.stopInputRecording|stopInputRecording}, or loaded by \r{@link Controller.loadInputRecording|loadInputRecording}. Playback repeats in a loop until \r{@link Controller.stopInputPlayback|stopInputPlayback} is called.",
        "kind": "function",
        "name": "startInputPlayback",
        "examples": [
            "<caption>Play back a controller recording.</caption>\rvar file = Window.browse(\"Select Recording\", Controller.getInputRecorderSaveDirectory());\rif (file !== null) {\r    print(\"Play recording: \" + file);\r    Controller.loadInputRecording(\"file:///\" + file);\r    Controller.startInputPlayback();\r\r    // Stop playback after 20s.\r    Script.setTimeout(function () {\r        print(\"Stop playing recording\");\r        Controller.stopInputPlayback();\r    }, 20000);\r}"
        ],
        "memberof": "Controller",
        "longname": "Controller.startInputPlayback",
        "scope": "static"
    },
    {
        "description": "Stops play back of a recording started by {@link Controller.startInputPlayback|startInputPlayback}.",
        "kind": "function",
        "name": "stopInputPlayback",
        "memberof": "Controller",
        "longname": "Controller.stopInputPlayback",
        "scope": "static"
    },
    {
        "description": "Saves the current recording to a file. The current recording may have been recorded by\r{@link Controller.startInputRecording|startInputRecording} and\r{@link Controller.stopInputRecording|stopInputRecording}, or loaded by\r{@link Controller.loadInputRecording|loadInputRecording}. It is saved in the directory returned by \r{@link Controller.getInputRecorderSaveDirectory|getInputRecorderSaveDirectory}.",
        "kind": "function",
        "name": "saveInputRecording",
        "memberof": "Controller",
        "longname": "Controller.saveInputRecording",
        "scope": "static"
    },
    {
        "description": "Loads an input recording, ready for play back.",
        "kind": "function",
        "name": "loadInputRecording",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path to the recording file, prefixed by <code>\"file:///\"</code>.",
                "name": "file"
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.loadInputRecording",
        "scope": "static"
    },
    {
        "description": "Gets the directory in which input recordings are saved.",
        "kind": "function",
        "name": "getInputRecorderSaveDirectory",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The directory in which input recordings are saved."
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.getInputRecorderSaveDirectory",
        "scope": "static"
    },
    {
        "description": "Gets the names of all the active and running (enabled) input devices.",
        "kind": "function",
        "name": "getRunningInputDevices",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "The list of current active and running input devices."
            }
        ],
        "examples": [
            "<caption>List all active and running input devices.</caption>\rprint(\"Running devices: \" + JSON.stringify(Controller.getRunningInputDeviceNames()));"
        ],
        "memberof": "Controller",
        "longname": "Controller.getRunningInputDevices",
        "scope": "static"
    },
    {
        "description": "Disables processing of mouse \"move\", \"press\", \"double-press\", and \"release\" events into \r{@link Controller.Hardware|Controller.Hardware.Keyboard} outputs.",
        "kind": "function",
        "name": "captureMouseEvents",
        "examples": [
            "<caption>Disable Controller.Hardware.Keyboard mouse events for a short period.</caption>\rvar MAPPING_NAME = \"com.highfidelity.controllers.example.newMapping\";\rvar mapping = Controller.newMapping(MAPPING_NAME);\rmapping.from(Controller.Hardware.Keyboard.MouseX).to(function (x) {\r    print(\"Mouse x = \" + x);\r});\rmapping.from(Controller.Hardware.Keyboard.MouseY).to(function (y) {\r    print(\"Mouse y = \" + y);\r});\rController.enableMapping(MAPPING_NAME);\rScript.scriptEnding.connect(function () {\r    Controller.disableMapping(MAPPING_NAME);\r});\r\rScript.setTimeout(function () {\r    Controller.captureMouseEvents();\r}, 5000);\r\rScript.setTimeout(function () {\r    Controller.releaseMouseEvents();\r}, 10000);"
        ],
        "memberof": "Controller",
        "longname": "Controller.captureMouseEvents",
        "scope": "static"
    },
    {
        "description": "Enables processing of mouse \"move\", \"press\", \"double-press\", and \"release\" events into \r{@link Controller.Hardware-Keyboard|Controller.Hardware.Keyboard} outputs that were disabled using \r{@link Controller.captureMouseEvents|captureMouseEvents}.",
        "kind": "function",
        "name": "releaseMouseEvents",
        "memberof": "Controller",
        "longname": "Controller.releaseMouseEvents",
        "scope": "static"
    },
    {
        "description": "Disables processing of touch \"begin\", \"update\", and \"end\" events into \r{@link Controller.Hardware|Controller.Hardware.Keyboard}, \r{@link Controller.Hardware|Controller.Hardware.Touchscreen}, and \r{@link Controller.Hardware|Controller.Hardware.TouchscreenVirtualPad} outputs.",
        "kind": "function",
        "name": "captureTouchEvents",
        "memberof": "Controller",
        "longname": "Controller.captureTouchEvents",
        "scope": "static"
    },
    {
        "description": "Enables processing of touch \"begin\", \"update\", and \"end\" events into \r{@link Controller.Hardware|Controller.Hardware.Keyboard}, \r{@link Controller.Hardware|Controller.Hardware.Touchscreen}, and \r{@link Controller.Hardware|Controller.Hardware.TouchscreenVirtualPad} outputs that were disabled using \r{@link Controller.captureTouchEvents|captureTouchEvents}.",
        "kind": "function",
        "name": "releaseTouchEvents",
        "memberof": "Controller",
        "longname": "Controller.releaseTouchEvents",
        "scope": "static"
    },
    {
        "description": "Disables processing of mouse wheel rotation events into {@link Controller.Hardware|Controller.Hardware.Keyboard} \routputs.",
        "kind": "function",
        "name": "captureWheelEvents",
        "memberof": "Controller",
        "longname": "Controller.captureWheelEvents",
        "scope": "static"
    },
    {
        "description": "Enables processing of mouse wheel rotation events into {@link Controller.Hardware|Controller.Hardware.Keyboard} \routputs that wer disabled using {@link Controller.captureWheelEvents|captureWheelEvents}.",
        "kind": "function",
        "name": "releaseWheelEvents",
        "memberof": "Controller",
        "longname": "Controller.releaseWheelEvents",
        "scope": "static"
    },
    {
        "description": "Disables translating and rotating the user's avatar in response to keyboard and controller controls.",
        "kind": "function",
        "name": "captureActionEvents",
        "examples": [
            "<caption>Disable avatar translation and rotation for a short period.</caption>\rScript.setTimeout(function () {\r    Controller.captureActionEvents();\r}, 5000);\r\rScript.setTimeout(function () {\r    Controller.releaseActionEvents();\r}, 10000);"
        ],
        "memberof": "Controller",
        "longname": "Controller.captureActionEvents",
        "scope": "static"
    },
    {
        "description": "Enables translating and rotating the user's avatar in response to keyboard and controller controls that were disabled \rusing {@link Controller.captureActionEvents|captureActionEvents}.",
        "kind": "function",
        "name": "releaseActionEvents",
        "memberof": "Controller",
        "longname": "Controller.releaseActionEvents",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "updateRunningInputDevices",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Device name.",
                "name": "deviceName"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Is running.",
                "name": "isRunning"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "Running devices.",
                "name": "runningDevices"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Controller",
        "longname": "Controller.updateRunningInputDevices",
        "scope": "static"
    },
    {
        "description": "Triggered when an action occurs.",
        "kind": "signal",
        "name": "actionEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the action, per {@link Controller.findAction|findAction}.",
                "name": "actionID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The value associated with the action.",
                "name": "value"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report action events as they occur.</caption>\rvar actionNamesForID = {};\rvar actionNames = Controller.getActionNames();\rfor (var i = 0, length = actionNames.length; i < length; i++) {\r    actionNamesForID[Controller.findAction(actionNames[i])] = actionNames[i];\r}\r\rfunction onActionEvent(action, value) {\r    print(\"onActionEvent() : \" + action + \" ( \" + actionNamesForID[action] + \" ) ; \" + value);\r}\r\rController.actionEvent.connect(onActionEvent);\r\rScript.scriptEnding.connect(function () {\r    Controller.actionEvent.disconnect(onActionEvent);\r});"
        ],
        "memberof": "Controller",
        "longname": "Controller.actionEvent",
        "scope": "static"
    },
    {
        "description": "Triggered when there is a new controller input event.",
        "kind": "signal",
        "name": "inputEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The input action, per {@link Controller.Standard}.",
                "name": "action"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The value associated with the input action.",
                "name": "value"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report input events as they occur.</caption>\rvar inputNamesForID = {};\rfor (var property in Controller.Standard) {\r    inputNamesForID[Controller.Standard[property]] = \"Controller.Standard.\" + property;\r}\r\rfunction onInputEvent(input, value) {\r    print(\"onInputEvent() : \" + input + \" ( \" + inputNamesForID[input] + \" ) ; \" + value);\r}\r\rController.inputEvent.connect(onInputEvent);\r\rScript.scriptEnding.connect(function () {\r    Controller.inputEvent.disconnect(onInputEvent);\r});"
        ],
        "memberof": "Controller",
        "longname": "Controller.inputEvent",
        "scope": "static"
    },
    {
        "description": "Triggered when a device is registered or unregistered by a plugin. Not all plugins generate \r<code>hardwareChanged</code> events: for example, connecting or disconnecting a mouse will not generate an event but \rconnecting or disconnecting an Xbox controller will.",
        "kind": "signal",
        "name": "hardwareChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.hardwareChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when an input device starts or stops being active and running (enabled). For example, enabling or \rdisabling the LeapMotion in Settings &gt; Controls &gt; Calibration will trigger this signal.",
        "kind": "signal",
        "name": "inputDeviceRunningChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the device.",
                "name": "deviceName"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the device is active and running, <code>false</code> if it isn't.",
                "name": "isRunning"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.inputDeviceRunningChanged",
        "scope": "static"
    },
    {
        "description": "<p>The <code>Controller.Standard</code> object has properties representing standard controller outputs. Those for physical \rcontrollers are based on the XBox controller, with aliases for PlayStation. The property values are integer IDs, uniquely \ridentifying each output. <em>Read-only.</em></p>\r<p>These outputs can be mapped to actions or functions in a {@link RouteObject} mapping. The data value provided by each \rcontrol is either a number or a {@link Pose}. Numbers are typically normalized to <code>0.0</code> or <code>1.0</code> for \rbutton states, the range <code>0.0</code> &ndash; <code>1.0</code> for unidirectional scales, and the range \r<code>-1.0</code> &ndash; <code>1.0</code> for bidirectional scales.</p>\r<p>Each hardware device has a mapping from its outputs to a subset of <code>Controller.Standard</code> items, specified in a \rJSON file. For example, \r<a href=\"https://github.com/highfidelity/hifi/blob/master/interface/resources/controllers/vive.json\">vive.json</a>\rand <a href=\"https://github.com/highfidelity/hifi/blob/master/interface/resources/controllers/leapmotion.json\">\rleapmotion.json</a>.</p>\r\r<table>\r  <thead>\r      <tr><th>Property</th><th>Type</th><th>Data</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r\r    <tr><td colspan=\"4\"><strong>Buttons</strong></td></tr>\r    <tr><td><code>A</code></td><td>number</td><td>number</td><td>\"A\" button pressed.</td></tr>\r    <tr><td><code>B</code></td><td>number</td><td>number</td><td>\"B\" button pressed.</td></tr>\r    <tr><td><code>X</code></td><td>number</td><td>number</td><td>\"X\" button pressed.</td></tr>\r    <tr><td><code>Y</code></td><td>number</td><td>number</td><td>\"Y\" button pressed.</td></tr>\r    <tr><td><code>DL</code></td><td>number</td><td>number</td><td>D-pad left pressed.</td></tr>\r    <tr><td><code>DR</code></td><td>number</td><td>number</td><td>D-pad right pressed.</td></tr>\r    <tr><td><code>DU</code></td><td>number</td><td>number</td><td>D-pad up pressed.</td></tr>\r    <tr><td><code>DD</code></td><td>number</td><td>number</td><td>D-pad down pressed.</td></tr>\r    <tr><td><code>Start</code></td><td>number</td><td>number</td><td>\"Start\" center button pressed.</td></tr>\r    <tr><td><code>Back</code></td><td>number</td><td>number</td><td>\"Back\" center button pressed.</td></tr>\r    <tr><td><code>LB</code></td><td>number</td><td>number</td><td>Left bumper button pressed.</td></tr>\r    <tr><td><code>RB</code></td><td>number</td><td>number</td><td>Right bumper button pressed.</td></tr>\r\r    <tr><td colspan=\"4\"><strong>Sticks</strong></td></tr>\r    <tr><td><code>LX</code></td><td>number</td><td>number</td><td>Left stick x-axis scale.</td></tr>\r    <tr><td><code>LY</code></td><td>number</td><td>number</td><td>Left stick y-axis scale.</td></tr>\r    <tr><td><code>RX</code></td><td>number</td><td>number</td><td>Right stick x-axis scale.</td></tr>\r    <tr><td><code>RY</code></td><td>number</td><td>number</td><td>Right stick y-axis scale.</td></tr>\r    <tr><td><code>LS</code></td><td>number</td><td>number</td><td>Left stick button pressed.</td></tr>\r    <tr><td><code>RS</code></td><td>number</td><td>number</td><td>Right stick button pressed.</td></tr>\r    <tr><td><code>LSTouch</code></td><td>number</td><td>number</td><td>Left stick is touched.</td></tr>\r    <tr><td><code>RSTouch</code></td><td>number</td><td>number</td><td>Right stick is touched.</td></tr>\r\r    <tr><td colspan=\"4\"><strong>Triggers</strong></td></tr>\r    <tr><td><code>LT</code></td><td>number</td><td>number</td><td>Left trigger scale.</td></tr>\r    <tr><td><code>RT</code></td><td>number</td><td>number</td><td>Right trigger scale.</td></tr>\r    <tr><td><code>LTClick</code></td><td>number</td><td>number</td><td>Left trigger click.</td></tr>\r    <tr><td><code>RTClick</code></td><td>number</td><td>number</td><td>Right trigger click.</td></tr>\r    <tr><td><code>LeftGrip</code></td><td>number</td><td>number</td><td>Left grip scale.</td></tr>\r    <tr><td><code>RightGrip</code></td><td>number</td><td>number</td><td>Right grip scale.</td></tr>\r    <tr><td><code>LeftGripTouch</code></td><td>number</td><td>number</td><td>Left grip is touched.</td></tr>\r    <tr><td><code>RightGripTouch</code></td><td>number</td><td>number</td><td>Right grip is touched.</td></tr>\r\r    <tr><td colspan=\"4\"><strong>Aliases, PlayStation Style Names</strong></td></tr>\r    <tr><td><code>Cross</code></td><td>number</td><td>number</td><td>Alias for <code>A</code>.</td></tr>\r    <tr><td><code>Circle</code></td><td>number</td><td>number</td><td>Alias for <code>B</code>.</td></tr>\r    <tr><td><code>Square</code></td><td>number</td><td>number</td><td>Alias for <code>X</code>.</td></tr>\r    <tr><td><code>Triangle</code></td><td>number</td><td>number</td><td>Alias for <code>Y</code>.</td></tr>\r    <tr><td><code>Left</code></td><td>number</td><td>number</td><td>Alias for <code>DL</code>.</td></tr>\r    <tr><td><code>Right</code></td><td>number</td><td>number</td><td>Alias for <code>DR</code>.</td></tr>\r    <tr><td><code>Up</code></td><td>number</td><td>number</td><td>Alias for <code>DU</code>.</td></tr>\r    <tr><td><code>Down</code></td><td>number</td><td>number</td><td>Alias for <code>DD</code>.</td></tr>\r    <tr><td><code>Select</code></td><td>number</td><td>number</td><td>Alias for <code>Back</code>.</td></tr>\r    <tr><td><code>L1</code></td><td>number</td><td>number</td><td>Alias for <code>LB</code>.</td></tr>\r    <tr><td><code>R1</code></td><td>number</td><td>number</td><td>Alias for <code>RB</code>.</td></tr>\r    <tr><td><code>L3</code></td><td>number</td><td>number</td><td>Alias for <code>LS</code>.</td></tr>\r    <tr><td><code>R3</code></td><td>number</td><td>number</td><td>Alias for <code>RS</code>.</td></tr>\r    <tr><td><code>L2</code></td><td>number</td><td>number</td><td>Alias for <code>LT</code>.</td></tr>\r    <tr><td><code>R2</code></td><td>number</td><td>number</td><td>Alias for <code>RT</code>.</td></tr>\r\r    <tr><td colspan=\"4\"><strong>Finger Abstractions</strong></td></tr>\r    <tr><td><code>LeftPrimaryThumb</code></td><td>number</td><td>number</td><td>Left primary thumb button pressed.</td></tr>\r    <tr><td><code>LeftSecondaryThumb</code></td><td>number</td><td>number</td><td>Left secondary thumb button pressed.\r      </td></tr>\r    <tr><td><code>RightPrimaryThumb</code></td><td>number</td><td>number</td><td>Right primary thumb button pressed.\r      </td></tr>\r    <tr><td><code>RightSecondaryThumb</code></td><td>number</td><td>number</td><td>Right secondary thumb button pressed.\r      </td></tr>\r    <tr><td><code>LeftPrimaryThumbTouch</code></td><td>number</td><td>number</td><td>Left thumb touching primary thumb \r      button.</td></tr>\r    <tr><td><code>LeftSecondaryThumbTouch</code></td><td>number</td><td>number</td><td>Left thumb touching secondary thumb \r      button.</td></tr>\r    <tr><td><code>LeftThumbUp</code></td><td>number</td><td>number</td><td>Left thumb not touching primary or secondary \r      thumb buttons.</td></tr>\r    <tr><td><code>RightPrimaryThumbTouch</code></td><td>number</td><td>number</td><td>Right thumb touching primary thumb \r      button.</td></tr>\r    <tr><td><code>RightSecondaryThumbTouch</code></td><td>number</td><td>number</td><td>Right thumb touching secondary thumb \r      button.</td></tr>\r    <tr><td><code>RightThumbUp</code></td><td>number</td><td>number</td><td>Right thumb not touching primary or secondary \r      thumb buttons.</td></tr>\r    <tr><td><code>LeftPrimaryIndex</code></td><td>number</td><td>number</td><td>Left primary index control pressed.</td></tr>\r    <tr><td><code>LeftSecondaryIndex</code></td><td>number</td><td>number</td><td>Left secondary index control pressed.\r      </td></tr>\r    <tr><td><code>RightPrimaryIndex</code></td><td>number</td><td>number</td><td>Right primary index control pressed. \r      </td></tr>\r    <tr><td><code>RightSecondaryIndex</code></td><td>number</td><td>number</td><td>Right secondary index control pressed.\r      </td></tr>\r    <tr><td><code>LeftPrimaryIndexTouch</code></td><td>number</td><td>number</td><td>Left index finger is touching primary \r      index finger control.</td></tr>\r    <tr><td><code>LeftSecondaryIndexTouch</code></td><td>number</td><td>number</td><td>Left index finger is touching \r      secondary index finger control.</td></tr>\r    <tr><td><code>LeftIndexPoint</code></td><td>number</td><td>number</td><td>Left index finger is pointing, not touching \r      primary or secondary index finger controls.</td></tr>\r    <tr><td><code>RightPrimaryIndexTouch</code></td><td>number</td><td>number</td><td>Right index finger is touching primary \r      index finger control.</td></tr>\r    <tr><td><code>RightSecondaryIndexTouch</code></td><td>number</td><td>number</td><td>Right index finger is touching \r      secondary index finger control.</td></tr>\r    <tr><td><code>RightIndexPoint</code></td><td>number</td><td>number</td><td>Right index finger is pointing, not touching \r      primary or secondary index finger controls.</td></tr>\r\r    <tr><td colspan=\"4\"><strong>Avatar Skeleton</strong></td></tr>\r    <tr><td><code>Hips</code></td><td>number</td><td>{@link Pose}</td><td>Hips pose.</td></tr>\r    <tr><td><code>Spine2</code></td><td>number</td><td>{@link Pose}</td><td>Spine2 pose.</td></tr>\r    <tr><td><code>Head</code></td><td>number</td><td>{@link Pose}</td><td>Head pose.</td></tr>\r    <tr><td><code>LeftArm</code></td><td>number</td><td>{@link Pose}</td><td>Left arm pose.</td></tr>\r    <tr><td><code>RightArm</code></td><td>number</td><td>{@link Pose}</td><td>Right arm pose</td></tr>\r    <tr><td><code>LeftHand</code></td><td>number</td><td>{@link Pose}</td><td>Left hand pose.</td></tr>\r    <tr><td><code>LeftHandThumb1</code></td><td>number</td><td>{@link Pose}</td><td>Left thumb 1 finger joint pose.</td></tr>\r    <tr><td><code>LeftHandThumb2</code></td><td>number</td><td>{@link Pose}</td><td>Left thumb 2 finger joint pose.</td></tr>\r    <tr><td><code>LeftHandThumb3</code></td><td>number</td><td>{@link Pose}</td><td>Left thumb 3 finger joint pose.</td></tr>\r    <tr><td><code>LeftHandThumb4</code></td><td>number</td><td>{@link Pose}</td><td>Left thumb 4 finger joint pose.</td></tr>\r    <tr><td><code>LeftHandIndex1</code></td><td>number</td><td>{@link Pose}</td><td>Left index 1 finger joint pose.</td></tr>\r    <tr><td><code>LeftHandIndex2</code></td><td>number</td><td>{@link Pose}</td><td>Left index 2 finger joint pose.</td></tr>\r    <tr><td><code>LeftHandIndex3</code></td><td>number</td><td>{@link Pose}</td><td>Left index 3 finger joint pose.</td></tr>\r    <tr><td><code>LeftHandIndex4</code></td><td>number</td><td>{@link Pose}</td><td>Left index 4 finger joint pose.</td></tr>\r    <tr><td><code>LeftHandMiddle1</code></td><td>number</td><td>{@link Pose}</td><td>Left middle 1 finger joint pose.\r      </td></tr>\r    <tr><td><code>LeftHandMiddle2</code></td><td>number</td><td>{@link Pose}</td><td>Left middle 2 finger joint pose.\r      </td></tr>\r    <tr><td><code>LeftHandMiddle3</code></td><td>number</td><td>{@link Pose}</td><td>Left middle 3 finger joint pose.\r      </td></tr>\r    <tr><td><code>LeftHandMiddle4</code></td><td>number</td><td>{@link Pose}</td><td>Left middle 4 finger joint pose.\r      </td></tr>\r    <tr><td><code>LeftHandRing1</code></td><td>number</td><td>{@link Pose}</td><td>Left ring 1 finger joint pose.</td></tr>\r    <tr><td><code>LeftHandRing2</code></td><td>number</td><td>{@link Pose}</td><td>Left ring 2 finger joint pose.</td></tr>\r    <tr><td><code>LeftHandRing3</code></td><td>number</td><td>{@link Pose}</td><td>Left ring 3 finger joint pose.</td></tr>\r    <tr><td><code>LeftHandRing4</code></td><td>number</td><td>{@link Pose}</td><td>Left ring 4 finger joint pose.</td></tr>\r    <tr><td><code>LeftHandPinky1</code></td><td>number</td><td>{@link Pose}</td><td>Left pinky 1 finger joint pose.</td></tr>\r    <tr><td><code>LeftHandPinky2</code></td><td>number</td><td>{@link Pose}</td><td>Left pinky 2 finger joint pose.</td></tr>\r    <tr><td><code>LeftHandPinky3</code></td><td>number</td><td>{@link Pose}</td><td>Left pinky 3 finger joint pose.</td></tr>\r    <tr><td><code>LeftHandPinky4</code></td><td>number</td><td>{@link Pose}</td><td>Left pinky 4 finger joint pose.</td></tr>\r    <tr><td><code>RightHand</code></td><td>number</td><td>{@link Pose}</td><td>Right hand pose.</td></tr>\r    <tr><td><code>RightHandThumb1</code></td><td>number</td><td>{@link Pose}</td><td>Right thumb 1 finger joint pose.\r      </td></tr>\r    <tr><td><code>RightHandThumb2</code></td><td>number</td><td>{@link Pose}</td><td>Right thumb 2 finger joint pose.\r      </td></tr>\r    <tr><td><code>RightHandThumb3</code></td><td>number</td><td>{@link Pose}</td><td>Right thumb 3 finger joint pose.\r      </td></tr>\r    <tr><td><code>RightHandThumb4</code></td><td>number</td><td>{@link Pose}</td><td>Right thumb 4 finger joint pose.\r      </td></tr>\r    <tr><td><code>RightHandIndex1</code></td><td>number</td><td>{@link Pose}</td><td>Right index 1 finger joint pose.\r      </td></tr>\r    <tr><td><code>RightHandIndex2</code></td><td>number</td><td>{@link Pose}</td><td>Right index 2 finger joint pose.\r      </td></tr>\r    <tr><td><code>RightHandIndex3</code></td><td>number</td><td>{@link Pose}</td><td>Right index 3 finger joint pose.\r      </td></tr>\r    <tr><td><code>RightHandIndex4</code></td><td>number</td><td>{@link Pose}</td><td>Right index 4 finger joint pose.\r      </td></tr>\r    <tr><td><code>RightHandMiddle1</code></td><td>number</td><td>{@link Pose}</td><td>Right middle 1 finger joint pose.\r      </td></tr>\r    <tr><td><code>RightHandMiddle2</code></td><td>number</td><td>{@link Pose}</td><td>Right middle 2 finger joint pose.\r      </td></tr>\r    <tr><td><code>RightHandMiddle3</code></td><td>number</td><td>{@link Pose}</td><td>Right middle 3 finger joint pose.\r      </td></tr>\r    <tr><td><code>RightHandMiddle4</code></td><td>number</td><td>{@link Pose}</td><td>Right middle 4 finger joint pose.\r      </td></tr>\r    <tr><td><code>RightHandRing1</code></td><td>number</td><td>{@link Pose}</td><td>Right ring 1 finger joint pose.</td></tr>\r    <tr><td><code>RightHandRing2</code></td><td>number</td><td>{@link Pose}</td><td>Right ring 2 finger joint pose.</td></tr>\r    <tr><td><code>RightHandRing3</code></td><td>number</td><td>{@link Pose}</td><td>Right ring 3 finger joint pose.</td></tr>\r    <tr><td><code>RightHandRing4</code></td><td>number</td><td>{@link Pose}</td><td>Right ring 4 finger joint pose.</td></tr>\r    <tr><td><code>RightHandPinky1</code></td><td>number</td><td>{@link Pose}</td><td>Right pinky 1 finger joint pose.\r      </td></tr>\r    <tr><td><code>RightHandPinky2</code></td><td>number</td><td>{@link Pose}</td><td>Right pinky 2 finger joint pose.\r      </td></tr>\r    <tr><td><code>RightHandPinky3</code></td><td>number</td><td>{@link Pose}</td><td>Right pinky 3 finger joint pose.\r      </td></tr>\r    <tr><td><code>RightHandPinky4</code></td><td>number</td><td>{@link Pose}</td><td>Right pinky 4 finger joint pose.\r      </td></tr>\r    <tr><td><code>LeftFoot</code></td><td>number</td><td>{@link Pose}</td><td>Left foot pose.</td></tr>\r    <tr><td><code>RightFoot</code></td><td>number</td><td>{@link Pose}</td><td>Right foot pose.</td></tr>\r\r    <tr><td colspan=\"4\"><strong>Trackers</strong></td></tr>\r    <tr><td><code>TrackedObject00</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 0 pose.</td></tr>\r    <tr><td><code>TrackedObject01</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 1 pose.</td></tr>\r    <tr><td><code>TrackedObject02</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 2 pose.</td></tr>\r    <tr><td><code>TrackedObject03</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 3 pose.</td></tr>\r    <tr><td><code>TrackedObject04</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 4 pose.</td></tr>\r    <tr><td><code>TrackedObject05</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 5 pose.</td></tr>\r    <tr><td><code>TrackedObject06</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 6 pose.</td></tr>\r    <tr><td><code>TrackedObject07</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 7 pose.</td></tr>\r    <tr><td><code>TrackedObject08</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 8 pose.</td></tr>\r    <tr><td><code>TrackedObject09</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 9 pose.</td></tr>\r    <tr><td><code>TrackedObject10</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 10 pose.</td></tr>\r    <tr><td><code>TrackedObject11</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 11 pose.</td></tr>\r    <tr><td><code>TrackedObject12</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 12 pose.</td></tr>\r    <tr><td><code>TrackedObject13</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 13 pose.</td></tr>\r    <tr><td><code>TrackedObject14</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 14 pose.</td></tr>\r    <tr><td><code>TrackedObject15</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 15 pose.</td></tr>\r\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "Standard",
        "type": {
            "names": [
                "object"
            ]
        },
        "memberof": "Controller",
        "longname": "Controller.Standard",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p><p>A {@link Controller} mapping object that can contain a set of routes that map:</p>\r<ul>\r    <li>{@link Controller.Standard} outputs to {@link Controller.Actions} actions or script functions.</li>\r    <li>{@link Controller.Hardware} outputs to {@link Controller.Standard} outputs, {@link Controller.Actions} actions, or \r    script functions.</li>\r</ul>\r\r<p>Create by one of the following methods:</p>\r<ul>\r    <li>Use {@link Controller.newMapping} to create the mapping object, add routes using {@link MappingObject#from|from} or\r    {@link MappingObject#makeAxis|makeAxis}, and map the routes to actions or functions using {@link RouteObject} \r    methods.</li>\r    <li>Use {@link Controller.parseMapping} or {@link Controller.loadMapping} to load a {@link Controller.MappingJSON}.</li>\r</ul>\r\r<p>Enable the mapping using {@link MappingObject#enable|enable} or {@link Controller.enableMapping} for it to take \reffect.</p>\r\r<p>Mappings and their routes are applied according to the following rules:</p>\r<ul>\r    <li>One read per output: after a controller output has been read, it can't be read again. Exception: You can use \r    {@link RouteObject#peek} to read a value without marking that output as having been read.</li>\r    <li>Existing mapping routes take precedence over new mapping routes: within a mapping, if a route is added for a control \r    output that already has a route the new route is ignored.</li>\r    <li>New mappings override previous mappings: each output is processed using the route in the most recently enabled \r    mapping that contains that output.</li>\r</ul>",
        "kind": "class",
        "name": "MappingObject",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "longname": "MappingObject",
        "scope": "global"
    },
    {
        "description": "A {@link MappingObject} can be specified in JSON format. A simple example is provided below. Full examples &mdash; the \rdefault mappings provided in Interface &mdash;  can be found at \r<a href=\"https://github.com/highfidelity/hifi/tree/master/interface/resources/controllers\">\rhttps://github.com/highfidelity/hifi/tree/master/interface/resources/controllers</a>.",
        "kind": "typedef",
        "name": "MappingJSON",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the mapping.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Array.<Controller.MappingJSONRoute>"
                    ]
                },
                "description": "An array of routes.",
                "name": "channels"
            }
        ],
        "examples": [
            "<caption>A simple mapping JSON that makes the right trigger move your avatar up after a dead zone.</caption>\r{\r    \"name\": \"com.highfidelity.controllers.example.jsonMapping\",\r    \"channels\": [\r        { \r            \"from\": \"Standard.RT\", \r            \"filters\": { \"type\": \"deadZone\", \"min\": 0.05 },\r            \"to\": \"Actions.TranslateY\"\r        }\r    ]\r}"
        ],
        "memberof": "Controller",
        "longname": "Controller.MappingJSON",
        "scope": "static"
    },
    {
        "description": "A route in a {@link Controller.MappingJSON}.",
        "kind": "typedef",
        "name": "MappingJSONRoute",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string",
                        "Controller.MappingJSONAxis"
                    ]
                },
                "description": "The name of a {@link Controller.Hardware} property or an axis made from \r    them. If a property name, the leading <code>\"Controller.Hardware.\"</code> can be omitted.",
                "name": "from"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If <code>true</code>, then peeking is enabled per {@link RouteObject#peek}.",
                "name": "peek"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If <code>true</code>, then debug is enabled per {@link RouteObject#debug}.",
                "name": "debug"
            },
            {
                "type": {
                    "names": [
                        "string",
                        "Array.<string>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "One or more numeric {@link Controller.Hardware} property names which are evaluated \r    as booleans and ANDed together. Prepend a property name with a <code>!</code> to do a logical NOT. The leading \r    <code>\"Controller.Hardware.\"</code> can be omitted from the property names.",
                "name": "when"
            },
            {
                "type": {
                    "names": [
                        "Controller.MappingJSONFilter",
                        "Array.<Controller.MappingJSONFilter>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "One or more filters in the route.",
                "name": "filters"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of a {@link Controller.Actions} or {@link Controller.Standard} property. The leading \r    <code>\"Controller.\"</code> can be omitted.",
                "name": "to"
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.MappingJSONRoute",
        "scope": "static"
    },
    {
        "description": "An axis pair in a {@link Controller.MappingJSONRoute}.",
        "kind": "typedef",
        "name": "MappingJSONAxis",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Array.<Array.<string>>"
                    ]
                },
                "description": "A two-member array of single-member arrays of {@link Controller.Hardware} property names. \rThe leading <code>\"Controller.Hardware.\"</code> can be omitted from the property names.",
                "name": "makeAxis"
            }
        ],
        "examples": [
            "<caption>An axis using the keyboard's left and right keys.</caption>\r{ \"makeAxis\" : [\r        [\"Keyboard.Left\"],\r        [\"Keyboard.Right\"]\r    ]\r}"
        ],
        "memberof": "Controller",
        "longname": "Controller.MappingJSONAxis",
        "scope": "static"
    },
    {
        "description": "A filter in a {@link Controller.MappingJSONRoute}.",
        "kind": "typedef",
        "name": "MappingJSONFilter",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the filter, being the name of the one of the {@link RouteObject}'s filter methods.",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "If the filter method has a first parameter, the property name is the name of that parameter and the \r    property value is the value to use.",
                "name": "?"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "If the filter method has a second parameter, the property name  is the name of that parameter and \r    the property value is the value to use.",
                "name": "?"
            }
        ],
        "examples": [
            "<caption>A hysteresis filter.</caption>\r{ \r    \"type\": \"hysteresis\", \r    \"min\": 0.85, \r    \"max\": 0.9\r}"
        ],
        "memberof": "Controller",
        "longname": "Controller.MappingJSONFilter",
        "scope": "static"
    },
    {
        "description": "Creates a new {@link RouteObject} from a controller output, ready to be mapped to a standard control, action, or \rfunction.\r<p>This is a QML-specific version of {@link MappingObject#from|from}: use this version in QML files.</p>",
        "kind": "function",
        "name": "fromQml",
        "params": [
            {
                "type": {
                    "names": [
                        "Controller.Standard",
                        "Controller.Hardware",
                        "function"
                    ]
                },
                "description": "The controller output or function that is the source\r    of the route data. If a function, it must return a number or a {@link Pose} value as the route data.",
                "name": "source"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "A route ready for mapping to an action or function using {@link RouteObject} methods."
            }
        ],
        "memberof": "MappingObject",
        "longname": "MappingObject#fromQml",
        "scope": "instance"
    },
    {
        "description": "Creates a new {@link RouteObject} from two numeric {@link Controller.Hardware} outputs, one applied in the negative \rdirection and the other in the positive direction, ready to be mapped to a standard control, action, or function.\r<p>This is a QML-specific version of {@link MappingObject#makeAxis|makeAxis}: use this version in QML files.</p>",
        "kind": "function",
        "name": "makeAxisQml",
        "params": [
            {
                "type": {
                    "names": [
                        "Controller.Hardware"
                    ]
                },
                "description": "The first, negative-direction controller output.",
                "name": "source1"
            },
            {
                "type": {
                    "names": [
                        "Controller.Hardware"
                    ]
                },
                "description": "The second, positive-direction controller output.",
                "name": "source2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "A route ready for mapping to an action or function using {@link RouteObject} methods. The data \r    value passed to the route is the combined value of <code>source2 - source1</code>."
            }
        ],
        "memberof": "MappingObject",
        "longname": "MappingObject#makeAxisQml",
        "scope": "instance"
    },
    {
        "description": "Creates a new {@link RouteObject} from a controller output, ready to be mapped to a standard control, action, or \rfunction.",
        "kind": "function",
        "name": "from",
        "params": [
            {
                "type": {
                    "names": [
                        "Controller.Standard",
                        "Controller.Hardware",
                        "function"
                    ]
                },
                "description": "The controller output or function that is the source \r    of the route data. If a function, it must return a number or a {@link Pose} value as the route data.",
                "name": "source"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "A route ready for mapping to an action or function using {@link RouteObject} methods."
            }
        ],
        "memberof": "MappingObject",
        "longname": "MappingObject#from",
        "scope": "instance"
    },
    {
        "description": "Creates a new {@link RouteObject} from two numeric {@link Controller.Hardware} outputs, one applied in the negative \rdirection and the other in the positive direction, ready to be mapped to a standard control, action, or function.",
        "kind": "function",
        "name": "makeAxis",
        "params": [
            {
                "type": {
                    "names": [
                        "Controller.Hardware"
                    ]
                },
                "description": "The first, negative-direction controller output.",
                "name": "source1"
            },
            {
                "type": {
                    "names": [
                        "Controller.Hardware"
                    ]
                },
                "description": "The second, positive-direction controller output.",
                "name": "source2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "A route ready for mapping to an action or function using {@link RouteObject} methods. The data\r    value passed to the route is the combined value of <code>source2 - source1</code>."
            }
        ],
        "examples": [
            "<caption>Make the Oculus Touch triggers move your avatar up and down.</caption>\rvar MAPPING_NAME = \"com.highfidelity.controllers.example.newMapping\";\rvar mapping = Controller.newMapping(MAPPING_NAME);\rmapping\r    .makeAxis(Controller.Hardware.OculusTouch.LT, Controller.Hardware.OculusTouch.RT)\r    .to(Controller.Actions.Up);\rController.enableMapping(MAPPING_NAME);\r\rScript.scriptEnding.connect(function () {\r    Controller.disableMapping(MAPPING_NAME);\r});"
        ],
        "memberof": "MappingObject",
        "longname": "MappingObject#makeAxis",
        "scope": "instance"
    },
    {
        "description": "Enables or disables the mapping. When enabled, the routes in the mapping take effect.\r<p>Synonymous with {@link Controller.enableMapping}.</p>",
        "kind": "function",
        "name": "enable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code> then the mapping is enabled, otherwise it is disabled.",
                "name": "enable"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "MappingObject"
                    ]
                },
                "description": "The mapping object, so that further routes can be added."
            }
        ],
        "memberof": "MappingObject",
        "longname": "MappingObject#enable",
        "scope": "instance"
    },
    {
        "description": "Disables the mapping. When disabled, the routes in the mapping have no effect.\r<p>Synonymous with {@link Controller.disableMapping}.</p>",
        "kind": "function",
        "name": "disable",
        "returns": [
            {
                "type": {
                    "names": [
                        "MappingObject"
                    ]
                },
                "description": "The mapping object, so that further routes can be added."
            }
        ],
        "memberof": "MappingObject",
        "longname": "MappingObject#disable",
        "scope": "instance"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p><p>A route in a {@link MappingObject} used by the {@link Controller} API.</p>\r\r<p>Create a route using {@link MappingObject} methods and apply this object's methods to process it, terminating with \r{@link RouteObject#to} to apply it to a <code>Standard</code> control, action, or script function. Note: Loops are not \rpermitted.</p>\r\r<p>Some methods apply to routes with number data, some apply routes with {@link Pose} data, and some apply to both route \rtypes.<p>",
        "kind": "class",
        "name": "RouteObject",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "longname": "RouteObject",
        "scope": "global"
    },
    {
        "description": "Terminates the route with a standard control, an action, or a script function. The output value from the route is \rsent to the specified destination.\r<p>This is a QML-specific version of {@link MappingObject#to|to}: use this version in QML files.</p>",
        "kind": "function",
        "name": "toQml",
        "params": [
            {
                "type": {
                    "names": [
                        "Controller.Standard",
                        "Controller.Actions",
                        "function"
                    ]
                },
                "description": "The standard control, action, or JavaScript\rfunction that the route output is mapped to. For a function, the parameter can be either the name of the function or\ran in-line function definition.",
                "name": "destination"
            }
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#toQml",
        "scope": "instance"
    },
    {
        "description": "Processes the route only if a condition is satisfied. The condition is evaluated before the route input is read, and\rthe input is read only if the condition is <code>true</code>. Thus, if the condition is not met then subsequent\rroutes using the same input are processed.\r<p>This is a QML-specific version of {@link MappingObject#when|when}: use this version in QML files.</p>",
        "kind": "function",
        "name": "whenQml",
        "params": [
            {
                "type": {
                    "names": [
                        "condition",
                        "Array.<condition>"
                    ]
                },
                "description": "<p>A <code>condition</code> may be a:</p>\r    <ul>\r        <li>A boolean or numeric {@link Controller.Hardware} property, which is evaluated as a boolean.</li>\r        <li><code>!</code> followed by a {@link Controller.Hardware} property, indicating the logical NOT should be\r        used.</li>\r        <li>A script function returning a boolean value. This can be either the name of the function or an in-line\r        definition.</li>\r    </ul>\r<p>If an array of conditions is provided, their values are ANDed together.</p>",
                "name": "expression"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> with the condition added."
            }
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#whenQml",
        "scope": "instance"
    },
    {
        "description": "Terminates the route with a standard control, an action, or a script function. The output value from the route is \rsent to the specified destination.",
        "kind": "function",
        "name": "to",
        "params": [
            {
                "type": {
                    "names": [
                        "Controller.Standard",
                        "Controller.Actions",
                        "function"
                    ]
                },
                "description": "The standard control, action, or JavaScript \rfunction that the route output is mapped to. For a function, the parameter can be either the name of the function or \ran in-line function definition.",
                "name": "destination"
            }
        ],
        "examples": [
            "<caption>Make the right trigger move your avatar up.</caption>\rvar MAPPING_NAME = \"com.highfidelity.controllers.example.newMapping\";\rvar mapping = Controller.newMapping(MAPPING_NAME);\r\rmapping.from(Controller.Standard.RT).to(Controller.Actions.TranslateY);\rController.enableMapping(MAPPING_NAME);\r\rScript.scriptEnding.connect(function () {\r    Controller.disableMapping(MAPPING_NAME);\r});",
            "<caption>Make the right trigger call a function.</caption>\rfunction onRightTrigger(value) {\r    print(\"Trigger value: \" + value);\r}\r\rvar MAPPING_NAME = \"com.highfidelity.controllers.example.newMapping\";\rvar mapping = Controller.newMapping(MAPPING_NAME);\r\rmapping.from(Controller.Standard.RT).to(onRightTrigger);\rController.enableMapping(MAPPING_NAME);\r\rScript.scriptEnding.connect(function () {\r    Controller.disableMapping(MAPPING_NAME);\r});"
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#to",
        "scope": "instance"
    },
    {
        "description": "Enables or disables writing debug information for a route to the program log.",
        "kind": "function",
        "name": "debug",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "If <code>true</code> then writing debug information is enabled for the route, \r    otherwise it is disabled.",
                "name": "enable"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> with debug output enabled or disabled."
            }
        ],
        "examples": [
            "<caption>Write debug information to the program log for a right trigger mapping.</caption>\rvar MAPPING_NAME = \"com.highfidelity.controllers.example.newMapping\";\rvar mapping = Controller.newMapping(MAPPING_NAME);\r\rmapping.from(Controller.Standard.RT).debug().to(function (value) {\r    print(\"Value: \" + value);\r});\r\r// Information similar to the following is written each frame:\r[DEBUG] [hifi.controllers] Beginning mapping frame\r[DEBUG] [hifi.controllers] Processing device routes\r[DEBUG] [hifi.controllers] Processing standard routes\r[DEBUG] [hifi.controllers] Applying route  \"\"\r[DEBUG] [hifi.controllers] Value was  5.96046e-07\r[DEBUG] [hifi.controllers] Filtered value was  5.96046e-07\r\rController.enableMapping(MAPPING_NAME);\r\rScript.scriptEnding.connect(function () {\r    Controller.disableMapping(MAPPING_NAME);\r});"
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#debug",
        "scope": "instance"
    },
    {
        "description": "Processes the route without marking the controller output as having been read, so that other routes from the same \rcontroller output can also process.",
        "kind": "function",
        "name": "peek",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "If <code>true</code> then the route is processed without marking the route's \r    controller source as having been read.",
                "name": "enable"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> with the peek feature enabled."
            }
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#peek",
        "scope": "instance"
    },
    {
        "description": "Processes the route only if a condition is satisfied. The condition is evaluated before the route input is read, and \rthe input is read only if the condition is <code>true</code>. Thus, if the condition is not met then subsequent \rroutes using the same input are processed.",
        "kind": "function",
        "name": "when",
        "params": [
            {
                "type": {
                    "names": [
                        "condition",
                        "Array.<condition>"
                    ]
                },
                "description": "<p>A <code>condition</code> may be a:</p>\r    <ul>\r        <li>A numeric {@link Controller.Hardware} property, which is evaluated as a boolean.</li>\r        <li><code>!</code> followed by a {@link Controller.Hardware} property to use the logical NOT of the property \r        value.</li>\r        <li>A script function returning a boolean value. This can be either the name of the function or an in-line \r        definition.</li>\r    </ul>\r<p>If an array of conditions is provided, their values are ANDed together.</p>\r<p><strong>Warning:</strong> The use of <code>!</code> is not currently supported in JavaScript <code>.when()</code> \rcalls.</p>",
                "name": "expression"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> with the condition added."
            }
        ],
        "examples": [
            "<caption>Process the right trigger differently in HMD and desktop modes.</caption>\rvar MAPPING_NAME = \"com.highfidelity.controllers.example.newMapping\";\rvar mapping = Controller.newMapping(MAPPING_NAME);\r\r// Processed only if in HMD mode.\rmapping.from(Controller.Standard.RT)\r    .when(Controller.Hardware.Application.InHMD)\r    .to(function () { print(\"Trigger pressed in HMD mode.\"); });\r\r// Processed only if previous route not processed.\rmapping.from(Controller.Standard.RT)\r    .to(function () { print(\"Trigger pressed in desktop mode.\"); });\r\rController.enableMapping(MAPPING_NAME);\r\rScript.scriptEnding.connect(function () {\r    Controller.disableMapping(MAPPING_NAME);\r});"
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#when",
        "scope": "instance"
    },
    {
        "description": "Filters numeric route values to lie between two values; values outside this range are not passed on through the \rroute.",
        "kind": "function",
        "name": "clamp",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The minimum value to pass through.",
                "name": "min"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The maximum value to pass through.",
                "name": "max"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The route object with the clamp filter added."
            }
        ],
        "examples": [
            "<caption>Clamp right trigger values to between 0.3 and 0.7.</caption>\rvar MAPPING_NAME = \"com.highfidelity.controllers.example.newMapping\";\rvar mapping = Controller.newMapping(MAPPING_NAME);\rmapping.from(Controller.Standard.RT).clamp(0.3, 0.7).to(function (value) {\r    print(\"Value: \" + value);\r});\rController.enableMapping(MAPPING_NAME);\r\rScript.scriptEnding.connect(function () {\r    Controller.disableMapping(MAPPING_NAME);\r});"
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#clamp",
        "scope": "instance"
    },
    {
        "description": "Filters numeric route values such that they are rounded to <code>0</code> or <code>1</code> without output values \rflickering when the input value hovers around <code>0.5</code>. For example, this enables you to use an analog input \ras if it were a toggle.",
        "kind": "function",
        "name": "hysteresis",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "When the input value drops below this value the output value changes to <code>0</code>.",
                "name": "min"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "When the input value rises above this value the output value changes to <code>1</code>.",
                "name": "max"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> with the filter applied."
            }
        ],
        "examples": [
            "<caption>Round the right joystick forward/back values to 0 or 1 with hysteresis.</caption>\rvar MAPPING_NAME = \"com.highfidelity.controllers.example.newMapping\";\rvar mapping = Controller.newMapping(MAPPING_NAME);\rmapping.from(Controller.Standard.RY).peek().to(function (value) {\r    print(\"Raw value: \" + value);  // 0.0 - 1.0.\r});\rmapping.from(Controller.Standard.RY).hysteresis(0.3, 0.7).to(function (value) {\r    print(\"Hysteresis value: \" + value);  // 0 or 1.\r});\rController.enableMapping(MAPPING_NAME);\r\rScript.scriptEnding.connect(function () {\r    Controller.disableMapping(MAPPING_NAME);\r});"
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#hysteresis",
        "scope": "instance"
    },
    {
        "description": "Filters numeric route values to send at a specified interval.",
        "kind": "function",
        "name": "pulse",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The interval between sending values, in seconds.",
                "name": "interval"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> with the filter applied."
            }
        ],
        "examples": [
            "<caption>Send right trigger values every half second.</caption>\rvar MAPPING_NAME = \"com.highfidelity.controllers.example.newMapping\";\rvar mapping = Controller.newMapping(MAPPING_NAME);\rmapping.from(Controller.Standard.RT).pulse(0.5).to(function (value) {\r    print(\"Value: \" + value);\r});\rController.enableMapping(MAPPING_NAME);\r\rScript.scriptEnding.connect(function () {\r    Controller.disableMapping(MAPPING_NAME);\r});"
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#pulse",
        "scope": "instance"
    },
    {
        "description": "Filters numeric and {@link Pose} route values to be scaled by a constant amount.",
        "kind": "function",
        "name": "scale",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The scale to multiply the value by.",
                "name": "multiplier"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> with the filter applied."
            }
        ],
        "examples": [
            "<caption>Scale the value of the right joystick forward/back values by 10.</caption>\rvar MAPPING_NAME = \"com.highfidelity.controllers.example.newMapping\";\rvar mapping = Controller.newMapping(MAPPING_NAME);\rmapping.from(Controller.Standard.LY).to(function (value) {\r    print(\"L value: \" + value);  // -1.0 to 1.0 values.\r});\rmapping.from(Controller.Standard.RY).scale(10.0).to(function (value) {\r    print(\"R value: \" + value);  // -10.0 to -10.0 values.\r});\rController.enableMapping(MAPPING_NAME);\r\rScript.scriptEnding.connect(function () {\r    Controller.disableMapping(MAPPING_NAME);\r});"
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#scale",
        "scope": "instance"
    },
    {
        "description": "Filters numeric and {@link Pose} route values to have the opposite sign, e.g., <code>0.5</code> is changed to \r<code>-0.5</code>.",
        "kind": "function",
        "name": "invert",
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> with the filter applied."
            }
        ],
        "examples": [
            "<caption>Invert the value of the right joystick forward/back values.</caption>\rvar MAPPING_NAME = \"com.highfidelity.controllers.example.newMapping\";\rvar mapping = Controller.newMapping(MAPPING_NAME);\rmapping.from(Controller.Standard.LY).to(function (value) {\r    print(\"L value: \" + value);  // -1.0 to 1.0 values, forward to back.\r});\rmapping.from(Controller.Standard.RY).invert().to(function (value) {\r    print(\"R value: \" + value);  // 1.0 to -1.0 values, forward to back.\r});\rController.enableMapping(MAPPING_NAME);\r\rScript.scriptEnding.connect(function () {\r    Controller.disableMapping(MAPPING_NAME);\r});"
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#invert",
        "scope": "instance"
    },
    {
        "description": "Filters numeric route values such that they're sent only when the input value is outside a dead-zone. When the input \rpasses the dead-zone value, output is sent starting at <code>0.0</code> and catching up with the input value. As the \rinput returns toward the dead-zone value, output values reduce to <code>0.0</code> at the dead-zone value.",
        "kind": "function",
        "name": "deadZone",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The minimum input value at which to start sending output. For negative input values, the \r   negative of this value is used.",
                "name": "min"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> with the filter applied."
            }
        ],
        "examples": [
            "<caption>Apply a dead-zone to the right joystick forward/back values.</caption>\rvar MAPPING_NAME = \"com.highfidelity.controllers.example.newMapping\";\rvar mapping = Controller.newMapping(MAPPING_NAME);\rmapping.from(Controller.Standard.RY).deadZone(0.2).to(function (value) {\r    print(\"Value: \" + value);  // 0.0 - 1.0 values once outside the dead-zone.\r});\rController.enableMapping(MAPPING_NAME);\r\rScript.scriptEnding.connect(function () {\r    Controller.disableMapping(MAPPING_NAME);\r});"
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#deadZone",
        "scope": "instance"
    },
    {
        "description": "Filters numeric route values such that they are rounded to <code>-1</code>, <code>0</code>, or <code>1</code>.\rFor example, this enables you to use an analog input as if it were a toggle or, in the case of a bidirectional axis, \ra tri-state switch.",
        "kind": "function",
        "name": "constrainToInteger",
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> with the filter applied."
            }
        ],
        "examples": [
            "<caption>Round the right joystick forward/back values to <code>-1</code>, <code>0</code>, or \r    <code>1</code>.</caption>\rvar MAPPING_NAME = \"com.highfidelity.controllers.example.newMapping\";\rvar mapping = Controller.newMapping(MAPPING_NAME);\rmapping.from(Controller.Standard.RY).constrainToInteger().to(function (value) {\r    print(\"Value: \" + value);  // -1, 0, or 1\r});\rController.enableMapping(MAPPING_NAME);\r\rScript.scriptEnding.connect(function () {\r    Controller.disableMapping(MAPPING_NAME);\r});"
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#constrainToInteger",
        "scope": "instance"
    },
    {
        "description": "Filters numeric route values such that they are rounded to <code>0</code> or <code>1</code>. For example, this \renables you to use an analog input as if it were a toggle.",
        "kind": "function",
        "name": "constrainToPositiveInteger",
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> with the filter applied."
            }
        ],
        "examples": [
            "<caption>Round the right joystick forward/back values to <code>0</code> or <code>1</code>.</caption>\rvar MAPPING_NAME = \"com.highfidelity.controllers.example.newMapping\";\rvar mapping = Controller.newMapping(MAPPING_NAME);\rmapping.from(Controller.Standard.RY).constrainToPositiveInteger().to(function (value) {\r    print(\"Value: \" + value);  // 0, or 1\r});\rController.enableMapping(MAPPING_NAME);\r\rScript.scriptEnding.connect(function () {\r    Controller.disableMapping(MAPPING_NAME);\r});"
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#constrainToPositiveInteger",
        "scope": "instance"
    },
    {
        "description": "Filters {@link Pose} route values to have a pre-translation applied.",
        "kind": "function",
        "name": "translate",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The pre-translation to add to the pose.",
                "name": "translate"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> with the pre-translation applied."
            }
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#translate",
        "scope": "instance"
    },
    {
        "description": "Filters {@link Pose} route values to have a pre-transform applied.",
        "kind": "function",
        "name": "transform",
        "params": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The pre-transform to apply.",
                "name": "transform"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> with the pre-transform applied."
            }
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#transform",
        "scope": "instance"
    },
    {
        "description": "Filters {@link Pose} route values to have a post-transform applied.",
        "kind": "function",
        "name": "postTransform",
        "params": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The post-transform to apply.",
                "name": "transform"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> with the post-transform applied."
            }
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#postTransform",
        "scope": "instance"
    },
    {
        "description": "Filters {@link Pose} route values to have a pre-rotation applied.",
        "kind": "function",
        "name": "rotate",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The pre-rotation to add to the pose.",
                "name": "rotation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> with the pre-rotation applied."
            }
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#rotate",
        "scope": "instance"
    },
    {
        "description": "Filters {@link Pose} route values to be smoothed by a low velocity filter. The filter's rotation and translation \rvalues are calculated as: <code>(1 - f) * currentValue + f * previousValue</code> where \r<code>f = currentVelocity / filterConstant</code>. At low velocities, the filter value is largely the previous \rvalue; at high velocities the value is wholly the current controller value.",
        "kind": "function",
        "name": "lowVelocity",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The rotational velocity, in rad/s, at which the filter value is wholly the latest \r    controller value.",
                "name": "rotationConstant"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The linear velocity, in m/s, at which the filter value is wholly the latest \r    controller value.",
                "name": "translationConstant"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> smoothed by low velocity filtering."
            }
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#lowVelocity",
        "scope": "instance"
    },
    {
        "description": "Filters {@link Pose} route values to be smoothed by an exponential decay filter. The filter's rotation and \rtranslation values are calculated as: <code>filterConstant * currentValue + (1 - filterConstant) * \rpreviousValue</code>. Values near 1 are less smooth with lower latency; values near 0 are more smooth with higher \rlatency.",
        "kind": "function",
        "name": "exponentialSmoothing",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Rotation filter constant, <code>0.0&ndash;1.0</code>.",
                "name": "rotationConstant"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Translation filter constant, <code>0.0&ndash;1.0</code>.",
                "name": "translationConstant"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> smoothed by an exponential filter."
            }
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#exponentialSmoothing",
        "scope": "instance"
    },
    {
        "description": "Filters numeric route values such that a value of <code>0.0</code> is changed to <code>1.0</code>, and other values \rare changed to <code>0.0</code>.",
        "kind": "function",
        "name": "logicalNot",
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> with the filter applied."
            }
        ],
        "examples": [
            "<caption>Logical NOT of LSTouch value.</caption>\rvar MAPPING_NAME = \"com.highfidelity.controllers.example.newMapping\";\rvar mapping = Controller.newMapping(MAPPING_NAME);\r\rmapping.from(Controller.Standard.RSTouch).peek().to(function (value) {\r    print(\"RSTouch: \" + value);\r});\rmapping.from(Controller.Standard.RSTouch).logicalNot().to(function (value) {\r    print(\"localNot of RSTouch: \" + value);\r});\rController.enableMapping(MAPPING_NAME);\r\rScript.scriptEnding.connect(function () {\r    Controller.disableMapping(MAPPING_NAME);\r});\r\n         "
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#logicalNot",
        "scope": "instance"
    },
    {
        "description": "Triggered when the <code>HMD.ipdScale</code> property value changes.",
        "kind": "signal",
        "name": "IPDScaleChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "HMD",
        "longname": "HMD.IPDScaleChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when Interface's display mode changes and when the user puts on or takes off their HMD.",
        "kind": "signal",
        "name": "displayModeChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the display mode is HMD, otherwise <code>false</code>. This is the\r    same value as provided by <code>HMD.active</code>.",
                "name": "isHMDMode"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when the display mode changes.</caption>\rHMD.displayModeChanged.connect(function (isHMDMode) {\r    print(\"Display mode changed\");\r    print(\"isHMD = \" + isHMDMode);\r    print(\"HMD.active = \" + HMD.active);\r    print(\"HMD.mounted = \" + HMD.mounted);\r});"
        ],
        "memberof": "HMD",
        "longname": "HMD.displayModeChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the <code>HMD.mounted</code> property value changes.",
        "kind": "signal",
        "name": "mountedChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when there's a change in the HMD being worn.</caption>\rHMD.mountedChanged.connect(function () {\r    print(\"Mounted changed. HMD is mounted: \" + HMD.mounted);\r});\r\n     "
        ],
        "memberof": "HMD",
        "longname": "HMD.mountedChanged",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Reticle</code> API provides access to the mouse cursor. The cursor may be an arrow or a reticle circle, depending \ron Interface settings. The mouse cursor is visible in HMD mode if controllers aren't being used.",
        "kind": "namespace",
        "name": "Reticle",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "<code>true</code> if the mouse cursor will be captured when in HMD mode and the \r    Interface window content (excluding menus) has focus, <code>false</code> if the mouse cursor will not be captured.",
                "name": "allowMouseCapture"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The depth (distance) that the reticle is displayed at relative to the HMD view, in HMD mode.",
                "name": "depth"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "The maximum reticle coordinates on the display device in desktop mode or the HUD surface \r    in HMD mode. (The minimum reticle coordinates on the desktop display device or HUD surface are <code>0</code>, \r    <code>0</code>.) <em>Read-only.</em>",
                "name": "maximumPosition"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the mouse cursor is captured, displaying only in Interface and \r    not on the rest of the desktop. The mouse cursor may be captured when in HMD mode and the Interface window content \r    (excluding menu items) has focus, if capturing is enabled (<code>allowMouseCapture</code> is <code>true</code>). \r    <em>Read-only.</em>",
                "name": "mouseCaptured"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the mouse cursor is pointing at UI in the Interface \r    window in desktop mode or on the HUD surface in HMD mode, <code>false</code> if it isn't. <em>Read-only.</em>",
                "name": "pointingAtSystemOverlay"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "The position of the cursor. This is the position relative to the Interface window in desktop \r    mode, and the HUD surface in HMD mode.\r    <p><strong>Note:</strong> The position values may be negative.</p>",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The scale of the reticle circle in desktop mode, and the arrow and reticle circle in HMD mode. \r    (Does not affect the size of the arrow in desktop mode.)",
                "name": "scale"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "<code>true</code> if the reticle circle is visible in desktop mode, and the arrow or \r    reticle circle are visible in HMD mode; <code>false</code> otherwise. (Does not affect the visibility of the mouse \r    pointer in desktop mode.)",
                "name": "visible"
            }
        ],
        "longname": "Reticle",
        "scope": "global"
    },
    {
        "description": "Checks whether the mouse cursor is captured, displaying only in Interface and not on the rest of the desktop. The mouse \rcursor is captured when in HMD mode and the Interface window content (excluding menu items) has focus, if capturing is \renabled (<code>allowMouseCapture</code> property value is <code>true</code>).",
        "kind": "function",
        "name": "isMouseCaptured",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the mouse cursor is captured, displaying only in Interface and not on the \r    desktop."
            }
        ],
        "memberof": "Reticle",
        "longname": "Reticle.isMouseCaptured",
        "scope": "static"
    },
    {
        "description": "Gets whether the mouse cursor will be captured when in HMD mode and the Interface window content (excluding menu items) \rhas focus. When captured, the mouse cursor displays only in Interface, not on the rest of the desktop.",
        "kind": "function",
        "name": "getAllowMouseCapture",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the mouse cursor will be captured when in HMD mode and the Interface window \r    content has focus, <code>false</code> if the mouse cursor will not be captured."
            }
        ],
        "memberof": "Reticle",
        "longname": "Reticle.getAllowMouseCapture",
        "scope": "static"
    },
    {
        "description": "Sets whether the mouse cursor will be captured when in HMD mode and the Interface window content (excluding menu items)\rhas focus. When captured, the mouse cursor displays only in Interface, not on the rest of desktop.",
        "kind": "function",
        "name": "setAllowMouseCapture",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the mouse cursor will be captured when in HMD mode and the \r    Interface window content has focus, <code>false</code> if the mouse cursor will not be captured.",
                "name": "allowMouseCaptured"
            }
        ],
        "memberof": "Reticle",
        "longname": "Reticle.setAllowMouseCapture",
        "scope": "static"
    },
    {
        "description": "Gets whether the mouse cursor is pointing at UI in the Interface window in desktop mode or on the HUD surface in HMD \rmode.",
        "kind": "function",
        "name": "isPointingAtSystemOverlay",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the mouse cursor is pointing at UI in the Interface window in desktop mode or on \r    the HUD surface in HMD mode, <code>false</code> if it isn't."
            }
        ],
        "memberof": "Reticle",
        "longname": "Reticle.isPointingAtSystemOverlay",
        "scope": "static"
    },
    {
        "description": "Gets whether the reticle circle is visible in desktop mode, or the arrow or reticle circle are visible in HMD mode.",
        "kind": "function",
        "name": "getVisible",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the reticle circle is visible in desktop mode, and the arrow or \r    reticle circle are visible in HMD mode; <code>false</code> otherwise. (The mouse pointer is always visible in \r    desktop mode.)"
            }
        ],
        "memberof": "Reticle",
        "longname": "Reticle.getVisible",
        "scope": "static"
    },
    {
        "description": "Sets whether the reticle circle is visible in desktop mode, or the arrow or reticle circle are visible in HMD mode.",
        "kind": "function",
        "name": "setVisible",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the reticle circle is visible in desktop mode, and the arrow or reticle \r    circle are visible in HMD mode; <code>false</code> otherwise. (Does not affect the visibility of the mouse pointer \r    in desktop mode.)",
                "name": "visible"
            }
        ],
        "memberof": "Reticle",
        "longname": "Reticle.setVisible",
        "scope": "static"
    },
    {
        "description": "Gets the depth (distance) that the reticle is displayed at relative to the HMD view, in HMD mode.",
        "kind": "function",
        "name": "getDepth",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The depth (distance) that the reticle is displayed at relative to the HMD view, in HMD mode."
            }
        ],
        "memberof": "Reticle",
        "longname": "Reticle.getDepth",
        "scope": "static"
    },
    {
        "description": "Sets the depth (distance) that the reticle is displayed at relative to the HMD view, in HMD mode.",
        "kind": "function",
        "name": "setDepth",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The depth (distance) that the reticle is displayed at relative to the HMD view, in HMD mode.",
                "name": "depth"
            }
        ],
        "memberof": "Reticle",
        "longname": "Reticle.setDepth",
        "scope": "static"
    },
    {
        "description": "Gets the scale of the reticle circle in desktop mode, and the arrow and reticle circle in HMD mode. (Does not affect the \rsize of the arrow in desktop mode.) The default scale is <code>1.0</code>.",
        "kind": "function",
        "name": "getScale",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The scale of the reticle."
            }
        ],
        "memberof": "Reticle",
        "longname": "Reticle.getScale",
        "scope": "static"
    },
    {
        "description": "Sets the scale of the reticle circle in desktop mode, and the arrow and reticle circle in HMD mode. (Does not affect the\rsize of the arrow in desktop mode.) The default scale is <code>1.0</code>.",
        "kind": "function",
        "name": "setScale",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The scale of the reticle.",
                "name": "scale"
            }
        ],
        "memberof": "Reticle",
        "longname": "Reticle.setScale",
        "scope": "static"
    },
    {
        "description": "Gets the position of the cursor. This is the position relative to the Interface window in desktop mode, and the HUD \rsurface in HMD mode.\r<p><strong>Note:</strong> The position values may be negative.</p>",
        "kind": "function",
        "name": "getPosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "The position of the cursor."
            }
        ],
        "memberof": "Reticle",
        "longname": "Reticle.getPosition",
        "scope": "static"
    },
    {
        "description": "Sets the position of the cursor. This is the position relative to the Interface window in desktop mode, and the HUD \rsurface in HMD mode.\r<p><strong>Note:</strong> The position values may be negative.</p>",
        "kind": "function",
        "name": "setPosition",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "The position of the cursor.",
                "name": "position"
            }
        ],
        "memberof": "Reticle",
        "longname": "Reticle.setPosition",
        "scope": "static"
    },
    {
        "description": "Gets the maximum reticle coordinates on the display device in desktop mode or the HUD surface in HMD mode. (The minimum \rreticle coordinates on the desktop display device or HUD surface are <code>0</code>, <code>0</code>.)",
        "kind": "function",
        "name": "getMaximumPosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "The maximum reticle coordinates on the display device in desktop mode or the HUD surface in HMD mode."
            }
        ],
        "memberof": "Reticle",
        "longname": "Reticle.getMaximumPosition",
        "scope": "static"
    },
    {
        "description": "Ambient light is defined by the following properties:",
        "kind": "typedef",
        "name": "AmbientLight",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.5,
                "description": "The intensity of the light.",
                "name": "ambientIntensity"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A cube map image that defines the color of the light coming from each direction. If \r    <code>\"\"</code> then the entity's {@link Entities.Skybox|Skybox} <code>url</code> property value is used, unless that also is <code>\"\"</code> in which \r    case the entity's <code>ambientLightMode</code> property is set to <code>\"inherit\"</code>.",
                "name": "ambientURL"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.AmbientLight",
        "scope": "static"
    },
    {
        "description": "An animation is configured by the following properties:",
        "kind": "typedef",
        "name": "AnimationProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The URL of the glTF or FBX file that has the animation. glTF files may be in JSON or binary \r    format (\".gltf\" or \".glb\" URLs respectively).\r    <p><strong>Warning:</strong> glTF animations currently do not always animate correctly.</p>",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "<code>true</code> to enable translations contained in the animation to be\r    played, <code>false</code> to disable translations.",
                "name": "allowTranslation"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 30,
                "description": "The speed in frames/s that the animation is played at.",
                "name": "fps"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The first frame to play in the animation.",
                "name": "firstFrame"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 100000,
                "description": "The last frame to play in the animation.",
                "name": "lastFrame"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The current frame being played in the animation.",
                "name": "currentFrame"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the animation should play, <code>false</code> if it shouldn't.",
                "name": "running"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "<code>true</code> if the animation is continuously repeated in a loop, <code>false</code> if \r    it isn't.",
                "name": "loop"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the rotations and translations of the last frame played are \r    maintained when the animation stops playing, <code>false</code> if they aren't.",
                "name": "hold"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.AnimationProperties",
        "scope": "static"
    },
    {
        "description": "Bloom is defined by the following properties:",
        "kind": "typedef",
        "name": "Bloom",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.25,
                "description": "The intensity of the bloom effect.",
                "name": "bloomIntensity"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The threshold for the bloom effect.",
                "name": "bloomThreshold"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.9,
                "description": "The size of the bloom effect.",
                "name": "bloomSize"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.Bloom",
        "scope": "static"
    },
    {
        "description": "<p>An entity action may be one of the following types:</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Type</th><th>Description</th><th>Arguments</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"far-grab\"</code></td><td>Avatar action</td>\r      <td>Moves and rotates an entity to a target position and orientation, optionally relative to another entity. Collisions \r      between the entity and the user's avatar are disabled during the far-grab.</td>\r      <td>{@link Entities.ActionArguments-FarGrab}</td></tr>\r    <tr><td><code>\"hold\"</code></td><td>Avatar action</td>\r      <td>Positions and rotates an entity relative to an avatar's hand. Collisions between the entity and the user's avatar \r      are disabled during the hold.</td>\r      <td>{@link Entities.ActionArguments-Hold}</td></tr>\r    <tr><td><code>\"offset\"</code></td><td>Object action</td>\r      <td>Moves an entity so that it is a defined distance away from a target point.</td>\r      <td>{@link Entities.ActionArguments-Offset}</td></tr>\r    <tr><td><code>\"tractor\"</code></td><td>Object action</td>\r      <td>Moves and rotates an entity to a target position and orientation, optionally relative to another entity.</td>\r      <td>{@link Entities.ActionArguments-Tractor}</td></tr>\r    <tr><td><code>\"travel-oriented\"</code></td><td>Object action</td>\r      <td>Orients an entity to align with its direction of travel.</td>\r      <td>{@link Entities.ActionArguments-TravelOriented}</td></tr>\r    <tr><td><code>\"hinge\"</code></td><td>Object constraint</td>\r      <td>Lets an entity pivot about an axis or connects two entities with a hinge joint.</td>\r      <td>{@link Entities.ActionArguments-Hinge}</td></tr>\r    <tr><td><code>\"slider\"</code></td><td>Object constraint</td>\r      <td>Lets an entity slide and rotate along an axis, or connects two entities that slide and rotate along a shared \r      axis.</td>\r      <td>{@link Entities.ActionArguments-Slider|ActionArguments-Slider}</td></tr>\r    <tr><td><code>\"cone-twist\"</code></td><td>Object constraint</td>\r      <td>Connects two entities with a joint that can move through a cone and can twist.</td>\r      <td>{@link Entities.ActionArguments-ConeTwist}</td></tr>\r    <tr><td><code>\"ball-socket\"</code></td><td>Object constraint</td>\r      <td>Connects two entities with a ball and socket joint.</td>\r      <td>{@link Entities.ActionArguments-BallSocket}</td></tr>\r    <tr><td><code>\"spring\"</code></td><td>&nbsp;</td><td>Synonym for <code>\"tractor\"</code>. \r      <p class=\"important\">Deprecated.</p></td><td>&nbsp;</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "ActionType",
        "type": {
            "names": [
                "string"
            ]
        },
        "memberof": "Entities",
        "longname": "Entities.ActionType",
        "scope": "static"
    },
    {
        "description": "Different entity types have different properties: some common to all entities (listed in the table) and some specific to \reach {@link Entities.EntityType|EntityType} (linked to below).",
        "kind": "typedef",
        "name": "EntityProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity. <em>Read-only.</em>",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A name for the entity. Need not be unique.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Entities.EntityType"
                    ]
                },
                "description": "The entity's type. You cannot change the type of an entity after it's created. \r    However, its value may switch among <code>\"Box\"</code>, <code>\"Shape\"</code>, and <code>\"Sphere\"</code> depending on \r    changes to the <code>shape</code> property set for entities of these types. <em>Read-only.</em>",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Entities.EntityHostType"
                    ]
                },
                "defaultvalue": "\"domain\"",
                "description": "How the entity is hosted and sent to others for display.\r    The value can only be set at entity creation by one of the {@link Entities.addEntity} methods. <em>Read-only.</em>",
                "name": "entityHostType"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the entity is an {@link Entities.EntityHostType|avatar entity}, \r    <code>false</code> if it isn't. The value is per the <code>entityHostType</code> property value, set at entity creation \r    by one of the {@link Entities.addEntity} methods. <em>Read-only.</em>",
                "name": "avatarEntity"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "A synonym for <code>avatarEntity</code>. <em>Read-only.</em>",
                "name": "clientOnly"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the entity is a {@link Entities.EntityHostType|local entity}, \r    <code>false</code> if it isn't. The value is per the <code>entityHostType</code> property value, set at entity creation \r    by one of the {@link Entities.addEntity} methods. <em>Read-only.</em>",
                "name": "localEntity"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": "Uuid.NULL",
                "description": "The session ID of the owning avatar if <code>avatarEntity</code> is \r    <code>true</code>, otherwise {@link Uuid(0)|Uuid.NULL}. <em>Read-only.</em>",
                "name": "owningAvatarID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The UTC date and time that the entity was created, in ISO 8601 format as\r    <code>yyyy-MM-ddTHH:mm:ssZ</code>. <em>Read-only.</em>",
                "name": "created"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The age of the entity in seconds since it was created. <em>Read-only.</em>",
                "name": "age"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The age of the entity since it was created, formatted as <code>h hours m minutes s \r    seconds</code>.",
                "name": "ageAsText"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": -1,
                "description": "How long an entity lives for, in seconds, before being automatically deleted. A value of\r    <code>-1</code> means that the entity lives for ever.",
                "name": "lifetime"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "When the entity was last edited, expressed as the number of microseconds since\r    1970-01-01T00:00:00 UTC. <em>Read-only.</em>",
                "name": "lastEdited"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The session ID of the avatar or agent that most recently created or edited the entity.\r    <em>Read-only.</em>",
                "name": "lastEditedBy"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if properties other than <code>locked</code> cannot be changed and the \r    entity cannot be deleted, <code>false</code> if all properties can be changed and the entity can be deleted.",
                "name": "locked"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "<code>true</code> if the entity is rendered, <code>false</code> if it isn't.",
                "name": "visible"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "<code>true</code> if the entity can cast a shadow, <code>false</code> if it can't. \r    Currently applicable only to {@link Entities.EntityProperties-Model|Model} and \r    {@link Entities.EntityProperties-Shape|Shape} entities. Shadows are cast if inside a \r    {@link Entities.EntityProperties-Zone|Zone} entity with <code>castShadows</code> enabled in its <code>keyLight</code> \r    property.",
                "name": "canCastShadow"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "<code>true</code> if the entity is rendered in the secondary camera, \r    <code>false</code> if it isn't.",
                "name": "isVisibleInSecondaryCamera"
            },
            {
                "type": {
                    "names": [
                        "Entities.RenderLayer"
                    ]
                },
                "defaultvalue": "\"world\"",
                "description": "The layer that the entity renders in.",
                "name": "renderLayer"
            },
            {
                "type": {
                    "names": [
                        "Entities.PrimitiveMode"
                    ]
                },
                "defaultvalue": "\"solid\"",
                "description": "How the entity's geometry is rendered.",
                "name": "primitiveMode"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if {@link Picks} and {@link RayPick} ignore the entity, \r    <code>false</code> if they don't.",
                "name": "ignorePickIntersection"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The position of the entity in world coordinates.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "defaultvalue": "0,0,0,1",
                "description": "The orientation of the entity in world coordinates.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0.5,0.5,0.5",
                "description": "The point in the entity that is set to the entity's position and is rotated \r     about, range {@link Vec3(0)|Vec3.ZERO} &ndash; {@link Vec3(0)|Vec3.ONE}. A value of {@link Vec3(0)|Vec3.ZERO} is the \r     entity's minimum x, y, z corner; a value of {@link Vec3(0)|Vec3.ONE} is the entity's maximum x, y, z corner.",
                "name": "registrationPoint"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The center of the entity's unscaled mesh model if it has one, otherwise\r    {@link Vec3(0)|Vec3.ZERO}. <em>Read-only.</em>",
                "name": "naturalPosition"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The dimensions of the entity's unscaled mesh model if it has one, otherwise \r    {@link Vec3(0)|Vec3.ONE}. <em>Read-only.</em>",
                "name": "naturalDimensions"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The linear velocity of the entity in m/s with respect to world coordinates.",
                "name": "velocity"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.39347,
                "description": "How much the linear velocity of an entity slows down over time, range \r    <code>0.0</code> &ndash; <code>1.0</code>. A higher damping value slows down the entity more quickly. The default value \r    is for an exponential decay timescale of 2.0s, where it takes 2.0s for the movement to slow to <code>1/e = 0.368</code> \r    of its initial value.",
                "name": "damping"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The angular velocity of the entity in rad/s with respect to its axes, about its\r    registration point.",
                "name": "angularVelocity"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.39347,
                "description": "How much the angular velocity of an entity slows down over time, range \r    <code>0.0</code> &ndash; <code>1.0</code>. A higher damping value slows down the entity more quickly. The default value \r    is for an exponential decay timescale of 2.0s, where it takes 2.0s for the movement to slow to <code>1/e = 0.368</code> \r    of its initial value.",
                "name": "angularDamping"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The acceleration due to gravity in m/s<sup>2</sup> that the entity should move with, in \r    world coordinates. Use a value of <code>{ x: 0, y: -9.8, z: 0 }</code> to simulate Earth's gravity. Gravity is applied \r    to an entity's motion only if its <code>dynamic</code> property is <code>true</code>.\r    <p>If changing an entity's <code>gravity</code> from {@link Vec3(0)|Vec3.ZERO}, you need to give it a small \r    <code>velocity</code> in order to kick off physics simulation.</p>",
                "name": "gravity"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The current, measured acceleration of the entity, in m/s<sup>2</sup>.\r    <p class=\"important\">Deprecated: This property is deprecated and will be removed.</p>",
                "name": "acceleration"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.5,
                "description": "The \"bounciness\" of an entity when it collides, range <code>0.0</code> &ndash; \r    <code>0.99</code>. The higher the value, the more bouncy.",
                "name": "restitution"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.5,
                "description": "How much an entity slows down when it's moving against another, range <code>0.0</code> \r    &ndash; <code>10.0</code>. The higher the value, the more quickly it slows down. Examples: <code>0.1</code> for ice, \r    <code>0.9</code> for sandpaper.",
                "name": "friction"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1000,
                "description": "The density of the entity in kg/m<sup>3</sup>, range <code>100</code> &ndash; \r    <code>10000</code>. Examples: <code>100</code> for balsa wood, <code>10000</code> for silver. The density is used in \r    conjunction with the entity's bounding box volume to work out its mass in the application of physics.",
                "name": "density"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the entity shouldn't collide, <code>false</code> if it \r    collides with items per its <code>collisionMask</code> property.",
                "name": "collisionless"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Synonym for <code>collisionless</code>.",
                "name": "ignoreForCollisions"
            },
            {
                "type": {
                    "names": [
                        "CollisionMask"
                    ]
                },
                "defaultvalue": 31,
                "description": "What types of items the entity should collide with.",
                "name": "collisionMask"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"static,dynamic,kinematic,myAvatar,otherAvatar,\"",
                "description": "Synonym for <code>collisionMask</code>,\r    in text format.",
                "name": "collidesWith"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The sound that's played when the entity experiences a collision. Valid file \r    formats are per {@link SoundObject}.",
                "name": "collisionSoundURL"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the entity's movement is affected by collisions, <code>false</code> \r    if it isn't.",
                "name": "dynamic"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "A synonym for <code>dynamic</code>.",
                "name": "collisionsWillMove"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A \"hifi://\" metaverse address that a user is teleported to when they click on the entity.",
                "name": "href"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A description of the <code>href</code> property value.",
                "name": "description"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "Used to store extra data about the entity in JSON format. \r    <p><strong>Warning:</strong> Other apps may also use this property, so make sure you handle data stored by other apps: \r    edit only your bit and leave the rest of the data intact. You can use <code>JSON.parse()</code> to parse the string into \r    a JavaScript object which you can manipulate the properties of, and use <code>JSON.stringify()</code> to convert the \r    object into a string to put back in the property.</p>",
                "name": "userData"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "Like <code>userData</code>, but only accessible by server entity scripts, assignment \r    client scripts, and users who have \"Can Get and Set Private User Data\" permissions in the domain.",
                "name": "privateUserData"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The URL of the client entity script, if any, that is attached to the entity.",
                "name": "script"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "Used to indicate when the client entity script was loaded. Should be \r    an integer number of milliseconds since midnight GMT on January 1, 1970 (e.g., as supplied by <code>Date.now()</code>. \r    If you update the property's value, the <code>script</code> is re-downloaded and reloaded. This is how the \"reload\" \r    button beside the \"script URL\" field in properties tab of the Create app works.",
                "name": "scriptTimestamp"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The URL of the server entity script, if any, that is attached to the entity.",
                "name": "serverScripts"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": "Uuid.NULL",
                "description": "The ID of the entity or avatar that the entity is parented to. A value of \r    {@link Uuid(0)|Uuid.NULL} is used if the entity is not parented.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "The joint of the entity or avatar that the entity is parented to. Use \r    <code>65535</code> or <code>-1</code> to parent to the entity or avatar's position and orientation rather than a joint.",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The position of the entity relative to its parent if the entity is parented, \r    otherwise the same value as <code>position</code>. If the entity is parented to an avatar and is an avatar entity \r    so that it scales with the avatar, this value remains the original local position value while the avatar scale changes.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "defaultvalue": "0,0,0,1",
                "description": "The rotation of the entity relative to its parent if the entity is parented, \r    otherwise the same value as <code>rotation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The velocity of the entity relative to its parent if the entity is parented, \r    otherwise the same value as <code>velocity</code>.",
                "name": "localVelocity"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The angular velocity of the entity relative to its parent if the entity is \r    parented, otherwise the same value as <code>angularVelocity</code>.",
                "name": "localAngularVelocity"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The dimensions of the entity. If the entity is parented to an avatar and is an\r    avatar entity so that it scales with the avatar, this value remains the original dimensions value while the \r    avatar scale changes.",
                "name": "localDimensions"
            },
            {
                "type": {
                    "names": [
                        "Entities.BoundingBox"
                    ]
                },
                "description": "The axis-aligned bounding box that tightly encloses the entity. \r    <em>Read-only.</em>",
                "name": "boundingBox"
            },
            {
                "type": {
                    "names": [
                        "AACube"
                    ]
                },
                "description": "The axis-aligned cube that determines where the entity lives in the entity server's octree. \r    The cube may be considerably larger than the entity in some situations, e.g., when the entity is grabbed by an avatar: \r    the position of the entity is determined through avatar mixer updates and so the AA cube is expanded in order to reduce \r    unnecessary entity server updates. Scripts should not change this property's value.",
                "name": "queryAACube"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "Base-64 encoded compressed dump of the actions associated with the entity. This property\r    is typically not used in scripts directly; rather, functions that manipulate an entity's actions update it, e.g., \r    {@link Entities.addAction}. The size of this property increases with the number of actions. Because this property value \r    has to fit within a High Fidelity datagram packet, there is a limit to the number of actions that an entity can have;\r    edits which would result in overflow are rejected. <em>Read-only.</em>",
                "name": "actionData"
            },
            {
                "type": {
                    "names": [
                        "Entities.RenderInfo"
                    ]
                },
                "description": "Information on the cost of rendering the entity. Currently information is only \r    provided for <code>Model</code> entities. <em>Read-only.</em>",
                "name": "renderInfo"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the domain or avatar entity can be cloned via \r    {@link Entities.cloneEntity}, <code>false</code> if it can't be.",
                "name": "cloneable"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 300,
                "description": "The entity lifetime for clones created from this entity.",
                "name": "cloneLifetime"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The total number of clones of this entity that can exist in the domain at any given time.",
                "name": "cloneLimit"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if clones created from this entity will have their \r    <code>dynamic</code> property set to <code>true</code>, <code>false</code> if they won't.",
                "name": "cloneDynamic"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if clones created from this entity will be created as \r    avatar entities, <code>false</code> if they won't be.",
                "name": "cloneAvatarEntity"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that this entity was cloned from.",
                "name": "cloneOriginID"
            },
            {
                "type": {
                    "names": [
                        "Entities.Grab"
                    ]
                },
                "description": "The entity's grab-related properties.",
                "name": "grab"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "Certifiable name of the Marketplace item.",
                "name": "itemName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "Certifiable description of the Marketplace item.",
                "name": "itemDescription"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "Certifiable category of the Marketplace item.",
                "name": "itemCategories"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "Certifiable artist that created the Marketplace item.",
                "name": "itemArtist"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "Certifiable license URL for the Marketplace item.",
                "name": "itemLicense"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 4294967295,
                "description": "Certifiable maximum integer number of editions (copies) of the Marketplace item \r    allowed to be sold.",
                "name": "limitedRun"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "Certifiable integer edition (copy) number or the Marketplace item. Each copy sold in \r    the Marketplace is numbered sequentially, starting at 1.",
                "name": "editionNumber"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "Certifiable integer instance number for identical entities in a Marketplace \r    item. A Marketplace item may have multiple, identical parts. If so, then each is numbered sequentially with an instance \r    number.",
                "name": "entityInstanceNumber"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "Certifiable UUID for the Marketplace item, as used in the URL of the item's download\r    and its Marketplace Web page.",
                "name": "marketplaceID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "Hash of the entity's static certificate JSON, signed by the artist's private key.",
                "name": "certificateID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The version of the method used to generate the <code>certificateID</code>.",
                "name": "staticCertificateVersion"
            }
        ],
        "tags": [
            {
                "originalTitle": "comment",
                "title": "comment",
                "text": "The different entity types have additional properties as follows:",
                "value": "The different entity types have additional properties as follows:"
            }
        ],
        "see": [
            "{@link Entities.EntityProperties-Box|EntityProperties-Box}",
            "{@link Entities.EntityProperties-Gizmo|EntityProperties-Gizmo}",
            "{@link Entities.EntityProperties-Grid|EntityProperties-Grid}",
            "{@link Entities.EntityProperties-Image|EntityProperties-Image}",
            "{@link Entities.EntityProperties-Light|EntityProperties-Light}",
            "{@link Entities.EntityProperties-Line|EntityProperties-Line}",
            "{@link Entities.EntityProperties-Material|EntityProperties-Material}",
            "{@link Entities.EntityProperties-Model|EntityProperties-Model}",
            "{@link Entities.EntityProperties-ParticleEffect|EntityProperties-ParticleEffect}",
            "{@link Entities.EntityProperties-PolyLine|EntityProperties-PolyLine}",
            "{@link Entities.EntityProperties-PolyVox|EntityProperties-PolyVox}",
            "{@link Entities.EntityProperties-Shape|EntityProperties-Shape}",
            "{@link Entities.EntityProperties-Sphere|EntityProperties-Sphere}",
            "{@link Entities.EntityProperties-Text|EntityProperties-Text}",
            "{@link Entities.EntityProperties-Web|EntityProperties-Web}",
            "{@link Entities.EntityProperties-Zone|EntityProperties-Zone}"
        ],
        "memberof": "Entities",
        "longname": "Entities.EntityProperties",
        "scope": "static"
    },
    {
        "description": "The <code>\"Box\"</code> {@link Entities.EntityType|EntityType} is the same as the <code>\"Shape\"</code>\r{@link Entities.EntityType|EntityType} except that its <code>shape</code> value is always set to <code>\"Cube\"</code>\rwhen the entity is created. If its <code>shape</code> property value is subsequently changed then the entity's \r<code>type</code> will be reported as <code>\"Sphere\"</code> if the <code>shape</code> is set to <code>\"Sphere\"</code>, \rotherwise it will be reported as <code>\"Shape\"</code>.",
        "kind": "typedef",
        "name": "EntityProperties-Box",
        "type": {
            "names": [
                "object"
            ]
        },
        "see": [
            "{@link Entities.EntityProperties-Shape|EntityProperties-Shape}"
        ],
        "memberof": "Entities",
        "longname": "Entities.EntityProperties-Box",
        "scope": "static"
    },
    {
        "description": "The <code>\"Light\"</code> {@link Entities.EntityType|EntityType} adds local lighting effects. It has properties in addition \rto the common {@link Entities.EntityProperties|EntityProperties}.",
        "kind": "typedef",
        "name": "EntityProperties-Light",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0.1,0.1,0.1",
                "description": "The dimensions of the entity. Surfaces outside these dimensions are not lit \r    by the light.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the light emitted.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The brightness of the light.",
                "name": "intensity"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.1,
                "description": "The distance from the light's center at which intensity is reduced by 25%.",
                "name": "falloffRadius"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the light is directional, emitting along the entity's\r    local negative z-axis; <code>false</code> if the light is a point light which emanates in all directions.",
                "name": "isSpotlight"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "Affects the softness of the spotlight beam: the higher the value the softer the beam.",
                "name": "exponent"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1.57,
                "description": "Affects the size of the spotlight beam: the higher the value the larger the beam.",
                "name": "cutoff"
            }
        ],
        "examples": [
            "<caption>Create a spotlight pointing at the ground.</caption>\rEntities.addEntity({\r    type: \"Light\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -4 })),\r    rotation: Quat.fromPitchYawRollDegrees(-75, 0, 0),\r    dimensions: { x: 5, y: 5, z: 5 },\r    intensity: 100,\r    falloffRadius: 0.3,\r    isSpotlight: true,\r    exponent: 20,\r    cutoff: 30,\r    lifetime: 300  // Delete after 5 minutes.\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.EntityProperties-Light",
        "scope": "static"
    },
    {
        "description": "The <code>\"Line\"</code> {@link Entities.EntityType|EntityType} draws thin, straight lines between a sequence of two or more\rpoints. It has properties in addition to the common {@link Entities.EntityProperties|EntityProperties}.\r<p class=important>Deprecated: Use {@link Entities.EntityProperties-PolyLine|PolyLine} entities instead.</p>",
        "kind": "typedef",
        "name": "EntityProperties-Line",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0.1,0.1,0.1",
                "description": "The dimensions of the entity. Must be sufficient to contain all the\r    <code>linePoints</code>.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "defaultvalue": "[]",
                "description": "The sequence of points to draw lines between. The values are relative to the entity's\r    position. A maximum of 70 points can be specified. The property's value is set only if all the <code>linePoints</code>\r    lie within the entity's <code>dimensions</code>.",
                "name": "linePoints"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the line.",
                "name": "color"
            }
        ],
        "examples": [
            "<caption>Draw lines in a \"V\".</caption>\rvar entity = Entities.addEntity({\r    type: \"Line\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.75, z: -5 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 2, y: 2, z: 1 },\r    linePoints: [\r        { x: -1, y: 1, z: 0 },\r        { x: 0, y: -1, z: 0 },\r        { x: 1, y: 1, z: 0 },\r    ],\r    color: { red: 255, green: 0, blue: 0 },\r    lifetime: 300  // Delete after 5 minutes.\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.EntityProperties-Line",
        "scope": "static"
    },
    {
        "description": "The <code>\"Material\"</code> {@link Entities.EntityType|EntityType} modifies existing materials on entities and avatars. It \rhas properties in addition to the common {@link Entities.EntityProperties|EntityProperties}.\r<p>To apply a material to an entity, set the material entity's <code>parentID</code> property to the entity ID.\rTo apply a material to an avatar, set the material entity's <code>parentID</code> property to the avatar's session UUID.\rTo apply a material to your avatar such that it persists across domains and log-ins, create the material as an avatar entity \rby setting the <code>entityHostType</code> parameter in {@link Entities.addEntity} to <code>\"avatar\"</code> and set the \rentity's <code>parentID</code> property to <code>MyAvatar.SELF_ID</code>. \rMaterial entities render as non-scalable spheres if they don't have their parent set.</p>",
        "kind": "typedef",
        "name": "EntityProperties-Material",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0.1,0.1,0.1",
                "description": "Used when <code>materialMappingMode == \"projected\"</code>.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "URL to a {@link Entities.MaterialResource|MaterialResource}. If you append \r    <code>\"#name\"</code> to the URL, the  material with that name in the {@link Entities.MaterialResource|MaterialResource} \r    will be applied to the entity. Alternatively, set the property value to <code>\"materialData\"</code> to use the \r    <code>materialData</code> property for the {@link Entities.MaterialResource|MaterialResource} values.",
                "name": "materialURL"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "Used to store {@link Entities.MaterialResource|MaterialResource} data as a JSON string. \r    You can use <code>JSON.parse()</code> to parse the string into a JavaScript object which you can manipulate the \r    properties of, and use <code>JSON.stringify()</code> to convert the object into a string to put in the property.",
                "name": "materialData"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The priority for applying the material to its parent. Only the highest priority material is\r    applied, with materials of the same priority randomly assigned. Materials that come with the model have a priority of \r    <code>0</code>.",
                "name": "priority"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"0\"",
                "description": "Selects the mesh part or parts within the parent to which to apply the material.\r    If in the format <code>\"mat::string\"</code>, all mesh parts with material name <code>\"string\"</code> are replaced.\r    If <code>\"all\"</code>, then all mesh parts are replaced. \r    Otherwise the property value is parsed as an unsigned integer, specifying the mesh part index to modify.  \r    <p>If the string represents an array (starts with <code>\"[\"</code> and ends with <code>\"]\"</code>), the string is split \r    at each <code>\",\"</code> and each element parsed as either a number or a string if it starts with <code>\"mat::\"</code>. \r    For example, <code>\"[0,1,mat::string,mat::string2]\"</code> will replace mesh parts 0 and 1, and any mesh parts with \r    material <code>\"string\"</code> or <code>\"string2\"</code>. Do not put spaces around the commas. Invalid values are parsed \r    to <code>0</code>.</p>",
                "name": "parentMaterialName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"uv\"",
                "description": "How the material is mapped to the entity. Either <code>\"uv\"</code> or \r    <code>\"projected\"</code>. In <code>\"uv\"</code> mode, the material is evaluated within the UV space of the mesh it is \r    applied to. In <code>\"projected\"</code> mode, the 3D transform (position, rotation, and dimensions) of the Material \r    entity is used to evaluate the texture coordinates for the material.",
                "name": "materialMappingMode"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "defaultvalue": "0,0",
                "description": "Offset position in UV-space of the top left of the material, range \r    <code>{ x: 0, y: 0 }</code> &ndash; <code>{ x: 1, y: 1 }</code>.",
                "name": "materialMappingPos"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "defaultvalue": "1,1",
                "description": "How much to scale the material within the parent's UV-space.",
                "name": "materialMappingScale"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "How much to rotate the material within the parent's UV-space, in degrees.",
                "name": "materialMappingRot"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "<code>true</code> if the material repeats, <code>false</code> if it doesn't. If \r    <code>false</code>, fragments outside of texCoord 0 &ndash; 1 will be discarded. Works in both <code>\"uv\"</code> and \r    <code>\"projected\"</code> modes.",
                "name": "materialRepeat"
            }
        ],
        "examples": [
            "<caption>Color a sphere using a Material entity.</caption>\rvar entityID = Entities.addEntity({\r    type: \"Sphere\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    dimensions: { x: 1, y: 1, z: 1 },\r    color: { red: 128, green: 128, blue: 128 },\r    lifetime: 300  // Delete after 5 minutes.\r});\r\rvar materialID = Entities.addEntity({\r    type: \"Material\",\r    parentID: entityID,\r    materialURL: \"materialData\",\r    priority: 1,\r    materialData: JSON.stringify({\r        materialVersion: 1,\r        materials: {\r            // Value overrides entity's \"color\" property.\r            albedo: [1.0, 1.0, 0]  // Yellow\r        }\r    })\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.EntityProperties-Material",
        "scope": "static"
    },
    {
        "description": "The <code>\"Model\"</code> {@link Entities.EntityType|EntityType} displays a glTF, FBX, or OBJ model. When adding an entity, \rif no <code>dimensions</code> value is specified then the model is automatically sized to its \r<code>{@link Entities.EntityProperties|naturalDimensions}</code>. It has properties in addition to the common \r{@link Entities.EntityProperties|EntityProperties}.",
        "kind": "typedef",
        "name": "EntityProperties-Model",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0.1,0.1,0.1",
                "description": "The dimensions of the entity. When adding an entity, if no <code>dimensions</code> \r    value is specified then the model is automatically sized to its \r    <code>{@link Entities.EntityProperties|naturalDimensions}</code>.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The URL of the glTF, FBX, or OBJ model. glTF models may be in JSON or binary format \r    (\".gltf\" or \".glb\" URLs respectively). Baked models' URLs have \".baked\" before the file type. Model files may also be \r    compressed in GZ format, in which case the URL ends in \".gz\".",
                "name": "modelURL"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The scale factor applied to the model's dimensions.\r    <p class=\"important\">Deprecated: This property is deprecated and will be removed.</p>",
                "name": "modelScale"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A JSON string of texture name, URL pairs used when rendering the model in place of the\r    model's original textures. Use a texture name from the <code>originalTextures</code> property to override that texture. \r    Only the texture names and URLs to be overridden need be specified; original textures are used where there are no \r    overrides. You can use <code>JSON.stringify()</code> to convert a JavaScript object of name, URL pairs into a JSON \r    string.",
                "name": "textures"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"{}\"",
                "description": "A JSON string of texture name, URL pairs used in the model. The property value is \r    filled in after the entity has finished rezzing (i.e., textures have loaded). You can use <code>JSON.parse()</code> to \r    parse the JSON string into a JavaScript object of name, URL pairs. <em>Read-only.</em>",
                "name": "originalTextures"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "<em>Currently not used.</em>",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "ShapeType"
                    ]
                },
                "defaultvalue": "\"none\"",
                "description": "The shape of the collision hull used if collisions are enabled.",
                "name": "shapeType"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The model file to use for the compound shape if <code>shapeType</code> is\r    <code>\"compound\"</code>.",
                "name": "compoundShapeURL"
            },
            {
                "type": {
                    "names": [
                        "Entities.AnimationProperties"
                    ]
                },
                "description": "An animation to play on the model.",
                "name": "animation"
            },
            {
                "type": {
                    "names": [
                        "Array.<Quat>"
                    ]
                },
                "defaultvalue": "[]",
                "description": "Joint rotations applied to the model; <code>[]</code> if none are applied or the \r    model hasn't loaded. The array indexes are per {@link Entities.getJointIndex|getJointIndex}. Rotations are relative to \r    each joint's parent.\r    <p>Joint rotations can be set by {@link Entities.setLocalJointRotation|setLocalJointRotation} and similar functions, or \r    by setting the value of this property. If you set a joint rotation using this property, you also need to set the \r    corresponding <code>jointRotationsSet</code> value to <code>true</code>.</p>",
                "name": "jointRotations"
            },
            {
                "type": {
                    "names": [
                        "Array.<boolean>"
                    ]
                },
                "defaultvalue": "[]",
                "description": "<code>true</code> values for joints that have had rotations applied, \r    <code>false</code> otherwise; <code>[]</code> if none are applied or the model hasn't loaded. The array indexes are per \r    {@link Entities.getJointIndex|getJointIndex}.",
                "name": "jointRotationsSet"
            },
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "defaultvalue": "[]",
                "description": "Joint translations applied to the model; <code>[]</code> if none are applied or \r    the model hasn't loaded. The array indexes are per {@link Entities.getJointIndex|getJointIndex}. Translations are \r    relative to each joint's parent.\r    <p>Joint translations can be set by {@link Entities.setLocalJointTranslation|setLocalJointTranslation} and similar \r    functions, or by setting the value of this property. If you set a joint translation using this property you also need to \r    set the corresponding <code>jointTranslationsSet</code> value to <code>true</code>.</p>",
                "name": "jointTranslations"
            },
            {
                "type": {
                    "names": [
                        "Array.<boolean>"
                    ]
                },
                "defaultvalue": "[]",
                "description": "<code>true</code> values for joints that have had translations applied, \r    <code>false</code> otherwise; <code>[]</code> if none are applied or the model hasn't loaded. The array indexes are per \r    {@link Entities.getJointIndex|getJointIndex}.",
                "name": "jointTranslationsSet"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if when the entity is parented to an avatar, the avatar's \r    joint rotations are applied to the entity's joints; <code>false</code> if a parent avatar's joint rotations are not \r    applied to the entity's joints.",
                "name": "relayParentJoints"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the mesh parts of the model are LOD culled as a group, \r    <code>false</code> if separate mesh parts are LOD culled individually.",
                "name": "groupCulled"
            }
        ],
        "examples": [
            "<caption>Rez a Vive tracker puck.</caption>\rvar entity = Entities.addEntity({\r    type: \"Model\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.75, z: -2 })),\r    rotation: MyAvatar.orientation,\r    modelURL: \"http://content.highfidelity.com/seefo/production/puck-attach/vive_tracker_puck.obj\",\r    dimensions: { x: 0.0945, y: 0.0921, z: 0.0423 },\r    lifetime: 300  // Delete after 5 minutes.\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.EntityProperties-Model",
        "scope": "static"
    },
    {
        "description": "The <code>\"ParticleEffect\"</code> {@link Entities.EntityType|EntityType} displays a particle system that can be used to\rsimulate things such as fire, smoke, snow, magic spells, etc. The particles emanate from an ellipsoid or part thereof.\rIt has properties in addition to the common {@link Entities.EntityProperties|EntityProperties}.",
        "kind": "typedef",
        "name": "EntityProperties-ParticleEffect",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "<code>true</code> if particles are being emitted, <code>false</code> if they aren't.",
                "name": "isEmitting"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1000,
                "description": "The maximum number of particles to render at one time. Older particles are deleted if \r    necessary when new ones are created.",
                "name": "maxParticles"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "3s",
                "description": "How long, in seconds, each particle lives.",
                "name": "lifespan"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 15,
                "description": "The number of particles per second to emit.",
                "name": "emitRate"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 5,
                "description": "The speed, in m/s, that each particle is emitted at.",
                "name": "emitSpeed"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The spread in speeds at which particles are emitted at. For example, if \r    <code>emitSpeed == 5</code> and <code>speedSpread == 1</code>, particles will be emitted with speeds in the range \r    <code>4</code> &ndash; <code>6</code>m/s.",
                "name": "speedSpread"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,-9.8,0",
                "description": "The acceleration that is applied to each particle during its lifetime. The \r    default is Earth's gravity value.",
                "name": "emitAcceleration"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The spread in accelerations that each particle is given. For example, if\r    <code>emitAccelerations == {x: 0, y: -9.8, z: 0}</code> and <code>accelerationSpread ==\r    {x: 0, y: 1, z: 0}</code>, each particle will have an acceleration in the range <code>{x: 0, y: -10.8, z: 0}</code>\r    &ndash; <code>{x: 0, y: -8.8, z: 0}</code>.",
                "name": "accelerationSpread"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The dimensions of the particle effect, i.e., a bounding box containing all the particles\r    during their lifetimes, assuming that <code>emitterShouldTrail == false</code>. <em>Read-only.</em>",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if particles are \"left behind\" as the emitter moves,\r    <code>false</code> if they stay within the entity's dimensions.",
                "name": "emitterShouldTrail"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "defaultvalue": "-0.707,0,0,0.707",
                "description": "The orientation of particle emission relative to the entity's axes. By\r    default, particles emit along the entity's local z-axis, and <code>azimuthStart</code> and <code>azimuthFinish</code> \r    are relative to the entity's local x-axis. The default value is a rotation of -90 degrees about the local x-axis, i.e., \r    the particles emit vertically.",
                "name": "emitOrientation"
            },
            {
                "type": {
                    "names": [
                        "ShapeType"
                    ]
                },
                "defaultvalue": "\"ellipsoid\"",
                "description": "The shape from which particles are emitted.",
                "name": "shapeType"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The model file to use for the compound shape if <code>shapeType == \r    \"compound\"</code>.",
                "name": "compoundShapeURL"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The dimensions of the shape from which particles are emitted.",
                "name": "emitDimensions"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The starting radius within the shape at which particles start being emitted;\r    range <code>0.0</code> &ndash; <code>1.0</code> for the center to the surface, respectively.\r    Particles are emitted from the portion of the shape that lies between <code>emitRadiusStart</code> and the \r    shape's surface.",
                "name": "emitRadiusStart"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The angle in radians from the entity's local z-axis at which particles start being emitted \r    within the shape; range <code>0</code> &ndash; <code>Math.PI</code>. Particles are emitted from the portion of the \r    shape that lies between <code>polarStart</code> and <code>polarFinish</code>. Only used if <code>shapeType</code> is\r    <code>\"ellipsoid\"</code> or <code>\"sphere\"</code>.",
                "name": "polarStart"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The angle in radians from the entity's local z-axis at which particles stop being emitted \r    within the shape; range <code>0</code> &ndash; <code>Math.PI</code>. Particles are emitted from the portion of the \r    shape that lies between <code>polarStart</code> and <code>polarFinish</code>. Only used if <code>shapeType</code> is\r    <code>\"ellipsoid\"</code> or <code>\"sphere\"</code>.",
                "name": "polarFinish"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "-Math.PI",
                "description": "The angle in radians from the entity's local x-axis about the entity's local \r    z-axis at which particles start being emitted; range <code>-Math.PI</code> &ndash; <code>Math.PI</code>. Particles are \r    emitted from the portion of the shape that lies between <code>azimuthStart</code> and <code>azimuthFinish</code>. \r    Only used if <code>shapeType</code> is <code>\"ellipsoid\"</code>, <code>\"sphere\"</code>, or <code>\"circle\"</code>.",
                "name": "azimuthStart"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "Math.PI",
                "description": "The angle in radians from the entity's local x-axis about the entity's local\r    z-axis at which particles stop being emitted; range <code>-Math.PI</code> &ndash; <code>Math.PI</code>. Particles are\r    emitted from the portion of the shape that lies between <code>azimuthStart</code> and <code>azimuthFinish</code>. \r    Only used if <code>shapeType</code> is <code>\"ellipsoid\"</code>, <code>\"sphere\"</code>, or <code>\"circle\"</code>.",
                "name": "azimuthFinish"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The URL of a JPG or PNG image file to display for each particle. If you want transparency,\r    use PNG format.",
                "name": "textures"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.025,
                "description": "The radius of each particle at the middle of its life.",
                "name": "particleRadius"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": null,
                "description": "The radius of each particle at the start of its life. If <code>null</code>, the\r    <code>particleRadius</code> value is used.",
                "name": "radiusStart"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": null,
                "description": "The radius of each particle at the end of its life. If <code>null</code>, the\r    <code>particleRadius</code> value is used.",
                "name": "radiusFinish"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The spread in radius that each particle is given. For example, if \r    <code>particleRadius == 0.5</code> and <code>radiusSpread == 0.25</code>, each particle will have a radius in the range \r    <code>0.25</code> &ndash; <code>0.75</code>.",
                "name": "radiusSpread"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of each particle at the middle of its life.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "ColorFloat"
                    ]
                },
                "defaultvalue": "null,null,null",
                "description": "The color of each particle at the start of its life. If any of the \r    component values are undefined, the <code>color</code> value is used.",
                "name": "colorStart"
            },
            {
                "type": {
                    "names": [
                        "ColorFloat"
                    ]
                },
                "defaultvalue": "null,null,null",
                "description": "The color of each particle at the end of its life. If any of the \r    component values are undefined, the <code>color</code> value is used.",
                "name": "colorFinish"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The spread in color that each particle is given. For example, if\r    <code>color == {red: 100, green: 100, blue: 100}</code> and <code>colorSpread ==\r    {red: 10, green: 25, blue: 50}</code>, each particle will have a color in the range \r    <code>{red: 90, green: 75, blue: 50}</code> &ndash; <code>{red: 110, green: 125, blue: 150}</code>.",
                "name": "colorSpread"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The opacity of each particle at the middle of its life.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": null,
                "description": "The opacity of each particle at the start of its life. If <code>null</code>, the\r    <code>alpha</code> value is used.",
                "name": "alphaStart"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": null,
                "description": "The opacity of each particle at the end of its life. If <code>null</code>, the\r    <code>alpha</code> value is used.",
                "name": "alphaFinish"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The spread in alpha that each particle is given. For example, if \r    <code>alpha == 0.5</code> and <code>alphaSpread == 0.25</code>, each particle will have an alpha in the range \r    <code>0.25</code> &ndash; <code>0.75</code>.",
                "name": "alphaSpread"
            },
            {
                "type": {
                    "names": [
                        "Entities.Pulse"
                    ]
                },
                "description": "Color and alpha pulse.\r    <p class=\"important\">Deprecated: This property is deprecated and will be removed.</p>",
                "name": "pulse"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The rotation of each particle at the middle of its life, range <code>-2 * Math.PI</code> \r    &ndash; <code>2 * Math.PI</code> radians.",
                "name": "particleSpin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": null,
                "description": "The rotation of each particle at the start of its life, range <code>-2 * Math.PI</code> \r    &ndash; <code>2 * Math.PI</code> radians. If <code>null</code>, the <code>particleSpin</code> value is used.",
                "name": "spinStart"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": null,
                "description": "The rotation of each particle at the end of its life, range <code>-2 * Math.PI</code> \r    &ndash; <code>2 * Math.PI</code> radians. If <code>null</code>, the <code>particleSpin</code> value is used.",
                "name": "spinFinish"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The spread in spin that each particle is given, range <code>0</code> &ndash; \r    <code>2 * Math.PI</code> radians. For example, if <code>particleSpin == Math.PI</code> and \r    <code>spinSpread == Math.PI / 2</code>, each particle will have a rotation in the range <code>Math.PI / 2</code> &ndash; \r    <code>3 * Math.PI / 2</code>.",
                "name": "spinSpread"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the particles' rotations are relative to the entity's \r    instantaneous rotation, <code>false</code> if they're relative to world coordinates. If <code>true</code> with \r    <code>particleSpin == 0</code>, the particles keep oriented per the entity's orientation.",
                "name": "rotateWithEntity"
            }
        ],
        "examples": [
            "<caption>Create a ball of green smoke.</caption>\rparticles = Entities.addEntity({\r    type: \"ParticleEffect\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -4 })),\r    lifespan: 5,\r    emitRate: 10,\r    emitSpeed: 0.02,\r    speedSpread: 0.01,\r    emitAcceleration: { x: 0, y: 0.02, z: 0 },\r    polarFinish: Math.PI,\r    textures: \"https://content.highfidelity.com/DomainContent/production/Particles/wispy-smoke.png\",\r    particleRadius: 0.1,\r    color: { red: 0, green: 255, blue: 0 },\r    alphaFinish: 0,\r    lifetime: 300  // Delete after 5 minutes.\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.EntityProperties-ParticleEffect",
        "scope": "static"
    },
    {
        "description": "The <code>\"PolyLine\"</code> {@link Entities.EntityType|EntityType} draws textured, straight lines between a sequence of\rpoints. It has properties in addition to the common {@link Entities.EntityProperties|EntityProperties}.",
        "kind": "typedef",
        "name": "EntityProperties-PolyLine",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0.1,0.1,0.1",
                "description": "The dimensions of the entity, i.e., the size of the bounding box that contains the \r    lines drawn. <em>Read-only.</em>",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "defaultvalue": "[]",
                "description": "The sequence of points to draw lines between. The values are relative to the entity's\r    position. A maximum of 70 points can be specified.",
                "name": "linePoints"
            },
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "defaultvalue": "[]",
                "description": "The normal vectors for the line's surface at the <code>linePoints</code>. The values are \r    relative to the entity's orientation. Must be specified in order for the entity to render.",
                "name": "normals"
            },
            {
                "type": {
                    "names": [
                        "Array.<number>"
                    ]
                },
                "defaultvalue": "[]",
                "description": "The widths, in m, of the line at the <code>linePoints</code>. Must be specified in \r    order for the entity to render.",
                "name": "strokeWidths"
            },
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "defaultvalue": "[]",
                "description": "The base colors of each point, with values in the range <code>0.0,0.0,0.0</code> \r    &ndash; <code>1.0,1.0,1.0</code>. These colors are multiplied with the color of the texture. If there are more line \r    points than stroke colors, the <code>color</code> property value is used for the remaining points.\r    <p><strong>Warning:</strong> The ordinate values are in the range <code>0.0</code> &ndash; <code>1.0</code>.</p>",
                "name": "strokeColors"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "Used as the color for each point if <code>strokeColors</code> doesn't have a value for \r    the point.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The URL of a JPG or PNG texture to use for the lines. If you want transparency, use PNG\r    format.",
                "name": "textures"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "<code>true</code> if the texture is stretched to fill the whole line, \r    <code>false</code> if the texture repeats along the line.",
                "name": "isUVModeStretch"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the opacity of the strokes drops off away from the line center, \r    <code>false</code> if it doesn't.",
                "name": "glow"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if each line segment rotates to face the camera, <code>false</code> \r    if they don't.",
                "name": "faceCamera"
            }
        ],
        "examples": [
            "<caption>Draw a textured \"V\".</caption>\rvar entity = Entities.addEntity({\r    type: \"PolyLine\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.75, z: -5 })),\r    rotation: MyAvatar.orientation,\r    linePoints: [\r        { x: -1, y: 0.5, z: 0 },\r        { x: 0, y: 0, z: 0 },\r        { x: 1, y: 0.5, z: 0 }\r    ],\r    normals: [\r        { x: 0, y: 0, z: 1 },\r        { x: 0, y: 0, z: 1 },\r        { x: 0, y: 0, z: 1 }\r    ],\r    strokeWidths: [ 0.1, 0.1, 0.1 ],\r    color: { red: 255, green: 0, blue: 0 },  // Use just the red channel from the image.\r    textures: \"http://hifi-production.s3.amazonaws.com/DomainContent/Toybox/flowArts/trails.png\",\r    isUVModeStretch: true,\r    lifetime: 300  // Delete after 5 minutes.\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.EntityProperties-PolyLine",
        "scope": "static"
    },
    {
        "description": "The <code>\"PolyVox\"</code> {@link Entities.EntityType|EntityType} displays a set of textured voxels.\rIt has properties in addition to the common {@link Entities.EntityProperties|EntityProperties}.\rIf you have two or more neighboring PolyVox entities of the same size abutting each other, you can display them as joined by\rconfiguring their <code>voxelSurfaceStyle</code> and various neighbor ID properties.\r<p>PolyVox entities uses a library from <a href=\"http://www.volumesoffun.com/\">Volumes of Fun</a>. Their\r<a href=\"http://www.volumesoffun.com/polyvox-documentation/\">library documentation</a> may be useful to read.</p>",
        "kind": "typedef",
        "name": "EntityProperties-PolyVox",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0.1,0.1,0.1",
                "description": "The dimensions of the entity.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "32,32,32",
                "description": "Integer number of voxels along each axis of the entity, in the range \r    <code>1,1,1</code> to <code>128,128,128</code>. The dimensions of each voxel is \r    <code>dimensions / voxelVolumesize</code>.",
                "name": "voxelVolumeSize"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"ABAAEAAQAAAAHgAAEAB42u3BAQ0AAADCoPdPbQ8HFAAAAPBuEAAAAQ==\"",
                "description": "Base-64 encoded compressed dump of \r    the PolyVox data. This property is typically not used in scripts directly; rather, functions that manipulate a PolyVox \r    entity update it.\r    <p>The size of this property increases with the size and complexity of the PolyVox entity, with the size depending on how \r    the particular entity's voxels compress. Because this property value has to fit within a High Fidelity datagram packet, \r    there is a limit to the size and complexity of a PolyVox entity; edits which would result in an overflow are rejected.</p>",
                "name": "voxelData"
            },
            {
                "type": {
                    "names": [
                        "Entities.PolyVoxSurfaceStyle"
                    ]
                },
                "defaultvalue": 2,
                "description": "The style of rendering the voxels' surface and how \r    neighboring PolyVox entities are joined.",
                "name": "voxelSurfaceStyle"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The URL of the texture to map to surfaces perpendicular to the entity's local x-axis. \r    JPG or PNG format. If no texture is specified the surfaces display white.",
                "name": "xTextureURL"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The URL of the texture to map to surfaces perpendicular to the entity's local y-axis. \r    JPG or PNG format. If no texture is specified the surfaces display white.",
                "name": "yTextureURL"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The URL of the texture to map to surfaces perpendicular to the entity's local z-axis. \r    JPG or PNG format. If no texture is specified the surfaces display white.",
                "name": "zTextureURL"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": "Uuid.NULL",
                "description": "The ID of the neighboring PolyVox entity in the entity's -ve local x-axis \r    direction, if you want them joined. Set to {@link Uuid(0)|Uuid.NULL} if there is none or you don't want to join them.",
                "name": "xNNeighborID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": "Uuid.NULL",
                "description": "The ID of the neighboring PolyVox entity in the entity's -ve local y-axis \r    direction, if you want them joined. Set to {@link Uuid(0)|Uuid.NULL} if there is none or you don't want to join them.",
                "name": "yNNeighborID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": "Uuid.NULL",
                "description": "The ID of the neighboring PolyVox entity in the entity's -ve local z-axis \r    direction, if you want them joined. Set to {@link Uuid(0)|Uuid.NULL} if there is none or you don't want to join them.",
                "name": "zNNeighborID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": "Uuid.NULL",
                "description": "The ID of the neighboring PolyVox entity in the entity's +ve local x-axis \r    direction, if you want them joined. Set to {@link Uuid(0)|Uuid.NULL} if there is none or you don't want to join them.",
                "name": "xPNeighborID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": "Uuid.NULL",
                "description": "The ID of the neighboring PolyVox entity in the entity's +ve local y-axis \r    direction, if you want them joined. Set to {@link Uuid(0)|Uuid.NULL} if there is none or you don't want to join them.",
                "name": "yPNeighborID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": "Uuid.NULL",
                "description": "The ID of the neighboring PolyVox entity in the entity's +ve local z-axis \r    direction, if you want them joined. Set to {@link Uuid(0)|Uuid.NULL} if there is none or you don't want to join them.",
                "name": "zPNeighborID"
            }
        ],
        "examples": [
            "<caption>Create a textured PolyVox sphere.</caption>\rvar position = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -8 }));\rvar texture = \"http://public.highfidelity.com/cozza13/tuscany/Concrete2.jpg\";\rvar polyVox = Entities.addEntity({\r    type: \"PolyVox\",\r    position: position,\r    dimensions: { x: 2, y: 2, z: 2 },\r    xTextureURL: texture,\r    yTextureURL: texture,\r    zTextureURL: texture,\r    lifetime: 300  // Delete after 5 minutes.\r});\rEntities.setVoxelSphere(polyVox, position, 0.8, 255);"
        ],
        "memberof": "Entities",
        "longname": "Entities.EntityProperties-PolyVox",
        "scope": "static"
    },
    {
        "description": "The <code>\"Shape\"</code> {@link Entities.EntityType|EntityType} displays an entity of a specified <code>shape</code>.\rIt has properties in addition to the common {@link Entities.EntityProperties|EntityProperties}.",
        "kind": "typedef",
        "name": "EntityProperties-Shape",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Entities.Shape"
                    ]
                },
                "defaultvalue": "\"Sphere\"",
                "description": "The shape of the entity.",
                "name": "shape"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0.1,0.1,0.1",
                "description": "The dimensions of the entity.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the entity.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The opacity of the entity, range <code>0.0</code> &ndash; <code>1.0</code>.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "Entities.Pulse"
                    ]
                },
                "description": "Color and alpha pulse.\r    <p class=\"important\">Deprecated: This property is deprecated and will be removed.</p>",
                "name": "pulse"
            }
        ],
        "examples": [
            "<caption>Create a cylinder.</caption>\rvar shape = Entities.addEntity({\r    type: \"Shape\",\r    shape: \"Cylinder\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    dimensions: { x: 0.4, y: 0.6, z: 0.4 },\r    lifetime: 300  // Delete after 5 minutes.\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.EntityProperties-Shape",
        "scope": "static"
    },
    {
        "description": "The <code>\"Sphere\"</code> {@link Entities.EntityType|EntityType} is the same as the <code>\"Shape\"</code>\r{@link Entities.EntityType|EntityType} except that its <code>shape</code> value is always set to <code>\"Sphere\"</code>\rwhen the entity is created. If its <code>shape</code> property value is subsequently changed then the entity's \r<code>type</code> will be reported as <code>\"Box\"</code> if the <code>shape</code> is set to <code>\"Cube\"</code>, \rotherwise it will be reported as <code>\"Shape\"</code>.",
        "kind": "typedef",
        "name": "EntityProperties-Sphere",
        "type": {
            "names": [
                "object"
            ]
        },
        "see": [
            "{@link Entities.EntityProperties-Shape|EntityProperties-Shape}"
        ],
        "memberof": "Entities",
        "longname": "Entities.EntityProperties-Sphere",
        "scope": "static"
    },
    {
        "description": "The <code>\"Text\"</code> {@link Entities.EntityType|EntityType} displays a 2D rectangle of text in the domain.\rIt has properties in addition to the common {@link Entities.EntityProperties|EntityProperties}.",
        "kind": "typedef",
        "name": "EntityProperties-Text",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0.1,0.1,0.01",
                "description": "The dimensions of the entity.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The text to display on the face of the entity. Text wraps if necessary to fit. New lines can be\r    created using <code>\\n</code>. Overflowing lines are not displayed.",
                "name": "text"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.1,
                "description": "The height of each line of text (thus determining the font size).",
                "name": "lineHeight"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the text.",
                "name": "textColor"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "1.0",
                "description": "The opacity of the text.",
                "name": "textAlpha"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The color of the background rectangle.",
                "name": "backgroundColor"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "1.0",
                "description": "The opacity of the background.",
                "name": "backgroundAlpha"
            },
            {
                "type": {
                    "names": [
                        "Entities.Pulse"
                    ]
                },
                "description": "Color and alpha pulse.\r    <p class=\"important\">Deprecated: This property is deprecated and will be removed.</p>",
                "name": "pulse"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "0.0",
                "description": "The left margin, in meters.",
                "name": "leftMargin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "0.0",
                "description": "The right margin, in meters.",
                "name": "rightMargin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "0.0",
                "description": "The top margin, in meters.",
                "name": "topMargin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "0.0",
                "description": "The bottom margin, in meters.",
                "name": "bottomMargin"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the entity is unaffected by lighting, <code>false</code> if it is lit \r    by the key light and local lights.",
                "name": "unlit"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The font to render the text with. It can be one of the following: <code>\"Courier\"</code>,\r    <code>\"Inconsolata\"</code>, <code>\"Roboto\"</code>, <code>\"Timeless\"</code>, or a path to a .sdff file.",
                "name": "font"
            },
            {
                "type": {
                    "names": [
                        "Entities.TextEffect"
                    ]
                },
                "defaultvalue": "\"none\"",
                "description": "The effect that is applied to the text.",
                "name": "textEffect"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the effect.",
                "name": "textEffectColor"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.2,
                "description": "The magnitude of the text effect, range <code>0.0</code> &ndash; <code>0.5</code>.",
                "name": "textEffectThickness"
            },
            {
                "type": {
                    "names": [
                        "BillboardMode"
                    ]
                },
                "defaultvalue": "\"none\"",
                "description": "Whether the entity is billboarded to face the camera.",
                "name": "billboardMode"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if <code>billboardMode</code> is <code>\"yaw\"</code>, <code>false</code> \r    if it isn't. Setting this property to <code>false</code> sets the <code>billboardMode</code> to <code>\"none\"</code>.\r    <p class=\"important\">Deprecated: This property is deprecated and will be removed.</p>",
                "name": "faceCamera"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if <code>billboardMode</code> is <code>\"full\"</code>, \r    <code>false</code> if it isn't. Setting this property to <code>false</code> sets the <code>billboardMode</code> to\r    <code>\"none\"</code>.\r    <p class=\"important\">Deprecated: This property is deprecated and will be removed.</p>",
                "name": "isFacingAvatar"
            }
        ],
        "examples": [
            "<caption>Create a text entity.</caption>\rvar text = Entities.addEntity({\r    type: \"Text\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    dimensions: { x: 0.6, y: 0.3, z: 0.01 },\r    lineHeight: 0.12,\r    text: \"Hello\\nthere!\",\r    billboardMode: \"yaw\",\r    lifetime: 300  // Delete after 5 minutes.\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.EntityProperties-Text",
        "scope": "static"
    },
    {
        "description": "The <code>\"Web\"</code> {@link Entities.EntityType|EntityType} displays a browsable web page. Each user views their own copy\rof the web page: if one user navigates to another page on the entity, other users do not see the change; if a video is being \rplayed, users don't see it in sync. It has properties in addition to the common \r{@link Entities.EntityProperties|EntityProperties}.",
        "kind": "typedef",
        "name": "EntityProperties-Web",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0.1,0.1,0.01",
                "description": "The dimensions of the entity.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The URL of the web page to display. This value does not change as you or others navigate\r    on the Web entity.",
                "name": "sourceUrl"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the web surface. This color tints the web page displayed: the pixel \r    colors on the web page are multiplied by the property color. For example, a value of \r    <code>{ red: 255, green: 0, blue: 0 }</code> lets only the red channel of pixels' colors through.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The opacity of the web surface.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "Entities.Pulse"
                    ]
                },
                "description": "Color and alpha pulse.\r    <p class=\"important\">Deprecated: This property is deprecated and will be removed.</p>",
                "name": "pulse"
            },
            {
                "type": {
                    "names": [
                        "BillboardMode"
                    ]
                },
                "defaultvalue": "\"none\"",
                "description": "Whether the entity is billboarded to face the camera.",
                "name": "billboardMode"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if <code>billboardMode</code> is <code>\"yaw\"</code>, <code>false</code> \r    if it isn't. Setting this property to <code>false</code> sets the <code>billboardMode</code> to <code>\"none\"</code>.\r    <p class=\"important\">Deprecated: This property is deprecated and will be removed.</p>",
                "name": "faceCamera"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if <code>billboardMode</code> is <code>\"full\"</code>, \r    <code>false</code> if it isn't. Setting this property to <code>false</code> sets the <code>billboardMode</code> to\r    <code>\"none\"</code>.\r    <p class=\"important\">Deprecated: This property is deprecated and will be removed.</p>",
                "name": "isFacingAvatar"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 30,
                "description": "The resolution to display the page at, in dots per inch. If you convert this to dots per meter \r    (multiply by 1 / 0.0254 = 39.3701) then multiply <code>dimensions.x</code> and <code>dimensions.y</code> by that value \r    you get the resolution in pixels.",
                "name": "dpi"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The URL of a JavaScript file to inject into the web page.",
                "name": "scriptURL"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 10,
                "description": "The maximum update rate for the web content, in frames/second.",
                "name": "maxFPS"
            },
            {
                "type": {
                    "names": [
                        "WebInputMode"
                    ]
                },
                "defaultvalue": "\"touch\"",
                "description": "The user input mode to use.",
                "name": "inputMode"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "<code>true</code> if the entity is highlighted when it has keyboard \r    focus, <code>false</code> if it isn't.",
                "name": "showKeyboardFocusHighlight"
            }
        ],
        "examples": [
            "<caption>Create a Web entity displaying at 1920 x 1080 resolution.</caption>\rvar METERS_TO_INCHES = 39.3701;\rvar entity = Entities.addEntity({\r    type: \"Web\",\r    sourceUrl: \"https://highfidelity.com/\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.75, z: -4 })),\r    rotation: MyAvatar.orientation,\r    dimensions: {\r        x: 3,\r        y: 3 * 1080 / 1920,\r        z: 0.01\r    },\r    dpi: 1920 / (3 * METERS_TO_INCHES),\r    lifetime: 300  // Delete after 5 minutes.\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.EntityProperties-Web",
        "scope": "static"
    },
    {
        "description": "The <code>\"Zone\"</code> {@link Entities.EntityType|EntityType} is a volume of lighting effects and avatar permissions.\rAvatar interaction events such as {@link Entities.enterEntity} are also often used with a Zone entity. It has properties in \raddition to the common {@link Entities.EntityProperties|EntityProperties}.",
        "kind": "typedef",
        "name": "EntityProperties-Zone",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0.1,0.1,0.1",
                "description": "The dimensions of the volume in which the zone's lighting effects and avatar \r    permissions have effect.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "ShapeType"
                    ]
                },
                "defaultvalue": "\"box\"",
                "description": "The shape of the volume in which the zone's lighting effects and avatar\r    permissions have effect. Reverts to the default value if set to <code>\"none\"</code>, or set to <code>\"compound\"</code> \r    and <code>compoundShapeURL</code> is <code>\"\"</code>.",
                "name": "shapeType"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The model file to use for the compound shape if <code>shapeType</code> is \r    <code>\"compound\"</code>.",
                "name": "compoundShapeURL"
            },
            {
                "type": {
                    "names": [
                        "Entities.ComponentMode"
                    ]
                },
                "defaultvalue": "\"inherit\"",
                "description": "Configures the key light in the zone.",
                "name": "keyLightMode"
            },
            {
                "type": {
                    "names": [
                        "Entities.KeyLight"
                    ]
                },
                "description": "The key light properties of the zone.",
                "name": "keyLight"
            },
            {
                "type": {
                    "names": [
                        "Entities.ComponentMode"
                    ]
                },
                "defaultvalue": "\"inherit\"",
                "description": "Configures the ambient light in the zone.",
                "name": "ambientLightMode"
            },
            {
                "type": {
                    "names": [
                        "Entities.AmbientLight"
                    ]
                },
                "description": "The ambient light properties of the zone.",
                "name": "ambientLight"
            },
            {
                "type": {
                    "names": [
                        "Entities.ComponentMode"
                    ]
                },
                "defaultvalue": "\"inherit\"",
                "description": "Configures the skybox displayed in the zone.",
                "name": "skyboxMode"
            },
            {
                "type": {
                    "names": [
                        "Entities.Skybox"
                    ]
                },
                "description": "The skybox properties of the zone.",
                "name": "skybox"
            },
            {
                "type": {
                    "names": [
                        "Entities.ComponentMode"
                    ]
                },
                "defaultvalue": "\"inherit\"",
                "description": "Configures the haze in the zone.",
                "name": "hazeMode"
            },
            {
                "type": {
                    "names": [
                        "Entities.Haze"
                    ]
                },
                "description": "The haze properties of the zone.",
                "name": "haze"
            },
            {
                "type": {
                    "names": [
                        "Entities.ComponentMode"
                    ]
                },
                "defaultvalue": "\"inherit\"",
                "description": "Configures the bloom in the zone.",
                "name": "bloomMode"
            },
            {
                "type": {
                    "names": [
                        "Entities.Bloom"
                    ]
                },
                "description": "The bloom properties of the zone.",
                "name": "bloom"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "<code>true</code> if visitors can fly in the zone; <code>false</code> if they \r    cannot. Only works for domain entities.",
                "name": "flyingAllowed"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "<code>true</code> if visitors with avatar collisions turned off will not \r    collide with content in the zone; <code>false</code> if visitors will always collide with content in the zone. Only \r    works for domain entities.",
                "name": "ghostingAllowed"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The URL of a JavaScript file that filters changes to properties of entities within the \r    zone. It is periodically executed for each entity in the zone. It can, for example, be used to not allow changes to \r    certain properties:\r<pre>\rfunction filter(properties) {\r    // Check and edit properties object values,\r    // e.g., properties.modelURL, as required.\r    return properties;\r}\r</pre>",
                "name": "filterURL"
            },
            {
                "type": {
                    "names": [
                        "Entities.AvatarPriorityMode"
                    ]
                },
                "defaultvalue": "\"inherit\"",
                "description": "Configures the priority of updates from avatars in the \r    zone to other clients.",
                "name": "avatarPriority"
            }
        ],
        "examples": [
            "<caption>Create a zone that casts a red key light along the x-axis.</caption>\rvar zone = Entities.addEntity({\r    type: \"Zone\",\r    position: MyAvatar.position,\r    dimensions: { x: 100, y: 100, z: 100 },\r    keyLightMode: \"enabled\",\r    keyLight: {\r        \"color\": { \"red\": 255, \"green\": 0, \"blue\": 0 },\r        \"direction\": { \"x\": 1, \"y\": 0, \"z\": 0 }\r    },\r    lifetime: 300  // Delete after 5 minutes.\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.EntityProperties-Zone",
        "scope": "static"
    },
    {
        "description": "The <code>\"Image\"</code> {@link Entities.EntityType|EntityType} displays an image on a 2D rectangle in the domain.\rIt has properties in addition to the common {@link Entities.EntityProperties|EntityProperties}.",
        "kind": "typedef",
        "name": "EntityProperties-Image",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0.1,0.1,0.01",
                "description": "The dimensions of the entity.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The URL of the image to use.",
                "name": "imageURL"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the image should be emissive (unlit), <code>false</code> if it \r    shouldn't.",
                "name": "emissive"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "<code>true</code> if the image should maintain its aspect ratio, \r    <code>false</code> if it shouldn't.",
                "name": "keepAspectRatio"
            },
            {
                "type": {
                    "names": [
                        "Rect"
                    ]
                },
                "defaultvalue": "0,0,0,0",
                "description": "The portion of the image to display. If width or height are <code>0</code>, it defaults \r    to the full image in that dimension.",
                "name": "subImage"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the image.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The opacity of the image.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "Entities.Pulse"
                    ]
                },
                "description": "Color and alpha pulse.\r    <p class=\"important\">Deprecated: This property is deprecated and will be removed.</p>",
                "name": "pulse"
            },
            {
                "type": {
                    "names": [
                        "BillboardMode"
                    ]
                },
                "defaultvalue": "\"none\"",
                "description": "Whether the entity is billboarded to face the camera.",
                "name": "billboardMode"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if <code>billboardMode</code> is <code>\"yaw\"</code>, <code>false</code> \r    if it isn't. Setting this property to <code>false</code> sets the <code>billboardMode</code> to <code>\"none\"</code>.\r    <p class=\"important\">Deprecated: This property is deprecated and will be removed.</p>",
                "name": "faceCamera"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if <code>billboardMode</code> is <code>\"full\"</code>, \r    <code>false</code> if it isn't. Setting this property to <code>false</code> sets the <code>billboardMode</code> to\r    <code>\"none\"</code>.\r    <p class=\"important\">Deprecated: This property is deprecated and will be removed.</p>",
                "name": "isFacingAvatar"
            }
        ],
        "examples": [
            "<caption>Create an image entity.</caption>\rvar image = Entities.addEntity({\r    type: \"Image\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    dimensions: { x: 0.6, y: 0.3, z: 0.01 },\r    imageURL: \"https://images.pexels.com/photos/1020315/pexels-photo-1020315.jpeg\",\r    billboardMode: \"yaw\",\r    lifetime: 300  // Delete after 5 minutes.\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.EntityProperties-Image",
        "scope": "static"
    },
    {
        "description": "The <code>\"Grid\"</code> {@link Entities.EntityType|EntityType} displays a grid on a 2D plane.\rIt has properties in addition to the common {@link Entities.EntityProperties|EntityProperties}.",
        "kind": "typedef",
        "name": "EntityProperties-Grid",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "0.1,0.1,0.01 - The dimensions of the entity.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the grid.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The opacity of the grid.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "Entities.Pulse"
                    ]
                },
                "description": "Color and alpha pulse.\r    <p class=\"important\">Deprecated: This property is deprecated and will be removed.</p>",
                "name": "pulse"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "<code>true</code> if the grid is always visible even as the camera moves to another\r    position, <code>false</code> if it doesn't follow the camrmea.",
                "name": "followCamera"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 5,
                "description": "Integer number of <code>minorGridEvery</code> intervals at which to draw a thick grid\r    line. Minimum value = <code>1</code>.",
                "name": "majorGridEvery"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "Real number of meters at which to draw thin grid lines. Minimum value =\r    <code>0.001</code>.",
                "name": "minorGridEvery"
            }
        ],
        "examples": [
            "<caption>Create a grid entity.</caption>\rvar grid = Entities.addEntity({\r    type: \"Grid\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    dimensions: { x: 100.0, y: 100.0, z: 0.01 },\r    followCamera: false,\r    majorGridEvery: 4,\r    minorGridEvery: 0.5,\r    lifetime: 300  // Delete after 5 minutes.\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.EntityProperties-Grid",
        "scope": "static"
    },
    {
        "description": "The <code>\"Gizmo\"</code> {@link Entities.EntityType|EntityType} displays an entity that could be used as UI.\rIt has properties in addition to the common {@link Entities.EntityProperties|EntityProperties}.",
        "kind": "typedef",
        "name": "EntityProperties-Gizmo",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0.1,0.001,0.1",
                "description": "The dimensions of the entity.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "Entities.GizmoType"
                    ]
                },
                "defaultvalue": "\"ring\"",
                "description": "The gizmo type of the entity.",
                "name": "gizmoType"
            },
            {
                "type": {
                    "names": [
                        "Entities.RingGizmo"
                    ]
                },
                "description": "The ring gizmo properties.",
                "name": "ring"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.EntityProperties-Gizmo",
        "scope": "static"
    },
    {
        "description": "The axis-aligned bounding box of an entity.",
        "kind": "typedef",
        "name": "BoundingBox",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The bottom right near (minimum axes values) corner of the AA box.",
                "name": "brn"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The top far left (maximum axes values) corner of the AA box.",
                "name": "tfl"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The center of the AA box.",
                "name": "center"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The dimensions of the AA box.",
                "name": "dimensions"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.BoundingBox",
        "scope": "static"
    },
    {
        "description": "Information on how an entity is rendered. Properties are only filled in for <code>Model</code> entities; other \rentity types have an empty object, <code>{}</code>.",
        "kind": "typedef",
        "name": "RenderInfo",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The number of vertices in the entity.",
                "name": "verticesCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The number of textures in the entity.",
                "name": "texturesCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The total size of the textures in the entity, in bytes.",
                "name": "texturesSize"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if any of the textures has transparency, <code>false</code> \r    if none of them do.",
                "name": "hasTransparent"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The number of draw calls required to render the entity.",
                "name": "drawCalls"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.RenderInfo",
        "scope": "static"
    },
    {
        "description": "Information about an entity property.",
        "kind": "typedef",
        "name": "EntityPropertyInfo",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The internal number of the property.",
                "name": "propertyEnum"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The minimum numerical value the property may have, if available, otherwise <code>\"\"</code>.",
                "name": "minimum"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The maximum numerical value the property may have, if available, otherwise <code>\"\"</code>.",
                "name": "maximum"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.EntityPropertyInfo",
        "scope": "static"
    },
    {
        "description": "The result of a {@link Entities.findRayIntersection|findRayIntersection} search using a {@link PickRay}.",
        "kind": "typedef",
        "name": "RayToEntityIntersectionResult",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the {@link PickRay} intersected an entity, <code>false</code> if it \r    didn't.",
                "name": "intersects"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Is always <code>true</code>.",
                "name": "accurate"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID if the entity intersected, if any, otherwise <code>null</code>.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The distance from the {@link PickRay} origin to the intersection point.",
                "name": "distance"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The intersection point.",
                "name": "intersection"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The surface normal of the entity at the intersection point.",
                "name": "surfaceNormal"
            },
            {
                "type": {
                    "names": [
                        "BoxFace"
                    ]
                },
                "description": "The face of the entity's axis-aligned box that the ray intersects.",
                "name": "face"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Extra information depending on the entity intersected. Currently, only <code>Model</code> \r    entities provide extra information, and the information provided depends on the <code>precisionPicking</code> parameter \r    value that the search function was called with.",
                "name": "extraInfo"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.RayToEntityIntersectionResult",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>The <code>Entities</code> API provides facilities to create and interact with entities. Entities are 2D or 3D objects \rdisplayed in-world. Depending on their {@link Entities.EntityHostType|EntityHostType}, they may persist in the domain as \r\"domain\" entities, travel to different domains with a user as \"avatar\" entities, or be visible only to an individual user as \r\"local\" entities (a.k.a. \"overlays\").\r\r<p>Note: For Interface, avatar, and client entity scripts, the entities available to scripts are those that Interface has \rdisplayed and so knows about. For assignment client scripts, the entities available are those that are \"seen\" by the \r{@link EntityViewer}. For entity server scripts, all entities are available.</p>\r\r<h3>Entity Methods</h3>\r\r<p>Some of the API's signals correspond to entity methods that are called, if present, in the entity being interacted with. \rThe client or server entity script must expose them as a property. However, unlike {@link Entities.callEntityMethod}, server \rentity scripts do not need to list them in an <code>remotelyCallable</code> property. The entity methods are called with \rparameters per their corresponding signal.</p>\r<table>\r  <thead>\r    <tr><th>Method Name</th><th>Corresponding Signal</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>clickDownOnEntity</code></td><td>{@link Entities.clickDownOnEntity}</td></tr>\r    <tr><td><code>clickReleaseOnEntity</code></td><td>{@link Entities.clickReleaseOnEntity}</td></tr>\r    <tr><td><code>collisionWithEntity</code></td><td>{@link Entities.collisionWithEntity}</td></tr>\r    <tr><td><code>enterEntity</code></td><td>{@link Entities.enterEntity}</td></tr>\r    <tr><td><code>holdingClickOnEntity</code></td><td>{@link Entities.holdingClickOnEntity}</td></tr>\r    <tr><td><code>hoverEnterEntity</code></td><td>{@link Entities.hoverEnterEntity}</td></tr>\r    <tr><td><code>hoverLeaveEntity</code></td><td>{@link Entities.hoverLeaveEntity}</td></tr>\r    <tr><td><code>hoverOverEntity</code></td><td>{@link Entities.hoverOverEntity}</td></tr>\r    <tr><td><code>leaveEntity</code></td><td>{@link Entities.leaveEntity}</td></tr>\r    <tr><td><code>mouseDoublePressOnEntity</code></td><td>{@link Entities.mouseDoublePressOnEntity}</td></tr>\r    <tr><td><code>mouseMoveOnEntity</code></td><td>{@link Entities.mouseMoveOnEntity}</td></tr>\r    <tr><td><code>mouseMoveEvent</code></td><td><span class=\"important\">Deprecated: Use <code>mouseMoveOnEntity</code> \r      instead.</span></td></tr>\r    <tr><td><code>mousePressOnEntity</code></td><td>{@link Entities.mousePressOnEntity}</td></tr>\r    <tr><td><code>mouseReleaseOnEntity</code></td><td>{@link Entities.mouseReleaseOnEntity}</td></tr>\r  </tbody>\r</table>\r<p>See {@link Entities.clickDownOnEntity} for an example.</p>",
        "kind": "namespace",
        "name": "Entities",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The {@link Entities.EntityProperties-Web|Web} entity that has keyboard focus. If no \r    Web entity has keyboard focus, returns <code>null</code>; set to <code>null</code> or {@link Uuid(0)|Uuid.NULL} to clear \r    keyboard focus.",
                "name": "keyboardFocusEntity"
            }
        ],
        "longname": "Entities",
        "scope": "global"
    },
    {
        "description": "Gets the properties of multiple entities.",
        "kind": "function",
        "name": "getMultipleEntityProperties",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "The IDs of the entities to get the properties of.",
                "name": "entityIDs"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>",
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "The name or names of the properties to get. For properties that are \r    objects (e.g., the <code>\"keyLight\"</code> property), use the property and subproperty names in dot notation (e.g., \r    <code>\"keyLight.color\"</code>).",
                "name": "desiredProperties"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Entities.EntityProperties>"
                    ]
                },
                "description": "The specified properties of each entity for each entity that can be found. If \r    none of the entities can be found, then an empty array is returned. If no properties are specified, then all \r    properties are returned."
            }
        ],
        "examples": [
            "<caption>Retrieve the names of the nearby entities</caption>\rvar SEARCH_RADIUS = 50; // meters\rvar entityIDs = Entities.findEntities(MyAvatar.position, SEARCH_RADIUS);\rvar propertySets = Entities.getMultipleEntityProperties(entityIDs, \"name\");\rprint(\"Nearby entity names: \" + JSON.stringify(propertySets));"
        ],
        "memberof": "Entities",
        "longname": "Entities.getMultipleEntityProperties",
        "scope": "static"
    },
    {
        "description": "Checks whether or not the script can change the <code>locked</code> property of entities. Locked entities have their\r<code>locked</code> property set to <code>true</code> and cannot be edited or deleted.",
        "kind": "function",
        "name": "canAdjustLocks",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the domain server will allow the script to change the <code>locked</code> \r    property of entities, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Lock an entity if you can.</caption>\rif (Entities.canAdjustLocks()) {\r    Entities.editEntity(entityID, { locked: true });\r} else {\r    Window.alert(\"You do not have the permissions to set an entity locked!\");\r}"
        ],
        "memberof": "Entities",
        "longname": "Entities.canAdjustLocks",
        "scope": "static"
    },
    {
        "description": "Checks whether or not the script can rez (create) new entities in the domain.",
        "kind": "function",
        "name": "canRez",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the domain server will allow the script to rez (create) new entities, otherwise \r    <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.canRez",
        "scope": "static"
    },
    {
        "description": "Checks whether or not the script can rez (create) new temporary entities in the domain. Temporary entities are entities \rwith a finite <code>lifetime</code> property value set.",
        "kind": "function",
        "name": "canRezTmp",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the domain server will allow the script to rez (create) new temporary entities,\r    otherwise <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.canRezTmp",
        "scope": "static"
    },
    {
        "description": "Checks whether or not the script can rez (create) new certified entities in the domain. Certified entities are entities \rthat have PoP certificates.",
        "kind": "function",
        "name": "canRezCertified",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the domain server will allow the script to rez (create) new certified entities,\r    otherwise <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.canRezCertified",
        "scope": "static"
    },
    {
        "description": "Checks whether or not the script can rez (create) new temporary certified entities in the domain. Temporary entities are \rentities with a finite <code>lifetime</code> property value set. Certified entities are entities that have PoP \rcertificates.",
        "kind": "function",
        "name": "canRezTmpCertified",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the domain server will allow the script to rez (create) new temporary certified \r    entities, otherwise <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.canRezTmpCertified",
        "scope": "static"
    },
    {
        "description": "Checks whether or not the script can make changes to the asset server's assets.",
        "kind": "function",
        "name": "canWriteAssets",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the domain server will allow the script to make changes to the asset server's \r    assets, otherwise <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.canWriteAssets",
        "scope": "static"
    },
    {
        "description": "Checks whether or not the script can replace the domain's content set.",
        "kind": "function",
        "name": "canReplaceContent",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the domain server will allow the script to replace the domain's content set, \r    otherwise <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.canReplaceContent",
        "scope": "static"
    },
    {
        "description": "Checks whether or not the script can get and set the <code>privateUserData</code> property of entities.",
        "kind": "function",
        "name": "canGetAndSetPrivateUserData",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the domain server will allow the script to get and set the \r    <code>privateUserData</code> property of entities, otherwise <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.canGetAndSetPrivateUserData",
        "scope": "static"
    },
    {
        "description": "<p>How an entity is hosted and sent to others for display.</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"domain\"</code></td><td>Domain entities are stored on the domain, are visible to everyone, and are \r      sent to everyone by the entity server.</td></tr>\r    <tr><td><code>\"avatar\"</code></td><td>Avatar entities are stored on an Interface client, are visible to everyone, \r      and are sent to everyone by the avatar mixer. They follow the client to each domain visited, displaying at the \r      same domain coordinates unless parented to the client's avatar.</td></tr>\r    <tr><td><code>\"local\"</code></td><td>Local entities are ephemeral &mdash; they aren't stored anywhere &mdash; and \r      are visible only to the client. They follow the client to each domain visited, displaying at the same domain \r      coordinates unless parented to the client's avatar. Additionally, local entities are always \r      collisionless.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "EntityHostType",
        "type": {
            "names": [
                "string"
            ]
        },
        "memberof": "Entities",
        "longname": "Entities.EntityHostType",
        "scope": "static"
    },
    {
        "description": "Adds a new domain, avatar, or local entity.",
        "kind": "function",
        "name": "addEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Entities.EntityProperties"
                    ]
                },
                "description": "The properties of the entity to create.",
                "name": "properties"
            },
            {
                "type": {
                    "names": [
                        "Entities.EntityHostType"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"domain\"",
                "description": "The type of entity to create.",
                "name": "entityHostType"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity if successfully created, otherwise {@link Uuid(0)|Uuid.NULL}."
            }
        ],
        "examples": [
            "<caption>Create a box domain entity in front of your avatar.</caption>\rvar entityID = Entities.addEntity({\r    type: \"Box\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.5, y: 0.5, z: 0.5 },\r    lifetime: 300  // Delete after 5 minutes.\r});\rprint(\"Entity created: \" + entityID);"
        ],
        "memberof": "Entities",
        "longname": "Entities.addEntity",
        "scope": "static"
    },
    {
        "description": "Adds a new avatar entity (<code>{@link Entities.EntityProperties|entityHostType}</code> property is \r<code>\"avatar\"</code>) or domain entity (<code>{@link Entities.EntityProperties|entityHostType}</code> property is \r<code>\"domain\"</code>).",
        "kind": "function",
        "name": "addEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Entities.EntityProperties"
                    ]
                },
                "description": "The properties of the entity to create.",
                "name": "properties"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> to create an avatar entity, <code>false</code> to create a \r    domain entity.",
                "name": "avatarEntity"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity if successfully created, otherwise {@link Uuid(0)|Uuid.NULL}."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.addEntity",
        "scope": "static"
    },
    {
        "description": "Creates a clone of an entity. The clone has the same properties as the original except that: it has a modified\r<code>name</code> property, clone-related properties are set per the original entity's clone-related\r{@link Entities.EntityProperties|properties} (e.g., <code>cloneLifetime</code>), and its clone-related properties are \rset to their defaults.\r<p>Domain entities must have their <code>cloneable</code> property value be <code>true</code> in order to be cloned. A \rdomain entity can be cloned by a client that doesn't have rez permissions in the domain.</p>\r<p>Avatar entities must have their <code>cloneable</code> and <code>cloneAvatarEntity</code> property values be \r<code>true</code> in order to be cloned.</p>",
        "kind": "function",
        "name": "cloneEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to clone.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the new entity if successfully cloned, otherwise {@link Uuid(0)|Uuid.NULL}."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.cloneEntity",
        "scope": "static"
    },
    {
        "description": "Gets an entity's property values.",
        "kind": "function",
        "name": "getEntityProperties",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to get the properties of.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string",
                        "Array.<string>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "The name or names of the properties to get. For properties that are \r    objects (e.g., the <code>\"keyLight\"</code> property), use the property and subproperty names in dot notation (e.g., \r    <code>\"keyLight.color\"</code>).",
                "name": "desiredProperties"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Entities.EntityProperties"
                    ]
                },
                "description": "The specified properties of the entity if the entity can be found, otherwise an \r    empty object. If no properties are specified, then all properties are returned."
            }
        ],
        "examples": [
            "<caption>Report the color of a new box entity.</caption>\rvar entityID = Entities.addEntity({\r    type: \"Box\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.5, y: 0.5, z: 0.5 },\r    lifetime: 300  // Delete after 5 minutes.\r});\rvar properties = Entities.getEntityProperties(entityID, [\"color\"]);\rprint(\"Entity color: \" + JSON.stringify(properties.color));"
        ],
        "memberof": "Entities",
        "longname": "Entities.getEntityProperties",
        "scope": "static"
    },
    {
        "description": "Edits an entity, changing one or more of its property values.",
        "kind": "function",
        "name": "editEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to edit.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Entities.EntityProperties"
                    ]
                },
                "description": "The new property values.",
                "name": "properties"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity if the edit was successful, otherwise <code>null</code> or {@link Uuid|Uuid.NULL}."
            }
        ],
        "examples": [
            "<caption>Change the color of an entity.</caption>\rvar entityID = Entities.addEntity({\r    type: \"Box\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.5, y: 0.5, z: 0.5 },\r    lifetime: 300  // Delete after 5 minutes.\r});\rvar properties = Entities.getEntityProperties(entityID, [\"color\"]);\rprint(\"Entity color: \" + JSON.stringify(properties.color));\r\rScript.setTimeout(function () { // Wait for the entity to be created before editing.\r    Entities.editEntity(entityID, {\r        color: { red: 255, green: 0, blue: 0 }\r    });\r    properties = Entities.getEntityProperties(entityID, [\"color\"]);\r    print(\"Entity color: \" + JSON.stringify(properties.color));\r}, 50);"
        ],
        "memberof": "Entities",
        "longname": "Entities.editEntity",
        "scope": "static"
    },
    {
        "description": "Deletes an entity.",
        "kind": "function",
        "name": "deleteEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to delete.",
                "name": "entityID"
            }
        ],
        "examples": [
            "<caption>Delete an entity a few seconds after creating it.</caption>\rvar entityID = Entities.addEntity({\r    type: \"Box\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.5, y: 0.5, z: 0.5 }\r});\r\rScript.setTimeout(function () {\r    Entities.deleteEntity(entityID);\r}, 3000);"
        ],
        "memberof": "Entities",
        "longname": "Entities.deleteEntity",
        "scope": "static"
    },
    {
        "description": "Gets an entity's type.",
        "kind": "function",
        "name": "getEntityType",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to get the type of.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Entities.EntityType"
                    ]
                },
                "description": "The type of the entity."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getEntityType",
        "scope": "static"
    },
    {
        "description": "Gets an entity's script object. In particular, this is useful for accessing a {@link Entities.EntityProperties-Web|Web} \rentity's HTML <code>EventBridge</code> script object to exchange messages with the web page script.\r<p>To send a message from an Interface script to a Web entity over its event bridge:</p>\r<pre class=\"prettyprint\"><code>var entityObject = Entities.getEntityObject(entityID);\rentityObject.emitScriptEvent(message);</code></pre>\r<p>To receive a message from a Web entity over its event bridge in an Interface script:</p>\r<pre class=\"prettyprint\"><code>var entityObject = Entities.getentityObject(entityID);\rentityObject.webEventReceived.connect(function(message) {\r    ...\r};</code></pre>\r<p>Alternatively, you can use {@link Entities.emitScriptEvent} and {@link Entities.webEventReceived} to exchange\rmessages with a Web entity over its event bridge.</p>",
        "kind": "function",
        "name": "getEntityObject",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to get the script object for.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The script object for the entity if found."
            }
        ],
        "examples": [
            "<caption>Exchange messages with a Web entity.</caption>\r// HTML file, name: \"webEntity.html\".\r<!DOCTYPE html>\r<html>\r<head>\r    <title>HELLO</title>\r</head>\r<body>\r    <h1>HELLO</h1>\r    <script>\r        function onScriptEventReceived(message) {\r            // Message received from the script.\r            console.log(\"Message received: \" + message);\r        }\r   \r        EventBridge.scriptEventReceived.connect(onScriptEventReceived);\r   \r        setTimeout(function () {\r            // Send a message to the script.\r            EventBridge.emitWebEvent(\"hello\");\r        }, 5000);\r    </script>\r</body>\r</html>\r\r// Interface script file.\rvar webEntity = Entities.addEntity({\r    type: \"Web\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -3 })),\r    rotation: MyAvatar.orientation,\r    sourceUrl: Script.resolvePath(\"webEntity.html\"),\r    alpha: 1.0,\r    lifetime: 300  // 5 min\r});\r\rvar webEntityObject;\r\rfunction onWebEventReceived(message) {\r    // Message received.\r    print(\"Message received: \" + message);\r\r    // Send a message back.\r    webEntityObject.emitScriptEvent(message + \" back\");\r}\r\rScript.setTimeout(function () {\r    webEntityObject = Entities.getEntityObject(webEntity);\r    webEntityObject.webEventReceived.connect(onWebEventReceived);\r}, 500);\r\rScript.scriptEnding.connect(function () {\r    Entities.deleteEntity(webEntity);\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.getEntityObject",
        "scope": "static"
    },
    {
        "description": "Checks whether an entity's assets have been loaded. For example, for an <code>Model</code> entity the result indicates\rwhether its textures have been loaded.",
        "kind": "function",
        "name": "isLoaded",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to check.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the entity's assets have been loaded, otherwise <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.isLoaded",
        "scope": "static"
    },
    {
        "description": "Checks if there is an entity with a specified ID.",
        "kind": "function",
        "name": "isAddedEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID to check.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if an entity with the specified ID exists, <code>false</code> if it doesn't."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.isAddedEntity",
        "scope": "static"
    },
    {
        "description": "Calculates the size of some text in a {@link Entities.EntityProperties-Text|Text} entity. The entity need not be set \rvisible.\r<p><strong>Note:</strong> The size of text in a Text entity cannot be calculated immediately after the\rentity is created; a short delay is required while the entity finishes being created.</p>",
        "kind": "function",
        "name": "textSize",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the Text entity to use for calculation.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The string to calculate the size of.",
                "name": "text"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Size"
                    ]
                },
                "description": "The size of the <code>text</code> in meters if the object is a text entity, otherwise\r    <code>{ height: 0, width : 0 }</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.textSize",
        "scope": "static"
    },
    {
        "description": "Calls a method in a client entity script from an Interface, avatar, or client entity script, or calls a method in a \rserver entity script from a server entity script. The entity script method must be exposed as a property in the target \rentity script. Additionally, if calling a server entity script, the server entity script must include the method's name \rin an exposed property called <code>remotelyCallable</code> that is an array of method names that can be called.",
        "kind": "function",
        "name": "callEntityMethod",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to call the method in.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the method to call. The method is called with the entity ID as the first parameter \r    and the <code>parameters</code> value as the second parameter.",
                "name": "method"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "The additional parameters to call the specified method with.",
                "name": "parameters"
            }
        ],
        "examples": [
            "<caption>Call a method in a client entity script from an Interface script.</caption>\r// Client entity script.\rvar entityScript = (function () {\r    this.entityMethod = function (id, params) {\r        print(\"Method at entity : \" + id + \" ; \" + params[0] + \", \" + params[1]);\r    };\r});\r\r// Entity that hosts the client entity script.\rvar entityID = Entities.addEntity({\r    type: \"Box\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    dimensions: { x: 0.5, y: 0.5, z: 0.5 },\r    script: \"(\" + entityScript + \")\",  // Could host the script on a Web server instead.\r    lifetime: 300  // Delete after 5 minutes.\r});\r\r// Interface script call to the client entity script.\rScript.setTimeout(function () {\r    Entities.callEntityMethod(entityID, \"entityMethod\", [\"hello\", 12]);\r}, 1000); // Wait for the entity to be created."
        ],
        "memberof": "Entities",
        "longname": "Entities.callEntityMethod",
        "scope": "static"
    },
    {
        "description": "Calls a method in a server entity script from an Interface, avatar, or client entity script. The server entity script \rmethod must be exposed as a property in the target server entity script. Additionally, the server entity script must \rinclude the method's name in an exposed property called <code>remotelyCallable</code> that is an array of method names \rthat can be called.",
        "kind": "function",
        "name": "callEntityServerMethod",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to call the method in.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the method to call. The method is called with the entity ID as the first parameter \r    and the <code>parameters</code> value as the second parameter.",
                "name": "method"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "The additional parameters to call the specified method with.",
                "name": "parameters"
            }
        ],
        "examples": [
            "<caption>Call a method in a server entity script from an Interface script.</caption>\r// Server entity script.\rvar entityScript = (function () {\r    this.entityMethod = function (id, params) {\r        print(\"Method at entity : \" + id + \" ; \" + params[0] + \", \" + params[1]); // In server log.\r    };\r    this.remotelyCallable = [\r        \"entityMethod\"\r    ];\r});\r\r// Entity that hosts the server entity script.\rvar entityID = Entities.addEntity({\r    type: \"Box\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    dimensions: { x: 0.5, y: 0.5, z: 0.5 },\r    serverScripts: \"(\" + entityScript + \")\",  // Could host the script on a Web server instead.\r    lifetime: 300  // Delete after 5 minutes.\r});\r\r// Interface script call to the server entity script.\rScript.setTimeout(function () {\r    Entities.callEntityServerMethod(entityID, \"entityMethod\", [\"hello\", 12]);\r}, 1000); // Wait for the entity to be created."
        ],
        "memberof": "Entities",
        "longname": "Entities.callEntityServerMethod",
        "scope": "static"
    },
    {
        "description": "Calls a method in a specific user's client entity script from a server entity script. The entity script method must be\rexposed as a property in the target client entity script. Additionally, the client entity script must \rinclude the method's name in an exposed property called <code>remotelyCallable</code> that is an array of method names \rthat can be called.",
        "kind": "function",
        "name": "callEntityClientMethod",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The session ID of the user to call the method in.",
                "name": "clientSessionID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to call the method in.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the method to call. The method is called with the entity ID as the first parameter \r    and the <code>parameters</code> value as the second parameter.",
                "name": "method"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "The additional parameters to call the specified method with.",
                "name": "parameters"
            }
        ],
        "examples": [
            "<caption>Call a method in a client entity script from a server entity script.</caption>\r// Client entity script.\rvar clientEntityScript = (function () {\r    this.entityMethod = function (id, params) {\r        print(\"Method at client entity : \" + id + \" ; \" + params[0] + \", \" + params[1]);\r    };\r    this.remotelyCallable = [\r        \"entityMethod\"\r    ];\r});\r\r// Server entity script.\rvar serverEntityScript = (function () {\r    var clientSessionID,\r        clientEntityID;\r\r    function callClientMethod() {\r        // Server entity script call to client entity script.\r        Entities.callEntityClientMethod(clientSessionID, clientEntityID, \"entityMethod\", [\"hello\", 12]);\r    }\r\r    // Obtain client entity details then call client entity method.\r    this.entityMethod = function (id, params) {\r        clientSessionID = params[0];\r        clientEntityID = params[1];\r        callClientMethod();\r    };\r    this.remotelyCallable = [\r        \"entityMethod\"\r    ];\r});\r\r// Entity that hosts the client entity script.\rvar clientEntityID = Entities.addEntity({\r    type: \"Box\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: -1, y: 0, z: -5 })),\r    dimensions: { x: 0.5, y: 0.5, z: 0.5 },\r    script: \"(\" + clientEntityScript + \")\",  // Could host the script on a Web server instead.\r    lifetime: 300  // Delete after 5 minutes.\r});\r\r// Entity that hosts the server entity script.\rvar serverEntityID = Entities.addEntity({\r    type: \"Box\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 1, y: 0, z: -5 })),\r    dimensions: { x: 0.5, y: 0.5, z: 0.5 },\r    serverScripts: \"(\" + serverEntityScript + \")\",  // Could host the script on a Web server instead.\r    lifetime: 300  // Delete after 5 minutes.\r});\r\r// Interface script call to the server entity script.\rScript.setTimeout(function () {\r    Entities.callEntityServerMethod(serverEntityID, \"entityMethod\", [MyAvatar.sessionUUID, clientEntityID]);\r}, 1000); // Wait for the entities to be created."
        ],
        "memberof": "Entities",
        "longname": "Entities.callEntityClientMethod",
        "scope": "static"
    },
    {
        "description": "Finds the domain or avatar entity with a position closest to a specified point and within a specified radius.",
        "kind": "function",
        "name": "findClosestEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The point about which to search.",
                "name": "center"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The radius within which to search.",
                "name": "radius"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that is closest to the <code>center</code> and within the <code>radius</code>, if\r    there is one, otherwise <code>null</code>."
            }
        ],
        "examples": [
            "<caption>Find the closest entity within 10m of your avatar.</caption>\rvar entityID = Entities.findClosestEntity(MyAvatar.position, 10);\rprint(\"Closest entity: \" + entityID);"
        ],
        "memberof": "Entities",
        "longname": "Entities.findClosestEntity",
        "scope": "static"
    },
    {
        "description": "Finds all domain and avatar entities that intersect a sphere.",
        "kind": "function",
        "name": "findEntities",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The point about which to search.",
                "name": "center"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The radius within which to search.",
                "name": "radius"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "An array of entity IDs that intersect the search sphere. The array is empty if no entities could be \r    found."
            }
        ],
        "examples": [
            "<caption>Report how many entities are within 10m of your avatar.</caption>\rvar entityIDs = Entities.findEntities(MyAvatar.position, 10);\rprint(\"Number of entities within 10m: \" + entityIDs.length);"
        ],
        "memberof": "Entities",
        "longname": "Entities.findEntities",
        "scope": "static"
    },
    {
        "description": "Finds all domain and avatar entities whose axis-aligned boxes intersect a search axis-aligned box.",
        "kind": "function",
        "name": "findEntitiesInBox",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The corner of the search AA box with minimum co-ordinate values.",
                "name": "corner"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The dimensions of the search AA box.",
                "name": "dimensions"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "An array of entity IDs whose AA boxes intersect the search AA box. The array is empty if no entities\r    could be found."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.findEntitiesInBox",
        "scope": "static"
    },
    {
        "description": "Finds all domain and avatar entities whose axis-aligned boxes intersect a search frustum.",
        "kind": "function",
        "name": "findEntitiesInFrustum",
        "params": [
            {
                "type": {
                    "names": [
                        "ViewFrustum"
                    ]
                },
                "description": "The frustum to search in. The <code>position</code>, <code>orientation</code>, \r    <code>projection</code>, and <code>centerRadius</code> properties must be specified. The <code>fieldOfView</code> \r    and <code>aspectRatio</code> properties are not used; these values are specified by the <code>projection</code>.",
                "name": "frustum"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "An array of entity IDs whose axis-aligned boxes intersect the search frustum. The array is empty if no \r    entities could be found."
            }
        ],
        "examples": [
            "<caption>Report the number of entities in view.</caption>\rvar entityIDs = Entities.findEntitiesInFrustum(Camera.frustum);\rprint(\"Number of entities in view: \" + entityIDs.length);"
        ],
        "memberof": "Entities",
        "longname": "Entities.findEntitiesInFrustum",
        "scope": "static"
    },
    {
        "description": "Finds all domain and avatar entities of a particular type that intersect a sphere.",
        "kind": "function",
        "name": "findEntitiesByType",
        "params": [
            {
                "type": {
                    "names": [
                        "Entities.EntityType"
                    ]
                },
                "description": "The type of entity to search for.",
                "name": "entityType"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The point about which to search.",
                "name": "center"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The radius within which to search.",
                "name": "radius"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "An array of entity IDs of the specified type that intersect the search sphere. The array is empty if\r    no entities could be found."
            }
        ],
        "examples": [
            "<caption>Report the number of Model entities within 10m of your avatar.</caption>\rvar entityIDs = Entities.findEntitiesByType(\"Model\", MyAvatar.position, 10);\rprint(\"Number of Model entities within 10m: \" + entityIDs.length);"
        ],
        "memberof": "Entities",
        "longname": "Entities.findEntitiesByType",
        "scope": "static"
    },
    {
        "description": "Finds all domain and avatar entities with a particular name that intersect a sphere.",
        "kind": "function",
        "name": "findEntitiesByName",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the entity to search for.",
                "name": "entityName"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The point about which to search.",
                "name": "center"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The radius within which to search.",
                "name": "radius"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> if the search is case-sensitive, <code>false</code> if it is \r    case-insensitive.",
                "name": "caseSensitive"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "An array of entity IDs that have the specified name and intersect the search sphere. The array is \r    empty if no entities could be found."
            }
        ],
        "examples": [
            "<caption>Report the number of entities with the name, \"Light-Target\".</caption>\rvar entityIDs = Entities.findEntitiesByName(\"Light-Target\", MyAvatar.position, 10, false);\rprint(\"Number of entities with the name Light-Target: \" + entityIDs.length);"
        ],
        "memberof": "Entities",
        "longname": "Entities.findEntitiesByName",
        "scope": "static"
    },
    {
        "description": "Finds the first avatar or domain entity intersected by a {@link PickRay}. <code>Light</code> and <code>Zone</code> \rentities are not intersected unless they've been configured as pickable using \r{@link Entities.setLightsArePickable|setLightsArePickable} and {@link Entities.setZonesArePickable|setZonesArePickable}, \rrespectively.",
        "kind": "function",
        "name": "findRayIntersection",
        "params": [
            {
                "type": {
                    "names": [
                        "PickRay"
                    ]
                },
                "description": "The pick ray to use for finding entities.",
                "name": "pickRay"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> to pick against precise meshes, <code>false</code> to pick \r    against coarse meshes. If <code>true</code> and the intersected entity is a <code>Model</code> entity, the result's \r    <code>extraInfo</code> property includes more information than it otherwise would.",
                "name": "precisionPicking"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "If not empty, then the search is restricted to these entities.",
                "name": "entitiesToInclude"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "Entities to ignore during the search.",
                "name": "entitiesToDiscard"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> if only entities that are \r    <code>{@link Entities.EntityProperties|visible}</code> are searched for, <code>false</code> if their visibility \r    doesn't matter.",
                "name": "visibleOnly"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> if only entities that are not \r    <code>{@link Entities.EntityProperties|collisionless}</code> are searched, <code>false</code> if their \r    collideability doesn't matter.",
                "name": "collideableOnly"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Entities.RayToEntityIntersectionResult"
                    ]
                },
                "description": "The result of the search for the first intersected entity."
            }
        ],
        "examples": [
            "<caption>Find the entity directly in front of your avatar.</caption>\rvar pickRay = {\r    origin: MyAvatar.position,\r    direction: Quat.getFront(MyAvatar.orientation)\r};\r\rvar intersection = Entities.findRayIntersection(pickRay, true);\rif (intersection.intersects) {\r    print(\"Entity in front of avatar: \" + intersection.entityID);\r} else {\r    print(\"No entity in front of avatar.\");\r}"
        ],
        "memberof": "Entities",
        "longname": "Entities.findRayIntersection",
        "scope": "static"
    },
    {
        "description": "Reloads an entity's server entity script such that the latest version re-downloaded.",
        "kind": "function",
        "name": "reloadServerScripts",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to reload the server entity script of.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the reload request was successfully sent to the server, otherwise \r    <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.reloadServerScripts",
        "scope": "static"
    },
    {
        "description": "Gets the status of a server entity script attached to an entity.",
        "kind": "function",
        "name": "getServerScriptStatus",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to get the server entity script status of.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Entities~getServerScriptStatusCallback"
                    ]
                },
                "description": "The function to call upon completion.",
                "name": "callback"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> always."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getServerScriptStatus",
        "scope": "static"
    },
    {
        "description": "Called when a {@link Entities.getServerScriptStatus} call is complete.",
        "kind": "typedef",
        "name": "getServerScriptStatusCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the server entity script status could be obtained, otherwise \r    <code>false</code>.",
                "name": "success"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if there is a server entity script running, otherwise <code>false</code>.",
                "name": "isRunning"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<code>\"running\"</code> if there is a server entity script running, otherwise an error string.",
                "name": "status"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<code>\"\"</code> if there is a server entity script running, otherwise it may contain extra \r    information on the error.",
                "name": "errorInfo"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities~getServerScriptStatusCallback",
        "scope": "inner"
    },
    {
        "description": "Gets metadata for certain entity properties such as <code>script</code> and <code>serverScripts</code>.",
        "kind": "function",
        "name": "queryPropertyMetadata",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to get the metadata for.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The property name to get the metadata for.",
                "name": "property"
            },
            {
                "type": {
                    "names": [
                        "Entities~queryPropertyMetadataCallback"
                    ]
                },
                "description": "The function to call upon completion.",
                "name": "callback"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the request for metadata was successfully sent to the server, otherwise \r    <code>false</code>."
            }
        ],
        "exceptions": [
            {
                "description": "Throws an error if <code>property</code> is not handled yet or <code>callback</code> is not a function."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.queryPropertyMetadata",
        "scope": "static"
    },
    {
        "description": "Gets metadata for certain entity properties such as <code>script</code> and <code>serverScripts</code>.",
        "kind": "function",
        "name": "queryPropertyMetadata",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to get the metadata for.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The property name to get the metadata for.",
                "name": "property"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The \"<code>this</code>\" context that the callback will be executed within.",
                "name": "scope"
            },
            {
                "type": {
                    "names": [
                        "Entities~queryPropertyMetadataCallback"
                    ]
                },
                "description": "The function to call upon completion.",
                "name": "callback"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the request for metadata was successfully sent to the server, otherwise \r    <code>false</code>."
            }
        ],
        "exceptions": [
            {
                "description": "Throws an error if <code>property</code> is not handled yet or <code>callback</code> is not a function."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.queryPropertyMetadata",
        "scope": "static"
    },
    {
        "description": "Called when a {@link Entities.queryPropertyMetadata} call is complete.",
        "kind": "typedef",
        "name": "queryPropertyMetadataCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<code>undefined</code> if there was no error, otherwise an error message.",
                "name": "error"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The metadata for the requested entity property if there was no error, otherwise\r    <code>undefined</code>.",
                "name": "result"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities~queryPropertyMetadataCallback",
        "scope": "inner"
    },
    {
        "description": "Sets whether or not ray picks intersect the bounding box of {@link Entities.EntityProperties-Light|Light} entities. By \rdefault, Light entities are not intersected. The setting lasts for the Interface session. Ray picks are performed using \r{@link Entities.findRayIntersection|findRayIntersection}, or the {@link Picks} API.",
        "kind": "function",
        "name": "setLightsArePickable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to make ray picks intersect the bounding box of \r    {@link Entities.EntityProperties-Light|Light} entities, otherwise <code>false</code>.",
                "name": "value"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.setLightsArePickable",
        "scope": "static"
    },
    {
        "description": "Gets whether or not ray picks intersect the bounding box of {@link Entities.EntityProperties-Light|Light} entities. Ray \rpicks are performed using {@link Entities.findRayIntersection|findRayIntersection}, or the {@link Picks} API.",
        "kind": "function",
        "name": "getLightsArePickable",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if ray picks intersect the bounding box of \r    {@link Entities.EntityProperties-Light|Light} entities, otherwise <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getLightsArePickable",
        "scope": "static"
    },
    {
        "description": "Sets whether or not ray picks intersect the bounding box of {@link Entities.EntityProperties-Zone|Zone} entities. By \rdefault, Zone entities are not intersected. The setting lasts for the Interface session. Ray picks are performed using \r{@link Entities.findRayIntersection|findRayIntersection}, or the {@link Picks} API.",
        "kind": "function",
        "name": "setZonesArePickable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to make ray picks intersect the bounding box of \r    {@link Entities.EntityProperties-Zone|Zone} entities, otherwise <code>false</code>.",
                "name": "value"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.setZonesArePickable",
        "scope": "static"
    },
    {
        "description": "Gets whether or not ray picks intersect the bounding box of {@link Entities.EntityProperties-Zone|Zone} entities. Ray \rpicks are performed using {@link Entities.findRayIntersection|findRayIntersection}, or the {@link Picks} API.",
        "kind": "function",
        "name": "getZonesArePickable",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if ray picks intersect the bounding box of \r     {@link Entities.EntityProperties-Zone|Zone} entities, otherwise <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getZonesArePickable",
        "scope": "static"
    },
    {
        "description": "Sets whether or not {@link Entities.EntityProperties-Zone|Zone} entities' boundaries should be drawn. <em>Currently not \rused.</em>",
        "kind": "function",
        "name": "setDrawZoneBoundaries",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if {@link Entities.EntityProperties-Zone|Zone} entities' boundaries should be \r    drawn, otherwise <code>false</code>.",
                "name": "value"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.setDrawZoneBoundaries",
        "scope": "static"
    },
    {
        "description": "Gets whether or not {@link Entities.EntityProperties-Zone|Zone} entities' boundaries should be drawn. <em>Currently \rnot used.</em>",
        "kind": "function",
        "name": "getDrawZoneBoundaries",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if {@link Entities.EntityProperties-Zone|Zone} entities' boundaries should be \r   drawn, otherwise <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getDrawZoneBoundaries",
        "scope": "static"
    },
    {
        "description": "Sets the values of all voxels in a spherical portion of a {@link Entities.EntityProperties-PolyVox|PolyVox} entity.",
        "kind": "function",
        "name": "setVoxelSphere",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the {@link Entities.EntityProperties-PolyVox|PolyVox} entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The center of the sphere of voxels to set, in world coordinates.",
                "name": "center"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The radius of the sphere of voxels to set, in world coordinates.",
                "name": "radius"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "If <code>value % 256 == 0</code> then each voxel is cleared, otherwise each voxel is set.",
                "name": "value"
            }
        ],
        "examples": [
            "<caption>Create a PolyVox sphere.</caption>\rvar position = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -8 }));\rvar polyVox = Entities.addEntity({\r    type: \"PolyVox\",\r    position: position,\r    dimensions: { x: 2, y: 2, z: 2 },\r    voxelVolumeSize: { x: 32, y: 32, z: 32 },\r    lifetime: 300  // Delete after 5 minutes.\r});\rEntities.setVoxelSphere(polyVox, position, 0.9, 255);"
        ],
        "memberof": "Entities",
        "longname": "Entities.setVoxelSphere",
        "scope": "static"
    },
    {
        "description": "Sets the values of all voxels in a capsule-shaped portion of a {@link Entities.EntityProperties-PolyVox|PolyVox} entity.",
        "kind": "function",
        "name": "setVoxelCapsule",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the {@link Entities.EntityProperties-PolyVox|PolyVox} entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The center of the sphere of voxels to set, in world coordinates.",
                "name": "start"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The center of the sphere of voxels to set, in world coordinates.",
                "name": "end"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The radius of the capsule cylinder and spherical ends, in world coordinates.",
                "name": "radius"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "If <code>value % 256 == 0</code> then each voxel is cleared, otherwise each voxel is set.",
                "name": "value"
            }
        ],
        "examples": [
            "<caption>Create a PolyVox capsule shape.</caption>\rvar position = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -8 }));\rvar polyVox = Entities.addEntity({\r    type: \"PolyVox\",\r    position: position,\r    dimensions: { x: 2, y: 2, z: 2 },\r    voxelVolumeSize: { x: 32, y: 32, z: 32 },\r    lifetime: 300  // Delete after 5 minutes.\r});\rvar startPosition = Vec3.sum({ x: -0.5, y: 0, z: 0 }, position);\rvar endPosition = Vec3.sum({ x: 0.5, y: 0, z: 0 }, position);\rEntities.setVoxelCapsule(polyVox, startPosition, endPosition, 0.5, 255);"
        ],
        "memberof": "Entities",
        "longname": "Entities.setVoxelCapsule",
        "scope": "static"
    },
    {
        "description": "Sets the value of a particular voxel in a {@link Entities.EntityProperties-PolyVox|PolyVox} entity.",
        "kind": "function",
        "name": "setVoxel",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the {@link Entities.EntityProperties-PolyVox|PolyVox} entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position relative to the minimum axes values corner of the entity. The \r    <code>position</code> coordinates are rounded to the nearest integer to get the voxel coordinate. The minimum axes \r    corner voxel is <code>{ x: 0, y: 0, z: 0 }</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "If <code>value % 256 == 0</code> then voxel is cleared, otherwise the voxel is set.",
                "name": "value"
            }
        ],
        "examples": [
            "<caption>Create a cube PolyVox entity and clear the minimum axes' corner voxel.</caption>\rvar entity = Entities.addEntity({\r    type: \"PolyVox\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -8 })),\r    dimensions: { x: 2, y: 2, z: 2 },\r    voxelVolumeSize: { x: 16, y: 16, z: 16 },\r    lifetime: 300  // Delete after 5 minutes.\r});\rEntities.setAllVoxels(entity, 1);\rEntities.setVoxel(entity, { x: 0, y: 0, z: 0 }, 0);"
        ],
        "memberof": "Entities",
        "longname": "Entities.setVoxel",
        "scope": "static"
    },
    {
        "description": "Sets the values of all voxels in a {@link Entities.EntityProperties-PolyVox|PolyVox} entity.",
        "kind": "function",
        "name": "setAllVoxels",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the {@link Entities.EntityProperties-PolyVox|PolyVox} entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "If <code>value % 256 == 0</code> then each voxel is cleared, otherwise each voxel is set.",
                "name": "value"
            }
        ],
        "examples": [
            "<caption>Create a PolyVox cube.</caption>\rvar entity = Entities.addEntity({\r    type: \"PolyVox\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -8 })),\r    dimensions: { x: 2, y: 2, z: 2 },\r    voxelVolumeSize: { x: 16, y: 16, z: 16 },\r    lifetime: 300  // Delete after 5 minutes.\r});\rEntities.setAllVoxels(entity, 1);"
        ],
        "memberof": "Entities",
        "longname": "Entities.setAllVoxels",
        "scope": "static"
    },
    {
        "description": "Sets the values of all voxels in a cubic portion of a {@link Entities.EntityProperties-PolyVox|PolyVox} entity.",
        "kind": "function",
        "name": "setVoxelsInCuboid",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the {@link Entities.EntityProperties-PolyVox|PolyVox} entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the minimum axes value corner of the cube of voxels to set, in voxel \r    coordinates.",
                "name": "lowPosition"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The size of the cube of voxels to set, in voxel coordinates.",
                "name": "cuboidSize"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "If <code>value % 256 == 0</code> then each voxel is cleared, otherwise each voxel is set.",
                "name": "value"
            }
        ],
        "examples": [
            "<caption>Create a PolyVox cube and clear the voxels in one corner.</caption>\rvar polyVox = Entities.addEntity({\r    type: \"PolyVox\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -8 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 2, y: 2, z: 2 },\r    voxelVolumeSize: { x: 16, y: 16, z: 16 },\r    lifetime: 300  // Delete after 5 minutes.\r});\rEntities.setAllVoxels(polyVox, 1);\rvar cuboidPosition = { x: 12, y: 12, z: 12 };\rvar cuboidSize = { x: 4, y: 4, z: 4 };\rEntities.setVoxelsInCuboid(polyVox, cuboidPosition, cuboidSize, 0);"
        ],
        "memberof": "Entities",
        "longname": "Entities.setVoxelsInCuboid",
        "scope": "static"
    },
    {
        "description": "Converts voxel coordinates in a {@link Entities.EntityProperties-PolyVox|PolyVox} entity to world coordinates. Voxel \rcoordinates are relative to the minimum axes values corner of the entity with a scale of <code>Vec3.ONE</code> being the \rdimensions of each voxel.",
        "kind": "function",
        "name": "voxelCoordsToWorldCoords",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the {@link Entities.EntityProperties-PolyVox|PolyVox} entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The voxel coordinates. May be fractional and outside the entity's bounding box.",
                "name": "voxelCoords"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The world coordinates of the <code>voxelCoords</code> if the <code>entityID</code> is a \r    {@link Entities.EntityProperties-PolyVox|PolyVox} entity, otherwise {@link Vec3(0)|Vec3.ZERO}."
            }
        ],
        "examples": [
            "<caption>Create a PolyVox cube with the 0,0,0 voxel replaced by a sphere.</caption>\r// Cube PolyVox with 0,0,0 voxel missing.\rvar polyVox = Entities.addEntity({\r    type: \"PolyVox\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -8 })),\r    dimensions: { x: 2, y: 2, z: 2 },\r    voxelVolumeSize: { x: 16, y: 16, z: 16 },\r    lifetime: 300  // Delete after 5 minutes.\r});\rEntities.setAllVoxels(polyVox, 1);\rEntities.setVoxel(polyVox, { x: 0, y: 0, z: 0 }, 0);\r\r// Red sphere in 0,0,0 corner position.\rvar cornerPosition = Entities.voxelCoordsToWorldCoords(polyVox, { x: 0, y: 0, z: 0 });\rvar voxelDimensions = Vec3.multiply(2 / 16, Vec3.ONE);\rvar sphere = Entities.addEntity({\r    type: \"Sphere\",\r    position: Vec3.sum(cornerPosition, Vec3.multiply(0.5, voxelDimensions)),\r    dimensions: voxelDimensions,\r    color: { red: 255, green: 0, blue: 0 },\r    lifetime: 300  // Delete after 5 minutes.\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.voxelCoordsToWorldCoords",
        "scope": "static"
    },
    {
        "description": "Converts world coordinates to voxel coordinates in a {@link Entities.EntityProperties-PolyVox|PolyVox} entity. Voxel \rcoordinates are relative to the minimum axes values corner of the entity, with a scale of <code>Vec3.ONE</code> being \rthe dimensions of each voxel.",
        "kind": "function",
        "name": "worldCoordsToVoxelCoords",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the {@link Entities.EntityProperties-PolyVox|PolyVox} entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The world coordinates. The value may be outside the entity's bounding box.",
                "name": "worldCoords"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The voxel coordinates of the <code>worldCoords</code> if the <code>entityID</code> is a \r    {@link Entities.EntityProperties-PolyVox|PolyVox} entity, otherwise {@link Vec3(0)|Vec3.ZERO}. The value may be \r    fractional and outside the entity's bounding box."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.worldCoordsToVoxelCoords",
        "scope": "static"
    },
    {
        "description": "Converts voxel coordinates in a {@link Entities.EntityProperties-PolyVox|PolyVox} entity to local coordinates. Local \rcoordinates are relative to the minimum axes value corner of the entity, with the scale being the same as world \rcoordinates. Voxel coordinates are relative to the minimum axes values corner of the entity, with a scale of \r<code>Vec3.ONE</code> being the dimensions of each voxel.",
        "kind": "function",
        "name": "voxelCoordsToLocalCoords",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the {@link Entities.EntityProperties-PolyVox|PolyVox} entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The voxel coordinates. The value may be fractional and outside the entity's bounding box.",
                "name": "voxelCoords"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local coordinates of the <code>voxelCoords</code> if the <code>entityID</code> is a \r    {@link Entities.EntityProperties-PolyVox|PolyVox} entity, otherwise {@link Vec3(0)|Vec3.ZERO}."
            }
        ],
        "examples": [
            "<caption>Get the world dimensions of a voxel in a PolyVox entity.</caption>\rvar polyVox = Entities.addEntity({\r    type: \"PolyVox\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -8 })),\r    dimensions: { x: 2, y: 2, z: 2 },\r    voxelVolumeSize: { x: 16, y: 16, z: 16 },\r    lifetime: 300  // Delete after 5 minutes.\r});\rvar voxelDimensions = Entities.voxelCoordsToLocalCoords(polyVox, Vec3.ONE);\rprint(\"Voxel dimensions: \" + JSON.stringify(voxelDimensions));"
        ],
        "memberof": "Entities",
        "longname": "Entities.voxelCoordsToLocalCoords",
        "scope": "static"
    },
    {
        "description": "Converts local coordinates to voxel coordinates in a {@link Entities.EntityProperties-PolyVox|PolyVox} entity. Local \rcoordinates are relative to the minimum axes value corner of the entity, with the scale being the same as world \rcoordinates. Voxel coordinates are relative to the minimum axes values corner of the entity, with a scale of \r<code>Vec3.ONE</code> being the dimensions of each voxel.",
        "kind": "function",
        "name": "localCoordsToVoxelCoords",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the {@link Entities.EntityProperties-PolyVox|PolyVox} entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local coordinates. The value may be outside the entity's bounding box.",
                "name": "localCoords"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The voxel coordinates of the <code>worldCoords</code> if the <code>entityID</code> is a \r    {@link Entities.EntityProperties-PolyVox|PolyVox} entity, otherwise {@link Vec3(0)|Vec3.ZERO}. The value may be \r    fractional and outside the entity's bounding box."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.localCoordsToVoxelCoords",
        "scope": "static"
    },
    {
        "description": "Sets all the points in a {@link Entities.EntityProperties-Line|Line} entity.",
        "kind": "function",
        "name": "setAllPoints",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the {@link Entities.EntityProperties-Line|Line} entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "description": "The points that the entity should draw lines between.",
                "name": "points"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the entity was updated, otherwise <code>false</code>. The property may fail to \r    be updated if the entity does not exist, the entity is not a {@link Entities.EntityProperties-Line|Line} entity, \r    one of the points is outside the entity's dimensions, or the number of points is greater than the maximum allowed."
            }
        ],
        "deprecated": "This function is deprecated and will be removed. Use {@link Entities.EntityProperties-PolyLine|PolyLine}\r    entities instead.",
        "examples": [
            "<caption>Change the shape of a Line entity.</caption>\r// Draw a horizontal line between two points.\rvar entity = Entities.addEntity({\r    type: \"Line\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.75, z: -5 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 2, y: 2, z: 1 },\r    linePoints: [\r        { x: -1, y: 0, z: 0 },\r        { x:1, y: -0, z: 0 }\r    ],\r    color: { red: 255, green: 0, blue: 0 },\r    lifetime: 300  // Delete after 5 minutes.\r});\r\r// Change the line to be a \"V\".\rScript.setTimeout(function () {\r    Entities.setAllPoints(entity, [\r        { x: -1, y: 1, z: 0 },\r        { x: 0, y: -1, z: 0 },\r        { x: 1, y: 1, z: 0 },\r    ]);\r}, 2000);"
        ],
        "memberof": "Entities",
        "longname": "Entities.setAllPoints",
        "scope": "static"
    },
    {
        "description": "Appends a point to a {@link Entities.EntityProperties-Line|Line} entity.",
        "kind": "function",
        "name": "appendPoint",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the {@link Entities.EntityProperties-Line|Line} entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The point to add to the line. The coordinates are relative to the entity's position.",
                "name": "point"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the point was added to the line, otherwise <code>false</code>. The point may \r    fail to be added if the entity does not exist, the entity is not a {@link Entities.EntityProperties-Line|Line}\r    entity, the point is outside the entity's dimensions, or the maximum number of points has been reached."
            }
        ],
        "deprecated": "This function is deprecated and will be removed. Use {@link Entities.EntityProperties-PolyLine|PolyLine} \r    entities instead.",
        "examples": [
            "<caption>Append a point to a Line entity.</caption>\r// Draw a line between two points.\rvar entity = Entities.addEntity({\r    type: \"Line\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.75, z: -5 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 2, y: 2, z: 1 },\r    linePoints: [\r        { x: -1, y: 1, z: 0 },\r        { x: 0, y: -1, z: 0 }\r    ],\r    color: { red: 255, green: 0, blue: 0 },\r    lifetime: 300  // Delete after 5 minutes.\r});\r\r// Add a third point to create a \"V\".\rScript.setTimeout(function () {\r    Entities.appendPoint(entity, { x: 1, y: 1, z: 0 });\r}, 50); // Wait for the entity to be created."
        ],
        "memberof": "Entities",
        "longname": "Entities.appendPoint",
        "scope": "static"
    },
    {
        "description": "Dumps debug information about all entities in Interface's local in-memory tree of entities it knows about to the program \rlog.",
        "kind": "function",
        "name": "dumpTree",
        "memberof": "Entities",
        "longname": "Entities.dumpTree",
        "scope": "static"
    },
    {
        "description": "Adds an action to an entity. An action is registered with the physics engine and is applied every physics simulation\rstep. Any entity may have more than one action associated with it, but only as many as will fit in an entity's \r<code>{@link Entities.EntityProperties|actionData}</code> property.",
        "kind": "function",
        "name": "addAction",
        "params": [
            {
                "type": {
                    "names": [
                        "Entities.ActionType"
                    ]
                },
                "description": "The type of action.",
                "name": "actionType"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to add the action to.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Entities.ActionArguments"
                    ]
                },
                "description": "Configures the action.",
                "name": "arguments"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the action if successfully added, otherwise <code>null</code>."
            }
        ],
        "examples": [
            "<caption>Constrain a cube to move along a vertical line.</caption>\rvar entityID = Entities.addEntity({\r    type: \"Box\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.75, z: -5 })),\r    dimensions: { x: 0.5, y: 0.5, z: 0.5 },\r    dynamic: true,\r    collisionless: false,\r    userData: \"{ \\\"grabbableKey\\\": { \\\"grabbable\\\": true, \\\"kinematic\\\": false } }\",\r    lifetime: 300  // Delete after 5 minutes.\r});\r\rvar actionID = Entities.addAction(\"slider\", entityID, {\r    axis: { x: 0, y: 1, z: 0 },\r    linearLow: 0,\r    linearHigh: 0.6\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.addAction",
        "scope": "static"
    },
    {
        "description": "Updates an entity action.",
        "kind": "function",
        "name": "updateAction",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity with the action to update.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the action to update.",
                "name": "actionID"
            },
            {
                "type": {
                    "names": [
                        "Entities.ActionArguments"
                    ]
                },
                "description": "The arguments to update.",
                "name": "arguments"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the update was successful, otherwise <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.updateAction",
        "scope": "static"
    },
    {
        "description": "Deletes an action from an entity.",
        "kind": "function",
        "name": "deleteAction",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of entity to delete the action from.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the action to delete.",
                "name": "actionID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the delete was successful, otherwise <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.deleteAction",
        "scope": "static"
    },
    {
        "description": "Gets the IDs of the actions that are associated with an entity.",
        "kind": "function",
        "name": "getActionIDs",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The entity to get the action IDs for.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "The action IDs if any are found, otherwise an empty array."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getActionIDs",
        "scope": "static"
    },
    {
        "description": "Gets the arguments of an action.",
        "kind": "function",
        "name": "getActionArguments",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity with the action.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the action to get the arguments of.",
                "name": "actionID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Entities.ActionArguments"
                    ]
                },
                "description": "The arguments of the action if found, otherwise an empty object."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getActionArguments",
        "scope": "static"
    },
    {
        "description": "Gets the translation of a joint in a {@link Entities.EntityProperties-Model|Model} entity relative to the entity's \rposition and orientation.",
        "kind": "function",
        "name": "getAbsoluteJointTranslationInObjectFrame",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The integer index of the joint.",
                "name": "jointIndex"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The translation of the joint relative to the entity's position and orientation if the entity is a\r    {@link Entities.EntityProperties-Model|Model} entity, the entity is loaded, and the joint index is valid; otherwise \r    <code>{@link Vec3(0)|Vec3.ZERO}</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getAbsoluteJointTranslationInObjectFrame",
        "scope": "static"
    },
    {
        "description": "Gets the index of the parent joint of a joint in a {@link Entities.EntityProperties-Model|Model} entity.",
        "kind": "function",
        "name": "getJointParent",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The integer index of the joint.",
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the parent joint if found, otherwise <code>-1</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getJointParent",
        "scope": "static"
    },
    {
        "description": "Gets the rotation of a joint in a {@link Entities.EntityProperties-Model|Model} entity relative to the entity's \rposition and orientation.",
        "kind": "function",
        "name": "getAbsoluteJointRotationInObjectFrame",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The integer index of the joint.",
                "name": "jointIndex"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation of the joint relative to the entity's orientation if the entity is a\r    {@link Entities.EntityProperties-Model|Model} entity, the entity is loaded, and the joint index is valid; otherwise \r    <code>{@link Quat(0)|Quat.IDENTITY}</code>."
            }
        ],
        "examples": [
            "<caption>Compare the local and absolute rotations of an avatar model's left hand joint.</caption>\rentityID = Entities.addEntity({\r    type: \"Model\",\r    modelURL: \"https://github.com/highfidelity/hifi-api-docs/blob/master/docs/blue_suited.fbx?raw=true\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    rotation: MyAvatar.orientation,\r    lifetime: 300  // Delete after 5 minutes.\r});\r\rScript.setTimeout(function () {\r    // Joint data aren't available until after the model has loaded.\r    var index = Entities.getJointIndex(entityID, \"LeftHand\");\r    var localRotation = Entities.getLocalJointRotation(entityID, index);\r    var absoluteRotation = Entities.getAbsoluteJointRotationInObjectFrame(entityID, index);\r    print(\"Left hand local rotation: \" + JSON.stringify(Quat.safeEulerAngles(localRotation)));\r    print(\"Left hand absolute rotation: \" + JSON.stringify(Quat.safeEulerAngles(absoluteRotation)));\r}, 2000);"
        ],
        "memberof": "Entities",
        "longname": "Entities.getAbsoluteJointRotationInObjectFrame",
        "scope": "static"
    },
    {
        "description": "Sets the translation of a joint in a {@link Entities.EntityProperties-Model|Model} entity relative to the entity's \rposition and orientation.",
        "kind": "function",
        "name": "setAbsoluteJointTranslationInObjectFrame",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The integer index of the joint.",
                "name": "jointIndex"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The translation to set the joint to relative to the entity's position and orientation.",
                "name": "translation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code>if the entity is a {@link Entities.EntityProperties-Model|Model} entity, the entity \r    is loaded, the joint index is valid, and the translation is different to the joint's current translation; otherwise \r    <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.setAbsoluteJointTranslationInObjectFrame",
        "scope": "static"
    },
    {
        "description": "Sets the rotation of a joint in a {@link Entities.EntityProperties-Model|Model} entity relative to the entity's position \rand orientation.",
        "kind": "function",
        "name": "setAbsoluteJointRotationInObjectFrame",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The integer index of the joint.",
                "name": "jointIndex"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation to set the joint to relative to the entity's orientation.",
                "name": "rotation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the entity is a {@link Entities.EntityProperties-Model|Model} entity, the entity \r    is loaded, the joint index is valid, and the rotation is different to the joint's current rotation; otherwise \r    <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Raise an avatar model's left palm.</caption>\rentityID = Entities.addEntity({\r    type: \"Model\",\r    modelURL: \"https://github.com/highfidelity/hifi-api-docs/blob/master/docs/blue_suited.fbx?raw=true\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    rotation: MyAvatar.orientation,\r    lifetime: 300  // Delete after 5 minutes.\r});\r\rScript.setTimeout(function () {\r    // Joint data aren't available until after the model has loaded.\r    var index = Entities.getJointIndex(entityID, \"LeftHand\");\r    var absoluteRotation = Entities.getAbsoluteJointRotationInObjectFrame(entityID, index);\r    absoluteRotation = Quat.multiply(Quat.fromPitchYawRollDegrees(0, 0, 90), absoluteRotation);\r    var success = Entities.setAbsoluteJointRotationInObjectFrame(entityID, index, absoluteRotation);\r    print(\"Success: \" + success);\r}, 2000);"
        ],
        "memberof": "Entities",
        "longname": "Entities.setAbsoluteJointRotationInObjectFrame",
        "scope": "static"
    },
    {
        "description": "Gets the local translation of a joint in a {@link Entities.EntityProperties-Model|Model} entity.",
        "kind": "function",
        "name": "getLocalJointTranslation",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The integer index of the joint.",
                "name": "jointIndex"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local translation of the joint if the entity is a {@link Entities.EntityProperties-Model|Model} \r    entity, the entity is loaded, and the joint index is valid; otherwise <code>{@link Vec3(0)|Vec3.ZERO}</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getLocalJointTranslation",
        "scope": "static"
    },
    {
        "description": "Gets the local rotation of a joint in a {@link Entities.EntityProperties-Model|Model} entity.",
        "kind": "function",
        "name": "getLocalJointRotation",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The integer index of the joint.",
                "name": "jointIndex"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The local rotation of the joint if the entity is a {@link Entities.EntityProperties-Model|Model} entity, \r    the entity is loaded, and the joint index is valid; otherwise <code>{@link Quat(0)|Quat.IDENTITY}</code>."
            }
        ],
        "examples": [
            "<caption>Report the local rotation of an avatar model's head joint.</caption>\rentityID = Entities.addEntity({\r    type: \"Model\",\r    modelURL: \"https://github.com/highfidelity/hifi-api-docs/blob/master/docs/blue_suited.fbx?raw=true\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    rotation: MyAvatar.orientation,\r    lifetime: 300  // Delete after 5 minutes.\r});\r\rScript.setTimeout(function () {\r    // Joint data aren't available until after the model has loaded.\r    var index = Entities.getJointIndex(entityID, \"Head\");\r    var rotation = Entities.getLocalJointRotation(entityID,  index);\r    print(\"Head local rotation: \" + JSON.stringify(Quat.safeEulerAngles(rotation)));\r}, 2000);"
        ],
        "memberof": "Entities",
        "longname": "Entities.getLocalJointRotation",
        "scope": "static"
    },
    {
        "description": "Sets the local translation of a joint in a {@link Entities.EntityProperties-Model|Model} entity.",
        "kind": "function",
        "name": "setLocalJointTranslation",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The integer index of the joint.",
                "name": "jointIndex"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local translation to set the joint to.",
                "name": "translation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code>if the entity is a {@link Entities.EntityProperties-Model|Model} entity, the entity \r    is loaded, the joint index is valid, and the translation is different to the joint's current translation; otherwise \r    <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.setLocalJointTranslation",
        "scope": "static"
    },
    {
        "description": "Sets the local rotation of a joint in a {@link Entities.EntityProperties-Model|Model} entity.",
        "kind": "function",
        "name": "setLocalJointRotation",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The integer index of the joint.",
                "name": "jointIndex"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The local rotation to set the joint to.",
                "name": "rotation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the entity is a {@link Entities.EntityProperties-Model|Model} entity, the entity \r    is loaded, the joint index is valid, and the rotation is different to the joint's current rotation; otherwise \r    <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Make an avatar model turn its head left.</caption>\rentityID = Entities.addEntity({\r    type: \"Model\",\r    modelURL: \"https://github.com/highfidelity/hifi-api-docs/blob/master/docs/blue_suited.fbx?raw=true\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    rotation: MyAvatar.orientation,\r    lifetime: 300  // Delete after 5 minutes.\r});\r\rScript.setTimeout(function () {\r    // Joint data aren't available until after the model has loaded.\r    var index = Entities.getJointIndex(entityID, \"Head\");\r    var rotation = Quat.fromPitchYawRollDegrees(0, 60, 0);\r    var success = Entities.setLocalJointRotation(entityID, index, rotation);\r    print(\"Success: \" + success);\r}, 2000);"
        ],
        "memberof": "Entities",
        "longname": "Entities.setLocalJointRotation",
        "scope": "static"
    },
    {
        "description": "Sets the local translations of joints in a {@link Entities.EntityProperties-Model|Model} entity.",
        "kind": "function",
        "name": "setLocalJointTranslations",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "description": "The local translations to set the joints to.",
                "name": "translations"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code>if the entity is a {@link Entities.EntityProperties-Model|Model} entity, the entity \r    is loaded, the model has joints, and at least one of the translations is different to the model's current \r    translations; otherwise <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.setLocalJointTranslations",
        "scope": "static"
    },
    {
        "description": "Sets the local rotations of joints in a {@link Entities.EntityProperties-Model|Model} entity.",
        "kind": "function",
        "name": "setLocalJointRotations",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Array.<Quat>"
                    ]
                },
                "description": "The local rotations to set the joints to.",
                "name": "rotations"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the entity is a {@link Entities.EntityProperties-Model|Model} entity, the entity \r    is loaded, the model has joints, and at least one of the rotations is different to the model's current rotations; \r    otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Raise both palms of an avatar model.</caption>\rentityID = Entities.addEntity({\r    type: \"Model\",\r    modelURL: \"https://github.com/highfidelity/hifi-api-docs/blob/master/docs/blue_suited.fbx?raw=true\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    rotation: MyAvatar.orientation,\r    lifetime: 300  // Delete after 5 minutes.\r});\r\rScript.setTimeout(function () {\r    // Joint data aren't available until after the model has loaded.\r\r    // Get all the joint rotations.\r    var jointNames = Entities.getJointNames(entityID);\r    var jointRotations = [];\r    for (var i = 0, length = jointNames.length; i < length; i++) {\r        var index = Entities.getJointIndex(entityID, jointNames[i]);\r        jointRotations.push(Entities.getLocalJointRotation(entityID, index));\r    }\r\r    // Raise both palms.\r    var index = jointNames.indexOf(\"LeftHand\");\r    jointRotations[index] = Quat.multiply(Quat.fromPitchYawRollDegrees(-90, 0, 0), jointRotations[index]);\r    index = jointNames.indexOf(\"RightHand\");\r    jointRotations[index] = Quat.multiply(Quat.fromPitchYawRollDegrees(-90, 0, 0), jointRotations[index]);\r\r    // Update all the joint rotations.\r    var success = Entities.setLocalJointRotations(entityID, jointRotations);\r    print(\"Success: \" + success);\r}, 2000);"
        ],
        "memberof": "Entities",
        "longname": "Entities.setLocalJointRotations",
        "scope": "static"
    },
    {
        "description": "Sets the local rotations and translations of joints in a {@link Entities.EntityProperties-Model|Model} entity. This is \rthe same as calling both {@link Entities.setLocalJointRotations|setLocalJointRotations} and \r{@link Entities.setLocalJointTranslations|setLocalJointTranslations} at the same time.",
        "kind": "function",
        "name": "setLocalJointsData",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Array.<Quat>"
                    ]
                },
                "description": "The local rotations to set the joints to.",
                "name": "rotations"
            },
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "description": "The local translations to set the joints to.",
                "name": "translations"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the entity is a {@link Entities.EntityProperties-Model|Model} entity, the entity \r    is loaded, the model has joints, and at least one of the rotations or translations is different to the model's \r    current values; otherwise <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.setLocalJointsData",
        "scope": "static"
    },
    {
        "description": "Gets the index of a named joint in a {@link Entities.EntityProperties-Model|Model} entity.",
        "kind": "function",
        "name": "getJointIndex",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the joint.",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The integer index of the joint if the entity is a {@link Entities.EntityProperties-Model|Model} \r    entity, the entity is loaded, and the joint is present; otherwise <code>-1</code>. The joint indexes are in order \r    per {@link Entities.getJointNames|getJointNames}."
            }
        ],
        "examples": [
            "<caption>Report the index of a model's head joint.</caption>\rentityID = Entities.addEntity({\r    type: \"Model\",\r    modelURL: \"https://github.com/highfidelity/hifi-api-docs/blob/master/docs/blue_suited.fbx?raw=true\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    rotation: MyAvatar.orientation,\r    lifetime: 300  // Delete after 5 minutes.\r});\r\rScript.setTimeout(function () {\r    // Joint data aren't available until after the model has loaded.\r    var index = Entities.getJointIndex(entityID, \"Head\");\r    print(\"Head joint index: \" + index);\r}, 2000);"
        ],
        "memberof": "Entities",
        "longname": "Entities.getJointIndex",
        "scope": "static"
    },
    {
        "description": "Gets the names of all the joints in a {@link Entities.EntityProperties-Model|Model} entity.",
        "kind": "function",
        "name": "getJointNames",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the {@link Entities.EntityProperties-Model|Model} entity.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "The names of all the joints in the entity if it is a {@link Entities.EntityProperties-Model|Model} \r    entity and is loaded, otherwise an empty array. The joint names are in order per \r    {@link Entities.getJointIndex|getJointIndex}."
            }
        ],
        "examples": [
            "<caption>Report a model's joint names.</caption>\rentityID = Entities.addEntity({\r    type: \"Model\",\r    modelURL: \"https://github.com/highfidelity/hifi-api-docs/blob/master/docs/blue_suited.fbx?raw=true\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    rotation: MyAvatar.orientation,\r    lifetime: 300  // Delete after 5 minutes.\r});\r\rScript.setTimeout(function () {\r    // Joint data aren't available until after the model has loaded.\r    var jointNames = Entities.getJointNames(entityID);\r    print(\"Joint names: \" + JSON.stringify(jointNames));\r}, 2000);"
        ],
        "memberof": "Entities",
        "longname": "Entities.getJointNames",
        "scope": "static"
    },
    {
        "description": "Gets the IDs of entities and avatars that are directly parented to an entity or avatar model. To get all descendants, \ryou can recurse on the IDs returned.",
        "kind": "function",
        "name": "getChildrenIDs",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity or avatar to get the children IDs of.",
                "name": "parentID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "An array of entity and avatar IDs that are parented directly to the <code>parentID</code> \r    entity or avatar. Does not include children's children, etc. The array is empty if no children can be found or \r    <code>parentID</code> cannot be found."
            }
        ],
        "examples": [
            "<caption>Report the children of an entity.</caption>\rfunction createEntity(description, position, parent) {\r    var entity = Entities.addEntity({\r        type: \"Sphere\",\r        position: position,\r        dimensions: Vec3.HALF,\r        parentID: parent,\r        lifetime: 300  // Delete after 5 minutes.\r    });\r    print(description + \": \" + entity);\r    return entity;\r}\r\rvar position = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 2, z: -5 }));\rvar root = createEntity(\"Root\", position, Uuid.NULL);\rvar child = createEntity(\"Child\", Vec3.sum(position, { x: 0, y: -1, z: 0 }), root);\rvar grandChild = createEntity(\"Grandchild\", Vec3.sum(position, { x: 0, y: -2, z: 0 }), child);\r\rvar children = Entities.getChildrenIDs(root);\rprint(\"Children of root: \" + JSON.stringify(children));  // Only the child entity."
        ],
        "memberof": "Entities",
        "longname": "Entities.getChildrenIDs",
        "scope": "static"
    },
    {
        "description": "Gets the IDs of entities and avatars that are directly parented to an entity or avatar model's joint. To get all \rdescendants, you can use {@link Entities.getChildrenIDs|getChildrenIDs} to recurse on the IDs returned.",
        "kind": "function",
        "name": "getChildrenIDsOfJoint",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity or avatar to get the children IDs of.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer number of the model joint to get the children IDs of.",
                "name": "jointIndex"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "An array of entity and avatar IDs that are parented directly to the <code>parentID</code> \r    entity or avatar at the <code>jointIndex</code> joint. Does not include children's children, etc. The \r    array is empty if no children can be found or <code>parentID</code> cannot be found."
            }
        ],
        "examples": [
            "<caption>Report the children of your avatar's right hand.</caption>\rfunction createEntity(description, position, parent) {\r    var entity = Entities.addEntity({\r        type: \"Sphere\",\r        position: position,\r        dimensions: Vec3.HALF,\r        parentID: parent,\r        lifetime: 300  // Delete after 5 minutes.\r    });\r    print(description + \": \" + entity);\r    return entity;\r}\r\rvar position = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 2, z: -5 }));\rvar root = createEntity(\"Root\", position, Uuid.NULL);\rvar child = createEntity(\"Child\", Vec3.sum(position, { x: 0, y: -1, z: 0 }), root);\r\rScript.setTimeout(function () { // Wait for the entity to be created before editing.\r    Entities.editEntity(root, {\r        parentID: MyAvatar.sessionUUID,\r        parentJointIndex: MyAvatar.getJointIndex(\"RightHand\")\r    });\r\r    var children = Entities.getChildrenIDsOfJoint(MyAvatar.sessionUUID, MyAvatar.getJointIndex(\"RightHand\"));\r    print(\"Children of hand: \" + JSON.stringify(children));  // Only the root entity.\r}, 50);"
        ],
        "memberof": "Entities",
        "longname": "Entities.getChildrenIDsOfJoint",
        "scope": "static"
    },
    {
        "description": "Checks whether an entity has an entity as an ancestor (parent, parent's parent, etc.).",
        "kind": "function",
        "name": "isChildOfParent",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the child entity to test for being a child, grandchild, etc.",
                "name": "childID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the parent entity to test for being a parent, grandparent, etc.",
                "name": "parentID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the <code>childID</code> entity has the <code>parentID</code> entity \r    as a parent or grandparent etc., otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Check that a grandchild entity is a child of its grandparent.</caption>\rfunction createEntity(description, position, parent) {\r    var entity = Entities.addEntity({\r        type: \"Sphere\",\r        position: position,\r        dimensions: Vec3.HALF,\r        parentID: parent,\r        lifetime: 300  // Delete after 5 minutes.\r    });\r    print(description + \": \" + entity);\r    return entity;\r}\r\rvar position = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 2, z: -5 }));\rvar root = createEntity(\"Root\", position, Uuid.NULL);\rvar child = createEntity(\"Child\", Vec3.sum(position, { x: 0, y: -1, z: 0 }), root);\rvar grandChild = createEntity(\"Grandchild\", Vec3.sum(position, { x: 0, y: -2, z: 0 }), child);\r\rprint(\"grandChild has root as parent: \" + Entities.isChildOfParent(grandChild, root));  // true"
        ],
        "memberof": "Entities",
        "longname": "Entities.isChildOfParent",
        "scope": "static"
    },
    {
        "description": "Gets the type &mdash; entity or avatar &mdash; of an in-world item.",
        "kind": "function",
        "name": "getNestableType",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the item to get the type of.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Entities.NestableType"
                    ]
                },
                "description": "The type of the item."
            }
        ],
        "examples": [
            "<caption>Report some nestable types.</caption>\rvar entity = Entities.addEntity({\r    type: \"Sphere\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 1, z: -2 })),\r    lifetime: 300  // Delete after 5 minutes.\r});\r\rprint(Entities.getNestableType(entity));  // \"entity\"\rprint(Entities.getNestableType(Uuid.generate()));  // \"unknown\""
        ],
        "memberof": "Entities",
        "longname": "Entities.getNestableType",
        "scope": "static"
    },
    {
        "description": "Gets the ID of the {@link Entities.EntityProperties-Web|Web} entity that has keyboard focus.",
        "kind": "function",
        "name": "getKeyboardFocusEntity",
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the {@link Entities.EntityProperties-Web|Web} entity that has focus, if any, otherwise <code>null</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getKeyboardFocusEntity",
        "scope": "static"
    },
    {
        "description": "Sets the {@link Entities.EntityProperties-Web|Web} entity that has keyboard focus.",
        "kind": "function",
        "name": "setKeyboardFocusEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the {@link Entities.EntityProperties-Web|Web} entity to set keyboard focus to. Use \r    <code>null</code> or {@link Uuid(0)|Uuid.NULL} to unset keyboard focus from an entity.",
                "name": "id"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.setKeyboardFocusEntity",
        "scope": "static"
    },
    {
        "description": "Emits a {@link Entities.mousePressOnEntity|mousePressOnEntity} event.",
        "kind": "function",
        "name": "sendMousePressOnEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to emit the event for.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The event details.",
                "name": "event"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.sendMousePressOnEntity",
        "scope": "static"
    },
    {
        "description": "Emits a {@link Entities.mouseMoveOnEntity|mouseMoveOnEntity} event.",
        "kind": "function",
        "name": "sendMouseMoveOnEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to emit the event for.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The event details.",
                "name": "event"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.sendMouseMoveOnEntity",
        "scope": "static"
    },
    {
        "description": "Emits a {@link Entities.mouseReleaseOnEntity|mouseReleaseOnEntity} event.",
        "kind": "function",
        "name": "sendMouseReleaseOnEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to emit the event for.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The event details.",
                "name": "event"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.sendMouseReleaseOnEntity",
        "scope": "static"
    },
    {
        "description": "Emits a {@link Entities.clickDownOnEntity|clickDownOnEntity} event.",
        "kind": "function",
        "name": "sendClickDownOnEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to emit the event for.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The event details.",
                "name": "event"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.sendClickDownOnEntity",
        "scope": "static"
    },
    {
        "description": "Emits a {@link Entities.holdingClickOnEntity|holdingClickOnEntity} event.",
        "kind": "function",
        "name": "sendHoldingClickOnEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to emit the event for.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The event details.",
                "name": "event"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.sendHoldingClickOnEntity",
        "scope": "static"
    },
    {
        "description": "Emits a {@link Entities.clickReleaseOnEntity|clickReleaseOnEntity} event.",
        "kind": "function",
        "name": "sendClickReleaseOnEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to emit the event for.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The event details.",
                "name": "event"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.sendClickReleaseOnEntity",
        "scope": "static"
    },
    {
        "description": "Emits a {@link Entities.hoverEnterEntity|hoverEnterEntity} event.",
        "kind": "function",
        "name": "sendHoverEnterEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to emit the event for.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The event details.",
                "name": "event"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.sendHoverEnterEntity",
        "scope": "static"
    },
    {
        "description": "Emits a {@link Entities.hoverOverEntity|hoverOverEntity} event.",
        "kind": "function",
        "name": "sendHoverOverEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to emit the event for.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The event details.",
                "name": "event"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.sendHoverOverEntity",
        "scope": "static"
    },
    {
        "description": "Emits a {@link Entities.hoverLeaveEntity|hoverLeaveEntity} event.",
        "kind": "function",
        "name": "sendHoverLeaveEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to emit the event for.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The event details.",
                "name": "event"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.sendHoverLeaveEntity",
        "scope": "static"
    },
    {
        "description": "Checks whether an entity wants hand controller pointer events. For example, a {@link Entities.EntityProperties-Web|Web} \rentity does but a {@link Entities.EntityProperties-Shape|Shape} entity doesn't.",
        "kind": "function",
        "name": "wantsHandControllerPointerEvents",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the entity can be found and it wants hand controller pointer events, otherwise \r    <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.wantsHandControllerPointerEvents",
        "scope": "static"
    },
    {
        "description": "Sends a message to a {@link Entities.EntityProperties-Web|Web} entity's HTML page. To receive the message, the web \rpage's script must connect to the <code>EventBridge</code> that is automatically provided to the script:\r<pre class=\"prettyprint\"><code>EventBridge.scriptEventReceived.connect(function(message) {\r    ...\r});</code></pre>\r<p>Use {@link Entities.webEventReceived} to receive messages from the Web entity's HTML page.</p>\r<p>Alternatively, you can use {@link Entities.getEntityObject} to exchange messages over a Web entity's HTML event\rbridge.</p>",
        "kind": "function",
        "name": "emitScriptEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the Web entity to send the message to.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The message to send.",
                "name": "message"
            }
        ],
        "examples": [
            "<caption>Exchange messages with a Web entity.</caption>\r// HTML file, name: \"webEntity.html\".\r<!DOCTYPE html>\r<html>\r<head>\r    <title>HELLO</title>\r</head>\r<body>\r    <h1>HELLO</h1>\r    <script>\r        function onScriptEventReceived(message) {\r            // Message received from the script.\r            console.log(\"Message received: \" + message);\r        }\r\r        EventBridge.scriptEventReceived.connect(onScriptEventReceived);\r\r        setTimeout(function () {\r            // Send a message to the script.\r            EventBridge.emitWebEvent(\"hello\");\r        }, 5000);\r    </script>\r</body>\r</html>\r\r// Script file.\rvar webEntity = Entities.addEntity({\r    type: \"Web\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -3 })),\r    rotation: MyAvatar.orientation,\r    sourceUrl: Script.resolvePath(\"webEntity.html\"),\r    alpha: 1.0,\r    lifetime: 300  // 5 min\r});\r\rfunction onWebEventReceived(entityID, message) {\r    if (entityID === webEntity) {\r        // Message received.\r        print(\"Message received: \" + message);\r\r        // Send a message back.\r        Entities.emitScriptEvent(webEntity, message + \" back\");\r    }\r}\r\rEntities.webEventReceived.connect(onWebEventReceived);"
        ],
        "memberof": "Entities",
        "longname": "Entities.emitScriptEvent",
        "scope": "static"
    },
    {
        "description": "Checks whether an axis-aligned box and a capsule intersect.",
        "kind": "function",
        "name": "AABoxIntersectsCapsule",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The bottom right near (minimum axes values) corner of the AA box.",
                "name": "brn"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The dimensions of the AA box.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "One end of the capsule.",
                "name": "start"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The other end of the capsule.",
                "name": "end"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The radius of the capsule.",
                "name": "radius"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the AA box and capsule intersect, otherwise <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.AABoxIntersectsCapsule",
        "scope": "static"
    },
    {
        "description": "Gets the meshes in a {@link Entities.EntityProperties-Model|Model} or {@link Entities.EntityProperties-PolyVox|PolyVox} \rentity.",
        "kind": "function",
        "name": "getMeshes",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the <code>Model</code> or <code>PolyVox</code> entity to get the meshes of.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Entities~getMeshesCallback"
                    ]
                },
                "description": "The function to call upon completion.",
                "name": "callback"
            }
        ],
        "deprecated": "This function is deprecated and will be removed. Use the {@link Graphics} API instead.",
        "memberof": "Entities",
        "longname": "Entities.getMeshes",
        "scope": "static"
    },
    {
        "description": "Called when a {@link Entities.getMeshes} call is complete.",
        "kind": "typedef",
        "name": "getMeshesCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<MeshProxy>"
                    ]
                },
                "description": "If <code>success</code> is <code>true</code>, a {@link MeshProxy} per mesh in the \r    <code>Model</code> or <code>PolyVox</code> entity; otherwise <code>undefined</code>.",
                "name": "meshes"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the {@link Entities.getMeshes} call was successful, <code>false</code> \r    otherwise. The call may be unsuccessful if the requested entity could not be found.",
                "name": "success"
            }
        ],
        "deprecated": "This function is deprecated and will be removed. Use the {@link Graphics} API instead.",
        "memberof": "Entities",
        "longname": "Entities~getMeshesCallback",
        "scope": "inner"
    },
    {
        "description": "Gets the object to world transform, excluding scale, of an entity.",
        "kind": "function",
        "name": "getEntityTransform",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The entity's object to world transform excluding scale (i.e., translation and rotation, with scale of 1) \r   if the entity can be found, otherwise a transform with zero translation and rotation and a scale of 1."
            }
        ],
        "examples": [
            "<caption>Position and rotation in an entity's world transform.</caption>\rvar position = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 1, z: -2 }));\rvar orientation = MyAvatar.orientation;\rprint(\"Position: \" + JSON.stringify(position));\rprint(\"Orientation: \" + JSON.stringify(orientation));\r\rvar entityID = Entities.addEntity({\r    type: \"Sphere\",\r    position: position,\r    rotation: orientation,\r    dimensions: Vec3.HALF,\r    lifetime: 300  // Delete after 5 minutes.\r});\r\rvar transform = Entities.getEntityTransform(entityID);\rprint(\"Transform: \" + JSON.stringify(transform));\rprint(\"Translation: \" + JSON.stringify(Mat4.extractTranslation(transform)));  // Same as position.\rprint(\"Rotation: \" + JSON.stringify(Mat4.extractRotation(transform)));  // Same as orientation.\rprint(\"Scale: \" + JSON.stringify(Mat4.extractScale(transform)));  // { x: 1, y: 1, z: 1 }"
        ],
        "memberof": "Entities",
        "longname": "Entities.getEntityTransform",
        "scope": "static"
    },
    {
        "description": "Gets the object to parent transform, excluding scale, of an entity.",
        "kind": "function",
        "name": "getEntityLocalTransform",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The entity's object to parent transform excluding scale (i.e., translation and rotation, with scale of \r    1) if the entity can be found, otherwise a transform with zero translation and rotation and a scale of 1. If the \r    entity doesn't have a parent, its world transform is returned."
            }
        ],
        "examples": [
            "<caption>Position and rotation in an entity's local transform.</caption>\rfunction createEntity(position, rotation, parent) {\r    var entity = Entities.addEntity({\r        type: \"Box\",\r        position: position,\r        rotation: rotation,\r        dimensions: Vec3.HALF,\r        parentID: parent,\r        lifetime: 300  // Delete after 5 minutes.\r    });\r    return entity;\r}\r\rvar position = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 2, z: -5 }));\r\rvar parent = createEntity(position, MyAvatar.orientation, Uuid.NULL);\r\rvar childTranslation = { x: 0, y: -1.5, z: 0 };\rvar childRotation = Quat.fromPitchYawRollDegrees(0, 45, 0);\rvar child = createEntity(Vec3.sum(position, childTranslation), Quat.multiply(childRotation, MyAvatar.orientation), parent);\r\rvar transform = Entities.getEntityLocalTransform(child);\rprint(\"Transform: \" + JSON.stringify(transform));\rprint(\"Translation: \" + JSON.stringify(Mat4.extractTranslation(transform)));  // childTranslation\rprint(\"Rotation: \" + JSON.stringify(Quat.safeEulerAngles(Mat4.extractRotation(transform))));  // childRotation\rprint(\"Scale: \" + JSON.stringify(Mat4.extractScale(transform)));  // { x: 1, y: 1, z: 1 }"
        ],
        "memberof": "Entities",
        "longname": "Entities.getEntityLocalTransform",
        "scope": "static"
    },
    {
        "description": "Converts a position in world coordinates to a position in an avatar, entity, or joint's local coordinates.",
        "kind": "function",
        "name": "worldToLocalPosition",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The world position to convert.",
                "name": "worldPosition"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The avatar or entity that the local coordinates are based on.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "description": "The joint in the avatar or entity that the local coordinates are based on. If \r    <code>-1</code> then no joint is used and the local coordinates are based solely on the avatar or entity.",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> to scale the local position per the parent's scale, \r    <code>false</code> for the local position to be at world scale.",
                "name": "scalesWithParent"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position converted to local coordinates if successful, otherwise {@link Vec3(0)|Vec3.ZERO}."
            }
        ],
        "examples": [
            "<caption>Report the local coordinates of an entity parented to another.</caption>\rvar parentPosition = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 }));\rvar childPosition = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 1, z: -5 }));\r\rvar parentEntity = Entities.addEntity({\r    type: \"Box\",\r    position: parentPosition,\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.5, y: 0.5, z: 0.5 },\r    lifetime: 300  // Delete after 5 minutes.\r});\rvar childEntity = Entities.addEntity({\r    type: \"Sphere\",\r    position: childPosition,\r    dimensions: { x: 0.5, y: 0.5, z: 0.5 },\r    parentID: parentEntity,\r    lifetime: 300  // Delete after 5 minutes.\r});\r\rvar localPosition = Entities.worldToLocalPosition(childPosition, parentEntity);\rprint(\"Local position: \" + JSON.stringify(localPosition));  // 0, 1, 0.\rlocalPosition = Entities.getEntityProperties(childEntity, \"localPosition\").localPosition;\rprint(\"Local position: \" + JSON.stringify(localPosition));  // The same."
        ],
        "memberof": "Entities",
        "longname": "Entities.worldToLocalPosition",
        "scope": "static"
    },
    {
        "description": "Converts a rotation or orientation in world coordinates to rotation in an avatar, entity, or joint's local coordinates.",
        "kind": "function",
        "name": "worldToLocalRotation",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The world rotation to convert.",
                "name": "worldRotation"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The avatar or entity that the local coordinates are based on.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "description": "The joint in the avatar or entity that the local coordinates are based on. If\r    <code>-1</code> then no joint is used and the local coordinates are based solely on the avatar or entity.",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<em>Not used in the calculation.</em>",
                "name": "scalesWithParent"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation converted to local coordinates if successful, otherwise {@link Quat(0)|Quat.IDENTITY}."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.worldToLocalRotation",
        "scope": "static"
    },
    {
        "description": "Converts a velocity in world coordinates to a velocity in an avatar, entity, or joint's local coordinates.",
        "kind": "function",
        "name": "worldToLocalVelocity",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The world velocity to convert.",
                "name": "worldVelocity"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The avatar or entity that the local coordinates are based on.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "description": "The joint in the avatar or entity that the local coordinates are based on. If \r    <code>-1</code> then no joint is used and the local coordinates are based solely on the avatar or entity.",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> to scale the local velocity per the parent's scale, \r    <code>false</code> for the local velocity to be at world scale.",
                "name": "scalesWithParent"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The velocity converted to local coordinates if successful, otherwise {@link Vec3(0)|Vec3.ZERO}."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.worldToLocalVelocity",
        "scope": "static"
    },
    {
        "description": "Converts a Euler angular velocity in world coordinates to an angular velocity in an avatar, entity, or joint's local \rcoordinates.",
        "kind": "function",
        "name": "worldToLocalAngularVelocity",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The world Euler angular velocity to convert. (Can be in any unit, e.g., deg/s or \r    rad/s.)",
                "name": "worldAngularVelocity"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The avatar or entity that the local coordinates are based on.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "description": "The joint in the avatar or entity that the local coordinates are based on. If \r    <code>-1</code> then no joint is used and the local coordinates are based solely on the avatar or entity.",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<em>Not used in the calculation.</em>",
                "name": "scalesWithParent"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The angular velocity converted to local coordinates if successful, otherwise {@link Vec3(0)|Vec3.ZERO}."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.worldToLocalAngularVelocity",
        "scope": "static"
    },
    {
        "description": "Converts dimensions in world coordinates to dimensions in an avatar or entity's local coordinates.",
        "kind": "function",
        "name": "worldToLocalDimensions",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The world dimensions to convert.",
                "name": "worldDimensions"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The avatar or entity that the local coordinates are based on.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "description": "<em>Not used in the calculation.</em>",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> to scale the local dimensions per the parent's scale, \r    <code>false</code> for the local dimensions to be at world scale.",
                "name": "scalesWithParent"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The dimensions converted to local coordinates if successful, otherwise {@link Vec3(0)|Vec3.ZERO}."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.worldToLocalDimensions",
        "scope": "static"
    },
    {
        "description": "Converts a position in an avatar, entity, or joint's local coordinate to a position in world coordinates.",
        "kind": "function",
        "name": "localToWorldPosition",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position to convert.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The avatar or entity that the local coordinates are based on.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "description": "The joint in the avatar or entity that the local coordinates are based on. If \r    <code>-1</code> then no joint is used and the local coordinates are based solely on the avatar or entity.",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> if the local dimensions are scaled per the parent's scale, \r    <code>false</code> if the local dimensions are at world scale.",
                "name": "scalesWithparent"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position converted to world coordinates if successful, otherwise {@link Vec3(0)|Vec3.ZERO}."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.localToWorldPosition",
        "scope": "static"
    },
    {
        "description": "Converts a rotation or orientation in an avatar, entity, or joint's local coordinate to a rotation in world coordinates.",
        "kind": "function",
        "name": "localToWorldRotation",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The local rotation to convert.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The avatar or entity that the local coordinates are based on.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "description": "The joint in the avatar or entity that the local coordinates are based on. If\r    <code>-1</code> then no joint is used and the local coordinates are based solely on the avatar or entity.",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<em>Not used in the calculation.</em>",
                "name": "scalesWithParent"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation converted to local coordinates if successful, otherwise {@link Quat(0)|Quat.IDENTITY}."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.localToWorldRotation",
        "scope": "static"
    },
    {
        "description": "Converts a velocity in an avatar, entity, or joint's local coordinate to a velocity in world coordinates.",
        "kind": "function",
        "name": "localToWorldVelocity",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local velocity to convert.",
                "name": "localVelocity"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The avatar or entity that the local coordinates are based on.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "description": "The joint in the avatar or entity that the local coordinates are based on. If \r    <code>-1</code> then no joint is used and the local coordinates are based solely on the avatar or entity.",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> if the local velocity is scaled per the parent's scale, \r    <code>false</code> if the local velocity is at world scale.",
                "name": "scalesWithParent"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The velocity converted to world coordinates it successful, otherwise {@link Vec3(0)|Vec3.ZERO}."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.localToWorldVelocity",
        "scope": "static"
    },
    {
        "description": "Converts a Euler angular velocity in an avatar, entity, or joint's local coordinate to an angular velocity in world \rcoordinates.",
        "kind": "function",
        "name": "localToWorldAngularVelocity",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local Euler angular velocity to convert. (Can be in any unit, e.g., deg/s or \rrad/s.)",
                "name": "localAngularVelocity"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The avatar or entity that the local coordinates are based on.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "description": "The joint in the avatar or entity that the local coordinates are based on. If \r    <code>-1</code> then no joint is used and the local coordinates are based solely on the avatar or entity.",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<em>Not used in the calculation.</em>",
                "name": "scalesWithParent"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The angular velocity converted to world coordinates if successful, otherwise {@link Vec3(0)|Vec3.ZERO}."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.localToWorldAngularVelocity",
        "scope": "static"
    },
    {
        "description": "Converts dimensions in an avatar or entity's local coordinates to dimensions in world coordinates.",
        "kind": "function",
        "name": "localToWorldDimensions",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local dimensions to convert.",
                "name": "localDimensions"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The avatar or entity that the local coordinates are based on.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "description": "<em>Not used in the calculation.</em>",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> if the local dimensions are scaled per the parent's \r    scale, <code>false</code> if the local dimensions are at world scale.",
                "name": "scalesWithParent"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The dimensions converted to world coordinates if successful, otherwise {@link Vec3(0)|Vec3.ZERO}."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.localToWorldDimensions",
        "scope": "static"
    },
    {
        "description": "Gets the static certificate for an entity. The static certificate contains static properties of the item which cannot\rbe altered.",
        "kind": "function",
        "name": "getStaticCertificateJSON",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to get the static certificate for.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The entity's static certificate as a JSON string if the entity can be found, otherwise <code>\"\"</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getStaticCertificateJSON",
        "scope": "static"
    },
    {
        "description": "Verifies the entity's proof of provenance, i.e., that the entity's <code>certificateID</code> property was produced by\rHigh Fidelity signing the entity's static certificate JSON.",
        "kind": "function",
        "name": "verifyStaticCertificateProperties",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to verify.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the entity can be found, its <code>certificateID</code> property is present, and  \r    its value matches the entity's static certificate JSON; otherwise <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.verifyStaticCertificateProperties",
        "scope": "static"
    },
    {
        "description": "Gets information about an entity property, including a minimum to maximum range for some numerical properties.",
        "kind": "function",
        "name": "getPropertyInfo",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the property to get the information for.",
                "name": "propertyName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Entities.EntityPropertyInfo"
                    ]
                },
                "description": "The information about the property if it can be found, otherwise an empty object."
            }
        ],
        "examples": [
            "<caption>Report property information for some properties.</caption>\rprint(\"alpha: \" + JSON.stringify(Entities.getPropertyInfo(\"alpha\")));\rprint(\"script: \" + JSON.stringify(Entities.getPropertyInfo(\"script\")));"
        ],
        "memberof": "Entities",
        "longname": "Entities.getPropertyInfo",
        "scope": "static"
    },
    {
        "description": "Triggered on the client that is the physics simulation owner during the collision of two entities. Note: Isn't triggered\rfor a collision with an avatar.\r<p>See also, {@link Entities|Entity Methods} and {@link Script.addEventHandler}.</p>",
        "kind": "signal",
        "name": "collisionWithEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of one entity in the collision. For an entity script, this is the ID of the entity containing \r    the script.",
                "name": "idA"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the other entity in the collision.",
                "name": "idB"
            },
            {
                "type": {
                    "names": [
                        "Collision"
                    ]
                },
                "description": "The details of the collision.",
                "name": "collision"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Change the color of an entity when it collides with another entity.</caption>\rvar entityScript = (function () {\r    function randomInteger(min, max) {\r        return Math.floor(Math.random() * (max - min + 1)) + min;\r    }\r\r    this.collisionWithEntity = function (myID, otherID, collision) {\r        Entities.editEntity(myID, {\r            color: {\r                red: randomInteger(128, 255),\r                green: randomInteger(128, 255),\r                blue: randomInteger(128, 255)\r            }\r        });\r    };\r});\r\rvar entityID = Entities.addEntity({\r    type: \"Box\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    dimensions: { x: 0.5, y: 0.5, z: 0.5 },\r    color: { red: 128, green: 128, blue: 128 },\r    gravity: { x: 0, y: -9.8, z: 0 },\r    velocity: { x: 0, y: 0.1, z: 0 },  // Kick off physics.\r    dynamic: true,\r    collisionless: false,  // So that collision events are generated.\r    script: \"(\" + entityScript + \")\",  // Could host the script on a Web server instead.\r    lifetime: 300  // Delete after 5 minutes.\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.collisionWithEntity",
        "scope": "static"
    },
    {
        "description": "Triggered when your ability to change the <code>locked</code> property of entities changes.",
        "kind": "signal",
        "name": "canAdjustLocksChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the script can change the <code>locked</code> property of an \r    entity, <code>false</code> if it can't.",
                "name": "canAdjustLocks"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when your ability to change locks changes.</caption>\rfunction onCanAdjustLocksChanged(canAdjustLocks) {\r    print(\"You can adjust entity locks: \" + canAdjustLocks);\r}\rEntities.canAdjustLocksChanged.connect(onCanAdjustLocksChanged);"
        ],
        "memberof": "Entities",
        "longname": "Entities.canAdjustLocksChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when your ability to rez (create) entities changes.",
        "kind": "signal",
        "name": "canRezChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the script can rez (create) entities, <code>false</code> if it can't.",
                "name": "canRez"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.canRezChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when your ability to rez (create) temporary entities changes. Temporary entities are entities with a finite\r<code>lifetime</code> property value set.",
        "kind": "signal",
        "name": "canRezTmpChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the script can rez (create) temporary entities, <code>false</code> if \r  it can't.",
                "name": "canRezTmp"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.canRezTmpChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when your ability to rez (create) certified entities changes. Certified entities are entities that have PoP\rcertificates.",
        "kind": "signal",
        "name": "canRezCertifiedChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the script can rez (create) certified entities, \r    <code>false</code> if it can't.",
                "name": "canRezCertified"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.canRezCertifiedChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when your ability to rez (create) temporary certified entities changes. Temporary entities are entities with a\rfinite <code>lifetime</code> property value set. Certified entities are entities that have PoP certificates.",
        "kind": "signal",
        "name": "canRezTmpCertifiedChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the script can rez (create) temporary certified entities,\r    <code>false</code> if it can't.",
                "name": "canRezTmpCertified"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.canRezTmpCertifiedChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when your ability to make changes to the asset server's assets changes.",
        "kind": "signal",
        "name": "canWriteAssetsChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the script can change the asset server's assets,\r    <code>false</code> if it can't.",
                "name": "canWriteAssets"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.canWriteAssetsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when your ability to get and set private user data changes.",
        "kind": "signal",
        "name": "canGetAndSetPrivateUserDataChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the script change the <code>privateUserData</code> \r    property of an entity, <code>false</code> if it can't.",
                "name": "canGetAndSetPrivateUserData"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.canGetAndSetPrivateUserDataChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse button is clicked while the mouse cursor is on an entity, or a controller trigger is fully \rpressed while its laser is on an entity.\r<p>See also, {@link Entities|Entity Methods} and {@link Script.addEventHandler}.</p>",
        "kind": "signal",
        "name": "mousePressOnEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that was pressed on.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "Details of the event.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when an entity is clicked with the mouse or laser.</caption>\rfunction onMousePressOnEntity(entityID, event) {\r    print(\"Clicked on entity: \" + entityID);\r}\r\rEntities.mousePressOnEntity.connect(onMousePressOnEntity);"
        ],
        "memberof": "Entities",
        "longname": "Entities.mousePressOnEntity",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse button is double-clicked while the mouse cursor is on an entity.",
        "kind": "signal",
        "name": "mouseDoublePressOnEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that was double-pressed on.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "Details of the event.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.mouseDoublePressOnEntity",
        "scope": "static"
    },
    {
        "description": "Repeatedly triggered while the mouse cursor or controller laser moves on an entity.\r<p>See also, {@link Entities|Entity Methods} and {@link Script.addEventHandler}.</p>",
        "kind": "signal",
        "name": "mouseMoveOnEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that was moved on.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "Details of the event.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.mouseMoveOnEntity",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse button is released after clicking on an entity or the controller trigger is partly or fully \rreleased after pressing on an entity, even if the mouse pointer or controller laser has moved off the entity.\r<p>See also, {@link Entities|Entity Methods} and {@link Script.addEventHandler}.</p>",
        "kind": "signal",
        "name": "mouseReleaseOnEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that was originally pressed.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "Details of the event.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.mouseReleaseOnEntity",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse button is clicked while the mouse cursor is not on an entity.",
        "kind": "signal",
        "name": "mousePressOffEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "Details of the event.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.mousePressOffEntity",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse button is double-clicked while the mouse cursor is not on an entity.",
        "kind": "signal",
        "name": "mouseDoublePressOffEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "Details of the event.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.mouseDoublePressOffEntity",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse button is clicked while the mouse cursor is on an entity. Note: Not triggered by controllers.\r<p>See also, {@link Entities|Entity Methods} and {@link Script.addEventHandler}.</p>",
        "kind": "signal",
        "name": "clickDownOnEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that was clicked on.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "Details of the event.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Compare clickDownOnEntity signal and entity script method.</caption>\rvar entityScript = (function () {\r    // Method is called for only this entity.\r    this.clickDownOnEntity = function (entityID, event) {\r        print(\"Entity : Clicked sphere ; \" + event.type);\r    };\r});\r\rvar sphereID = Entities.addEntity({\r    type: \"Sphere\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),\r    script: \"(\" + entityScript + \")\",  // Could host the script on a Web server instead.\r    lifetime: 300  // Delete after 5 minutes.\r});\r\rEntities.clickDownOnEntity.connect(function (entityID, event) {\r    // Signal is triggered for all entities.\r    if (entityID === sphereID) {\r        print(\"Interface : Clicked sphere ; \" + event.type);\r    } else {\r        print(\"Interface : Clicked another entity ; \" + event.type);\r    }\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.clickDownOnEntity",
        "scope": "static"
    },
    {
        "description": "Repeatedly triggered while a mouse button continues to be held after clicking an entity, even if the mouse cursor has \rmoved off the entity. Note: Not triggered by controllers.\r<p>See also, {@link Entities|Entity Methods} and {@link Script.addEventHandler}.</p>",
        "kind": "signal",
        "name": "holdingClickOnEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that was originally clicked.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "Details of the event.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.holdingClickOnEntity",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse button is released after clicking on an entity, even if the mouse cursor has moved off the \rentity. Note: Not triggered by controllers.\r<p>See also, {@link Entities|Entity Methods} and {@link Script.addEventHandler}.</p>",
        "kind": "signal",
        "name": "clickReleaseOnEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that was originally clicked.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "Details of the event.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.clickReleaseOnEntity",
        "scope": "static"
    },
    {
        "description": "Triggered when the mouse cursor or controller laser starts hovering on an entity.\r<p>See also, {@link Entities|Entity Methods} and {@link Script.addEventHandler}.</p>",
        "kind": "signal",
        "name": "hoverEnterEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that is being hovered.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "Details of the event.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.hoverEnterEntity",
        "scope": "static"
    },
    {
        "description": "Repeatedly triggered when the mouse cursor or controller laser moves while hovering over an entity.\r<p>See also, {@link Entities|Entity Methods} and {@link Script.addEventHandler}.</p>",
        "kind": "signal",
        "name": "hoverOverEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that is being hovered.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "Details of the event.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.hoverOverEntity",
        "scope": "static"
    },
    {
        "description": "Triggered when the mouse cursor or controller laser stops hovering over an entity.\r<p>See also, {@link Entities|Entity Methods} and {@link Script.addEventHandler}.</p>",
        "kind": "signal",
        "name": "hoverLeaveEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that was being hovered.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "Details of the event.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.hoverLeaveEntity",
        "scope": "static"
    },
    {
        "description": "Triggered when an avatar enters an entity, but only if the entity has an entity method exposed for this event.\r<p>See also, {@link Entities|Entity Methods} and {@link Script.addEventHandler}.</p>",
        "kind": "signal",
        "name": "enterEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that the avatar entered.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.enterEntity",
        "scope": "static"
    },
    {
        "description": "Triggered when an avatar leaves an entity, but only if the entity has an entity method exposed for this event.\r<p>See also, {@link Entities|Entity Methods} and {@link Script.addEventHandler}.</p>",
        "kind": "signal",
        "name": "leaveEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that the avatar left.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.leaveEntity",
        "scope": "static"
    },
    {
        "description": "Triggered when an entity is deleted.",
        "kind": "signal",
        "name": "deletingEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity deleted.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when an entity is deleted.</caption>\rEntities.deletingEntity.connect(function (entityID) {\r    print(\"Deleted entity: \" + entityID);\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.deletingEntity",
        "scope": "static"
    },
    {
        "description": "Triggered when an entity is added to Interface's local in-memory tree of entities it knows about. This may occur when\rentities are loaded upon visiting a domain, when the user rotates their view so that more entities become visible, and \rwhen any type of entity is created (e.g., by {@link Entities.addEntity|addEntity}).",
        "kind": "signal",
        "name": "addingEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity added.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when an entity is added.</caption>\rEntities.addingEntity.connect(function (entityID) {\r    print(\"Added entity: \" + entityID);\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.addingEntity",
        "scope": "static"
    },
    {
        "description": "Triggered when a \"wearable\" entity is deleted, for example when removing a \"wearable\" from your avatar.",
        "kind": "signal",
        "name": "deletingWearable",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the \"wearable\" entity deleted.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when a \"wearable\" entity is deleted.</caption>\rEntities.deletingWearable.connect(function (entityID) {\r    print(\"Deleted wearable: \" + entityID);\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.deletingWearable",
        "scope": "static"
    },
    {
        "description": "Triggered when a \"wearable\" entity is added to Interface's local in-memory tree of entities it knows about, for example \rwhen adding a \"wearable\" to your avatar.",
        "kind": "signal",
        "name": "addingWearable",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the \"wearable\" entity added.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when a \"wearable\" entity is added.</caption>\rEntities.addingWearable.connect(function (entityID) {\r    print(\"Added wearable: \" + entityID);\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.addingWearable",
        "scope": "static"
    },
    {
        "description": "Triggered when you disconnect from a domain, at which time Interface's local in-memory tree of entities that it knows \rabout is cleared.",
        "kind": "signal",
        "name": "clearingEntities",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when Interfaces's entity tree is cleared.</caption>\rEntities.clearingEntities.connect(function () {\r    print(\"Entities cleared\");\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.clearingEntities",
        "scope": "static"
    },
    {
        "description": "Triggered when a script in a {@link Entities.EntityProperties-Web|Web} entity's HTML sends an event over the entity's \rHTML event bridge. The HTML web page can send a message by calling:\r<pre class=\"prettyprint\"><code>EventBridge.emitWebEvent(message);</code></pre>\r<p>Use {@link Entities.emitScriptEvent} to send messages to the Web entity's HTML page.</p>\r<p>Alternatively, you can use {@link Entities.getEntityObject} to exchange messages over a Web entity's HTML event \rbridge.</p>",
        "kind": "signal",
        "name": "webEventReceived",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the Web entity that the message was received from.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The message received.",
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.webEventReceived",
        "scope": "static"
    },
    {
        "description": "<p>An entity may be one of the following types:</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th><th>Properties</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"Shape\"</code></td><td>A basic entity such as a cube.\r      See also, the <code>\"Box\"</code> and <code>\"Sphere\"</code> entity types.</td>\r      <td>{@link Entities.EntityProperties-Shape|EntityProperties-Shape}</td></tr>\r    <tr><td><code>\"Box\"</code></td><td>A rectangular prism. This is a synonym of <code>\"Shape\"</code> for the case\r      where the entity's <code>shape</code> property value is <code>\"Cube\"</code>.\r      <p>If an entity is created with its <code>type</code> \r      set to <code>\"Box\"</code> it will always be created with a <code>shape</code> property value of \r      <code>\"Cube\"</code>. If an entity of type <code>Shape</code> or <code>Sphere</code> has its <code>shape</code> set \r      to <code>\"Cube\"</code> then its <code>type</code> will be reported as <code>\"Box\"</code>.</p></td>\r      <td>{@link Entities.EntityProperties-Box|EntityProperties-Box}</td></tr>\r    <tr><td><code>\"Sphere\"</code></td><td>A sphere. This is a synonym of <code>\"Shape\"</code> for the case\r      where the entity's <code>shape</code> property value is <code>\"Sphere\"</code>.\r      <p>If an entity is created with its <code>type</code>\r      set to <code>\"Sphere\"</code> it will always be created with a <code>shape</code> property value of\r      <code>\"Sphere\"</code>. If an entity of type <code>Box</code> or <code>Shape</code> has its <code>shape</code> set\r      to <code>\"Sphere\"</code> then its <code>type</code> will be reported as <code>\"Sphere\"</code>.</td>\r      <td>{@link Entities.EntityProperties-Sphere|EntityProperties-Sphere}</td></tr>\r    <tr><td><code>\"Model\"</code></td><td>A mesh model from a glTF, FBX, or OBJ file.</td>\r      <td>{@link Entities.EntityProperties-Model|EntityProperties-Model}</td></tr>\r    <tr><td><code>\"Text\"</code></td><td>A pane of text oriented in space.</td>\r      <td>{@link Entities.EntityProperties-Text|EntityProperties-Text}</td></tr>\r    <tr><td><code>\"Image\"</code></td><td>An image oriented in space.</td>\r      <td>{@link Entities.EntityProperties-Image|EntityProperties-Image}</td></tr>\r    <tr><td><code>\"Web\"</code></td><td>A browsable web page.</td>\r      <td>{@link Entities.EntityProperties-Web|EntityProperties-Web}</td></tr>\r    <tr><td><code>\"ParticleEffect\"</code></td><td>A particle system that can be used to simulate things such as fire, \r      smoke, snow, magic spells, etc.</td>\r      <td>{@link Entities.EntityProperties-ParticleEffect|EntityProperties-ParticleEffect}</td></tr>\r    <tr><td><code>\"Line\"</code></td><td>A sequence of one or more simple straight lines.</td>\r      <td>{@link Entities.EntityProperties-Line|EntityProperties-Line}</td></tr>\r    <tr><td><code>\"PolyLine\"</code></td><td>A sequence of one or more textured straight lines.</td>\r      <td>{@link Entities.EntityProperties-PolyLine|EntityProperties-PolyLine}</td></tr>\r    <tr><td><code>\"PolyVox\"</code></td><td>A set of textured voxels.</td>\r      <td>{@link Entities.EntityProperties-PolyVox|EntityProperties-PolyVox}</td></tr>\r    <tr><td><code>\"Grid\"</code></td><td>A grid of lines in a plane.</td>\r      <td>{@link Entities.EntityProperties-Grid|EntityProperties-Grid}</td></tr>\r    <tr><td><code>\"Gizmo\"</code></td><td>A gizmo intended for UI.</td>\r      <td>{@link Entities.EntityProperties-Gizmo|EntityProperties-Gizmo}</td></tr>\r    <tr><td><code>\"Light\"</code></td><td>A local lighting effect.</td>\r      <td>{@link Entities.EntityProperties-Light|EntityProperties-Light}</td></tr>\r    <tr><td><code>\"Zone\"</code></td><td>A volume of lighting effects and avatar permissions.</td>\r      <td>{@link Entities.EntityProperties-Zone|EntityProperties-Zone}</td></tr>\r    <tr><td><code>\"Material\"</code></td><td>Modifies the existing materials on entities and avatars.</td>\r      <td>{@link Entities.EntityProperties-Material|EntityProperties-Material}</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "EntityType",
        "type": {
            "names": [
                "string"
            ]
        },
        "memberof": "Entities",
        "longname": "Entities.EntityType",
        "scope": "static"
    },
    {
        "description": "Grabbing behavior is defined by the following properties:",
        "kind": "typedef",
        "name": "Grab",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "<code>true</code> if the entity can be grabbed, <code>false</code> if it can't be.",
                "name": "grabbable"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "<code>true</code> if the entity will be updated in a kinematic manner when \r    grabbed; <code>false</code> if it will be grabbed using a tractor action. A kinematic grab will make the item appear \r    more tightly held but will cause it to behave poorly when interacting with dynamic entities.",
                "name": "grabKinematic"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "<code>true</code> if the entity will follow the motions of the hand \r    controller even if the avatar's hand can't get to the implied position, <code>false</code> if it will follow the motions \r    of the avatar's hand. This should be set <code>true</code> for tools, pens, etc. and <code>false</code> for things meant\r     to decorate the hand.",
                "name": "grabFollowsController"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the entity will receive calls to trigger\r    {@link Controller|Controller entity methods}, <code>false</code> if it won't.",
                "name": "triggerable"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "<code>true</code> if when the entity is grabbed, the grab will be \r    transferred to its parent entity if there is one; <code>false</code> if the grab won't be transferred, so a child entity \r    can be grabbed and moved relative to its parent.",
                "name": "grabDelegateToParent"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "<code>true</code> if the entity can be equipped, <code>false</code> if it cannot.",
                "name": "equippable"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "Positional offset from the left hand, when equipped.",
                "name": "equippableLeftPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "defaultvalue": "0,0,0,1",
                "description": "Rotational offset from the left hand, when equipped.",
                "name": "equippableLeftRotation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "Positional offset from the right hand, when equipped.",
                "name": "equippableRightPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "defaultvalue": "0,0,0,1",
                "description": "Rotational offset from the right hand, when equipped.",
                "name": "equippableRightRotation"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "If non-empty, this model will be used to indicate that an\r    entity is equippable, rather than the default.",
                "name": "equippableIndicatorURL"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "1,1,1",
                "description": "If <code>equippableIndicatorURL</code> is non-empty, this controls the\r\n       scale of the displayed indicator.",
                "name": "equippableIndicatorScale"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "If <code>equippableIndicatorURL</code> is non-empty, this controls the\r\n       relative offset of the displayed object from the equippable entity.",
                "name": "equippableIndicatorOffset"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.Grab",
        "scope": "static"
    },
    {
        "description": "Haze is defined by the following properties:",
        "kind": "typedef",
        "name": "Haze",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1000,
                "description": "The horizontal distance at which visibility is reduced to 95%; i.e., 95% of each pixel's \r    color is haze.",
                "name": "hazeRange"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "128,154,179",
                "description": "The color of the haze when looking away from the key light.",
                "name": "hazeColor"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the haze is colored with glare from the key light, \r    <code>false</code> if it isn't. If <code>true</code>, then <code>hazeGlareColor</code> and <code>hazeGlareAngle</code> \r    are used.",
                "name": "hazeEnableGlare"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,299,179",
                "description": "The color of the haze when looking towards the key light.",
                "name": "hazeGlareColor"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 20,
                "description": "The angle in degrees across the circle around the key light that the glare color and \r    haze color are blended 50/50.",
                "name": "hazeGlareAngle"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if haze decreases with altitude as defined by the \r    entity's local coordinate system, <code>false</code> if it doesn't. If <code>true</code>, then <code>hazeBaseRef</code> \r    and <code>hazeCeiling</code> are used.",
                "name": "hazeAltitudeEffect"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The y-axis value in the entity's local coordinate system at which the haze density starts \r    reducing with altitude.",
                "name": "hazeBaseRef"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 200,
                "description": "The y-axis value in the entity's local coordinate system at which the haze density has \r    reduced to 5%.",
                "name": "hazeCeiling"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The proportion of the skybox image to show through the haze: <code>0.0</code> \r    displays no skybox image; <code>1.0</code> displays no haze.",
                "name": "hazeBackgroundBlend"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the haze attenuates the key light, <code>false</code> \r    if it doesn't. If <code>true</code>, then <code>hazeKeyLightRange</code> and <code>hazeKeyLightAltitude</code> are used.",
                "name": "hazeAttenuateKeyLight"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1000,
                "description": "The distance at which the haze attenuates the key light by 95%.",
                "name": "hazeKeyLightRange"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 200,
                "description": "The altitude at which the haze starts attenuating the key light (i.e., the \r    altitude at which the distance starts being calculated).",
                "name": "hazeKeyLightAltitude"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.Haze",
        "scope": "static"
    },
    {
        "description": "A key light is defined by the following properties:",
        "kind": "typedef",
        "name": "KeyLight",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the light.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The intensity of the light.",
                "name": "intensity"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,-1,0",
                "description": "The direction the light is shining.",
                "name": "direction"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if shadows are cast, <code>false</code> if they aren't. Shadows \r    are cast by avatars, plus {@link Entities.EntityProperties-Model|Model} and \r    {@link Entities.EntityProperties-Shape|Shape} entities that have their \r    <code>{@link Entities.EntityProperties|canCastShadow}</code> property set to <code>true</code>.",
                "name": "castShadows"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.5,
                "description": "The bias of the shadows cast by the light, range <code>0.0</code> &ndash; \r    <code>1.0</code>. This fine-tunes shadows cast by the light, to prevent shadow acne and peter panning.",
                "name": "shadowBias"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "40.0",
                "description": "The maximum distance from the camera position at which shadows will be computed, \r    range <code>1.0</code> &ndash; <code>250.0</code>. Higher values cover more of the scene but with less precision.",
                "name": "shadowMaxDistance"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.KeyLight",
        "scope": "static"
    },
    {
        "description": "<p>The surface of a {@link Entities.EntityProperties-PolyVox|PolyVox} entity may be one of the following styles:</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Type</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>0</code></td><td>Marching cubes.</td><td>Chamfered edges. Open volume.\r      Joins neighboring PolyVox entities reasonably well.</td></tr>\r    <tr><td><code>1</code></td><td>Cubic.</td><td>Square edges. Open volume.\r      Joins neighboring PolyVox entities cleanly.</td></tr>\r    <tr><td><code>2</code></td><td>Edged cubic.</td><td>Square edges. Enclosed volume.\r      Joins neighboring PolyVox entities cleanly.</td></tr>\r    <tr><td><code>3</code></td><td>Edged marching cubes.</td><td>Chamfered edges. Enclosed volume.\r      Doesn't join neighboring PolyVox entities.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "PolyVoxSurfaceStyle",
        "type": {
            "names": [
                "number"
            ]
        },
        "memberof": "Entities",
        "longname": "Entities.PolyVoxSurfaceStyle",
        "scope": "static"
    },
    {
        "description": "A color and alpha pulse that an entity may have.",
        "kind": "typedef",
        "name": "Pulse",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The minimum value of the pulse multiplier.",
                "name": "min"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The maximum value of the pulse multiplier.",
                "name": "max"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The duration of the color and alpha pulse, in seconds. A pulse multiplier value goes from\r    <code>min</code> to <code>max</code>, then <code>max</code> to <code>min</code> in one period.",
                "name": "period"
            },
            {
                "type": {
                    "names": [
                        "Entities.PulseMode"
                    ]
                },
                "defaultvalue": "\"none\"",
                "description": "If \"in\", the color is pulsed in phase with the pulse period; if \"out\"\r    the color is pulsed out of phase with the pulse period.",
                "name": "colorMode"
            },
            {
                "type": {
                    "names": [
                        "Entities.PulseMode"
                    ]
                },
                "defaultvalue": "\"none\"",
                "description": "If \"in\", the alpha is pulsed in phase with the pulse period; if \"out\"\r    the alpha is pulsed out of phase with the pulse period.",
                "name": "alphaMode"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.Pulse",
        "scope": "static"
    },
    {
        "description": "A {@link Entities.EntityProperties-Gizmo|ring Gizmo} entity is defined by the following properties:",
        "kind": "typedef",
        "name": "RingGizmo",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The angle at which the ring starts, in degrees.",
                "name": "startAngle"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 360,
                "description": "The angle at which the ring ends, in degrees.",
                "name": "endAngle"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The inner radius of the ring as a fraction of the total radius, range <code>0.0</code> \r    &mdash; <code>1.0</code>.",
                "name": "innerRadius"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color at the inner start point of the ring.",
                "name": "innerStartColor"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color at the inner end point of the ring.",
                "name": "innerEndColor"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color at the outer start point of the ring.",
                "name": "outerStartColor"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color at the outer end point of the ring.",
                "name": "outerEndColor"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The opacity at the inner start point of the ring.",
                "name": "innerStartAlpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The opacity at the inner end point of the ring.",
                "name": "innerEndAlpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The opacity at the outer start point of the ring.",
                "name": "outerStartAlpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The opacity at the outer end point of the ring.",
                "name": "outerEndAlpha"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> to render tick marks, otherwise <code>false</code>.",
                "name": "hasTickMarks"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The angle between major tick marks, in degrees.",
                "name": "majorTickMarksAngle"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The angle between minor tick marks, in degrees.",
                "name": "minorTickMarksAngle"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The length of the major tick marks as a fraction of the radius. A positive value \r    draws tick marks outwards from the inner radius; a negative value draws tick marks inwards from the outer radius.",
                "name": "majorTickMarksLength"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The length of the minor tick marks, as a fraction of the radius. A positive \r    value draws tick marks outwards from the inner radius; a negative value draws tick marks inwards from the outer radius.",
                "name": "minorTickMarksLength"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the major tick marks.",
                "name": "majorTickMarksColor"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the minor tick marks.",
                "name": "minorTickMarksColor"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.RingGizmo",
        "scope": "static"
    },
    {
        "description": "<p>A <code>\"Shape\"</code>, <code>\"Box\"</code>, or <code>\"Sphere\"</code> {@link Entities.EntityType|EntityType} may \rdisplay as one of the following geometrical shapes:</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Dimensions</th><th>Notes</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"Circle\"</code></td><td>2D</td><td>A circle oriented in 3D.</td></tr>\r    <tr><td><code>\"Cone\"</code></td><td>3D</td><td></td></tr>\r    <tr><td><code>\"Cube\"</code></td><td>3D</td><td></td></tr>\r    <tr><td><code>\"Cylinder\"</code></td><td>3D</td><td></td></tr>\r    <tr><td><code>\"Dodecahedron\"</code></td><td>3D</td><td></td></tr>\r    <tr><td><code>\"Hexagon\"</code></td><td>3D</td><td>A hexagonal prism.</td></tr>\r    <tr><td><code>\"Icosahedron\"</code></td><td>3D</td><td></td></tr>\r    <tr><td><code>\"Octagon\"</code></td><td>3D</td><td>An octagonal prism.</td></tr>\r    <tr><td><code>\"Octahedron\"</code></td><td>3D</td><td></td></tr>\r    <tr><td><code>\"Quad\"</code></td><td>2D</td><td>A square oriented in 3D.</td></tr>\r    <tr><td><code>\"Sphere\"</code></td><td>3D</td><td></td></tr>\r    <tr><td><code>\"Tetrahedron\"</code></td><td>3D</td><td></td></tr>\r    <tr><td><code>\"Torus\"</code></td><td>3D</td><td><em>Not implemented.</em></td></tr>\r    <tr><td><code>\"Triangle\"</code></td><td>3D</td><td>A triangular prism.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "Shape",
        "type": {
            "names": [
                "string"
            ]
        },
        "memberof": "Entities",
        "longname": "Entities.Shape",
        "scope": "static"
    },
    {
        "description": "A skybox is defined by the following properties:",
        "kind": "typedef",
        "name": "Skybox",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "Sets the color of the sky if <code>url</code> is <code>\"\"</code>, otherwise modifies the\r    color of the cube map image.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A cube map image that is used to render the sky.",
                "name": "url"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.Skybox",
        "scope": "static"
    },
    {
        "description": "<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>0</code></td><td>Points.</td></tr>\r    <tr><td><code>1</code></td><td>Lines.</td></tr>\r    <tr><td><code>2</code></td><td>Line strip.</td></tr>\r    <tr><td><code>3</code></td><td>Triangles.</td></tr>\r    <tr><td><code>4</code></td><td>Triangle strip.</td></tr>\r    <tr><td><code>5</code></td><td>Quads.</td></tr>\r    <tr><td><code>6</code></td><td>Quad strip.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "Topology",
        "type": {
            "names": [
                "number"
            ]
        },
        "memberof": "Graphics",
        "longname": "Graphics.Topology",
        "scope": "static"
    },
    {
        "kind": "typedef",
        "name": "Material",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "model"
            },
            {
                "type": {
                    "names": [
                        "number",
                        "string"
                    ]
                },
                "name": "opacity"
            },
            {
                "type": {
                    "names": [
                        "number",
                        "string"
                    ]
                },
                "name": "roughness"
            },
            {
                "type": {
                    "names": [
                        "number",
                        "string"
                    ]
                },
                "name": "metallic"
            },
            {
                "type": {
                    "names": [
                        "number",
                        "string"
                    ]
                },
                "name": "scattering"
            },
            {
                "type": {
                    "names": [
                        "boolean",
                        "string"
                    ]
                },
                "name": "unlit"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "emissiveMap"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "albedoMap"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "opacityMap"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "opacityMapMode"
            },
            {
                "type": {
                    "names": [
                        "number",
                        "string"
                    ]
                },
                "name": "opacityCutoff"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "metallicMap"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "specularMap"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "roughnessMap"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "glossMap"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "normalMap"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "bumpMap"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "occlusionMap"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "lightMap"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "scatteringMap"
            },
            {
                "type": {
                    "names": [
                        "Mat4",
                        "string"
                    ]
                },
                "name": "texCoordTransform0"
            },
            {
                "type": {
                    "names": [
                        "Mat4",
                        "string"
                    ]
                },
                "name": "texCoordTransform1"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "lightmapParams"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "materialParams"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "cullFaceMode"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "defaultFallthrough"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "procedural"
            }
        ],
        "tags": [
            {
                "originalTitle": "propety",
                "title": "propety",
                "text": "{Vec3|string} emissive",
                "value": "{Vec3|string} emissive"
            },
            {
                "originalTitle": "propety",
                "title": "propety",
                "text": "{Vec3|string} albedo",
                "value": "{Vec3|string} albedo"
            }
        ],
        "memberof": "Graphics",
        "longname": "Graphics.Material",
        "scope": "static"
    },
    {
        "kind": "typedef",
        "name": "MaterialLayer",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Graphics.Material"
                    ]
                },
                "description": "This layer's material.",
                "name": "material"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The priority of this layer.  If multiple materials are applied to a mesh part, only the highest priority layer is used.",
                "name": "priority"
            }
        ],
        "memberof": "Graphics",
        "longname": "Graphics.MaterialLayer",
        "scope": "static"
    },
    {
        "kind": "typedef",
        "name": "IFSData",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "mesh name (useful for debugging / debug prints).",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "name": "topology"
            },
            {
                "type": {
                    "names": [
                        "Array.<number>"
                    ]
                },
                "description": "vertex indices to use for the mesh faces.",
                "name": "indices"
            },
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "description": "vertex positions (model space)",
                "name": "vertices"
            },
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "vertex normals (normalized)",
                "name": "normals"
            },
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "vertex colors (normalized)",
                "name": "colors"
            },
            {
                "type": {
                    "names": [
                        "Array.<Vec2>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "vertex texture coordinates (normalized)",
                "name": "texCoords0"
            }
        ],
        "memberof": "Graphics",
        "longname": "Graphics.IFSData",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The experimental Graphics API <em>(experimental)</em> lets you query and manage certain graphics-related structures (like underlying meshes and textures) from scripting.",
        "kind": "namespace",
        "name": "Graphics",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "longname": "Graphics",
        "scope": "global"
    },
    {
        "description": "Returns a model reference object associated with the specified UUID ({@link EntityID} or {@link AvatarID}).",
        "kind": "function",
        "name": "getModel",
        "params": [
            {
                "type": {
                    "names": [
                        "UUID"
                    ]
                },
                "description": "The objectID of the model whose meshes are to be retrieved.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Graphics.Model"
                    ]
                },
                "description": "the resulting Model object"
            }
        ],
        "memberof": "Graphics",
        "longname": "Graphics.getModel",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "updateModel",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Graphics.Model"
                    ]
                },
                "name": "model"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Graphics",
        "longname": "Graphics.updateModel",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "canUpdateModel",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "name": "meshIndex"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "name": "partNumber"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Graphics",
        "longname": "Graphics.canUpdateModel",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "newModel",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<Graphics.Mesh>"
                    ]
                },
                "name": "meshes"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Graphics.Model"
                    ]
                }
            }
        ],
        "memberof": "Graphics",
        "longname": "Graphics.newModel",
        "scope": "static"
    },
    {
        "description": "Create a new Mesh / Mesh Part with the specified data buffers.",
        "kind": "function",
        "name": "newMesh",
        "params": [
            {
                "type": {
                    "names": [
                        "Graphics.IFSData"
                    ]
                },
                "description": "Index-Faced Set (IFS) arrays used to create the new mesh.",
                "name": "ifsMeshData"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Graphics.Mesh"
                    ]
                },
                "description": "the resulting Mesh / Mesh Part object"
            }
        ],
        "memberof": "Graphics",
        "longname": "Graphics.newMesh",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "exportModelToOBJ",
        "params": [
            {
                "type": {
                    "names": [
                        "Graphics.Model"
                    ]
                },
                "name": "model"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "Graphics",
        "longname": "Graphics.exportModelToOBJ",
        "scope": "static"
    },
    {
        "kind": "typedef",
        "name": "Mesh",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Array.<Graphics.MeshPart>"
                    ]
                },
                "description": "Array of submesh part references.",
                "name": "parts"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "Vertex attribute names (color, normal, etc.)",
                "name": "attributeNames"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The number of parts contained in the mesh.",
                "name": "numParts"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Total number of vertex indices in the mesh.",
                "name": "numIndices"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Total number of vertices in the Mesh.",
                "name": "numVertices"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Number of currently defined vertex attributes.",
                "name": "numAttributes"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "valid"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "strong"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "extents"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "bufferFormats"
            }
        ],
        "memberof": "Graphics",
        "longname": "Graphics.Mesh",
        "scope": "static"
    },
    {
        "kind": "typedef",
        "name": "MeshPart",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "valid"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The part index (within the containing Mesh).",
                "name": "partIndex"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "firstVertexIndex"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "baseVertexIndex"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "lastVertexIndex"
            },
            {
                "type": {
                    "names": [
                        "Graphics.Topology"
                    ]
                },
                "description": "element interpretation (currently only 'triangles' is supported).",
                "name": "topology"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "Vertex attribute names (color, normal, etc.)",
                "name": "attributeNames"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Number of vertex indices that this mesh part refers to.",
                "name": "numIndices"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Number of vertices per face (eg: 3 when topology is 'triangles').",
                "name": "numVerticesPerFace"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Number of faces represented by the mesh part (numIndices / numVerticesPerFace).",
                "name": "numFaces"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Total number of vertices in the containing Mesh.",
                "name": "numVertices"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Number of currently defined vertex attributes.",
                "name": "numAttributes"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "extents"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "bufferFormats"
            }
        ],
        "memberof": "Graphics",
        "longname": "Graphics.MeshPart",
        "scope": "static"
    },
    {
        "kind": "typedef",
        "name": "Model",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "UUID of corresponding inworld object (if model is associated)",
                "name": "objectID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The number of submeshes contained in the model.",
                "name": "numMeshes"
            },
            {
                "type": {
                    "names": [
                        "Array.<Graphics.Mesh>"
                    ]
                },
                "description": "Array of submesh references.",
                "name": "meshes"
            },
            {
                "type": {
                    "names": [
                        "Object.<string, Array.<Graphics.MaterialLayer>>"
                    ]
                },
                "description": "Map of materials layer lists.  You can look up a material layer list by mesh part number or by material name.",
                "name": "materialLayers"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "Array of all the material names used by the mesh parts of this model, in order (e.g. materialNames[0] is the name of the first mesh part's material).",
                "name": "materialNames"
            }
        ],
        "memberof": "Graphics",
        "longname": "Graphics.Model",
        "scope": "static"
    },
    {
        "description": "<p>Describes the type of texture.</p>\r<p>See also: {@link Material} and \r{@link https://docs.highfidelity.com/create/3d-models/pbr-materials-guide.html|PBR Materials Guide}.</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Name</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>0</code></td><td>Default</td><td>Basic color.</td></tr>\r    <tr><td><code>1</code></td><td>Strict</td><td>Basic color. Quality never downgraded.</td></tr>\r    <tr><td><code>2</code></td><td>Albedo</td><td>Color for PBR.</td></tr>\r    <tr><td><code>3</code></td><td>Normal</td><td>Normal map.</td></tr>\r    <tr><td><code>4</code></td><td>Bump</td><td>Bump map.</td></tr>\r    <tr><td><code>5</code></td><td>Specular or metallic</td><td>Metallic or not.</td></tr>\r    <tr><td><code>6</code></td><td>Roughness</td><td>Rough or matte.</td></tr>\r    <tr><td><code>7</code></td><td>Gloss</td><td>Gloss or shine.</td></tr>\r    <tr><td><code>8</code></td><td>Emissive</td><td>The amount of light reflected.</td></tr>\r    <tr><td><code>9</code></td><td>Cube</td><td>Cubic image for sky boxes.</td></tr>\r    <tr><td><code>10</code></td><td>Occlusion or scattering</td><td>How objects or human skin interact with light.</td></tr>\r    <tr><td><code>11</code></td><td>Lightmap</td><td>Light map.</td></tr>\r    <tr><td><code>12</code></td><td>Unused</td><td>Texture is not currently used.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "TextureType",
        "type": {
            "names": [
                "number"
            ]
        },
        "memberof": "TextureCache",
        "longname": "TextureCache.TextureType",
        "scope": "static"
    },
    {
        "description": "<p>The <code>Controller.Hardware.Keyboard</code> object has properties representing keyboard, mouse, and display touch \revents. The property values are integer IDs, uniquely identifying each output. <em>Read-only.</em></p>\r<p>These events can be mapped to actions or functions or <code>Controller.Standard</code> items in a {@link RouteObject}\rmapping. For presses, each data value is either <code>1.0</code> for \"true\" or <code>0.0</code> for \"false\".</p>\r\r<table>\r  <thead>\r    <tr><th>Property</th><th>Type</th><th>Data</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>0</code> &ndash; <code>9</code></td><td>number</td><td>number</td><td>A \"0\" &ndash; \"1\" key on the \r      keyboard or keypad is pressed.</td></tr>\r    <tr><td><code>A</code> &ndash; <code>Z</code></td><td>number</td><td>number</td><td>A \"A\" &ndash; \"Z\" key on the \r      keyboard is pressed.</td></tr>\r    <tr><td><code>Space</code></td><td>number</td><td>number</td><td>The space bar on the keyboard is pressed.</td></tr>\r    <tr><td><code>Tab</code></td><td>number</td><td>number</td><td>The tab key on the keyboard is pressed.</td></tr>\r    <tr><td><code>Shift</code></td><td>number</td><td>number</td><td>The shift key on the keyboard is pressed.</td></tr>\r    <tr><td><code>Control</code></td><td>number</td><td>number</td><td>The control key on the keyboard is pressed. (The \r      \"Command\" key on OSX.)</td></tr>\r    <tr><td><code>Left</code></td><td>number</td><td>number</td><td>The left arrow key on the keyboard or keypad is pressed.\r      </td></tr>\r    <tr><td><code>Right</code></td><td>number</td><td>number</td><td>The right arrow key on the keyboard or keypad is \r      pressed.</td></tr>\r    <tr><td><code>Up</code></td><td>number</td><td>number</td><td>The up arrow key on the keyboard or keypad is pressed.\r      </td></tr>\r    <tr><td><code>Down</code></td><td>number</td><td>number</td><td>The down arrow key on the keyboard or keypad is pressed.\r      </td></tr>\r    <tr><td><code>PgUp</code></td><td>number</td><td>number</td><td>The page up key on the keyboard or keypad is pressed.\r      </td></tr>\r    <tr><td><code>PgDown</code></td><td>number</td><td>number</td><td>The page down key on the keyboard or keypad is pressed.\r      </td></tr>\r    <tr><td><code>LeftMouseButton</code></td><td>number</td><td>number</td><td>The left mouse button is pressed.</td></tr>\r    <tr><td><code>MiddleMouseButton</code></td><td>number</td><td>number</td><td>The middle mouse button is pressed.\r      </td></tr>\r    <tr><td><code>RightMouseButton</code></td><td>number</td><td>number</td><td>The right mouse button is pressed.</td></tr>\r    <tr><td><code>LeftMouseClicked</code></td><td>number</td><td>number</td><td>The left mouse button was clicked.</td></tr>\r    <tr><td><code>MiddleMouseClicked</code></td><td>number</td><td>number</td><td>The middle mouse button was clicked.\r      </td></tr>\r    <tr><td><code>RightMouseClicked</code></td><td>number</td><td>number</td><td>The right mouse button was clicked.\r      </td></tr>\r    <tr><td><code>MouseMoveRight</code></td><td>number</td><td>number</td><td>The mouse moved right. The data value is how \r      far it moved.</td></tr>\r    <tr><td><code>MouseMoveLeft</code></td><td>number</td><td>number</td><td>The mouse moved left. The data value is how far \r      it moved.</td></tr>\r    <tr><td><code>MouseMoveUp</code></td><td>number</td><td>number</td><td>The mouse moved up. The data value is how far it \r      moved.</td></tr>\r    <tr><td><code>MouseMoveDown</code></td><td>number</td><td>number</td><td>The mouse moved down. The data value is how far \r      it moved.</td></tr>\r    <tr><td><code>MouseX</code></td><td>number</td><td>number</td><td>The mouse x-coordinate changed. The data value is its \r      new x-coordinate value.</td></tr>\r    <tr><td><code>MouseY</code></td><td>number</td><td>number</td><td>The mouse y-coordinate changed. The data value is its \r      new y-coordinate value.</td></tr>\r    <tr><td><code>MouseWheelRight</code></td><td>number</td><td>number</td><td>The mouse wheel rotated right. The data value \r      is the number of units rotated (typically <code>1.0</code>).</td></tr>\r    <tr><td><code>MouseWheelLeft</code></td><td>number</td><td>number</td><td>The mouse wheel rotated left. The data value \r      is the number of units rotated (typically <code>1.0</code>).</td></tr>\r    <tr><td><code>MouseWheelUp</code></td><td>number</td><td>number</td><td>The mouse wheel rotated up. The data value \r      is the number of units rotated (typically <code>1.0</code>).\r      <p><strong>Warning:</strong> The mouse wheel in an ordinary mouse generates left/right wheel events instead of \r      up/down.</p>\r      </td></tr>\r    <tr><td><code>MouseWheelDown</code></td><td>number</td><td>number</td><td>The mouse wheel rotated down. The data value \r      is the number of units rotated (typically <code>1.0</code>).\r      <p><strong>Warning:</strong> The mouse wheel in an ordinary mouse generates left/right wheel events instead of \r      up/down.</p>\r      </td></tr>\r    <tr><td><code>TouchpadRight</code></td><td>number</td><td>number</td><td>The average touch on a touch-enabled device \r      moved right. The data value is how far the average position of all touch points moved.</td></tr>\r    <tr><td><code>TouchpadLeft</code></td><td>number</td><td>number</td><td>The average touch on a touch-enabled device \r      moved left. The data value is how far the average position of all touch points moved.</td></tr>\r    <tr><td><code>TouchpadUp</code></td><td>number</td><td>number</td><td>The average touch on a touch-enabled device \r      moved up. The data value is how far the average position of all touch points moved.</td></tr>\r    <tr><td><code>TouchpadDown</code></td><td>number</td><td>number</td><td>The average touch on a touch-enabled device \r      moved down. The data value is how far the average position of all touch points moved.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "Hardware-Keyboard",
        "type": {
            "names": [
                "object"
            ]
        },
        "memberof": "Controller",
        "longname": "Controller.Hardware-Keyboard",
        "scope": "static"
    },
    {
        "description": "<p>The views that may be visible on the PC display.</p>\r<table>\r  <thead>\r    <tr>\r      <th>Value</th>\r      <th>View Displayed</th>\r    </tr>\r  </thead>\r  <tbody>\r    <tr>\r      <td><code>\"\"</code></td>\r      <td>Normal view.</td>\r    </tr>\r    <tr>\r      <td><code>\"resource://hmdPreviewFrame\"</code></td>\r      <td>HMD preview.</td>\r    </tr>\r    <tr>\r      <td><code>\"resource://spectatorCameraFrame\"</code></td>\r      <td>Entity camera view.</td>\r    </tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "DisplayTexture",
        "type": {
            "names": [
                "string"
            ]
        },
        "memberof": "Window",
        "longname": "Window.DisplayTexture",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>TextureCache</code> API manages texture cache resources.",
        "kind": "namespace",
        "name": "TextureCache",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Total number of total resources. <em>Read-only.</em>",
                "name": "numTotal"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Total number of cached resource. <em>Read-only.</em>",
                "name": "numCached"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Size in bytes of all resources. <em>Read-only.</em>",
                "name": "sizeTotal"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Size in bytes of all cached resources. <em>Read-only.</em>",
                "name": "sizeCached"
            }
        ],
        "longname": "TextureCache",
        "scope": "global"
    },
    {
        "description": "Prefetches a texture resource of specific type.",
        "kind": "function",
        "name": "prefetch",
        "variation": "0",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the texture to prefetch.",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "TextureCache.TextureType"
                    ]
                },
                "description": "The type of the texture.",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 67108864,
                "description": "The maximum number of pixels to use for the image. If the texture has more \r    than this number it is downscaled.",
                "name": "maxNumPixels"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ResourceObject"
                    ]
                },
                "description": "A resource object."
            }
        ],
        "memberof": "TextureCache",
        "longname": "TextureCache.prefetch(0)",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "spectatorCameraFramebufferReset",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "deprecated": "This signal is deprecated and will be removed.",
        "memberof": "TextureCache",
        "longname": "TextureCache.spectatorCameraFramebufferReset",
        "scope": "static"
    },
    {
        "description": "A MIDI message.\r<p><strong>Warning:</strong> The <code>status</code> property is NOT a MIDI status value.</p>",
        "kind": "typedef",
        "name": "MidiMessage",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Device number.",
                "name": "device"
            },
            {
                "type": {
                    "names": [
                        "Midi.RawMidiMessage"
                    ]
                },
                "description": "Raw MIDI message.",
                "name": "raw"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Channel + status. <em>Legacy value.</em>",
                "name": "status"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Channel: <code>1</code> &ndash; <code>16</code>.",
                "name": "channel"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Status: {@link Midi.MidiStatus}; <code>8</code> &ndash; <code>15</code>.",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Note: <code>0</code> &ndash; <code>127</code>.",
                "name": "note"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Note velocity: <code>0</code> &ndash; <code>127</code>. (<code>0</code> means \"note off\".)",
                "name": "velocity"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Pitch bend: <code>-8192</code> &ndash; <code>8191</code>.",
                "name": "bend"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Program change: <code>0</code> &ndash; <code>127</code>.",
                "name": "program"
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.MidiMessage",
        "scope": "static"
    },
    {
        "description": "An integer DWORD (unsigned 32 bit) message with bits having values as follows:\r<table>\r  <tbody>\r    <tr>\r      <td width=25%><code>00000000</code></td>\r      <td width=25%><code>0vvvvvvv</code></td>\r      <td width=25%><code>0nnnnnnn</code></td>\r      <td width=12%><code>1sss</code></td>\r      <td width=12%><code>cccc</code></td>\r  </tbody>\r</table>\r<p>Where:</p>\r<ul>\r  <li><code>v</code> = Velocity.\r  <li><code>n</code> = Note.\r  <li><code>s</code> = Status - {@link Midi.MidiStatus}\r  <li><code>c</code> = Channel.\r</ul>\r<p>The number in the first bit of each byte denotes whether it is a command (1) or data (0).",
        "kind": "typedef",
        "name": "RawMidiMessage",
        "type": {
            "names": [
                "number"
            ]
        },
        "memberof": "Midi",
        "longname": "Midi.RawMidiMessage",
        "scope": "static"
    },
    {
        "description": "<p>A MIDI status value. The following MIDI status values are supported:</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th>\r  </thead>\r  <tbody>\r    <tr><td><code>8</code></td><td>Note off.</td></tr>\r    <tr><td><code>9</code></td><td>Note on.</td></tr>\r    <tr><td><code>10</code></td><td>Polyphonic key pressure.</td></tr>\r    <tr><td><code>11</code></td><td>Control change.</td></tr>\r    <tr><td><code>12</code></td><td>Program change.</td></tr>\r    <tr><td><code>13</code></td><td>Channel pressure.</td></tr>\r    <tr><td><code>14</code></td><td>Pitch bend.</td></tr>\r    <tr><td><code>15</code></td><td>System message.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "MidiStatus",
        "type": {
            "names": [
                "number"
            ]
        },
        "memberof": "Midi",
        "longname": "Midi.MidiStatus",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Midi</code> API provides the ability to connect Interface with musical instruments and other external or virtual \rdevices via the MIDI protocol. For further information and examples, see the tutorial: \r<a href=\"https://docs.highfidelity.com/script/midi-tutorial.html\">Use MIDI to Control Your Environment</a>.\r\r<p><strong>Note:</strong> Only works on Windows.</p>",
        "kind": "namespace",
        "name": "Midi",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "longname": "Midi",
        "scope": "global"
    },
    {
        "description": "Triggered when a connected device sends an output.",
        "kind": "signal",
        "name": "midiNote",
        "params": [
            {
                "type": {
                    "names": [
                        "Midi.MidiMessage"
                    ]
                },
                "description": "The MIDI message.",
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "deprecated": "This signal is deprecated and will be removed. Use {@link Midi.midiMessage|midiMessage} instead.",
        "memberof": "Midi",
        "longname": "Midi.midiNote",
        "scope": "static"
    },
    {
        "description": "Triggered when a connected device sends an output.",
        "kind": "signal",
        "name": "midiMessage",
        "params": [
            {
                "type": {
                    "names": [
                        "Midi.MidiMessage"
                    ]
                },
                "description": "The MIDI message.",
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.midiMessage",
        "scope": "static"
    },
    {
        "description": "Triggered when the system detects there was a reset such as when a device is plugged in or unplugged.",
        "kind": "signal",
        "name": "midiReset",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.midiReset",
        "scope": "static"
    },
    {
        "description": "Sends a raw MIDI packet to a particular device.",
        "kind": "function",
        "name": "sendRawDword",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer device number.",
                "name": "device"
            },
            {
                "type": {
                    "names": [
                        "Midi.RawMidiMessage"
                    ]
                },
                "description": "Raw MIDI message.",
                "name": "raw"
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.sendRawDword",
        "scope": "static"
    },
    {
        "description": "Sends a MIDI message to a particular device.",
        "kind": "function",
        "name": "sendMidiMessage",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer device number.",
                "name": "device"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer channel number.",
                "name": "channel"
            },
            {
                "type": {
                    "names": [
                        "Midi.MidiStatus"
                    ]
                },
                "description": "Integer status value.",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Note number.",
                "name": "note"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Note velocity. (<code>0</code> means \"note off\".)",
                "name": "velocity"
            }
        ],
        "tags": [
            {
                "originalTitle": "comment",
                "title": "comment",
                "text": "The \"type\" parameter has that name to match up with {@link Midi.MidiMessage}.",
                "value": "The \"type\" parameter has that name to match up with {@link Midi.MidiMessage}."
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.sendMidiMessage",
        "scope": "static"
    },
    {
        "description": "Plays a note on all connected devices.",
        "kind": "function",
        "name": "playMidiNote",
        "params": [
            {
                "type": {
                    "names": [
                        "MidiStatus"
                    ]
                },
                "description": "Note status.",
                "name": "status"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Note number.",
                "name": "note"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Note velocity. (<code>0</code> means \"note off\".)",
                "name": "velocity"
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.playMidiNote",
        "scope": "static"
    },
    {
        "description": "Turns off all notes on all connected MIDI devices.",
        "kind": "function",
        "name": "allNotesOff",
        "memberof": "Midi",
        "longname": "Midi.allNotesOff",
        "scope": "static"
    },
    {
        "description": "Cleans up and rediscovers attached MIDI devices.",
        "kind": "function",
        "name": "resetDevices",
        "memberof": "Midi",
        "longname": "Midi.resetDevices",
        "scope": "static"
    },
    {
        "description": "Gets a list of MIDI input or output devices.",
        "kind": "function",
        "name": "listMidiDevices",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to list output devices, <code>false</code> to list input devices.",
                "name": "output"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                }
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.listMidiDevices",
        "scope": "static"
    },
    {
        "description": "Blocks a MIDI device's input or output.",
        "kind": "function",
        "name": "blockMidiDevice",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the MIDI device to block.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to block the device's output, <code>false</code> to block its input.",
                "name": "output"
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.blockMidiDevice",
        "scope": "static"
    },
    {
        "description": "Unblocks a MIDI device's input or output.",
        "kind": "function",
        "name": "unblockMidiDevice",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the MIDI device to unblock.",
                "name": "name-"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to unblock the device's output, <code>false</code> to unblock its input.",
                "name": "output"
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.unblockMidiDevice",
        "scope": "static"
    },
    {
        "description": "Enables or disables repeating all incoming notes to all outputs. (Default is disabled.)",
        "kind": "function",
        "name": "thruModeEnable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to enable repeating all incoming notes to all output, <code>false</code> to \r    disable.",
                "name": "enable"
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.thruModeEnable",
        "scope": "static"
    },
    {
        "description": "Enables or disables broadcasts to all unblocked devices.",
        "kind": "function",
        "name": "broadcastEnable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to have \"send\" functions broadcast to all devices, <code>false</code> to \r    have them send to specific output devices.",
                "name": "enable"
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.broadcastEnable",
        "scope": "static"
    },
    {
        "description": "Enables or disables note off events.",
        "kind": "function",
        "name": "typeNoteOffEnable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to enable, <code>false</code> to disable.",
                "name": "enable"
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.typeNoteOffEnable",
        "scope": "static"
    },
    {
        "description": "Enables or disables note on events.",
        "kind": "function",
        "name": "typeNoteOnEnable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to enable, <code>false</code> to disable.",
                "name": "enable"
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.typeNoteOnEnable",
        "scope": "static"
    },
    {
        "description": "Enables or disables poly key pressure events.",
        "kind": "function",
        "name": "typePolyKeyPressureEnable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to enable, <code>false</code> to disable.",
                "name": "enable"
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.typePolyKeyPressureEnable",
        "scope": "static"
    },
    {
        "description": "Enables or disables control change events.",
        "kind": "function",
        "name": "typeControlChangeEnable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to enable, <code>false</code> to disable.",
                "name": "enable"
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.typeControlChangeEnable",
        "scope": "static"
    },
    {
        "description": "Enables or disables program change events.",
        "kind": "function",
        "name": "typeProgramChangeEnable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to enable, <code>false</code> to disable.",
                "name": "enable"
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.typeProgramChangeEnable",
        "scope": "static"
    },
    {
        "description": "Enables or disables channel pressure events.",
        "kind": "function",
        "name": "typeChanPressureEnable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to enable, <code>false</code> to disable.",
                "name": "enable"
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.typeChanPressureEnable",
        "scope": "static"
    },
    {
        "description": "Enables or disables pitch bend events.",
        "kind": "function",
        "name": "typePitchBendEnable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to enable, <code>false</code> to disable.",
                "name": "enable"
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.typePitchBendEnable",
        "scope": "static"
    },
    {
        "description": "Enables or disables system message events.",
        "kind": "function",
        "name": "typeSystemMessageEnable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to enable, <code>false</code> to disable.",
                "name": "enable"
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.typeSystemMessageEnable",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>ModelCache</code> API manages model cache resources.",
        "kind": "namespace",
        "name": "ModelCache",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Total number of total resources. <em>Read-only.</em>",
                "name": "numTotal"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Total number of cached resource. <em>Read-only.</em>",
                "name": "numCached"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Size in bytes of all resources. <em>Read-only.</em>",
                "name": "sizeTotal"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Size in bytes of all cached resources. <em>Read-only.</em>",
                "name": "sizeCached"
            }
        ],
        "longname": "ModelCache",
        "scope": "global"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Assignment Client Scripts</p>The <code>location</code> API provides facilities related to your current location in the metaverse.\r\r<h3>Getter/Setter</h3>\r<p>You can get and set your current metaverse address by directly reading a string value from and writing a string value to \rthe <code>location</code> object. This is an alternative to using the <code>location.href</code> property or other object\rfunctions.</p>",
        "kind": "namespace",
        "name": "location",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "A UUID uniquely identifying the domain you're visiting. Is {@link Uuid(0)|Uuid.NULL} if you're not\r    connected to the domain or are in a serverless domain.\r    <em>Read-only.</em>",
                "name": "domainID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the domain for your current metaverse address (e.g., <code>\"AvatarIsland\"</code>,\r    <code>localhost</code>, or an IP address). Is blank if you're in a serverless domain.\r    <em>Read-only.</em>",
                "name": "hostname"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Your current metaverse address (e.g., <code>\"hifi://avatarisland/15,-10,26/0,0,0,1\"</code>)\r    regardless of whether or not you're connected to the domain. Starts with <code>\"file:///\"</code> if you're in a \r    serverless domain.\r    <em>Read-only.</em>",
                "name": "href"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if you're connected to the domain in your current <code>href</code>\r    metaverse address, otherwise <code>false</code>.",
                "name": "isConnected"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The location and orientation in your current <code>href</code> metaverse address \r    (e.g., <code>\"/15,-10,26/0,0,0,1\"</code>).\r    <em>Read-only.</em>",
                "name": "pathname"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The place name in your current <code>href</code> metaverse address\r    (e.g., <code>\"AvatarIsland\"</code>). Is blank if your <code>hostname</code> is an IP address.\r    <em>Read-only.</em>",
                "name": "placename"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The protocol of your current <code>href</code> metaverse address (e.g., <code>\"hifi\"</code>).\r    <em>Read-only.</em>",
                "name": "protocol"
            }
        ],
        "longname": "location",
        "scope": "global"
    },
    {
        "description": "<p>The reasons for an address lookup via the metaverse API are defined by numeric values:</p>\r<table>\r  <thead>\r    <tr>\r      <th>Name</th>\r      <th>Value</th>\r      <th>Description</th>\r    </tr>\r  </thead>\r  <tbody>\r    <tr>\r      <td><strong>UserInput</strong></td>\r      <td><code>0</code></td>\r      <td>User-typed input.</td>\r    </tr>\r    <tr>\r      <td><strong>Back</strong></td>\r      <td><code>1</code></td>\r      <td>Address from a {@link location.goBack|goBack} call.</td>\r    </tr>\r    <tr>\r      <td><strong>Forward</strong></td>\r      <td><code>2</code></td>\r      <td>Address from a {@link location.goForward|goForward} call.</td>\r    </tr>\r    <tr>\r      <td><strong>StartupFromSettings</strong></td>\r      <td><code>3</code></td>\r      <td>Initial location at Interface start-up from settings.</td>\r    </tr>\r    <tr>\r      <td><strong>DomainPathResponse</strong></td>\r      <td><code>4</code></td>\r      <td>A named path in the domain.</td>\r    </tr>\r    <tr>\r      <td><strong>Internal</strong></td>\r      <td><code>5</code></td>\r      <td>An internal attempt to resolve an alternative path.</td>\r    </tr>\r    <tr>\r      <td><strong>AttemptedRefresh</strong></td>\r      <td><code>6</code></td>\r      <td>A refresh after connecting to a domain.</td>\r    </tr>\r    <tr>\r      <td><strong>Suggestions</strong></td>\r      <td><code>7</code></td>\r      <td>Address from the Goto dialog.</td>\r    </tr>\r    <tr>\r      <td><strong>VisitUserFromPAL</strong></td>\r      <td><code>8</code></td>\r      <td>User from the People dialog.</td>\r    </tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "LookupTrigger",
        "type": {
            "names": [
                "number"
            ]
        },
        "memberof": "location",
        "longname": "location.LookupTrigger",
        "scope": "static"
    },
    {
        "description": "Takes you to a specified metaverse address.",
        "kind": "function",
        "name": "handleLookupString",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The address to go to: a <code>\"hifi://\"</code> address, an IP address (e.g., \r    <code>\"127.0.0.1\"</code> or <code>\"localhost\"</code>), a domain name, a named path on a domain (starts with \r    <code>\"/\"</code>), a position or position and orientation, or a user (starts with <code>\"@\"</code>).",
                "name": "address"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Set to <code>true</code> if the address is obtained from the \"Goto\" dialog.\r    Helps ensure that user's location history is correctly maintained.",
                "name": "fromSuggestions"
            }
        ],
        "memberof": "location",
        "longname": "location.handleLookupString",
        "scope": "static"
    },
    {
        "description": "Takes you to a position and orientation resulting from a lookup for a named path in the domain (set in the domain \rserver's settings).",
        "kind": "function",
        "name": "goToViewpointForPath",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The position and orientation corresponding to the named path.",
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The named path that was looked up on the server.",
                "name": "namedPath"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "location",
        "longname": "location.goToViewpointForPath",
        "scope": "static"
    },
    {
        "description": "Takes you back to the previous location in your navigation history, if there is one.",
        "kind": "function",
        "name": "goBack",
        "memberof": "location",
        "longname": "location.goBack",
        "scope": "static"
    },
    {
        "description": "Takes you forward to the next location in your navigation history, if there is one.",
        "kind": "function",
        "name": "goForward",
        "memberof": "location",
        "longname": "location.goForward",
        "scope": "static"
    },
    {
        "description": "Takes you to the local Sandbox server that's running on the same PC as Interface.",
        "kind": "function",
        "name": "goToLocalSandbox",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The position and orientation to go to (e.g., <code>\"/0,0,0\"</code>).",
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "location.LookupTrigger"
                    ]
                },
                "optional": true,
                "defaultvalue": "StartupFromSettings",
                "description": "The reason for the function call. Helps ensure that user's\r    location history is correctly maintained.",
                "name": "trigger"
            }
        ],
        "memberof": "location",
        "longname": "location.goToLocalSandbox",
        "scope": "static"
    },
    {
        "description": "Takes you to the default \"welcome\" metaverse address.",
        "kind": "function",
        "name": "goToEntry",
        "params": [
            {
                "type": {
                    "names": [
                        "location.LookupTrigger"
                    ]
                },
                "defaultvalue": "StartupFromSettings",
                "description": "The reason for the function call. Helps ensure that user's\r    location history is correctly maintained.",
                "name": "trigger"
            }
        ],
        "memberof": "location",
        "longname": "location.goToEntry",
        "scope": "static"
    },
    {
        "description": "Takes you to the specified user's location.",
        "kind": "function",
        "name": "goToUser",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The user's username.",
                "name": "username"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "If <code>true</code> then go to a location just in front of the user and turn \r    to face them, otherwise go to the user's exact location and orientation.",
                "name": "matchOrientation"
            }
        ],
        "memberof": "location",
        "longname": "location.goToUser",
        "scope": "static"
    },
    {
        "description": "Takes you to the last address tried. This will be the last URL tried from <code>location.handleLookupString</code>.",
        "kind": "function",
        "name": "goToLastAddress",
        "memberof": "location",
        "longname": "location.goToLastAddress",
        "scope": "static"
    },
    {
        "description": "Checks if going back to the previous location is possible.",
        "kind": "function",
        "name": "canGoBack",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if going back is possible, <code>false</code> if it isn't."
            }
        ],
        "memberof": "location",
        "longname": "location.canGoBack",
        "scope": "static"
    },
    {
        "description": "Refreshes the current address, e.g., after connecting to a domain in order to position the user to the desired location.",
        "kind": "function",
        "name": "refreshPreviousLookup",
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "location",
        "longname": "location.refreshPreviousLookup",
        "scope": "static"
    },
    {
        "description": "Updates your current metaverse location in Interface's {@link Settings} file as your last-known address. This can be used\rto ensure that you start up at that address if you exit Interface without a later address automatically being saved.",
        "kind": "function",
        "name": "storeCurrentAddress",
        "memberof": "location",
        "longname": "location.storeCurrentAddress",
        "scope": "static"
    },
    {
        "description": "Copies your current metaverse address (i.e., <code>location.href</code> property value) to the OS clipboard.",
        "kind": "function",
        "name": "copyAddress",
        "memberof": "location",
        "longname": "location.copyAddress",
        "scope": "static"
    },
    {
        "description": "Copies your current metaverse location and orientation (i.e., <code>location.pathname</code> property value) to the OS \rclipboard.",
        "kind": "function",
        "name": "copyPath",
        "memberof": "location",
        "longname": "location.copyPath",
        "scope": "static"
    },
    {
        "description": "Retrieves and remembers the place name for the given domain ID if the place name is not already known.",
        "kind": "function",
        "name": "lookupShareableNameForDomainID",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID of the domain.",
                "name": "domainID"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "location",
        "longname": "location.lookupShareableNameForDomainID",
        "scope": "static"
    },
    {
        "description": "Triggered when looking up the details of a metaverse user or location to go to has completed (successfully or\runsuccessfully).",
        "kind": "signal",
        "name": "lookupResultsFinished",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "location",
        "longname": "location.lookupResultsFinished",
        "scope": "static"
    },
    {
        "description": "Triggered when looking up the details of a metaverse user or location to go to has completed and the domain or user is \roffline.",
        "kind": "signal",
        "name": "lookupResultIsOffline",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "location",
        "longname": "location.lookupResultIsOffline",
        "scope": "static"
    },
    {
        "description": "Triggered when looking up the details of a metaverse user or location to go to has completed and the domain or user could\rnot be found.",
        "kind": "signal",
        "name": "lookupResultIsNotFound",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "location",
        "longname": "location.lookupResultIsNotFound",
        "scope": "static"
    },
    {
        "description": "Triggered when a request is made to go to an IP address.",
        "kind": "signal",
        "name": "possibleDomainChangeRequired",
        "params": [
            {
                "type": {
                    "names": [
                        "Url"
                    ]
                },
                "description": "URL for domain",
                "name": "domainURL"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID of the domain to go to.",
                "name": "domainID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "location",
        "longname": "location.possibleDomainChangeRequired",
        "scope": "static"
    },
    {
        "description": "Triggered when a request is made to go to a named domain or user.",
        "kind": "signal",
        "name": "possibleDomainChangeRequiredViaICEForID",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "IP address of the ICE server.",
                "name": "iceServerHostName"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID of the domain to go to.",
                "name": "domainID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "location",
        "longname": "location.possibleDomainChangeRequiredViaICEForID",
        "scope": "static"
    },
    {
        "description": "Triggered when an attempt is made to send your avatar to a specified position on the current domain. For example, when\ryou change domains or enter a position to go to in the \"Goto\" dialog.",
        "kind": "signal",
        "name": "locationChangeRequired",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position to go to.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If <code>true</code> then a new <code>orientation</code> has been requested.",
                "name": "hasOrientationChange"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation to change to. Is {@link Quat(0)|Quat.IDENTITY} if \r    <code>hasOrientationChange</code> is <code>false</code>.",
                "name": "orientation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If <code>true</code> then the request is to go to a position near that specified \r    and orient your avatar to face it. For example when you visit someone from the \"People\" dialog.",
                "name": "shouldFaceLocation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report location change requests.</caption>\rfunction onLocationChangeRequired(newPosition, hasOrientationChange, newOrientation, shouldFaceLocation) {\r    print(\"Location change required:\");\r    print(\"- New position = \" + JSON.stringify(newPosition));\r    print(\"- Has orientation change = \" + hasOrientationChange);\r    print(\"- New orientation = \" + JSON.stringify(newOrientation));\r    print(\"- Should face location = \" + shouldFaceLocation);\r}\r\rlocation.locationChangeRequired.connect(onLocationChangeRequired);"
        ],
        "memberof": "location",
        "longname": "location.locationChangeRequired",
        "scope": "static"
    },
    {
        "description": "Triggered when an attempt is made to send your avatar to a new named path on the domain (set in the domain server's\rsettings). For example, when you enter a \"/\" followed by the path's name in the \"GOTO\" dialog.",
        "kind": "signal",
        "name": "pathChangeRequired",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the path to go to.",
                "name": "path"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report path change requests.</caption>\rfunction onPathChangeRequired(newPath) {\r    print(\"onPathChangeRequired: newPath = \" + newPath);\r}\r\rlocation.pathChangeRequired.connect(onPathChangeRequired);"
        ],
        "memberof": "location",
        "longname": "location.pathChangeRequired",
        "scope": "static"
    },
    {
        "description": "Triggered when you navigate to a new domain.",
        "kind": "signal",
        "name": "hostChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The new domain's host name.",
                "name": "hostname"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when you navigate to a new domain.</caption>\rfunction onHostChanged(host) {\r    print(\"Host changed to: \" + host);\r}\r\rlocation.hostChanged.connect(onHostChanged);"
        ],
        "memberof": "location",
        "longname": "location.hostChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when there's a change in whether or not there's a previous location that can be navigated to using\r{@link location.goBack|goBack}. (Reflects changes in the state of the \"Goto\" dialog's back arrow.)",
        "kind": "signal",
        "name": "goBackPossible",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if there's a previous location to navigate to, otherwise \r    <code>false</code>.",
                "name": "isPossible"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when ability to navigate back changes.</caption>\rfunction onGoBackPossible(isPossible) {\r    print(\"Go back possible: \" + isPossible);\r}\r\rlocation.goBackPossible.connect(onGoBackPossible);"
        ],
        "memberof": "location",
        "longname": "location.goBackPossible",
        "scope": "static"
    },
    {
        "description": "Triggered when there's a change in whether or not there's a forward location that can be navigated to using\r{@link location.goForward|goForward}. (Reflects changes in the state of the \"Goto\" dialog's forward arrow.)",
        "kind": "signal",
        "name": "goForwardPossible",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if there's a forward location to navigate to, otherwise\r    <code>false</code>.",
                "name": "isPossible"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when ability to navigate forward changes.</caption>\rfunction onGoForwardPossible(isPossible) {\r    print(\"Go forward possible: \" + isPossible);\r}\r\rlocation.goForwardPossible.connect(onGoForwardPossible);\r\n     "
        ],
        "memberof": "location",
        "longname": "location.goForwardPossible",
        "scope": "static"
    },
    {
        "description": "Cache status value returned by {@link Assets.getCacheStatus}.",
        "kind": "typedef",
        "name": "GetCacheStatusResult",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path of the cache directory.",
                "name": "cacheDirectory"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The current cache size, in bytes.",
                "name": "cacheSize"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The maximum cache size, in bytes.",
                "name": "maximumCacheSize"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.GetCacheStatusResult",
        "scope": "static"
    },
    {
        "description": "Information on an asset in the cache. Value returned by {@link Assets.queryCacheMeta} and included in the data returned by \r{@link Assets.loadFromCache}.",
        "kind": "typedef",
        "name": "CacheItemMetaData",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "optional": true,
                "description": "The attributes that are stored with this cache item. <em>Not used.</em>",
                "name": "attributes"
            },
            {
                "type": {
                    "names": [
                        "Date"
                    ]
                },
                "optional": true,
                "description": "The date and time when the meta data expires. An invalid date means \"never expires\".",
                "name": "expirationDate"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the item specified in the URL is in the cache, <code>false</code> if\r    it isn't.",
                "name": "isValid"
            },
            {
                "type": {
                    "names": [
                        "Date"
                    ]
                },
                "optional": true,
                "description": "The date and time when the meta data was last modified.",
                "name": "lastModified"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "optional": true,
                "description": "The raw headers that are set in the meta data. <em>Not used.</em>",
                "name": "rawHeaders"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "description": "<code>true</code> if the cache item is allowed to be store on disk,\r    <code>false</code> if it isn't.",
                "name": "saveToDisk"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "The ATP URL of the cached item.",
                "name": "url|metaDataURL"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.CacheItemMetaData",
        "scope": "static"
    },
    {
        "description": "Last-modified and expiry times for a cache item.",
        "kind": "typedef",
        "name": "SaveToCacheHeaders",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "The date and time the cache value expires, in the format:\r    <code>\"ddd, dd MMM yyyy HH:mm:ss\"</code>. The default value is an invalid date, representing \"never expires\".",
                "name": "expires"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "The date and time the cache value was last modified, in the format:\r    <code>\"ddd, dd MMM yyyy HH:mm:ss\"</code>. The default value is the current date and time.",
                "name": "last-modified"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.SaveToCacheHeaders",
        "scope": "static"
    },
    {
        "description": "Information on saving asset data to the cache with {@link Assets.saveToCache}.",
        "kind": "typedef",
        "name": "SaveToCacheResult",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "description": "The size of the cached data, in bytes.",
                "name": "byteLength"
            },
            {
                "type": {
                    "names": [
                        "Date"
                    ]
                },
                "optional": true,
                "description": "The date and time that the cache item expires. An invalid date means \"never expires\".",
                "name": "expirationDate"
            },
            {
                "type": {
                    "names": [
                        "Date"
                    ]
                },
                "optional": true,
                "description": "The date and time that the cache item was last modified.",
                "name": "lastModified"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "The URL associated with the cache item.",
                "name": "metaDataURL"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "description": "<code>true</code> if the save to cache request was successful.",
                "name": "success"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "The URL associated with the cache item.",
                "name": "url"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.SaveToCacheResult",
        "scope": "static"
    },
    {
        "description": "Data and information returned by {@link Assets.loadFromCache}.",
        "kind": "typedef",
        "name": "LoadFromCacheResult",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "description": "The number of bytes in the retrieved data.",
                "name": "byteLength"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "The automatically detected MIME type of the content.",
                "name": "contentType"
            },
            {
                "type": {
                    "names": [
                        "ArrayBuffer"
                    ]
                },
                "description": "The data bytes.",
                "name": "data"
            },
            {
                "type": {
                    "names": [
                        "Assets.CacheItemMetaData"
                    ]
                },
                "description": "Information on the cache item.",
                "name": "metadata"
            },
            {
                "type": {
                    "names": [
                        "string",
                        "object",
                        "ArrayBuffer"
                    ]
                },
                "optional": true,
                "description": "The content of the response.",
                "name": "response"
            },
            {
                "type": {
                    "names": [
                        "Assets.ResponseType"
                    ]
                },
                "description": "The type of the content in <code>response</code>.",
                "name": "responseType"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the cache item.",
                "name": "url"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.LoadFromCacheResult",
        "scope": "static"
    },
    {
        "description": "<p>Types of response that {@link Assets.decompressData}, {@link Assets.getAsset}, or {@link Assets.loadFromCache} may \rprovide.</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"arraybuffer\"</code></td><td>A binary <code>ArrayBuffer</code> object.</td></tr>\r    <tr><td><code>\"json\"</code></td><td>A parsed <code>JSON</code> object.</td></tr>\r    <tr><td><code>\"text\"</code></td><td>UTF-8 decoded <code>string</code> value.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "ResponseType",
        "type": {
            "names": [
                "string"
            ]
        },
        "memberof": "Assets",
        "longname": "Assets.ResponseType",
        "scope": "static"
    },
    {
        "description": "Checks whether a string is a valid path. Note: A valid path must start with a <code>\"/\"</code>.",
        "kind": "function",
        "name": "isValidPath",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path to check.",
                "name": "path"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the path is a valid path, <code>false</code> if it isn't."
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.isValidPath",
        "scope": "static"
    },
    {
        "description": "Checks whether a string is a valid path and filename. Note: A valid path and filename must start with a <code>\"/\"</code> \rbut must not end with a <code>\"/\"</code>.",
        "kind": "function",
        "name": "isValidFilePath",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path to check.",
                "name": "path"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the path is a valid file path, <code>false</code> if it isn't."
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.isValidFilePath",
        "scope": "static"
    },
    {
        "description": "Gets the normalized ATP URL for a path or hash: ensures that it has <code>\"atp:\"</code> at the start.",
        "kind": "function",
        "name": "getATPUrl",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL to normalize.",
                "name": "url"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The normalized ATP URL."
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.getATPUrl",
        "scope": "static"
    },
    {
        "description": "Gets the SHA256 hexadecimal hash portion of an asset server URL.",
        "kind": "function",
        "name": "extractAssetHash",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL to get the SHA256 hexadecimal hash from.",
                "name": "url"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The SHA256 hexadecimal hash portion of the URL if present and valid, <code>\"\"</code> otherwise."
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.extractAssetHash",
        "scope": "static"
    },
    {
        "description": "Checks whether a string is a valid SHA256 hexadecimal hash, i.e., 64 hexadecimal characters.",
        "kind": "function",
        "name": "isValidHash",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The hash to check.",
                "name": "hash"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the hash is a valid SHA256 hexadecimal string, <code>false</code> if it isn't."
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.isValidHash",
        "scope": "static"
    },
    {
        "description": "Calculates the SHA256 hash of given data.",
        "kind": "function",
        "name": "hashData",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "ArrayBuffer"
                    ]
                },
                "description": "The data to calculate the hash of.",
                "name": "data"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ArrayBuffer"
                    ]
                },
                "description": "The SHA256 hash of the <code>data</code>."
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.hashData",
        "scope": "static"
    },
    {
        "description": "Calculates the SHA256 hash of given data, in hexadecimal format.",
        "kind": "function",
        "name": "hashDataHex",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "ArrayBuffer"
                    ]
                },
                "description": "The data to calculate the hash of.",
                "name": "data"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The SHA256 hash of the <code>data</code>, in hexadecimal format."
            }
        ],
        "examples": [
            "<caption>Calculate the hash of some text.</caption>\rvar text = \"Hello world!\";\rprint(\"Hash: \" + Assets.hashDataHex(text));\r\n     "
        ],
        "memberof": "Assets",
        "longname": "Assets.hashDataHex",
        "scope": "static"
    },
    {
        "description": "<p>The reasons that you may be refused connection to a domain are defined by numeric values:</p>\r<table>\r  <thead>\r    <tr>\r      <th>Reason</th>\r      <th>Value</th>\r      <th>Description</th>\r    </tr>\r  </thead>\r  <tbody>\r    <tr>\r      <td><strong>Unknown</strong></td>\r      <td><code>0</code></td>\r      <td>Some unknown reason.</td>\r    </tr>\r    <tr>\r      <td><strong>ProtocolMismatch</strong></td>\r      <td><code>1</code></td>\r      <td>The communications protocols of the domain and your Interface are not the same.</td>\r    </tr>\r    <tr>\r      <td><strong>LoginError</strong></td>\r      <td><code>2</code></td>\r      <td>You could not be logged into the domain.</td>\r    </tr>\r    <tr>\r      <td><strong>NotAuthorized</strong></td>\r      <td><code>3</code></td>\r      <td>You are not authorized to connect to the domain.</td>\r    </tr>\r    <tr>\r      <td><strong>TooManyUsers</strong></td>\r      <td><code>4</code></td>\r      <td>The domain already has its maximum number of users.</td>\r    </tr>\r    <tr>\r      <td><strong>TimedOut</strong></td>\r      <td><code>5</code></td>\r      <td>Connecting to the domain timed out.</td>\r    </tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "ConnectionRefusedReason",
        "type": {
            "names": [
                "number"
            ]
        },
        "memberof": "Window",
        "longname": "Window.ConnectionRefusedReason",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p><p>The <code>Messages</code> API enables text and data to be sent between scripts over named \"channels\". A channel can have \ran arbitrary name to help separate messaging between different sets of scripts.</p>\r\r<p><strong>Note:</strong> To call a function in another script, you should use one of the following rather than sending a \rmessage:</p>\r<ul>\r  <li>{@link Entities.callEntityClientMethod}</li>\r  <li>{@link Entities.callEntityMethod}</li>\r  <li>{@link Entities.callEntityServerMethod}</li>\r  <li>{@link Script.callEntityScriptMethod}</li>\r</ul>",
        "kind": "namespace",
        "name": "Messages",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "longname": "Messages",
        "scope": "global"
    },
    {
        "description": "Sends a text message on a channel.",
        "kind": "function",
        "name": "sendMessage",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The channel to send the message on.",
                "name": "channel"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The message to send.",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If <code>false</code> then the message is sent to all Interface, client entity, \r    server entity, and assignment client scripts in the domain.\r    <p>If <code>true</code> then: if sent from an Interface or client entity script it is received by all Interface and \r    client entity scripts; if sent from a server entity script it is received by all entity server scripts; and if sent \r    from an assignment client script it is received only by that same assignment client script.</p>",
                "name": "localOnly"
            }
        ],
        "examples": [
            "<caption>Send and receive a message.</caption>\r// Receiving script.\rvar channelName = \"com.highfidelity.example.messages-example\";\r\rfunction onMessageReceived(channel, message, sender, localOnly) {\r    print(\"Message received:\");\r    print(\"- channel: \" + channel);\r    print(\"- message: \" + message);\r    print(\"- sender: \" + sender);\r    print(\"- localOnly: \" + localOnly);\r}\r\rMessages.subscribe(channelName);\rMessages.messageReceived.connect(onMessageReceived);\r\rScript.scriptEnding.connect(function () {\r    Messages.messageReceived.disconnect(onMessageReceived);\r    Messages.unsubscribe(channelName);\r});\r\r\r// Sending script.\rvar channelName = \"com.highfidelity.example.messages-example\";\rvar message = \"Hello\";\rMessages.sendMessage(channelName, message);"
        ],
        "memberof": "Messages",
        "longname": "Messages.sendMessage",
        "scope": "static"
    },
    {
        "description": "Sends a text message locally on a channel.\rThis is the same as calling {@link Messages.sendMessage|sendMessage} with <code>localOnly == true</code>.",
        "kind": "function",
        "name": "sendLocalMessage",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The channel to send the message on.",
                "name": "channel"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The message to send.",
                "name": "message"
            }
        ],
        "memberof": "Messages",
        "longname": "Messages.sendLocalMessage",
        "scope": "static"
    },
    {
        "description": "Sends a data message on a channel.",
        "kind": "function",
        "name": "sendData",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The channel to send the data on.",
                "name": "channel"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The data to send. The data is handled as a byte stream, for example, as may be provided via a \r    JavaScript <code>Int8Array</code> object.",
                "name": "data"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If <code>false</code> then the message is sent to all Interface, client entity,\r    server entity, and assignment client scripts in the domain.\r    <p>If <code>true</code> then: if sent from an Interface or client entity script it is received by all Interface and\r    client entity scripts; if sent from a server entity script it is received by all entity server scripts; and if sent\r    from an assignment client script it is received only by that same assignment client script.</p>",
                "name": "localOnly"
            }
        ],
        "examples": [
            "<caption>Send and receive data.</caption>\r// Receiving script.\rvar channelName = \"com.highfidelity.example.messages-example\";\r\rfunction onDataReceived(channel, data, sender, localOnly) {\r    var int8data = new Int8Array(data);\r    var dataAsString = \"\";\r    for (var i = 0; i < int8data.length; i++) {\r        if (i > 0) {\r            dataAsString += \", \";\r        }\r        dataAsString += int8data[i];\r    }\r    print(\"Data received:\");\r    print(\"- channel: \" + channel);\r    print(\"- data: \" + dataAsString);\r    print(\"- sender: \" + sender);\r    print(\"- localOnly: \" + localOnly);\r}\r\rMessages.subscribe(channelName);\rMessages.dataReceived.connect(onDataReceived);\r\rScript.scriptEnding.connect(function () {\r    Messages.dataReceived.disconnect(onDataReceived);\r    Messages.unsubscribe(channelName);\r});\r\r\r// Sending script.\rvar channelName = \"com.highfidelity.example.messages-example\";\rvar int8data = new Int8Array([1, 1, 2, 3, 5, 8, 13]);\rMessages.sendData(channelName, int8data.buffer);"
        ],
        "memberof": "Messages",
        "longname": "Messages.sendData",
        "scope": "static"
    },
    {
        "description": "Subscribes the scripting environment &mdash; Interface, the entity script server, or assignment client instance &mdash; \rto receive messages on a specific channel. This means, for example, that if there are two Interface scripts that \rsubscribe to different channels, both scripts will receive messages on both channels.",
        "kind": "function",
        "name": "subscribe",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The channel to subscribe to.",
                "name": "channel"
            }
        ],
        "memberof": "Messages",
        "longname": "Messages.subscribe",
        "scope": "static"
    },
    {
        "description": "Unsubscribes the scripting environment from receiving messages on a specific channel.",
        "kind": "function",
        "name": "unsubscribe",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The channel to unsubscribe from.",
                "name": "channel"
            }
        ],
        "memberof": "Messages",
        "longname": "Messages.unsubscribe",
        "scope": "static"
    },
    {
        "description": "Triggered when a text message is received.",
        "kind": "signal",
        "name": "messageReceived",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The channel that the message was sent on. This can be used to filter out messages not relevant \r    to your script.",
                "name": "channel"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The message received.",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID of the sender: the user's session UUID if sent by an Interface or client entity \r    script, the UUID of the entity script server if sent by a server entity script, or the UUID of the assignment client \r    instance if sent by an assignment client script.",
                "name": "senderID"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the message was sent with <code>localOnly == true</code>.",
                "name": "localOnly"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Messages",
        "longname": "Messages.messageReceived",
        "scope": "static"
    },
    {
        "description": "Triggered when a data message is received.",
        "kind": "signal",
        "name": "dataReceived",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The channel that the message was sent on. This can be used to filter out messages not relevant\r    to your script.",
                "name": "channel"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The data received. The data is handled as a byte stream, for example, as may be used by a \r    JavaScript <code>Int8Array</code> object.",
                "name": "data"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID of the sender: the user's session UUID if sent by an Interface or client entity\r    script, the UUID of the entity script server if sent by a server entity script, or the UUID of the assignment client\r    instance if sent by an assignment client script.",
                "name": "senderID"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the message was sent with <code>localOnly == true</code>.",
                "name": "localOnly"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Messages",
        "longname": "Messages.dataReceived",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>Information about a cached resource. Created by {@link AnimationCache.prefetch}, {@link ModelCache.prefetch},\r{@link SoundCache.prefetch}, or {@link TextureCache.prefetch}.",
        "kind": "class",
        "name": "ResourceObject",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "URL of the resource. <em>Read-only.</em>",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "Resource.State"
                    ]
                },
                "description": "Current loading state. <em>Read-only.</em>",
                "name": "state"
            }
        ],
        "longname": "ResourceObject",
        "scope": "global"
    },
    {
        "description": "The loading state of a resource.",
        "kind": "typedef",
        "name": "State",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The resource is queued up, waiting to be loaded.",
                "name": "QUEUED"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The resource is downloading.",
                "name": "LOADING"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The resource has finished downloading but is not complete.",
                "name": "LOADED"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The resource has completely finished loading and is ready.",
                "name": "FINISHED"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The resource has failed to download.",
                "name": "FAILED"
            }
        ],
        "memberof": "Resource",
        "longname": "Resource.State",
        "scope": "static"
    },
    {
        "description": "Releases the resource.",
        "kind": "function",
        "name": "release",
        "memberof": "ResourceObject",
        "longname": "ResourceObject#release",
        "scope": "instance"
    },
    {
        "description": "Triggered when the resource's download progress changes.",
        "kind": "signal",
        "name": "progressChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Bytes downloaded so far.",
                "name": "bytesReceived"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Total number of bytes in the resource.",
                "name": "bytesTotal"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "ResourceObject",
        "longname": "ResourceObject#progressChanged",
        "scope": "instance"
    },
    {
        "description": "Triggered when the resource's loading state changes.",
        "kind": "signal",
        "name": "stateChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "Resource.State"
                    ]
                },
                "description": "New state.",
                "name": "state"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "ResourceObject",
        "longname": "ResourceObject#stateChanged",
        "scope": "instance"
    },
    {
        "description": "Gets the URLs of all resources in the cache.",
        "kind": "function",
        "name": "getResourceList",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "The URLs of all resources in the cache."
            }
        ],
        "examples": [
            "<caption>Report cached resources.</caption>\r// Replace AnimationCache with ModelCache, SoundCache, or TextureCache as appropriate.\r\rvar cachedResources = AnimationCache.getResourceList();\rprint(\"Cached resources: \" + JSON.stringify(cachedResources));"
        ],
        "memberof": "ResourceCache",
        "longname": "ResourceCache.getResourceList",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "updateTotalSize",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Delta size.",
                "name": "deltaSize"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "ResourceCache",
        "longname": "ResourceCache.updateTotalSize",
        "scope": "static"
    },
    {
        "description": "Prefetches a resource.",
        "kind": "function",
        "name": "prefetch",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the resource to prefetch.",
                "name": "url"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ResourceObject"
                    ]
                },
                "description": "A resource object."
            }
        ],
        "examples": [
            "<caption>Prefetch a resource and wait until it has loaded.</caption>\r// Replace AnimationCache with ModelCache, SoundCache, or TextureCache as appropriate.\r// TextureCache has its own version of this function.\r\rvar resourceURL = \"https://s3-us-west-1.amazonaws.com/hifi-content/clement/production/animations/sitting_idle.fbx\";\rvar resourceObject = AnimationCache.prefetch(resourceURL);\r\rfunction checkIfResourceLoaded(state) {\r    if (state === Resource.State.FINISHED) {\r        print(\"Resource loaded and ready.\");\r    } else if (state === Resource.State.FAILED) {\r        print(\"Resource not loaded.\");\r    }\r}\r\r// Resource may have already been loaded.\rprint(\"Resource state: \" + resourceObject.state);\rcheckIfResourceLoaded(resourceObject.state);\r\r// Resource may still be loading.\rresourceObject.stateChanged.connect(function (state) {\r    print(\"Resource state changed to: \" + state);\r    checkIfResourceLoaded(state);\r});"
        ],
        "memberof": "ResourceCache",
        "longname": "ResourceCache.prefetch",
        "scope": "static"
    },
    {
        "description": "Triggered when the cache content has changed.",
        "kind": "signal",
        "name": "dirty",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "ResourceCache",
        "longname": "ResourceCache.dirty",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>The <code>Resources</code> API enables the default location for different resource types to be overridden.",
        "kind": "namespace",
        "name": "Resources",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "longname": "Resources",
        "scope": "global"
    },
    {
        "description": "Overrides a path prefix with an alternative path.",
        "kind": "function",
        "name": "overrideUrlPrefix",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path prefix to override, e.g., <code>\"atp:/\"</code>.",
                "name": "prefix"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The replacement path for the prefix.",
                "name": "replacement"
            }
        ],
        "memberof": "Resources",
        "longname": "Resources.overrideUrlPrefix",
        "scope": "static"
    },
    {
        "description": "Restores the default path for a specified prefix.",
        "kind": "function",
        "name": "restoreUrlPrefix",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The prefix of the resource to restore the path for.",
                "name": "prefix"
            }
        ],
        "memberof": "Resources",
        "longname": "Resources.restoreUrlPrefix",
        "scope": "static"
    },
    {
        "description": "Sets the maximum number of entity packets that the client can send per second.",
        "kind": "function",
        "name": "setPacketsPerSecond",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer maximum number of entity packets that the client can send per second.",
                "name": "packetsPerSecond"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.setPacketsPerSecond",
        "scope": "static"
    },
    {
        "description": "Gets the maximum number of entity packets that the client can send per second.",
        "kind": "function",
        "name": "getPacketsPerSecond",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer maximum number of entity packets that the client can send per second."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getPacketsPerSecond",
        "scope": "static"
    },
    {
        "description": "Checks whether servers exist for the client to send entity packets to, i.e., whether you are connected to a domain and\rits entity server is working.",
        "kind": "function",
        "name": "serversExist",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if servers exist for the client to send entity packets to, otherwise \r    <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.serversExist",
        "scope": "static"
    },
    {
        "description": "Checks whether the client has entity packets waiting to be sent.",
        "kind": "function",
        "name": "hasPacketsToSend",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the client has entity packets waiting to be sent, otherwise <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.hasPacketsToSend",
        "scope": "static"
    },
    {
        "description": "Gets the number of entity packets the client has waiting to be sent.",
        "kind": "function",
        "name": "packetsToSendCount",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer number of entity packets the client has waiting to be sent."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.packetsToSendCount",
        "scope": "static"
    },
    {
        "description": "Gets the entity packets per second send rate of the client over its lifetime.",
        "kind": "function",
        "name": "getLifetimePPS",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Entity packets per second send rate of the client over its lifetime."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getLifetimePPS",
        "scope": "static"
    },
    {
        "description": "Gets the entity bytes per second send rate of the client over its lifetime.",
        "kind": "function",
        "name": "getLifetimeBPS",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Entity bytes per second send rate of the client over its lifetime."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getLifetimeBPS",
        "scope": "static"
    },
    {
        "description": "Gets the entity packets per second queued rate of the client over its lifetime.",
        "kind": "function",
        "name": "getLifetimePPSQueued",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Entity packets per second queued rate of the client over its lifetime."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getLifetimePPSQueued",
        "scope": "static"
    },
    {
        "description": "Gets the entity bytes per second queued rate of the client over its lifetime.",
        "kind": "function",
        "name": "getLifetimeBPSQueued",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Entity bytes per second queued rate of the client over its lifetime."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getLifetimeBPSQueued",
        "scope": "static"
    },
    {
        "description": "Gets the lifetime of the client from the first entity packet sent until now, in microseconds.",
        "kind": "function",
        "name": "getLifetimeInUsecs",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Lifetime of the client from the first entity packet sent until now, in microseconds."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getLifetimeInUsecs",
        "scope": "static"
    },
    {
        "description": "Gets the lifetime of the client from the first entity packet sent until now, in seconds.",
        "kind": "function",
        "name": "getLifetimeInSeconds",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Lifetime of the client from the first entity packet sent until now, in seconds."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getLifetimeInSeconds",
        "scope": "static"
    },
    {
        "description": "Gets the total number of entity packets sent by the client over its lifetime.",
        "kind": "function",
        "name": "getLifetimePacketsSent",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The total number of entity packets sent by the client over its lifetime."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getLifetimePacketsSent",
        "scope": "static"
    },
    {
        "description": "Gets the total bytes of entity packets sent by the client over its lifetime.",
        "kind": "function",
        "name": "getLifetimeBytesSent",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The total bytes of entity packets sent by the client over its lifetime."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getLifetimeBytesSent",
        "scope": "static"
    },
    {
        "description": "Gets the total number of entity packets queued by the client over its lifetime.",
        "kind": "function",
        "name": "getLifetimePacketsQueued",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The total number of entity packets queued by the client over its lifetime."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getLifetimePacketsQueued",
        "scope": "static"
    },
    {
        "description": "Gets the total bytes of entity packets queued by the client over its lifetime.",
        "kind": "function",
        "name": "getLifetimeBytesQueued",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The total bytes of entity packets queued by the client over its lifetime."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getLifetimeBytesQueued",
        "scope": "static"
    },
    {
        "description": "The <code>\"offset\"</code> {@link Entities.ActionType|ActionType} moves an entity so that it is a defined distance away from \ra target point.\rIt has arguments in addition to the common {@link Entities.ActionArguments|ActionArguments}:",
        "kind": "typedef",
        "name": "ActionArguments-Offset",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The target point to offset the entity from.",
                "name": "pointToOffsetFrom"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The distance away from the target point to position the entity.",
                "name": "linearDistance"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "34e+38",
                "description": "Controls how long it takes for the entity's position to catch up with the\r    target offset. The value is the time for the action to catch up to 1/e = 0.368 of the target value, where the action \r    is applied using an exponential decay.",
                "name": "linearTimeScale"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.ActionArguments-Offset",
        "scope": "static"
    },
    {
        "description": "The <code>\"tractor\"</code> {@link Entities.ActionType|ActionType} moves and rotates an entity to a target position and\rorientation, optionally relative to another entity.\rIt has arguments in addition to the common {@link Entities.ActionArguments|ActionArguments}:",
        "kind": "typedef",
        "name": "ActionArguments-Tractor",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "If an entity ID, the <code>targetPosition</code> and <code>targetRotation</code> are\r    relative to the entity's position and rotation.",
                "name": "otherID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "If a joint index in the <code>otherID</code> entity, the <code>targetPosition</code> \r    and <code>targetRotation</code> are relative to the entity joint's position and rotation.",
                "name": "otherJointIndex"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The target position.",
                "name": "targetPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "defaultvalue": "0,0,0,1",
                "description": "The target rotation.",
                "name": "targetRotation"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 3.4e+38,
                "description": "Controls how long it takes for the entity's position to catch up with the\r    target position. The value is the time for the action to catch up to 1/e = 0.368 of the target value, where the action\r    is applied using an exponential decay.",
                "name": "linearTimeScale"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 3.4e+38,
                "description": "Controls how long it takes for the entity's orientation to catch up with the\r    target orientation. The value is the time for the action to catch up to 1/e = 0.368 of the target value, where the\r    action is applied using an exponential decay.",
                "name": "angularTimeScale"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.ActionArguments-Tractor",
        "scope": "static"
    },
    {
        "description": "The <code>\"travel-oriented\"</code> {@link Entities.ActionType|ActionType} orients an entity to align with its direction of \rtravel.\rIt has arguments in addition to the common {@link Entities.ActionArguments|ActionArguments}:",
        "kind": "typedef",
        "name": "ActionArguments-TravelOriented",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The axis of the entity to align with the entity's direction of travel.",
                "name": "forward"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.1,
                "description": "Controls how long it takes for the entity's orientation to catch up with the \r    direction of travel. The value is the time for the action to catch up to 1/e = 0.368 of the target value, where the \r    action is applied using an exponential decay.",
                "name": "angularTimeScale"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.ActionArguments-TravelOriented",
        "scope": "static"
    },
    {
        "description": "The <code>\"ball-socket\"</code> {@link Entities.ActionType|ActionType} connects two entities with a ball and socket joint. \rIt has arguments in addition to the common {@link Entities.ActionArguments|ActionArguments}:",
        "kind": "typedef",
        "name": "ActionArguments-BallSocket",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The ID of the other entity that is connected to the joint.",
                "name": "otherEntityID"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The local offset of the joint relative to the entity's position.",
                "name": "pivot"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The local offset of the joint relative to the other entity's position.",
                "name": "otherPivot"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.ActionArguments-BallSocket",
        "scope": "static"
    },
    {
        "description": "The <code>\"cone-twist\"</code> {@link Entities.ActionType|ActionType} connects two entities with a joint that can move \rthrough a cone and can twist.\rIt has arguments in addition to the common {@link Entities.ActionArguments|ActionArguments}:",
        "kind": "typedef",
        "name": "ActionArguments-ConeTwist",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The ID of the other entity that is connected to the joint.",
                "name": "otherEntityID"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The local offset of the joint relative to the entity's position.",
                "name": "pivot"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "1,0,0",
                "description": "The axis of the entity that moves through the cone. Must be a non-zero vector.",
                "name": "axis"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The local offset of the joint relative to the other entity's position.",
                "name": "otherPivot"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "1,0,0",
                "description": "The axis of the other entity that moves through the cone. Must be a non-zero vector.",
                "name": "otherAxis"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "2*Math.PI",
                "description": "The angle through which the joint can move in one axis of the cone, in radians.",
                "name": "swingSpan1"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "2*Math.PI",
                "description": "The angle through which the joint can move in the other axis of the cone, in \r    radians.",
                "name": "swingSpan2"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "2*Math.PI",
                "description": "The angle through with the joint can twist, in radians.",
                "name": "twistSpan"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.ActionArguments-ConeTwist",
        "scope": "static"
    },
    {
        "description": "The <code>\"hinge\"</code> {@link Entities.ActionType|ActionType} lets an entity pivot about an axis or connects two entities\rwith a hinge joint.\rIt has arguments in addition to the common {@link Entities.ActionArguments|ActionArguments}:",
        "kind": "typedef",
        "name": "ActionArguments-Hinge",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The ID of the other entity that is connected to the joint, if any. If none is\r    specified then the first entity simply pivots about its specified <code>axis</code>.",
                "name": "otherEntityID"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The local offset of the joint relative to the entity's position.",
                "name": "pivot"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "1,0,0",
                "description": "The axis of the entity that it pivots about. Must be a non-zero vector.",
                "name": "axis"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The local offset of the joint relative to the other entity's position.",
                "name": "otherPivot"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "1,0,0",
                "description": "The axis of the other entity that it pivots about. Must be a non-zero vector.",
                "name": "otherAxis"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "-2*Math.PI",
                "description": "The most negative angle that the hinge can take, in radians.",
                "name": "low"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "2*Math.PI",
                "description": "The most positive angle that the hinge can take, in radians.",
                "name": "high"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The current angle of the hinge, in radians, range <code>-Math.PI</code> &ndash; \r    <code>Math.PI</code>. <em>Read-only.</em>",
                "name": "angle"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.ActionArguments-Hinge",
        "scope": "static"
    },
    {
        "description": "The <code>\"slider\"</code> {@link Entities.ActionType|ActionType} lets an entity slide and rotate along an axis, or connects \rtwo entities that slide and rotate along a shared axis.\rIt has arguments in addition to the common {@link Entities.ActionArguments|ActionArguments}:",
        "kind": "typedef",
        "name": "ActionArguments-Slider",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The ID of the other entity that is connected to the joint, if any. If none is\r    specified then the first entity simply slides and rotates about its specified <code>axis</code>.",
                "name": "otherEntityID"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The local position of a point in the entity that slides along the axis.",
                "name": "point"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "1,0,0",
                "description": "The axis of the entity that slides along the joint. Must be a non-zero vector.",
                "name": "axis"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The local position of a point in the other entity that slides along the axis.",
                "name": "otherPoint"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "1,0,0",
                "description": "The axis of the other entity that slides along the joint. Must be a non-zero vector.",
                "name": "otherAxis"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1.17e-38,
                "description": "The most negative linear offset from the entity's initial point that the entity can \r    have along the slider.",
                "name": "linearLow"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "3.40e+38",
                "description": "The most positive linear offset from the entity's initial point that the entity can \r    have along the slider.",
                "name": "linearHigh"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "-2*Math.PI",
                "description": "The most negative angle that the entity can rotate about the axis if the action \r    involves only one entity, otherwise the most negative angle the rotation can be between the two entities. In radians.",
                "name": "angularLow"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "Math.PI",
                "description": "The most positive angle that the entity can rotate about the axis if the action \r    involves only one entity, otherwise the most positive angle the rotation can be between the two entities. In radians.",
                "name": "angularHigh"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The current linear offset the entity is from its initial point if the action involves \r    only one entity, otherwise the linear offset between the two entities' action points. <em>Read-only.</em>",
                "name": "linearPosition"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The current angular offset of the entity from its initial rotation if the action \r    involves only one entity, otherwise the angular offset between the two entities. In radians. <em>Read-only.</em>",
                "name": "angularPosition"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.ActionArguments-Slider",
        "scope": "static"
    },
    {
        "description": "Different entity action types have different arguments: some common to all actions (listed in the table) and some specific \rto each {@link Entities.ActionType|ActionType} (linked to below).",
        "kind": "typedef",
        "name": "ActionArguments",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Entities.ActionType"
                    ]
                },
                "description": "The type of action.",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A string that a script can use for its own purposes.",
                "name": "tag"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "How long the action should exist, in seconds, before it is automatically deleted. A value of \r    <code>0</code> means that the action should not be deleted.",
                "name": "ttl"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "<code>true</code> if the action was created during the current client session, \r    <code>false</code> if it wasn't. <em>Read-only.</em>",
                "name": "isMine"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Is present with a value of <code>true</code> when the entity hasn't been registered \r    with the physics engine yet (e.g., if the action hasn't been properly configured), otherwise the property is \r    <code>undefined</code>. <em>Read-only.</em>",
                "name": "::no-motion-state"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> when the action is modifying the entity's motion, <code>false</code> \r    otherwise. Is present once the entity has been registered with the physics engine, otherwise the property is \r    <code>undefined</code>. \r    <em>Read-only.</em>",
                "name": "::active"
            },
            {
                "type": {
                    "names": [
                        "Entities.PhysicsMotionType"
                    ]
                },
                "description": "How the entity moves with the action. Is present once the entity has \r    been registered with the physics engine, otherwise the property is <code>undefined</code>. <em>Read-only.</em>",
                "name": "::motion-type"
            }
        ],
        "tags": [
            {
                "originalTitle": "comment",
                "title": "comment",
                "text": "The different action types have additional arguments as follows:",
                "value": "The different action types have additional arguments as follows:"
            }
        ],
        "see": [
            "{@link Entities.ActionArguments-FarGrab|ActionArguments-FarGrab}",
            "{@link Entities.ActionArguments-Hold|ActionArguments-Hold}",
            "{@link Entities.ActionArguments-Offset|ActionArguments-Offset}",
            "{@link Entities.ActionArguments-Tractor|ActionArguments-Tractor}",
            "{@link Entities.ActionArguments-TravelOriented|ActionArguments-TravelOriented}",
            "{@link Entities.ActionArguments-Hinge|ActionArguments-Hinge}",
            "{@link Entities.ActionArguments-Slider|ActionArguments-Slider}",
            "{@link Entities.ActionArguments-ConeTwist|ActionArguments-ConeTwist}",
            "{@link Entities.ActionArguments-BallSocket|ActionArguments-BallSocket}"
        ],
        "memberof": "Entities",
        "longname": "Entities.ActionArguments",
        "scope": "static"
    },
    {
        "description": "<p>An entity's physics motion type may be one of the following:</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"static\"</code></td><td>There is no motion because the entity is locked  &mdash; its <code>locked</code> \r        property is set to <code>true</code>.</td></tr>\r    <tr><td><code>\"kinematic\"</code></td><td>Motion is applied without physical laws (e.g., damping) because the entity is \r        not locked and has its <code>dynamic</code> property set to <code>false</code>.</td></tr>\r    <tr><td><code>\"dynamic\"</code></td><td>Motion is applied according to physical laws (e.g., damping) because the entity \r        is not locked and has its <code>dynamic</code> property set to <code>true</code>.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "PhysicsMotionType",
        "type": {
            "names": [
                "string"
            ]
        },
        "memberof": "Entities",
        "longname": "Entities.PhysicsMotionType",
        "scope": "static"
    },
    {
        "description": "Information on the computer platform as a whole.",
        "kind": "typedef",
        "name": "PlatformDescription",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "PlatformInfo.ComputerDescription"
                    ]
                },
                "description": "Information on the computer.",
                "name": "computer"
            },
            {
                "type": {
                    "names": [
                        "Array.<PlatformInfo.CPUDescription>"
                    ]
                },
                "description": "Information on the computer's CPUs.",
                "name": "cpus"
            },
            {
                "type": {
                    "names": [
                        "Array.<PlatformInfo.DisplayDescription>"
                    ]
                },
                "description": "Information on the computer's displays.",
                "name": "displays"
            },
            {
                "type": {
                    "names": [
                        "Array.<PlatformInfo.GPUDescription>"
                    ]
                },
                "description": "Information on the computer's GPUs.",
                "name": "gpus"
            },
            {
                "type": {
                    "names": [
                        "Array.<PlatformInfo.GraphicsAPIDescription>"
                    ]
                },
                "description": "Information on the computer's graphics APIs.",
                "name": "graphicsAPIs"
            },
            {
                "type": {
                    "names": [
                        "PlatformInfo.MemoryDescription"
                    ]
                },
                "description": "Information on the computer's memory.",
                "name": "memory"
            },
            {
                "type": {
                    "names": [
                        "PlatformInfo.NICDescription"
                    ]
                },
                "description": "Information on the computer's network cards.",
                "name": "nics"
            }
        ],
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.PlatformDescription",
        "scope": "static"
    },
    {
        "description": "Information on a CPU.",
        "kind": "typedef",
        "name": "CPUDescription",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The CPU vendor (e.g., <code>\"Intel\"</code> or <code>\"AMD\"</code>).",
                "name": "vendor"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The CPU model.",
                "name": "model"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The number of logical cores.",
                "name": "numCores"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the CPU is the \"master\" or primary CPU, <code>false</code> or \r    <code>undefined</code> if it isn't.",
                "name": "isMaster"
            }
        ],
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.CPUDescription",
        "scope": "static"
    },
    {
        "description": "Information on a GPU.",
        "kind": "typedef",
        "name": "GPUDescription",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The GPU vendor (e.g., <code>\"NVIDIA\"</code>, <code>\"AMD\"</code>, or <code>\"Intel\"</code>).",
                "name": "vendor"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The GPU model.",
                "name": "model"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The GPU driver version.",
                "name": "driver"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The size of the GPU's video memory, in MB.",
                "name": "videoMemory"
            },
            {
                "type": {
                    "names": [
                        "Array.<number>"
                    ]
                },
                "description": "The index numbers of the displays currently being driven by the GPU. An empty array if \r    the GPU is currently not driving any displays.",
                "name": "displays"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the GPU is the \"master\" or primary GPU, <code>false</code> or\r    <code>undefined</code> if it isn't.",
                "name": "isMaster"
            }
        ],
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.GPUDescription",
        "scope": "static"
    },
    {
        "description": "Information on a graphics API.",
        "kind": "typedef",
        "name": "GraphicsAPIDescription",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the graphics API.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The version of the graphics API.",
                "name": "version"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "If an OpenGL API, then the graphics card that performs the rendering.",
                "name": "renderer"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "If an OpenGL API, then the OpenGL vendor.",
                "name": "vendor"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "If an OpenGL API, then the shading language version.",
                "name": "shadingLanguageVersion"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "optional": true,
                "description": "If an OpenGL API, then the list of OpenGL extensions supported.",
                "name": "extensions"
            },
            {
                "type": {
                    "names": [
                        "Array.<PlatformInfo.VulkanAPIDescription>"
                    ]
                },
                "optional": true,
                "description": "If a Vulkan API, then the devices provided in the API.",
                "name": "devices"
            }
        ],
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.GraphicsAPIDescription",
        "scope": "static"
    },
    {
        "description": "Information on a Vulkan graphics API.",
        "kind": "typedef",
        "name": "VulkanAPIDescription",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The driver version.",
                "name": "driverVersion"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The API version.",
                "name": "apiVersion"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The device type.",
                "name": "deviceType"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The device vendor.",
                "name": "vendor"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The device name.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "The list of Vulkan extensions supported.",
                "name": "extensions"
            },
            {
                "type": {
                    "names": [
                        "Array.<PlatformInfo.VulkanQueueDescription>"
                    ]
                },
                "description": "The Vulkan queues available.",
                "name": "queues"
            },
            {
                "type": {
                    "names": [
                        "Array.<PlatformInfo.VulkanHeapDescription>"
                    ]
                },
                "description": "The Vulkan heaps available.",
                "name": "heaps"
            }
        ],
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.VulkanAPIDescription",
        "scope": "static"
    },
    {
        "description": "Information on a Vulkan queue.",
        "kind": "typedef",
        "name": "VulkanQueueDescription",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The Vulkan queue flags.",
                "name": "flags"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The queue count.",
                "name": "count"
            }
        ],
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.VulkanQueueDescription",
        "scope": "static"
    },
    {
        "description": "Information on a Vulkan heap.",
        "kind": "typedef",
        "name": "VulkanHeapDescription",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The Vulkan heap flags.",
                "name": "flags"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The heap size.",
                "name": "size"
            }
        ],
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.VulkanHeapDescription",
        "scope": "static"
    },
    {
        "description": "Information on a network card.",
        "kind": "typedef",
        "name": "NICDescription",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the network card.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The MAC address of the network card.",
                "name": "mac"
            }
        ],
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.NICDescription",
        "scope": "static"
    },
    {
        "description": "Information on a display.",
        "kind": "typedef",
        "name": "DisplayDescription",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The display's description.",
                "name": "description"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The display's device name.",
                "name": "deviceName"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The pixel coordinate of the left edge of the display (e.g., <code>0</code>).",
                "name": "boundsLeft"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The pixel coordinate of the right edge of the display (e.g., <code>1920</code>).",
                "name": "boundsRight"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The pixel coordinate of the top edge of the display (e.g., <code>0</code>).",
                "name": "boundsTop"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The pixel coordinate of the bottom edge of the display (e.g., <code>1080</code>).",
                "name": "boundsBottom"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index number of the GPU that's driving the display.",
                "name": "gpu"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The physical dots per inch of the display.",
                "name": "ppi"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The logical dots per inch of the desktop as used by the operating system.",
                "name": "ppiDesktop"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The physical width of the display, in inches.",
                "name": "physicalWidth"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The physical height of the display, in inches.",
                "name": "physicalHeight"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The refresh rate of the current display mode, in Hz.",
                "name": "modeRefreshrate"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The width of the current display mode, in pixels.",
                "name": "modeWidth"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The height of the current display mode, in pixels.",
                "name": "modeHeight"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the GPU is the \"master\" or primary display, <code>false</code> or\r    <code>undefined</code> if it isn't.",
                "name": "isMaster"
            }
        ],
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.DisplayDescription",
        "scope": "static"
    },
    {
        "description": "Information on the computer's memory.",
        "kind": "typedef",
        "name": "MemoryDescription",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The total amount of usable physical memory, in MB.",
                "name": "memTotal"
            }
        ],
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.MemoryDescription",
        "scope": "static"
    },
    {
        "description": "Information on the computer.",
        "kind": "typedef",
        "name": "ComputerDescription",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "PlatformInfo.ComputerOS"
                    ]
                },
                "description": "The operating system.",
                "name": "OS"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The operating system version.",
                "name": "OSversion"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The computer vendor.",
                "name": "vendor"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The computer model.",
                "name": "model"
            },
            {
                "type": {
                    "names": [
                        "PlatformInfo.PlatformTier"
                    ]
                },
                "description": "The platform tier of the computer, profiled at Interface start-up.",
                "name": "profileTier"
            }
        ],
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.ComputerDescription",
        "scope": "static"
    },
    {
        "description": "<p>The computer operating system.</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"WINDOWS\"</code></td><td>Windows.</td></tr>\r    <tr><td><code>\"MACOS\"</code></td><td>Mac OS.</td></tr>\r    <tr><td><code>\"LINUX\"</code></td><td>Linux.</td></tr>\r    <tr><td><code>\"ANDROID\"</code></td><td>Android.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "ComputerOS",
        "type": {
            "names": [
                "string"
            ]
        },
        "memberof": "PlatformInfo",
        "longname": "PlatformInfo.ComputerOS",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Steam</code> API provides facilities for working with the Steam version of Interface.",
        "kind": "namespace",
        "name": "Steam",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if Interface is running under Steam, <code>false</code> if it isn't. \r    <em>Read-only.</em>",
                "name": "running"
            }
        ],
        "longname": "Steam",
        "scope": "global"
    },
    {
        "description": "Gets whether Interface is running under Steam.",
        "kind": "function",
        "name": "isRunning",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if Interface is running under Steam, <code>false</code> if it isn't."
            }
        ],
        "memberof": "Steam",
        "longname": "Steam.isRunning",
        "scope": "static"
    },
    {
        "description": "Opens Steam's \"Choose Friends to invite\" dialog if Interface is running under Steam.",
        "kind": "function",
        "name": "openInviteOverlay",
        "examples": [
            "<caption>Invite Steam friends to join you in High Fidelity.</caption>\rif (Steam.running) {\r    print(\"Invite Steam friends to joint you...\");\r    Steam.openInviteOverlay();\r} else {\r    print(\"Interface isn't running under Steam.\");\r}\r\n     "
        ],
        "memberof": "Steam",
        "longname": "Steam.openInviteOverlay",
        "scope": "static"
    },
    {
        "description": "<p>The type of an intersection.</p>\r<table>\r  <thead>\r    <tr><th>Name</th><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td>INTERSECTED_NONE</td><td><code>0</code></td><td>Intersected nothing.</td></tr>\r    <tr><td>INTERSECTED_ENTITY</td><td><code>1</code></td><td>Intersected an entity.</td></tr>\r    <tr><td>INTERSECTED_LOCAL_ENTITY</td><td><code>2</code></td><td>Intersected a local entity.</td></tr>\r    <tr><td>INTERSECTED_AVATAR</td><td><code>3</code></td><td>Intersected an avatar.</td></tr>\r    <tr><td>INTERSECTED_HUD</td><td><code>4</code></td><td>Intersected the HUD surface.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "IntersectionType",
        "type": {
            "names": [
                "number"
            ]
        },
        "longname": "IntersectionType",
        "scope": "global"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>PickType</code> API provides constant numeric values that represent different types of picks.",
        "kind": "namespace",
        "name": "PickType",
        "variation": "0",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Ray picks intersect a ray with objects in front of them, along their direction.",
                "name": "Ray"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Parabola picks intersect a parabola with objects in front of them, along their arc.",
                "name": "Parabola"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Stylus picks provide \"tapping\" functionality on or into flat surfaces.",
                "name": "Stylus"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Collision picks intersect a collision volume with avatars and entities that have \r    collisions.",
                "name": "Collision"
            }
        ],
        "longname": "PickType(0)",
        "scope": "global"
    },
    {
        "description": "<p>A type of pick.</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>{@link PickType(0)|PickType.Ray}</code></td><td>Ray picks intersect a ray with objects in front of \r      them, along their direction.</td></tr>\r    <tr><td><code>{@link PickType(0)|PickType.Parabola}</code></td><td>Parabola picks intersect a parabola with objects\r      in front of them, along their arc.</td></tr>\r    <tr><td><code>{@link PickType(0)|PickType.Stylus}</code></td><td>Stylus picks provide \"tapping\" functionality on or\r      into flat surfaces.</td></tr>\r    <tr><td><code>{@link PickType(0)|PickType.Collision}</code></td><td>Collision picks intersect a collision volume \r      with avatars and entities that have collisions.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "PickType",
        "type": {
            "names": [
                "number"
            ]
        },
        "longname": "PickType",
        "scope": "global"
    },
    {
        "description": "A submesh intersection point.",
        "kind": "typedef",
        "name": "SubmeshIntersection",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The intersection point in world coordinates.",
                "name": "worldIntersectionPoint"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The intersection point in model coordinates.",
                "name": "meshIntersectionPoint"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the intersected mesh part within the submesh.",
                "name": "partIndex"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the mesh part within the model.",
                "name": "shapeID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the intersected submesh within the model.",
                "name": "subMeshIndex"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the intersected submesh.",
                "name": "subMeshName"
            },
            {
                "type": {
                    "names": [
                        "Triangle"
                    ]
                },
                "description": "The vertices of the intersected mesh part triangle in world coordinates.",
                "name": "subMeshTriangleWorld"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The normal of the intersected mesh part triangle in model coordinates.",
                "name": "subMeshNormal"
            },
            {
                "type": {
                    "names": [
                        "Triangle"
                    ]
                },
                "description": "The vertices of the intersected mesh part triangle in model coordinates.",
                "name": "subMeshTriangle"
            }
        ],
        "longname": "SubmeshIntersection",
        "scope": "global"
    },
    {
        "description": "The success or failure of an {@link Assets.downloadData} call.",
        "kind": "typedef",
        "name": "DownloadDataError",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<code>\"\"</code> if the download was successful, otherwise a description of the error.",
                "name": "errorMessage"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.DownloadDataError",
        "scope": "static"
    },
    {
        "description": "Source and download options for {@link Assets.getAsset}.",
        "kind": "typedef",
        "name": "GetOptions",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> to gunzip decompress the downloaded data. Synonym:\r    <code>compressed</code>.",
                "name": "decompress"
            },
            {
                "type": {
                    "names": [
                        "Assets.ResponseType"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"text\"",
                "description": "The desired result type.",
                "name": "responseType"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The mapped path or hash to download. May have a leading <code>\"atp:\"</code>.",
                "name": "url"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.GetOptions",
        "scope": "static"
    },
    {
        "description": "Result value returned by {@link Assets.getAsset}.",
        "kind": "typedef",
        "name": "GetResult",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "description": "The number of bytes in the downloaded content in <code>response</code>.",
                "name": "byteLength"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the item was retrieved from the cache, <code>false</code> if it was \r    downloaded.",
                "name": "cached"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "The automatically detected MIME type of the content.",
                "name": "contentType"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "description": "<code>true</code> if the content was decompressed, <code>false</code> if it wasn't.",
                "name": "decompressed"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "The hash for the downloaded asset.",
                "name": "hash"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "The ATP URL of the hash file.",
                "name": "hashURL"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "The path for the asset, if a path was requested. Otherwise, <code>undefined</code>.",
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "string",
                        "object",
                        "ArrayBuffer"
                    ]
                },
                "optional": true,
                "description": "The downloaded content.",
                "name": "response"
            },
            {
                "type": {
                    "names": [
                        "Assets.ResponseType"
                    ]
                },
                "optional": true,
                "description": "The type of the downloaded content in <code>response</code>.",
                "name": "responseType"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "The URL of the asset requested: the path with leading <code>\"atp:\"</code> if a path was \r    requested, otherwise the requested URL.",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "description": "<code>true</code> if the downloaded data is the baked version of the asset, \r     <code>false</code> if it isn't baked.",
                "name": "wasRedirected"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.GetResult",
        "scope": "static"
    },
    {
        "description": "Source options for {@link Assets.resolveAsset}.",
        "kind": "typedef",
        "name": "ResolveOptions",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The hash or path to resolve. May have a leading <code>\"atp:\"</code>.",
                "name": "url"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.ResolveOptions",
        "scope": "static"
    },
    {
        "description": "Result value returned by {@link Assets.resolveAsset}.\r<p>Note: If resolving a hash, a file of that hash need not be present on the asset server for the hash to resolve.</p>",
        "kind": "typedef",
        "name": "ResolveResult",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "The hash of the asset.",
                "name": "hash"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "The url of the asset's hash file, with leading <code>atp:</code>.",
                "name": "hashURL"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "The path to the asset.",
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "The URL of the asset.",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "description": "<code>true</code> if the resolved data is for the baked version of the asset,\r     <code>false</code> if it isn't.",
                "name": "wasRedirected"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.ResolveResult",
        "scope": "static"
    },
    {
        "description": "Content and decompression options for {@link Assets.decompressData}.",
        "kind": "typedef",
        "name": "DecompressOptions",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "ArrayBuffer"
                    ]
                },
                "description": "The data to decompress.",
                "name": "data"
            },
            {
                "type": {
                    "names": [
                        "Assets.ResponseType"
                    ]
                },
                "optional": true,
                "defaultvalue": "text",
                "description": "The type of decompressed data to return.",
                "name": "responseType"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.DecompressOptions",
        "scope": "static"
    },
    {
        "description": "Result value returned by {@link Assets.decompressData}.",
        "kind": "typedef",
        "name": "DecompressResult",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "description": "The number of bytes in the decompressed data.",
                "name": "byteLength"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "The MIME type of the decompressed data.",
                "name": "contentType"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "description": "<code>true</code> if the data is decompressed.",
                "name": "decompressed"
            },
            {
                "type": {
                    "names": [
                        "string",
                        "object",
                        "ArrayBuffer"
                    ]
                },
                "optional": true,
                "description": "The decompressed data.",
                "name": "response"
            },
            {
                "type": {
                    "names": [
                        "Assets.ResponseType"
                    ]
                },
                "optional": true,
                "description": "The type of the decompressed data in <code>response</code>.",
                "name": "responseType"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.DecompressResult",
        "scope": "static"
    },
    {
        "description": "Content and compression options for {@link Assets.compressData}.",
        "kind": "typedef",
        "name": "CompressOptions",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string",
                        "ArrayBuffer"
                    ]
                },
                "description": "The data to compress.",
                "name": "data"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The compression level, range <code>-1</code> &ndash; <code>9</code>. <code>-1</code> means \r    use the default gzip compression level, <code>0</code> means no compression, and <code>9</code> means maximum \r    compression.",
                "name": "level"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.CompressOptions",
        "scope": "static"
    },
    {
        "description": "Result value returned by {@link Assets.compressData}.",
        "kind": "typedef",
        "name": "CompressResult",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "description": "The number of bytes in the compressed data.",
                "name": "byteLength"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "description": "<code>true</code> if the data is compressed.",
                "name": "compressed"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "The MIME type of the compressed data, i.e., <code>\"application/gzip\"</code>.",
                "name": "contentType"
            },
            {
                "type": {
                    "names": [
                        "ArrayBuffer"
                    ]
                },
                "optional": true,
                "description": "The compressed data.",
                "name": "data"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.CompressResult",
        "scope": "static"
    },
    {
        "description": "Content and upload options for {@link Assets.putAsset}.",
        "kind": "typedef",
        "name": "PutOptions",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> to gzip compress the content for upload and storage,\r    <code>false</code> to upload and store the data without gzip compression. Synonym: <code>compressed</code>.",
                "name": "compress"
            },
            {
                "type": {
                    "names": [
                        "string",
                        "ArrayBuffer"
                    ]
                },
                "description": "The content to upload.",
                "name": "data"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "A user-friendly path for the file in the asset server. May have a leading \r    <code>\"atp:\"</code>. IF not specified, no path-to-hash mapping is set.\r    <p>Note: The asset server destroys any unmapped SHA256-named file at server restart. Either set the mapping path \r    with this property or use {@link Assets.setMapping} to set a path-to-hash mapping for the uploaded file.</p>",
                "name": "path"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.PutOptions",
        "scope": "static"
    },
    {
        "description": "Result value returned by {@link Assets.putAsset}.",
        "kind": "typedef",
        "name": "PutResult",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "description": "The number of bytes in the hash file stored on the asset server.",
                "name": "byteLength"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "description": "<code>true</code> if the content stored is gzip compressed.",
                "name": "compressed"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "<code>\"application/gzip\"</code> if the content stored is gzip compressed.",
                "name": "contentType"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "The SHA256 hash of the content.",
                "name": "hash"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "The <code>atp:</code> URL of the content: using the path if specified, otherwise the hash.",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "The uploaded content's mapped path, if specified.",
                "name": "path"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.PutResult",
        "scope": "static"
    },
    {
        "description": "Source for {@link Assets.queryCacheMeta}.",
        "kind": "typedef",
        "name": "QueryCacheMetaOptions",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the cached asset to get information on. Must start with <code>\"atp:\"</code> or \r    <code>\"cache:\"</code>.",
                "name": "url"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.QueryCacheMetaOptions",
        "scope": "static"
    },
    {
        "description": "Source and retrieval options for {@link Assets.loadFromCache}.",
        "kind": "typedef",
        "name": "LoadFromCacheOptions",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> to gunzip decompress the cached data. Synonym:\r    <code>compressed</code>.",
                "name": "decompress"
            },
            {
                "type": {
                    "names": [
                        "Assets.ResponseType"
                    ]
                },
                "optional": true,
                "defaultvalue": "text",
                "description": "The desired result type.",
                "name": "responseType"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the asset to load from cache. Must start with <code>\"atp:\"</code> or\r    <code>\"cache:\"</code>.",
                "name": "url"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.LoadFromCacheOptions",
        "scope": "static"
    },
    {
        "description": "The data to save to the cache and cache options for {@link Assets.saveToCache}.",
        "kind": "typedef",
        "name": "SaveToCacheOptions",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string",
                        "ArrayBuffer"
                    ]
                },
                "description": "The data to save to the cache.",
                "name": "data"
            },
            {
                "type": {
                    "names": [
                        "Assets.SaveToCacheHeaders"
                    ]
                },
                "optional": true,
                "description": "The last-modified and expiry times for the cache item.",
                "name": "headers"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "The URL to associate with the cache item. Must start with <code>\"atp:\"</code> or\r    <code>\"cache:\"</code>. If not specified, the URL is <code>\"atp:\"</code> followed by the SHA256 hash of the content.",
                "name": "url"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.SaveToCacheOptions",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>The <code>Assets</code> API provides facilities for interacting with the domain's asset server and the client cache. \r<p>Assets are stored in the asset server in files with SHA256 names. These files are mapped to user-friendly URLs of the \rformat: <code>atp:/path/filename</code>. The assets may optionally be baked, in which case a request for the original \runbaked version of the asset is automatically redirected to the baked version. The asset data may optionally be stored as \rcompressed.</p>\r<p>The client cache can be accessed directly, using <code>\"atp:\"</code> or <code>\"cache:\"</code> URLs. Interface, avatar, \rand assignment client scripts can write to the cache. All script types can read from the cache.</p>",
        "kind": "namespace",
        "name": "Assets",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "longname": "Assets",
        "scope": "global"
    },
    {
        "description": "Called when an {@link Assets.uploadData} call is complete.",
        "kind": "typedef",
        "name": "uploadDataCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The raw URL of the file that the content is stored in, with <code>atp:</code> as the scheme and \r    the SHA256 hash as the filename (with no extension).",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The SHA256 hash of the content.",
                "name": "hash"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets~uploadDataCallback",
        "scope": "inner"
    },
    {
        "description": "Uploads content to the asset server, storing it in a SHA256-named file.\r<p>Note: The asset server destroys any unmapped SHA256-named file at server restart. Use {@link Assets.setMapping} to \rset a path-to-hash mapping for the new file.</p>",
        "kind": "function",
        "name": "uploadData",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The content to upload.",
                "name": "data"
            },
            {
                "type": {
                    "names": [
                        "Assets~uploadDataCallback"
                    ]
                },
                "description": "The function to call upon completion.",
                "name": "callback"
            }
        ],
        "examples": [
            "<caption>Store a string in the asset server.</caption>\rAssets.uploadData(\"Hello world!\", function (url, hash) {\r    print(\"URL: \" + url);  // atp:0a1b...9g\r    Assets.setMapping(\"/assetsExamples/helloWorld.txt\", hash, function (error) {\r        if (error) {\r            print(\"ERROR: Could not set mapping!\");\r            return;\r        }\r    });\r});"
        ],
        "memberof": "Assets",
        "longname": "Assets.uploadData",
        "scope": "static"
    },
    {
        "description": "Called when an {@link Assets.downloadData} call is complete.",
        "kind": "typedef",
        "name": "downloadDataCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The content that was downloaded.",
                "name": "data"
            },
            {
                "type": {
                    "names": [
                        "Assets.DownloadDataError"
                    ]
                },
                "description": "The success or failure of the download.",
                "name": "error"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets~downloadDataCallback",
        "scope": "inner"
    },
    {
        "description": "Downloads content from the asset server, from a SHA256-named file.",
        "kind": "function",
        "name": "downloadData",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The raw URL of asset to download: <code>atp:</code> followed by the assets's SHA256 hash.",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "Assets~downloadDataCallback"
                    ]
                },
                "description": "The function to call upon completion.",
                "name": "callback"
            }
        ],
        "examples": [
            "<caption>Store and retrieve a string from the asset server.</caption>\rvar assetURL;\r\r// Store the string.\rAssets.uploadData(\"Hello world!\", function (url, hash) {\r    assetURL = url;\r    print(\"url: \" + assetURL);  // atp:a0g89...\r    Assets.setMapping(\"/assetsExamples/helloWorld.txt\", hash, function (error) {\r        if (error) {\r            print(\"ERROR: Could not set mapping!\");\r            return;\r        }\r    });\r});\r\r// Retrieve the string.\rScript.setTimeout(function () {\r    Assets.downloadData(assetURL, function (data, error) {\r        print(\"Downloaded data: \" + data);\r        print(\"Error: \" + JSON.stringify(error));\r    });\r}, 1000);"
        ],
        "memberof": "Assets",
        "longname": "Assets.downloadData",
        "scope": "static"
    },
    {
        "description": "Called when an {@link Assets.setMapping} call is complete.",
        "kind": "typedef",
        "name": "setMappingCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<code>null</code> if the path-to-hash mapping was set, otherwise a description of the error.",
                "name": "error"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets~setMappingCallback",
        "scope": "inner"
    },
    {
        "description": "Sets a path-to-hash mapping within the asset server.",
        "kind": "function",
        "name": "setMapping",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "A user-friendly path for the file in the asset server, without leading <code>\"atp:\"</code>.",
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The hash in the asset server.",
                "name": "hash"
            },
            {
                "type": {
                    "names": [
                        "Assets~setMappingCallback"
                    ]
                },
                "description": "The function to call upon completion.",
                "name": "callback"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.setMapping",
        "scope": "static"
    },
    {
        "description": "Called when an {@link Assets.getMapping} call is complete.",
        "kind": "typedef",
        "name": "getMappingCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<code>null</code> if the path was found, otherwise a description of the error.",
                "name": "error"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The hash value if the path was found, <code>\"\"</code> if it wasn't.",
                "name": "hash"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets~getMappingCallback",
        "scope": "inner"
    },
    {
        "description": "Gets the hash for a path within the asset server. The hash is for the unbaked or baked version of the\rasset, according to the asset server setting for the particular path.",
        "kind": "function",
        "name": "getMapping",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path to a file in the asset server to get the hash of.",
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "Assets~getMappingCallback"
                    ]
                },
                "description": "The function to call upon completion.",
                "name": "callback"
            }
        ],
        "examples": [
            "<caption>Report the hash of an asset server item.</caption>\rvar assetPath = Window.browseAssets();\rif (assetPath) {\r    var mapping = Assets.getMapping(assetPath, function (error, hash) {\r        print(\"Asset: \" + assetPath);\r        print(\"- hash:  \" + hash);\r        print(\"- error: \" + error);\r    });\r}"
        ],
        "memberof": "Assets",
        "longname": "Assets.getMapping",
        "scope": "static"
    },
    {
        "description": "Called when an {@link Assets.setBakingEnabled} call is complete.",
        "kind": "typedef",
        "name": "setBakingEnabledCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<code>null</code> if baking was successfully enabled or disabled, otherwise a description of the \rerror.",
                "name": "error"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets~setBakingEnabledCallback",
        "scope": "inner"
    },
    {
        "description": "Sets whether or not to bake an asset in the asset server.",
        "kind": "function",
        "name": "setBakingEnabled",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path to a file in the asset server.",
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to enable baking of the asset, <code>false</code> to disable.",
                "name": "enabled"
            },
            {
                "type": {
                    "names": [
                        "Assets~setBakingEnabledCallback"
                    ]
                },
                "description": "The function to call upon completion.",
                "name": "callback"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.setBakingEnabled",
        "scope": "static"
    },
    {
        "description": "Details of a callback function.",
        "kind": "typedef",
        "name": "CallbackDetails",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The scope that the <code>callback</code> function is defined in. This object is bound to \r    <code>this</code> when the function is called.",
                "name": "scope"
            },
            {
                "type": {
                    "names": [
                        "Assets~compressDataCallback",
                        "Assets~decompressDataCallback",
                        "Assets~getAssetCallback",
                        "Assets~getCacheStatusCallback",
                        "Assets~loadFromCacheCallback",
                        "Assets~putAssetCallback",
                        "Assets~queryCacheMetaCallback",
                        "Assets~resolveAssetCallback",
                        "Assets~saveToCacheCallback"
                    ]
                },
                "description": "The function to call upon completion. May be an inline function or a function identifier. If a function \r    identifier, it must be a member of <code>scope</code>.",
                "name": "callback"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.CallbackDetails",
        "scope": "static"
    },
    {
        "description": "Called when an {@link Assets.getAsset} call is complete.",
        "kind": "typedef",
        "name": "getAssetCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<code>null</code> if the content was downloaded, otherwise a description of the error.",
                "name": "error"
            },
            {
                "type": {
                    "names": [
                        "Assets.GetResult"
                    ]
                },
                "description": "Information on and the content downloaded.",
                "name": "result"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets~getAssetCallback",
        "scope": "inner"
    },
    {
        "description": "Downloads content from the asset server.",
        "kind": "function",
        "name": "getAsset",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "Assets.GetOptions"
                    ]
                },
                "description": "What to download and download options. If a string, the mapped path or hash \r    to download, optionally including a leading <code>\"atp:\"</code>.",
                "name": "source"
            },
            {
                "type": {
                    "names": [
                        "object",
                        "Assets.CallbackDetails",
                        "Assets~getAssetCallback"
                    ]
                },
                "description": "If an object, then the scope that\r    the <code>callback</code> function is defined in. This object is bound to <code>this</code> when the function is\r    called.\r    <p>Otherwise, the function to call upon completion. This may be an inline function or a function identifier.</p>",
                "name": "scopeOrCallback"
            },
            {
                "type": {
                    "names": [
                        "Assets~getAssetCallback"
                    ]
                },
                "optional": true,
                "description": "Used if <code>scopeOrCallback</code> specifies the scope.\r    <p>The function to call upon completion. May be an inline function, a function identifier, or the name of a function\r    in a string. If the name of a function or a function identifier, it must be a member of the scope specified by\r    <code>scopeOrCallback</code>.</p>",
                "name": "callback"
            }
        ],
        "examples": [
            "<caption>Retrieve a string from the asset server.</caption>\rAssets.getAsset(\r    {\r        url: \"/assetsExamples/helloWorld.txt\",\r        responseType: \"text\"\r    },\r    function (error, result) {\r        if (error) {\r            print(\"ERROR: Data not downloaded\");\r        } else {\r            print(\"Data: \" + result.response);\r        }\r    }\r);"
        ],
        "memberof": "Assets",
        "longname": "Assets.getAsset",
        "scope": "static"
    },
    {
        "description": "Called when an {@link Assets.putAsset} call is complete.",
        "kind": "typedef",
        "name": "putAssetCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<code>null</code> if the content was uploaded and any path-to-hash mapping set, otherwise a \r    description of the error.",
                "name": "error"
            },
            {
                "type": {
                    "names": [
                        "Assets.PutResult"
                    ]
                },
                "description": "Information on the content uploaded.",
                "name": "result"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets~putAssetCallback",
        "scope": "inner"
    },
    {
        "description": "Uploads content to the asset server and sets a path-to-hash mapping.",
        "kind": "function",
        "name": "putAsset",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "Assets.PutOptions"
                    ]
                },
                "description": "The content to upload and upload options. If a string, the value of the\r    string is uploaded but a path-to-hash mapping is not set.",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "object",
                        "Assets.CallbackDetails",
                        "Assets~putAssetCallback"
                    ]
                },
                "description": "If an object, then the scope that\r    the <code>callback</code> function is defined in. This object is bound to <code>this</code> when the function is\r    called.\r    <p>Otherwise, the function to call upon completion. This may be an inline function or a function identifier.</p>",
                "name": "scopeOrCallback"
            },
            {
                "type": {
                    "names": [
                        "Assets~putAssetCallback"
                    ]
                },
                "optional": true,
                "description": "Used if <code>scopeOrCallback</code> specifies the scope.\r    <p>The function to call upon completion. May be an inline function, a function identifier, or the name of a function\r    in a string. If the name of a function or a function identifier, it must be a member of the scope specified by\r    <code>scopeOrCallback</code>.</p>",
                "name": "callback"
            }
        ],
        "examples": [
            "<caption>Store a string in the asset server.</caption>\rAssets.putAsset(\r    {\r        data: \"Hello world!\",\r        path: \"/assetsExamples/helloWorld.txt\"\r    },\r    function (error, result) {\r        if (error) {\r            print(\"ERROR: Data not uploaded or mapping not set\");\r        } else {\r            print(\"URL: \" + result.url);  // atp:/assetsExamples/helloWorld.txt\r        }\r    }\r);"
        ],
        "memberof": "Assets",
        "longname": "Assets.putAsset",
        "scope": "static"
    },
    {
        "description": "Called when an {@link Assets.deleteAsset} call is complete.\r<p class=\"important\">Not implemented: This type is not implemented yet.</p>",
        "kind": "typedef",
        "name": "deleteAssetCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<code>null</code> if the content was deleted, otherwise a description of the error.",
                "name": "error"
            },
            {
                "type": {
                    "names": [
                        "Assets.DeleteResult"
                    ]
                },
                "description": "Information on the content deleted.",
                "name": "result"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets~deleteAssetCallback",
        "scope": "inner"
    },
    {
        "description": "Deletes content from the asset server.\r<p class=\"important\">Not implemented: This method is not implemented yet.</p>",
        "kind": "function",
        "name": "deleteAsset",
        "params": [
            {
                "type": {
                    "names": [
                        "Assets.DeleteOptions"
                    ]
                },
                "description": "The content to delete and delete options.",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The scope that the <code>callback</code> function is defined in.",
                "name": "scope"
            },
            {
                "type": {
                    "names": [
                        "Assets~deleteAssetCallback"
                    ]
                },
                "description": "The function to call upon completion.",
                "name": "callback"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.deleteAsset",
        "scope": "static"
    },
    {
        "description": "Called when an {@link Assets.resolveAsset} call is complete.",
        "kind": "typedef",
        "name": "resolveAssetCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<code>null</code> if the asset hash or path was resolved, otherwise a description of the error.",
                "name": "error"
            },
            {
                "type": {
                    "names": [
                        "Assets.ResolveResult"
                    ]
                },
                "description": "Information on the hash or path resolved.",
                "name": "result"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets~resolveAssetCallback",
        "scope": "inner"
    },
    {
        "description": "Resolves and returns information on a hash or a path in the asset server.",
        "kind": "function",
        "name": "resolveAsset",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "Assets.ResolveOptions"
                    ]
                },
                "description": "The hash or path to resolve if a string, otherwise an object specifying \r    what to resolve. If a string, it may have a leading <code>\"atp:\"</code>.",
                "name": "source"
            },
            {
                "type": {
                    "names": [
                        "object",
                        "Assets.CallbackDetails",
                        "Assets~resolveAssetCallback"
                    ]
                },
                "description": "If an object, then the scope that\r    the <code>callback</code> function is defined in. This object is bound to <code>this</code> when the function is\r    called.\r    <p>Otherwise, the function to call upon completion. This may be an inline function or a function identifier.</p>",
                "name": "scopeOrCallback"
            },
            {
                "type": {
                    "names": [
                        "Assets~resolveAssetCallback"
                    ]
                },
                "optional": true,
                "description": "Used if <code>scopeOrCallback</code> specifies the scope.\r    <p>The function to call upon completion. May be an inline function, a function identifier, or the name of a function\r    in a string. If the name of a function or a function identifier, it must be a member of the scope specified by\r    <code>scopeOrCallback</code>.</p>",
                "name": "callback"
            }
        ],
        "examples": [
            "<caption>Get the hash and URL for a path.</caption>\rAssets.resolveAsset(\r    \"/assetsExamples/helloWorld.txt\",\r    function (error, result) {\r        if (error) {\r            print(\"ERROR: \" + error);\r        } else {\r            print(\"Hash: \" + result.hash);\r            print(\"URL: \" + result.url);\r        }\r    }\r);"
        ],
        "memberof": "Assets",
        "longname": "Assets.resolveAsset",
        "scope": "static"
    },
    {
        "description": "Called when an {@link Assets.decompressData} call is complete.",
        "kind": "typedef",
        "name": "decompressDataCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<code>null</code> if the data was successfully compressed, otherwise a description of the error.",
                "name": "error"
            },
            {
                "type": {
                    "names": [
                        "Assets.DecompressResult"
                    ]
                },
                "description": "Information on and the decompressed data.",
                "name": "result"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets~decompressDataCallback",
        "scope": "inner"
    },
    {
        "description": "Decompresses data in memory using gunzip.",
        "kind": "function",
        "name": "decompressData",
        "params": [
            {
                "type": {
                    "names": [
                        "Assets.DecompressOptions"
                    ]
                },
                "description": "What to decompress and decompression options.",
                "name": "source"
            },
            {
                "type": {
                    "names": [
                        "object",
                        "Assets.CallbackDetails",
                        "Assets~decompressDataCallback"
                    ]
                },
                "description": "If an object, then the scope that\r    the <code>callback</code> function is defined in. This object is bound to <code>this</code> when the function is\r    called.\r    <p>Otherwise, the function to call upon completion. This may be an inline function or a function identifier.</p>",
                "name": "scopeOrCallback"
            },
            {
                "type": {
                    "names": [
                        "Assets~decompressDataCallback"
                    ]
                },
                "optional": true,
                "description": "Used if <code>scopeOrCallback</code> specifies the scope.\r    <p>The function to call upon completion. May be an inline function, a function identifier, or the name of a function\r    in a string. If the name of a function or a function identifier, it must be a member of the scope specified by\r    <code>scopeOrCallback</code>.</p>",
                "name": "callback"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.decompressData",
        "scope": "static"
    },
    {
        "description": "Called when an {@link Assets.compressData} call is complete.",
        "kind": "typedef",
        "name": "compressDataCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<code>null</code> if the data was successfully compressed, otherwise a description of the error.",
                "name": "error"
            },
            {
                "type": {
                    "names": [
                        "Assets.CompressResult"
                    ]
                },
                "description": "Information on and the compressed data.",
                "name": "result"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets~compressDataCallback",
        "scope": "inner"
    },
    {
        "description": "Compresses data in memory using gzip.",
        "kind": "function",
        "name": "compressData",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "ArrayBuffer",
                        "Assets.CompressOptions"
                    ]
                },
                "description": "What to compress and compression options. If a string or \r    ArrayBuffer, the data to compress.",
                "name": "source"
            },
            {
                "type": {
                    "names": [
                        "object",
                        "Assets.CallbackDetails",
                        "Assets~compressDataCallback"
                    ]
                },
                "description": "If an object, then the scope that\r    the <code>callback</code> function is defined in. This object is bound to <code>this</code> when the function is\r    called.\r    <p>Otherwise, the function to call upon completion. This may be an inline function or a function identifier.</p>",
                "name": "scopeOrCallback"
            },
            {
                "type": {
                    "names": [
                        "Assets~compressDataCallback"
                    ]
                },
                "optional": true,
                "description": "Used if <code>scopeOrCallback</code> specifies the scope.\r    <p>The function to call upon completion. May be an inline function, a function identifier, or the name of a function\r    in a string. If the name of a function or a function identifier, it must be a member of the scope specified by\r    <code>scopeOrCallback</code>.</p>",
                "name": "callback"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.compressData",
        "scope": "static"
    },
    {
        "description": "Initializes the cache if it isn't already initialized.",
        "kind": "function",
        "name": "initializeCache",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the cache is initialized, <code>false</code> if it isn't."
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.initializeCache",
        "scope": "static"
    },
    {
        "description": "Checks whether the script can write to the cache.",
        "kind": "function",
        "name": "canWriteCacheValue",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<em>Not used.</em>",
                "name": "url"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the script is an Interface, avatar, or assignment client script, \r    <code>false</code> if the script is a client entity or server entity script."
            }
        ],
        "examples": [
            "<caption>Report whether the script can write to the cache.</caption>\rprint(\"Can write to cache: \" + Assets.canWriteCacheValue(null));"
        ],
        "memberof": "Assets",
        "longname": "Assets.canWriteCacheValue",
        "scope": "static"
    },
    {
        "description": "Called when a {@link Assets.getCacheStatus} call is complete.",
        "kind": "typedef",
        "name": "getCacheStatusCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<code>null</code> if the cache status was retrieved without error, otherwise a description of \r    the error.",
                "name": "error"
            },
            {
                "type": {
                    "names": [
                        "Assets.GetCacheStatusResult"
                    ]
                },
                "description": "Details of the current cache status.",
                "name": "result"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets~getCacheStatusCallback",
        "scope": "inner"
    },
    {
        "description": "Gets the current cache status.",
        "kind": "function",
        "name": "getCacheStatus",
        "params": [
            {
                "type": {
                    "names": [
                        "object",
                        "Assets.CallbackDetails",
                        "Assets~getCacheStatusCallback"
                    ]
                },
                "description": "If an object, then the scope that \r    the <code>callback</code> function is defined in. This object is bound to <code>this</code> when the function is \r    called. \r    <p>Otherwise, the function to call upon completion. This may be an inline function or a function identifier.</p>",
                "name": "scopeOrCallback"
            },
            {
                "type": {
                    "names": [
                        "Assets~getCacheStatusCallback"
                    ]
                },
                "optional": true,
                "description": "Used if <code>scopeOrCallback</code> specifies the scope.\r    <p>The function to call upon completion. May be an inline function, a function identifier, or the name of a function \r    in a string. If the name of a function or a function identifier, it must be a member of the scope specified by \r    <code>scopeOrCallback</code>.</p>",
                "name": "callback"
            }
        ],
        "examples": [
            "<caption>Report the cache status.</caption>\rAssets.getCacheStatus(function (error, status) {\r    print(\"Cache status\");\r    print(\"- Error: \" + error);\r    print(\"- Status: \" + JSON.stringify(status));\r});"
        ],
        "memberof": "Assets",
        "longname": "Assets.getCacheStatus",
        "scope": "static"
    },
    {
        "description": "Called when {@link Assets.queryCacheMeta} is complete.",
        "kind": "typedef",
        "name": "queryCacheMetaCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<code>null</code> if the URL has a valid cache entry, otherwise a description of the error.",
                "name": "error"
            },
            {
                "type": {
                    "names": [
                        "Assets.CacheItemMetaData"
                    ]
                },
                "description": "Information on an asset in the cache.",
                "name": "result"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets~queryCacheMetaCallback",
        "scope": "inner"
    },
    {
        "description": "Gets information about the status of an asset in the cache.",
        "kind": "function",
        "name": "queryCacheMeta",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "Assets.QueryCacheMetaOptions"
                    ]
                },
                "description": "The URL of the cached asset to get information on if a string, \r    otherwise an object specifying the cached asset to get information on. The URL must start with <code>\"atp:\"</code> \r    or <code>\"cache:\"</code>.",
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "object",
                        "Assets.CallbackDetails",
                        "Assets~queryCacheMetaCallback"
                    ]
                },
                "description": "If an object, then the scope that\r    the <code>callback</code> function is defined in. This object is bound to <code>this</code> when the function is\r    called.\r    <p>Otherwise, the function to call upon completion. This may be an inline function or a function identifier.</p>",
                "name": "scopeOrCallback"
            },
            {
                "type": {
                    "names": [
                        "Assets~queryCacheMetaCallback"
                    ]
                },
                "optional": true,
                "description": "Used if <code>scopeOrCallback</code> specifies the scope.\r    <p>The function to call upon completion. May be an inline function, a function identifier, or the name of a function\r    in a string. If the name of a function or a function identifier, it must be a member of the scope specified by\r    <code>scopeOrCallback</code>.</p>",
                "name": "callback"
            }
        ],
        "examples": [
            "<caption>Report details of a string store in the cache.</caption>\rAssets.queryCacheMeta(\r    \"cache:/cacheExample/helloCache.txt\",\r    function (error, result) {\r        if (error) {\r            print(\"Error: \" + error);\r        } else {\r            print(\"Success:\");\r            print(\"- URL: \" + result.url);\r            print(\"- isValid: \" + result.isValid);\r            print(\"- saveToDisk: \" + result.saveToDisk);\r            print(\"- expirationDate: \" + result.expirationDate);\r        }\r    }\r);"
        ],
        "memberof": "Assets",
        "longname": "Assets.queryCacheMeta",
        "scope": "static"
    },
    {
        "description": "Called when an {@link Assets.loadFromCache} call is complete.",
        "kind": "typedef",
        "name": "loadFromCacheCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<code>null</code> if the cache item was successfully retrieved, otherwise a description of the \r    error.",
                "name": "error"
            },
            {
                "type": {
                    "names": [
                        "Assets.LoadFromCacheResult"
                    ]
                },
                "description": "Information on and the retrieved data.",
                "name": "result"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets~loadFromCacheCallback",
        "scope": "inner"
    },
    {
        "description": "Retrieves data from the cache directly, without downloading it.",
        "kind": "function",
        "name": "loadFromCache",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "Assets.LoadFromCacheOptions"
                    ]
                },
                "description": "The URL of the asset to load from the cache if a string, otherwise \r    an object specifying the asset to load from the cache and load options. The URL must start with <code>\"atp:\"</code> \r    or <code>\"cache:\"</code>.",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "object",
                        "Assets.CallbackDetails",
                        "Assets~loadFromCacheCallback"
                    ]
                },
                "description": "If an object, then the scope that\r    the <code>callback</code> function is defined in. This object is bound to <code>this</code> when the function is\r    called.\r    <p>Otherwise, the function to call upon completion. This may be an inline function or a function identifier.</p>",
                "name": "scopeOrCallback"
            },
            {
                "type": {
                    "names": [
                        "Assets~loadFromCacheCallback"
                    ]
                },
                "optional": true,
                "description": "Used if <code>scopeOrCallback</code> specifies the scope.\r    <p>The function to call upon completion. May be an inline function, a function identifier, or the name of a function\r    in a string. If the name of a function or a function identifier, it must be a member of the scope specified by\r    <code>scopeOrCallback</code>.</p>",
                "name": "callback"
            }
        ],
        "examples": [
            "<caption>Retrieve a string from the cache.</caption>\rAssets.loadFromCache(\r    \"cache:/cacheExample/helloCache.txt\",\r    function (error, result) {\r        if (error) {\r            print(\"Error: \" + error);\r        } else {\r            print(\"Success:\");\r            print(\"- Response: \" + result.response);\r            print(\"- Content type: \" + result.contentType);\r            print(\"- Number of bytes: \" + result.byteLength);\r            print(\"- Bytes: \" + [].slice.call(new Uint8Array(result.data), 0, result.byteLength));\r            print(\"- URL: \" + result.url);\r        }\r    }\r);"
        ],
        "memberof": "Assets",
        "longname": "Assets.loadFromCache",
        "scope": "static"
    },
    {
        "description": "Called when an {@link Assets.saveToCache} call is complete.",
        "kind": "typedef",
        "name": "saveToCacheCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<code>null</code> if the asset data was successfully saved to the cache, otherwise a description \r    of the error.",
                "name": "error"
            },
            {
                "type": {
                    "names": [
                        "Assets.SaveToCacheResult"
                    ]
                },
                "description": "Information on the cached data.",
                "name": "result"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets~saveToCacheCallback",
        "scope": "inner"
    },
    {
        "description": "Saves asset data to the cache directly, without downloading it from a URL.\r<p>Note: Can only be used in Interface, avatar, and assignment client scripts.</p>",
        "kind": "function",
        "name": "saveToCache",
        "params": [
            {
                "type": {
                    "names": [
                        "Assets.SaveToCacheOptions"
                    ]
                },
                "description": "The data to save to the cache and cache options.",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "object",
                        "Assets.CallbackDetails",
                        "Assets~saveToCacheCallback"
                    ]
                },
                "description": "If an object, then the scope that\r    the <code>callback</code> function is defined in. This object is bound to <code>this</code> when the function is\r    called.\r    <p>Otherwise, the function to call upon completion. This may be an inline function or a function identifier.</p>",
                "name": "scopeOrCallback"
            },
            {
                "type": {
                    "names": [
                        "Assets~saveToCacheCallback"
                    ]
                },
                "optional": true,
                "description": "Used if <code>scopeOrCallback</code> specifies the scope.\r    <p>The function to call upon completion. May be an inline function, a function identifier, or the name of a function\r    in a string. If the name of a function or a function identifier, it must be a member of the scope specified by\r    <code>scopeOrCallback</code>.</p>",
                "name": "callback"
            }
        ],
        "examples": [
            "<caption>Save a string in the cache.</caption>\rAssets.saveToCache(\r    {\r        url: \"cache:/cacheExample/helloCache.txt\",\r        data: \"Hello cache\"\r    },\r    function (error, result) {\r        if (error) {\r            print(\"Error: \" + error);\r        } else {\r            print(\"Success:\");\r            print(\"- Bytes: \" + result.byteLength);\r            print(\"- URL: \" + result.url);\r        }\r    }\r);"
        ],
        "memberof": "Assets",
        "longname": "Assets.saveToCache",
        "scope": "static"
    },
    {
        "description": "Saves asset data to the cache directly, without downloading it from a URL.\r<p>Note: Can only be used in Interface, avatar, and assignment client scripts.</p>",
        "kind": "function",
        "name": "saveToCache",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL to associate with the cache item. Must start with <code>\"atp:\"</code> or \r    <code>\"cache:\"</code>.",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "string",
                        "ArrayBuffer"
                    ]
                },
                "description": "The data to save to the cache.",
                "name": "data"
            },
            {
                "type": {
                    "names": [
                        "Assets.SaveToCacheHeaders"
                    ]
                },
                "description": "The last-modified and expiry times for the cache item.",
                "name": "headers"
            },
            {
                "type": {
                    "names": [
                        "object",
                        "Assets.CallbackDetails",
                        "Assets~saveToCacheCallback"
                    ]
                },
                "description": "If an object, then the scope that\r    the <code>callback</code> function is defined in. This object is bound to <code>this</code> when the function is\r    called.\r    <p>Otherwise, the function to call upon completion. This may be an inline function or a function identifier.</p>",
                "name": "scopeOrCallback"
            },
            {
                "type": {
                    "names": [
                        "Assets~saveToCacheCallback"
                    ]
                },
                "optional": true,
                "description": "Used if <code>scopeOrCallback</code> specifies the scope.\r    <p>The function to call upon completion. May be an inline function, a function identifier, or the name of a function\r    in a string. If the name of a function or a function identifier, it must be a member of the scope specified by\r    <code>scopeOrCallback</code>.</p>",
                "name": "callback"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.saveToCache",
        "scope": "static"
    },
    {
        "description": "Adds avatars to the audio solo list. If the audio solo list is not empty, only audio from the avatars in the list is \rplayed.",
        "kind": "function",
        "name": "addToSoloList",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "Avatar IDs to add to the solo list.",
                "name": "ids"
            }
        ],
        "examples": [
            "<caption>Listen to a single nearby avatar for a short while.</caption>\r// Find nearby avatars.\rvar RANGE = 100; // m\rvar nearbyAvatars = AvatarList.getAvatarsInRange(MyAvatar.position, RANGE);\r\r// Remove own avatar from list.\rvar myAvatarIndex = nearbyAvatars.indexOf(MyAvatar.sessionUUID);\rif (myAvatarIndex !== -1) {\r    nearbyAvatars.splice(myAvatarIndex, 1);\r}\r\rif (nearbyAvatars.length > 0) {\r    // Listen to only one of the nearby avatars.\r    var avatarName = AvatarList.getAvatar(nearbyAvatars[0]).displayName;\r    print(\"Listening only to \" + avatarName);\r    Audio.addToSoloList([nearbyAvatars[0]]);\r\r    // Stop listening to only the one avatar after a short while.\r    Script.setTimeout(function () {\r        print(\"Finished listening only to \" + avatarName);\r        Audio.resetSoloList();\r    }, 10000); // 10s\r\r} else {\r    print(\"No nearby avatars\");\r}"
        ],
        "memberof": "Audio",
        "longname": "Audio.addToSoloList",
        "scope": "static"
    },
    {
        "description": "Removes avatars from the audio solo list. If the audio solo list is not empty, only audio from the avatars in the list \ris played.",
        "kind": "function",
        "name": "removeFromSoloList",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "Avatar IDs to remove from the solo list.",
                "name": "ids"
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.removeFromSoloList",
        "scope": "static"
    },
    {
        "description": "Clears the audio solo list.",
        "kind": "function",
        "name": "resetSoloList",
        "memberof": "Audio",
        "longname": "Audio.resetSoloList",
        "scope": "static"
    },
    {
        "description": "Gets whether your microphone audio is echoed back to you from the server. When enabled, microphone audio is echoed only \rif you're unmuted or are using push-to-talk.",
        "kind": "function",
        "name": "getServerEcho",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if echoing microphone audio back to you from the server is enabled, \r    <code>false</code> if it isn't."
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.getServerEcho",
        "scope": "static"
    },
    {
        "description": "Sets whether your microphone audio is echoed back to you from the server. When enabled, microphone audio is echoed \ronly if you're unmuted or are using push-to-talk.",
        "kind": "function",
        "name": "setServerEcho",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to enable echoing microphone back to you from the server, \r    <code>false</code> to disable.",
                "name": "serverEcho"
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.setServerEcho",
        "scope": "static"
    },
    {
        "description": "Toggles the echoing of microphone audio back to you from the server. When enabled, microphone audio is echoed only if \ryou're unmuted or are using push-to-talk.",
        "kind": "function",
        "name": "toggleServerEcho",
        "memberof": "Audio",
        "longname": "Audio.toggleServerEcho",
        "scope": "static"
    },
    {
        "description": "Gets whether your microphone audio is echoed back to you by the client. When enabled, microphone audio is echoed \reven if you're muted or not using push-to-talk.",
        "kind": "function",
        "name": "getLocalEcho",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if echoing microphone audio back to you from the client is enabled, \r    <code>false</code> if it isn't."
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.getLocalEcho",
        "scope": "static"
    },
    {
        "description": "Sets whether your microphone audio is echoed back to you by the client. When enabled, microphone audio is echoed \reven if you're muted or not using push-to-talk.",
        "kind": "function",
        "name": "setLocalEcho",
        "tags": [
            {
                "originalTitle": "parm",
                "title": "parm",
                "text": "{boolean} localEcho - <code>true</code> to enable echoing microphone audio back to you from the client, \r    <code>false</code> to disable.",
                "value": "{boolean} localEcho - <code>true</code> to enable echoing microphone audio back to you from the client, \r    <code>false</code> to disable."
            }
        ],
        "examples": [
            "<caption>Echo local audio for a few seconds.</caption>\rAudio.setLocalEcho(true);\rScript.setTimeout(function () {\r    Audio.setLocalEcho(false);\r}, 3000); // 3s"
        ],
        "memberof": "Audio",
        "longname": "Audio.setLocalEcho",
        "scope": "static"
    },
    {
        "description": "Toggles the echoing of microphone audio back to you by the client. When enabled, microphone audio is echoed even if \ryou're muted or not using push-to-talk.",
        "kind": "function",
        "name": "toggleLocalEcho",
        "memberof": "Audio",
        "longname": "Audio.toggleLocalEcho",
        "scope": "static"
    },
    {
        "description": "Starts playing or \"injecting\" the content of an audio file. The sound is played globally (sent to the audio \rmixer) so that everyone hears it, unless the <code>injectorOptions</code> has <code>localOnly</code> set to \r<code>true</code> in which case only the client hears the sound played. No sound is played if sent to the audio mixer \rbut the client is not connected to an audio mixer. The {@link AudioInjector} object returned by the function can be used \rto control the playback and get information about its current state.",
        "kind": "function",
        "name": "playSound",
        "params": [
            {
                "type": {
                    "names": [
                        "SoundObject"
                    ]
                },
                "description": "The content of an audio file, loaded using {@link SoundCache.getSound}. See \r{@link SoundObject} for supported formats.",
                "name": "sound"
            },
            {
                "type": {
                    "names": [
                        "AudioInjector.AudioInjectorOptions"
                    ]
                },
                "optional": true,
                "defaultvalue": "{}",
                "description": "Configures where and how the audio injector plays the \r    audio file.",
                "name": "injectorOptions"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "AudioInjector"
                    ]
                },
                "description": "The audio injector that plays the audio file."
            }
        ],
        "examples": [
            "<caption>Play a sound.</caption>\rvar sound = SoundCache.getSound(\"http://hifi-content.s3.amazonaws.com/ken/samples/forest_ambiX.wav\");\r\rfunction playSound() {\r    var injectorOptions = {\r        position: MyAvatar.position\r    };\r    var injector = Audio.playSound(sound, injectorOptions);\r}\r\rfunction onSoundReady() {\r    sound.ready.disconnect(onSoundReady);\r    playSound();\r}\r\rif (sound.downloaded) {\r    playSound();\r} else {\r    sound.ready.connect(onSoundReady);\r}"
        ],
        "memberof": "Audio",
        "longname": "Audio.playSound",
        "scope": "static"
    },
    {
        "description": "Starts playing the content of an audio file locally (isn't sent to the audio mixer). This is the same as calling \r{@link Audio.playSound} with {@link AudioInjector.AudioInjectorOptions} <code>localOnly</code> set <code>true</code> and \rthe specified <code>position</code>.",
        "kind": "function",
        "name": "playSystemSound",
        "params": [
            {
                "type": {
                    "names": [
                        "SoundObject"
                    ]
                },
                "description": "The content of an audio file, which is loaded using {@link SoundCache.getSound}. See \r{@link SoundObject} for supported formats.",
                "name": "sound"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "AudioInjector"
                    ]
                },
                "description": "The audio injector that plays the audio file."
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.playSystemSound",
        "scope": "static"
    },
    {
        "description": "Sets whether the audio input should be used in stereo. If the audio input doesn't support stereo then setting a value \rof <code>true</code> has no effect.",
        "kind": "function",
        "name": "setStereoInput",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the audio input should be used in stereo, otherwise <code>false</code>.",
                "name": "stereo"
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.setStereoInput",
        "scope": "static"
    },
    {
        "description": "Gets whether the audio input is used in stereo.",
        "kind": "function",
        "name": "isStereoInput",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the audio input is used in stereo, otherwise <code>false</code>."
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.isStereoInput",
        "scope": "static"
    },
    {
        "description": "Triggered when the client is muted by the mixer because their loudness value for the noise background has reached the \rthreshold set for the domain (in the server settings).",
        "kind": "signal",
        "name": "mutedByMixer",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.mutedByMixer",
        "scope": "static"
    },
    {
        "description": "Triggered when the client is muted by the mixer because they're within a certain radius (50m) of someone who requested \rthe mute through Developer &gt; Audio &gt; Mute Environment.",
        "kind": "signal",
        "name": "environmentMuted",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.environmentMuted",
        "scope": "static"
    },
    {
        "description": "Triggered when the client receives its first packet from the audio mixer.",
        "kind": "signal",
        "name": "receivedFirstPacket",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.receivedFirstPacket",
        "scope": "static"
    },
    {
        "description": "Triggered when the client is disconnected from the audio mixer.",
        "kind": "signal",
        "name": "disconnected",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.disconnected",
        "scope": "static"
    },
    {
        "description": "Triggered when the noise gate is opened. The input audio signal is no longer blocked (fully attenuated) because it has \rrisen above an adaptive threshold set just above the noise floor. Only occurs if <code>Audio.noiseReduction</code> is \r<code>true</code>.",
        "kind": "signal",
        "name": "noiseGateOpened",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.noiseGateOpened",
        "scope": "static"
    },
    {
        "description": "Triggered when the noise gate is closed. The input audio signal is blocked (fully attenuated) because it has fallen \rbelow an adaptive threshold set just above the noise floor. Only occurs if <code>Audio.noiseReduction</code> is \r<code>true</code>.",
        "kind": "signal",
        "name": "noiseGateClosed",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.noiseGateClosed",
        "scope": "static"
    },
    {
        "description": "Triggered when a frame of audio input is processed.",
        "kind": "signal",
        "name": "inputReceived",
        "params": [
            {
                "type": {
                    "names": [
                        "Int16Array"
                    ]
                },
                "description": "The audio input processed.",
                "name": "inputSamples"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.inputReceived",
        "scope": "static"
    },
    {
        "description": "Triggered when the input audio use changes between mono and stereo.",
        "kind": "signal",
        "name": "isStereoInputChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the input audio is stereo, otherwise <code>false</code>.",
                "name": "isStereo"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.isStereoInputChanged",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>The <code>File</code> API provides some facilities for working with the file system.",
        "kind": "namespace",
        "name": "File",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "longname": "File",
        "scope": "global"
    },
    {
        "description": "Extracts a filename from a URL, where the filename is specified in the query part of the URL as <code>filename=</code>.",
        "kind": "function",
        "name": "convertUrlToPath",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL to extract the filename from.",
                "name": "url"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The filename specified in the URL; an empty string if no filename is specified."
            }
        ],
        "examples": [
            "<caption>Extract a filename from a URL.</caption>\rvar url = \"http://domain.tld/path/page.html?filename=file.ext\";\rprint(\"File name: \" + File.convertUrlToPath(url));  // file.ext"
        ],
        "memberof": "File",
        "longname": "File.convertUrlToPath",
        "scope": "static"
    },
    {
        "description": "Unzips a file in the local file system to a new, unique temporary directory.",
        "kind": "function",
        "name": "runUnzip",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path of the zip file in the local file system. May have a leading <code>\"file:///\"</code>. \r    Need not have a <code>\".zip\"</code> extension if it is in a temporary directory (as created by \r    {@link File.getTempDir|getTempDir}).",
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<em>Not used.</em>",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<em>Not used by user scripts.</em> The value is simply passed through to the \r    {@link File.unzipResult|unzipResult} signal.",
                "name": "autoAdd"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Set to <code>true</code> if <code>path</code> has a <code>\".zip\"</code> extension, \r    <code>false</code> if it doesn't (but should still be treated as a zip file).",
                "name": "isZip"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<em>Not used by user scripts.</em> The value is simply passed through to the \r    {@link File.unzipResult|unzipResult} signal.",
                "name": "isBlocks"
            }
        ],
        "examples": [
            "<caption>Select and unzip a file.</caption>\rFile.unzipResult.connect(function (zipFile, unzipFiles, autoAdd, isZip, isBlocks) {\r    print(\"File.unzipResult()\");\r    print(\"- zipFile: \" + zipFile);\r    print(\"- unzipFiles(\" + unzipFiles.length + \"): \" + unzipFiles);\r    print(\"- autoAdd: \" + autoAdd);\r    print(\"- isZip: \" + isZip);\r    print(\"- isBlocks: \" + isBlocks);\r});\r\rvar zipFile = Window.browse(\"Select a Zip File\", \"\", \"*.zip\");\rif (zipFile) {\r    File.runUnzip(zipFile, \"\", false, true, false);\r} else {\r    print(\"Zip file not selected.\");\r}"
        ],
        "memberof": "File",
        "longname": "File.runUnzip",
        "scope": "static"
    },
    {
        "description": "Creates a new, unique directory for temporary use.",
        "kind": "function",
        "name": "getTempDir",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path of the newly created temporary directory."
            }
        ],
        "examples": [
            "<caption>Create a temporary directory.</caption>\rprint(\"New temporary directory: \" + File.getTempDir());"
        ],
        "memberof": "File",
        "longname": "File.getTempDir",
        "scope": "static"
    },
    {
        "description": "Triggered when {@link File.runUnzip|runUnzip} completes.",
        "kind": "signal",
        "name": "unzipResult",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The file that was unzipped.",
                "name": "zipFile"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "The paths of the unzipped files in a newly created temporary directory. Includes entries \r    for any subdirectories created. An empty array if the <code>zipFile</code> could not be unzipped.",
                "name": "unzipFiles"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "The value that {@link File.runUnzip|runUnzip} was called with.",
                "name": "autoAdd"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if {@link File.runUnzip|runUnzip} was called with <code>isZip == true</code>,  \r    unless there is no FBX or OBJ file in the unzipped file(s) in which case the value is <code>false</code>.",
                "name": "isZip"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "The value that {@link File.runUnzip|runUnzip} was called with.",
                "name": "isBlocks"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "File",
        "longname": "File.unzipResult",
        "scope": "static"
    },
    {
        "description": "A keyboard key event.",
        "kind": "typedef",
        "name": "KeyEvent",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The Qt keyboard code of the key pressed. For a list of keyboard codes, see \r    <a href=\"http://doc.qt.io/qt-5/qt.html#Key-enum\">http://doc.qt.io/qt-5/qt.html#Key-enum</a>.",
                "name": "key"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "A string describing the key. For example, <code>\"a\"</code> for the \"A\" key if the Shift is not \r    pressed, <code>\"F1\"</code> for the F1 key, <code>\"SPACE\"</code> for the space bar.",
                "name": "text"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if a Shift key was pressed when the event was generated, otherwise \r    <code>false</code>.",
                "name": "isShifted"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if a meta key was pressed when the event was generated, otherwise\r    <code>false</code>. On Windows the \"meta\" key is the Windows key; on OSX it is the Control (Splat) key.",
                "name": "isMeta"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if a control key was pressed when the event was generated, otherwise\r    <code>false</code>. On Windows the \"control\" key is the Ctrl key; on OSX it is the Command key.",
                "name": "isControl"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if an Alt key was pressed when the event was generated, otherwise \r    <code>false</code>.",
                "name": "isAlt"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the key is on the numeric keypad, otherwise <code>false</code>.",
                "name": "isKeypad"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the event is a repeat for key that is being held down, otherwise \r    <code>false</code>.",
                "name": "isAutoRepeat"
            }
        ],
        "examples": [
            "<caption>Report the KeyEvent details for each key press.</caption>\rController.keyPressEvent.connect(function (event) {\r    print(JSON.stringify(event));\r});\r\n "
        ],
        "longname": "KeyEvent",
        "scope": "global"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>The <code>Mat4</code> API provides facilities for generating and using 4 x 4 matrices. These matrices are typically used to \rrepresent transforms (scale, rotate, and translate) that convert one coordinate system into another, or perspective \rtransforms that convert 3D points into screen coordinates.",
        "kind": "namespace",
        "name": "Mat4",
        "variation": "0",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "longname": "Mat4(0)",
        "scope": "global"
    },
    {
        "description": "Multiplies two matrices.",
        "kind": "function",
        "name": "multiply",
        "params": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The first matrix.",
                "name": "m1"
            },
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The second matrix.",
                "name": "m2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "<code>m1</code> multiplied with <code>m2</code>."
            }
        ],
        "memberof": "Mat4(0)",
        "longname": "Mat4(0).multiply",
        "scope": "static"
    },
    {
        "description": "Creates a matrix that represents a rotation and translation.",
        "kind": "function",
        "name": "createFromRotAndTrans",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation.",
                "name": "rot"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The translation.",
                "name": "trans"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The matrix that represents the rotation and translation."
            }
        ],
        "examples": [
            "<caption>Create a matrix with rotation and translation.</caption>\rvar rot = Quat.fromPitchYawRollDegrees(30, 45, 60);\rvar trans = { x: 10, y: 11, z: 12 };\rvar matrix = Mat4.createFromRotAndTrans(rot, trans);\rMat4.print(\"Matrix:\", matrix);\r// Matrix: dmat4x4((0.353553, 0.612372, -0.707107, 0.000000),\r//                 (-0.573223, 0.739199, 0.353553, 0.000000),\r//                 (0.739199, 0.280330, 0.612372, 0.000000),\r//                 (10.000000, 11.000000, 12.000000, 1.000000))"
        ],
        "memberof": "Mat4(0)",
        "longname": "Mat4(0).createFromRotAndTrans",
        "scope": "static"
    },
    {
        "description": "Creates a matrix that represents a scale, rotation, and translation.",
        "kind": "function",
        "name": "createFromScaleRotAndTrans",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The scale.",
                "name": "scale"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation.",
                "name": "rot"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The translation.",
                "name": "trans"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The matrix that represents the scale, rotation, and translation."
            }
        ],
        "examples": [
            "<caption>Create a matrix with scale, rotation, and translation.</caption>\rvar scale = Vec3.multiply(2, Vec3.ONE);\rvar rot = Quat.fromPitchYawRollDegrees(30, 45, 60);\rvar trans = { x: 10, y: 11, z: 12 };\rvar matrix = Mat4.createFromScaleRotAndTrans(scale, rot, trans);\rMat4.print(\"Matrix:\", matrix);\r// Matrix: dmat4x4((0.707107, 1.224745, -1.414214, 0.000000),\r//                 (-1.146447, 1.478398, 0.707107, 0.000000),\r//                 (1.478398, 0.560660, 1.224745, 0.000000),\r//                 (10.000000, 11.000000, 12.000000, 1.000000))"
        ],
        "memberof": "Mat4(0)",
        "longname": "Mat4(0).createFromScaleRotAndTrans",
        "scope": "static"
    },
    {
        "description": "Creates a matrix from columns of values.",
        "kind": "function",
        "name": "createFromColumns",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec4"
                    ]
                },
                "description": "Column 0 values.",
                "name": "col0"
            },
            {
                "type": {
                    "names": [
                        "Vec4"
                    ]
                },
                "description": "Column 1 values.",
                "name": "col1"
            },
            {
                "type": {
                    "names": [
                        "Vec4"
                    ]
                },
                "description": "Column 2 values.",
                "name": "col2"
            },
            {
                "type": {
                    "names": [
                        "Vec4"
                    ]
                },
                "description": "Column 3 valuse.",
                "name": "col3"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The matrix with the specified columns values."
            }
        ],
        "examples": [
            "<caption>Create a matrix from columns.</caption>\rvar col0 = { x: 0.707107, y: 1.224745, z: -1.414214, w: 0.0 };\rvar col1 = { x: -1.146447, y: 1.478398, z: 0.707107, w: 0.0 };\rvar col2 = { x: 1.478398, y: 0.560660, z: 1.224745, w: 0.0 };\rvar col3 = { x: 10.0, y: 11.0, z: 12.0, w: 1.0 };\rvar matrix = Mat4.createFromColumns(col0, col1, col2, col3);\rMat4.print(\"Matrix:\", matrix);\r//Matrix: dmat4x4((0.707107, 1.224745, -1.414214, 0.000000),\r//                (-1.146447, 1.478398, 0.707107, 0.000000),\r//                (1.478398, 0.560660, 1.224745, 0.000000),\r//                (10.000000, 11.000000, 12.000000, 1.000000))"
        ],
        "memberof": "Mat4(0)",
        "longname": "Mat4(0).createFromColumns",
        "scope": "static"
    },
    {
        "description": "Creates a matrix from an array of values.",
        "kind": "function",
        "name": "createFromArray",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<number>"
                    ]
                },
                "description": "The array of values, starting with column 0.",
                "name": "arr"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The matrix with the specified values."
            }
        ],
        "examples": [
            "<caption>Create a matrix from an array.</caption>\rvar arr = [\r    0.707107, 1.224745, -1.414214, 0.0,\r    -1.146447, 1.478398, 0.707107, 0.0,\r    1.478398, 0.560660, 1.224745, 0.0,\r    10.0, 11.0, 12.0, 1.00\r];\rvar matrix = Mat4.createFromArray(arr);\rMat4.print(\"Matrix:\", matrix);\r//Matrix: dmat4x4((0.707107, 1.224745, -1.414214, 0.000000),\r//                (-1.146447, 1.478398, 0.707107, 0.000000),\r//                (1.478398, 0.560660, 1.224745, 0.000000),\r//                (10.000000, 11.000000, 12.000000, 1.000000))"
        ],
        "memberof": "Mat4(0)",
        "longname": "Mat4(0).createFromArray",
        "scope": "static"
    },
    {
        "description": "Extracts the translation from a matrix.",
        "kind": "function",
        "name": "extractTranslation",
        "params": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The matrix.",
                "name": "m"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The translation contained in the matrix."
            }
        ],
        "examples": [
            "<caption>Extract the translation from a matrix.</caption>\rvar scale = Vec3.multiply(2, Vec3.ONE);\rvar rot = Quat.fromPitchYawRollDegrees(30, 45, 60);\rvar trans = { x: 10, y: 11, z: 12 };\rvar matrix = Mat4.createFromScaleRotAndTrans(scale, rot, trans);\r\rtrans = Mat4.extractTranslation(matrix);\rprint(\"Translation: \" + JSON.stringify(trans));\r// Translation: {\"x\":10,\"y\":11,\"z\":12}"
        ],
        "memberof": "Mat4(0)",
        "longname": "Mat4(0).extractTranslation",
        "scope": "static"
    },
    {
        "description": "Extracts the rotation from a matrix.",
        "kind": "function",
        "name": "extractRotation",
        "params": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The matrix.",
                "name": "m"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation contained in the matrix."
            }
        ],
        "examples": [
            "<caption>Extract the rotation from a matrix.</caption>\rvar scale = Vec3.multiply(2, Vec3.ONE);\rvar rot = Quat.fromPitchYawRollDegrees(30, 45, 60);\rvar trans = { x: 10, y: 11, z: 12 };\rvar matrix = Mat4.createFromScaleRotAndTrans(scale, rot, trans);\r\rrot = Mat4.extractRotation(matrix);\rprint(\"Rotation: \" + JSON.stringify(Quat.safeEulerAngles(rot)));\r// Rotation: {\"x\":29.999998092651367,\"y\":45.00000762939453,\"z\":60.000003814697266}"
        ],
        "memberof": "Mat4(0)",
        "longname": "Mat4(0).extractRotation",
        "scope": "static"
    },
    {
        "description": "Extracts the scale from a matrix.",
        "kind": "function",
        "name": "extractScale",
        "params": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The matrix.",
                "name": "m"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The scale contained in the matrix."
            }
        ],
        "examples": [
            "<caption>Extract the scale from a matrix.</caption>\rvar scale = Vec3.multiply(2, Vec3.ONE);\rvar rot = Quat.fromPitchYawRollDegrees(30, 45, 60);\rvar trans = { x: 10, y: 11, z: 12 };\rvar matrix = Mat4.createFromScaleRotAndTrans(scale, rot, trans);\r\rscale = Mat4.extractScale(matrix);\rprint(\"Scale: \" + JSON.stringify(scale));\r// Scale: {\"x\":1.9999998807907104,\"y\":1.9999998807907104,\"z\":1.9999998807907104}"
        ],
        "memberof": "Mat4(0)",
        "longname": "Mat4(0).extractScale",
        "scope": "static"
    },
    {
        "description": "Transforms a point into a new coordinate system: the point value is scaled, rotated, and translated.",
        "kind": "function",
        "name": "transformPoint",
        "params": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The transform to the new coordinate system.",
                "name": "m"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The point to transform.",
                "name": "point"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The point in the new coordinate system."
            }
        ],
        "examples": [
            "<caption>Transform a point.</caption>\rvar scale = Vec3.multiply(2, Vec3.ONE);\rvar rot = Quat.fromPitchYawRollDegrees(0, 45, 0);\rvar trans = { x: 0, y: 10, z: 0 };\rvar matrix = Mat4.createFromScaleRotAndTrans(scale, rot, trans);\r\rvar point = { x: 1, y: 1, z: 1 };\rvar transformedPoint = Mat4.transformPoint(matrix, point);\rprint(\"Transformed point: \" + JSON.stringify(transformedPoint));\r// Transformed point: { \"x\": 2.8284270763397217, \"y\": 12, \"z\": -2.384185791015625e-7 }"
        ],
        "memberof": "Mat4(0)",
        "longname": "Mat4(0).transformPoint",
        "scope": "static"
    },
    {
        "description": "Transforms a vector into a new coordinate system: the vector is scaled and rotated.",
        "kind": "function",
        "name": "transformVector",
        "params": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The transform to the new coordinate system.",
                "name": "m"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The vector to transform.",
                "name": "vector"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The vector in the new coordinate system."
            }
        ],
        "examples": [
            "<caption>Transform a vector.</caption>\rvar scale = Vec3.multiply(2, Vec3.ONE);\rvar rot = Quat.fromPitchYawRollDegrees(0, 45, 0);\rvar trans = { x: 0, y: 10, z: 0 };\rvar matrix = Mat4.createFromScaleRotAndTrans(scale, rot, trans);\r\rvar vector = { x: 1, y: 1, z: 1 };\rvar transformedVector = Mat4.transformVector(matrix, vector);\rprint(\"Transformed vector: \" + JSON.stringify(transformedVector));\r// Transformed vector: { \"x\": 2.8284270763397217, \"y\": 2, \"z\": -2.384185791015625e-7 }"
        ],
        "memberof": "Mat4(0)",
        "longname": "Mat4(0).transformVector",
        "scope": "static"
    },
    {
        "description": "Calculates the inverse of a matrix.",
        "kind": "function",
        "name": "inverse",
        "params": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The matrix.",
                "name": "m"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The inverse of the matrix."
            }
        ],
        "examples": [
            "<caption>A matrix multiplied with its inverse is the unit matrix.</caption>\rvar scale = Vec3.multiply(2, Vec3.ONE);\rvar rot = Quat.fromPitchYawRollDegrees(30, 45, 60);\rvar trans = { x: 10, y: 11, z: 12 };\rvar matrix = Mat4.createFromScaleRotAndTrans(scale, rot, trans);\rvar inverse = Mat4.inverse(matrix);\rvar multiplied = Mat4.multiply(matrix, inverse);\rMat4.print(\"Multiplied:\", multiplied);\r//Multiplied: dmat4x4((1.000000, 0.000000, 0.000000, 0.000000),\r//                    (0.000000, 1.000000, -0.000000, 0.000000),\r//                    (0.000000, 0.000000, 1.000000, 0.000000),\r//                    (0.000000, 0.000000, 0.000001, 1.000000))"
        ],
        "memberof": "Mat4(0)",
        "longname": "Mat4(0).inverse",
        "scope": "static"
    },
    {
        "description": "Gets the \"forward\" direction that the camera would face if its orientation was set to the rotation contained in a \rmatrix. The High Fidelity camera has axes x = right, y = up, -z = forward. \r<p>Synonym for {@link Mat4(0).getForward|getForward}.</p>",
        "kind": "function",
        "name": "getFront",
        "params": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The matrix.",
                "name": "m"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The negative z-axis rotated by orientation."
            }
        ],
        "memberof": "Mat4(0)",
        "longname": "Mat4(0).getFront",
        "scope": "static"
    },
    {
        "description": "Gets the \"forward\" direction that the camera would face if its orientation was set to the rotation contained in a\rmatrix. The High Fidelity camera has axes x = right, y = up, -z = forward.",
        "kind": "function",
        "name": "getForward",
        "params": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The matrix.",
                "name": "m"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The negative z-axis rotated by the rotation in the matrix."
            }
        ],
        "examples": [
            "<caption>Demonstrate that the \"forward\" direction is the negative z-axis.</caption>\rvar rot = Quat.IDENTITY;\rvar trans = Vec3.ZERO;\rvar matrix = Mat4.createFromRotAndTrans(rot, trans);\rvar forward = Mat4.getForward(matrix);\rprint(\"Forward: \" + JSON.stringify(forward));\r// Forward: {\"x\":0,\"y\":0,\"z\":-1}"
        ],
        "memberof": "Mat4(0)",
        "longname": "Mat4(0).getForward",
        "scope": "static"
    },
    {
        "description": "Gets the \"right\" direction that the camera would have if its orientation was set to the rotation contained in a matrix. \rThe High Fidelity camera has axes x = right, y = up, -z = forward.",
        "kind": "function",
        "name": "getRight",
        "params": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The matrix.",
                "name": "m"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The x-axis rotated by the rotation in the matrix."
            }
        ],
        "memberof": "Mat4(0)",
        "longname": "Mat4(0).getRight",
        "scope": "static"
    },
    {
        "description": "Gets the \"up\" direction that the camera would have if its orientation was set to the rotation contained in a matrix. The \rHigh Fidelity camera has axes x = right, y = up, -z = forward.",
        "kind": "function",
        "name": "getUp",
        "params": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The matrix.",
                "name": "m"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The y-axis rotated by the rotation in the matrix."
            }
        ],
        "memberof": "Mat4(0)",
        "longname": "Mat4(0).getUp",
        "scope": "static"
    },
    {
        "description": "Prints a matrix to the program log as a label followed by the matrix's values.",
        "kind": "function",
        "name": "print",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The label to print.",
                "name": "label"
            },
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The matrix to print.",
                "name": "m"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> to transpose the matrix before printing (so that it prints the \r    matrix's rows), <code>false</code> to not transpose the matrix (so that it prints the matrix's columns).",
                "name": "transpose"
            }
        ],
        "examples": [
            "<caption>Two ways of printing a label and matrix value.</caption>\rvar scale = Vec3.multiply(2, Vec3.ONE);\rvar rot = Quat.fromPitchYawRollDegrees(30, 45, 60);\rvar trans = { x: 10, y: 11, z: 12 };\rvar matrix = Mat4.createFromScaleRotAndTrans(scale, rot, trans);\r\rMat4.print(\"Matrix:\", matrix);\r// Matrix: dmat4x4((0.707107, 1.224745, -1.414214, 0.000000),\r//                 (-1.146447, 1.478398, 0.707107, 0.000000),\r//                 (1.478398, 0.560660, 1.224745, 0.000000),\r//                 (10.000000, 11.000000, 12.000000, 1.000000))\r\rprint(\"Matrix: \" + JSON.stringify(matrix));\r// Matrix: {\"r0c0\":0.7071067094802856,\"r1c0\":1.2247446775436401,\"r2c0\":-1.4142136573791504,\"r3c0\":0,\r//          \"r0c1\": -1.1464465856552124, \"r1c1\": 1.4783978462219238, \"r2c1\": 0.7071066498756409, \"r3c1\": 0,\r//          \"r0c2\": 1.4783978462219238, \"r1c2\": 0.5606603026390076, \"r2c2\": 1.2247447967529297, \"r3c2\": 0,\r//          \"r0c3\": 10, \"r1c3\": 11, \"r2c3\": 12, \"r3c3\": 1}\r\n     "
        ],
        "memberof": "Mat4(0)",
        "longname": "Mat4(0).print",
        "scope": "static"
    },
    {
        "description": "A set of properties that can be passed to {@link Menu.addMenuItem} to create a new menu item.\r\rIf none of the properties, <code>position</code>, <code>beforeItem</code>, <code>afterItem</code>, or <code>grouping</code> \rare specified, the menu item will be placed at the end of the menu.",
        "kind": "typedef",
        "name": "MenuItemProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu. Nested menus can be described using the \">\" character.",
                "name": "menuName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu item.",
                "name": "menuItemName"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether or not the menu item is checkable.",
                "name": "isCheckable"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether or not the menu item is checked.",
                "name": "isChecked"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether or not the menu item is a separator.",
                "name": "isSeparator"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "A shortcut key that triggers the menu item.",
                "name": "shortcutKey"
            },
            {
                "type": {
                    "names": [
                        "KeyEvent"
                    ]
                },
                "optional": true,
                "description": "A {@link KeyEvent} that specifies a key that triggers the menu item.",
                "name": "shortcutKeyEvent"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "description": "The position to place the new menu item. An integer number with <code>0</code> being the first\r    menu item.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "The name of the menu item to place this menu item before.",
                "name": "beforeItem"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "The name of the menu item to place this menu item after.",
                "name": "afterItem"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "The name of grouping to add this menu item to.",
                "name": "grouping"
            }
        ],
        "memberof": "Menu",
        "longname": "Menu.MenuItemProperties",
        "scope": "static"
    },
    {
        "description": "A controller mouse movement or button event.",
        "kind": "typedef",
        "name": "MouseEvent",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer x-coordinate of the event on the Interface window or HMD HUD.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer y-coordinate of the event on the Interface window or HMD HUD.",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<code>\"LEFT\"</code>, <code>\"MIDDLE\"</code>, or <code>\"RIGHT\"</code> if a button press or release \r    caused the event, otherwise <code>\"NONE\"</code>.",
                "name": "button"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the left button was pressed when the event was generated, otherwise \r    <code>false</code>.",
                "name": "isLeftButton"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the middle button was pressed when the event was generated, \r    otherwise <code>false</code>.",
                "name": "isMiddleButton"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the right button was pressed when the event was generated, \r    otherwise <code>false</code>.",
                "name": "isRightButton"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the Shift key was pressed when the event was generated, otherwise\r    <code>false</code>.",
                "name": "isShifted"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the \"meta\" key was pressed when the event was generated, otherwise\r    <code>false</code>. On Windows the \"meta\" key is the Windows key; on OSX it is the Control (Splat) key.",
                "name": "isMeta"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the \"control\" key was pressed when the event was generated, otherwise\r    <code>false</code>. On Windows the \"control\" key is the Ctrl key; on OSX it is the Command key.",
                "name": "isControl"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the Alt key was pressed when the event was generated, otherwise\r    <code>false</code>.",
                "name": "isAlt"
            }
        ],
        "examples": [
            "<caption>Report the MouseEvent details for each mouse move.</caption>\rController.mouseMoveEvent.connect(function (event) {\r    print(JSON.stringify(event));\r});\r\n "
        ],
        "longname": "MouseEvent",
        "scope": "global"
    },
    {
        "description": "A quaternion value. See also the {@link Quat(0)|Quat} API.",
        "kind": "typedef",
        "name": "Quat",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Imaginary component i.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Imaginary component j.",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Imaginary component k.",
                "name": "z"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Real component.",
                "name": "w"
            }
        ],
        "longname": "Quat",
        "scope": "global"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>The <code>Quat</code> API provides facilities for generating and manipulating quaternions.\rQuaternions should be used in preference to Euler angles wherever possible because quaternions don't suffer from the problem\rof gimbal lock.",
        "kind": "namespace",
        "name": "Quat",
        "variation": "0",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "<code>{ x: 0, y: 0, z: 0, w: 1 }</code> : The identity rotation, i.e., no rotation.\r    <em>Read-only.</em>",
                "name": "IDENTITY"
            }
        ],
        "examples": [
            "<caption>Print the <code>IDENTITY</code> value.</caption>\rprint(JSON.stringify(Quat.IDENTITY)); // { x: 0, y: 0, z: 0, w: 1 }\rprint(JSON.stringify(Quat.safeEulerAngles(Quat.IDENTITY))); // { x: 0, y: 0, z: 0 }"
        ],
        "longname": "Quat(0)",
        "scope": "global"
    },
    {
        "description": "Multiplies two quaternions.",
        "kind": "function",
        "name": "multiply",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The first quaternion.",
                "name": "q1"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The second quaternion.",
                "name": "q2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "<code>q1</code> multiplied with <code>q2</code>."
            }
        ],
        "examples": [
            "<caption>Calculate the orientation of your avatar's right hand in world coordinates.</caption>\rvar handController = Controller.Standard.RightHand;\rvar handPose = Controller.getPoseValue(handController);\rif (handPose.valid) {\r    var handOrientation = Quat.multiply(MyAvatar.orientation, handPose.rotation);\r}"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).multiply",
        "scope": "static"
    },
    {
        "description": "Normalizes a quaternion.",
        "kind": "function",
        "name": "normalize",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The quaternion to normalize.",
                "name": "q"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "<code>q</code> normalized to have unit length."
            }
        ],
        "examples": [
            "<caption>Normalize a repeated delta rotation so that maths rounding errors don't accumulate.</caption>\rvar deltaRotation = Quat.fromPitchYawRollDegrees(0, 0.1, 0);\rvar currentRotation = Quat.ZERO;\rwhile (Quat.safeEulerAngles(currentRotation).y < 180) {\r    currentRotation = Quat.multiply(deltaRotation, currentRotation);\r    currentRotation = Quat.normalize(currentRotation);\r    // Use currentRotatation for something.\r}"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).normalize",
        "scope": "static"
    },
    {
        "description": "Calculates the conjugate of a quaternion. For a unit quaternion, its conjugate is the same as its \r{@link Quat(0).inverse|Quat.inverse}.",
        "kind": "function",
        "name": "conjugate",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The quaternion to conjugate.",
                "name": "q"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The conjugate of <code>q</code>."
            }
        ],
        "examples": [
            "<caption>A unit quaternion multiplied by its conjugate is a zero rotation.</caption>\rvar quaternion = Quat.fromPitchYawRollDegrees(10, 20, 30);\rQuat.print(\"quaternion\", quaternion, true); // dvec3(10.000000, 20.000004, 30.000004)\rvar conjugate = Quat.conjugate(quaternion);\rQuat.print(\"conjugate\", conjugate, true); // dvec3(1.116056, -22.242186, -28.451778)\rvar identity = Quat.multiply(conjugate, quaternion);\rQuat.print(\"identity\", identity, true); // dvec3(0.000000, 0.000000, 0.000000)"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).conjugate",
        "scope": "static"
    },
    {
        "description": "Calculates a camera orientation given an eye position, point of interest, and \"up\" direction. The camera's negative \rz-axis is the forward direction. The result has zero roll about its forward direction with respect to the given \"up\" \rdirection.",
        "kind": "function",
        "name": "lookAt",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The eye position.",
                "name": "eye"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The point to look at.",
                "name": "target"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The \"up\" direction.",
                "name": "up"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion that orients the negative z-axis to point along the eye-to-target vector and the x-axis to\rbe the cross product of the eye-to-target and up vectors."
            }
        ],
        "examples": [
            "<caption>Rotate your view in independent mode to look at the world origin upside down.</caption>\rCamera.mode = \"independent\";\rCamera.orientation = Quat.lookAt(Camera.position, Vec3.ZERO, Vec3.UNIT_NEG_Y);"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).lookAt",
        "scope": "static"
    },
    {
        "description": "Calculates a camera orientation given an eye position and point of interest. The camera's negative z-axis is the forward \rdirection. The result has zero roll about its forward direction.",
        "kind": "function",
        "name": "lookAtSimple",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The eye position.",
                "name": "eye"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The point to look at.",
                "name": "target"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion that orients the negative z-axis to point along the eye-to-target vector and the x-axis to be\r    the cross product of the eye-to-target and an \"up\" vector. The \"up\" vector is the y-axis unless the eye-to-target\r    vector is nearly aligned with it (i.e., looking near vertically up or down), in which case the x-axis is used as the\r    \"up\" vector."
            }
        ],
        "examples": [
            "<caption>Rotate your view in independent mode to look at the world origin.</caption>\rCamera.mode = \"independent\";\rCamera.orientation = Quat.lookAtSimple(Camera.position, Vec3.ZERO);"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).lookAtSimple",
        "scope": "static"
    },
    {
        "description": "Calculates the shortest rotation from a first vector onto a second.",
        "kind": "function",
        "name": "rotationBetween",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The first vector.",
                "name": "v1"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The second vector.",
                "name": "v2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation from <code>v1</code> onto <code>v2</code>."
            }
        ],
        "examples": [
            "<caption>Apply a change in velocity to an entity and rotate it to face the direction it's travelling.</caption>\rvar newVelocity = Vec3.sum(entityVelocity, deltaVelocity);\rvar properties = { velocity: newVelocity };\rif (Vec3.length(newVelocity) > 0.001) {\r    properties.rotation = Quat.rotationBetween(entityVelocity, newVelocity);\r}\rEntities.editEntity(entityID, properties);\rentityVelocity = newVelocity;"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).rotationBetween",
        "scope": "static"
    },
    {
        "description": "Generates a quaternion from a {@link Vec3} of Euler angles in degrees.",
        "kind": "function",
        "name": "fromVec3Degrees",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "A vector of three Euler angles in degrees, the angles being the rotations about the x, y, and z\r    axes.",
                "name": "vector"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion created from the Euler angles in <code>vector</code>."
            }
        ],
        "examples": [
            "<caption>Zero out pitch and roll from an orientation.</caption>\rvar eulerAngles = Quat.safeEulerAngles(orientation);\reulerAngles.x = 0;\reulerAngles.z = 0;\rvar newOrientation = Quat.fromVec3Degrees(eulerAngles);"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).fromVec3Degrees",
        "scope": "static"
    },
    {
        "description": "Generates a quaternion from a {@link Vec3} of Euler angles in radians.",
        "kind": "function",
        "name": "fromVec3Radians",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "A vector of three Euler angles in radians, the angles being the rotations about the x, y, and z\r    axes.",
                "name": "vector"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion created using the Euler angles in <code>vector</code>."
            }
        ],
        "examples": [
            "<caption>Create a rotation of 180 degrees about the y axis.</caption>\rvar rotation = Quat.fromVec3Radians({ x: 0, y: Math.PI, z: 0 });"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).fromVec3Radians",
        "scope": "static"
    },
    {
        "description": "Generates a quaternion from pitch, yaw, and roll values in degrees.",
        "kind": "function",
        "name": "fromPitchYawRollDegrees",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The pitch angle in degrees.",
                "name": "pitch"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The yaw angle in degrees.",
                "name": "yaw"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The roll angle in degrees.",
                "name": "roll"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion created using the <code>pitch</code>, <code>yaw</code>, and <code>roll</code> Euler angles."
            }
        ],
        "examples": [
            "<caption>Create a rotation of 180 degrees about the y axis.</caption>\rvar rotation = Quat.fromPitchYawRollDgrees(0, 180, 0 );"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).fromPitchYawRollDegrees",
        "scope": "static"
    },
    {
        "description": "Generates a quaternion from pitch, yaw, and roll values in radians.",
        "kind": "function",
        "name": "fromPitchYawRollRadians",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The pitch angle in radians.",
                "name": "pitch"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The yaw angle in radians.",
                "name": "yaw"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The roll angle in radians.",
                "name": "roll"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion created from the <code>pitch</code>, <code>yaw</code>, and <code>roll</code> Euler angles."
            }
        ],
        "examples": [
            "<caption>Create a rotation of 180 degrees about the y axis.</caption>\rvar rotation = Quat.fromPitchYawRollRadians(0, Math.PI, 0);"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).fromPitchYawRollRadians",
        "scope": "static"
    },
    {
        "description": "Calculates the inverse of a quaternion. For a unit quaternion, its inverse is the same as its\r    {@link Quat(0).conjugate|Quat.conjugate}.",
        "kind": "function",
        "name": "inverse",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The quaternion.",
                "name": "q"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The inverse of <code>q</code>."
            }
        ],
        "examples": [
            "<caption>A quaternion multiplied by its inverse is a zero rotation.</caption>\rvar quaternion = Quat.fromPitchYawRollDegrees(10, 20, 30);\rQuat.print(\"quaternion\", quaternion, true); // dvec3(10.000000, 20.000004, 30.000004)\rvar inverse = Quat.invserse(quaternion);\rQuat.print(\"inverse\", inverse, true); // dvec3(1.116056, -22.242186, -28.451778)\rvar identity = Quat.multiply(inverse, quaternion);\rQuat.print(\"identity\", identity, true); // dvec3(0.000000, 0.000000, 0.000000)"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).inverse",
        "scope": "static"
    },
    {
        "description": "Gets the \"front\" direction that the camera would face if its orientation was set to the quaternion value.\rThis is a synonym for {@link Quat(0).getForward|Quat.getForward}.\rThe High Fidelity camera has axes <code>x</code> = right, <code>y</code> = up, <code>-z</code> = forward.",
        "kind": "function",
        "name": "getFront",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion representing an orientation.",
                "name": "orientation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The negative z-axis rotated by <code>orientation</code>."
            }
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).getFront",
        "scope": "static"
    },
    {
        "description": "Gets the \"forward\" direction that the camera would face if its orientation was set to the quaternion value.\rThis is a synonym for {@link Quat(0).getFront|Quat.getFront}.\rThe High Fidelity camera has axes <code>x</code> = right, <code>y</code> = up, <code>-z</code> = forward.",
        "kind": "function",
        "name": "getForward",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion representing an orientation.",
                "name": "orientation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The negative z-axis rotated by <code>orientation</code>."
            }
        ],
        "examples": [
            "<caption>Demonstrate that the \"forward\" vector is for the negative z-axis.</caption>\rvar forward = Quat.getForward(Quat.IDENTITY);\rprint(JSON.stringify(forward)); // {\"x\":0,\"y\":0,\"z\":-1}"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).getForward",
        "scope": "static"
    },
    {
        "description": "Gets the \"right\" direction that the camera would have if its orientation was set to the quaternion value.\rThe High Fidelity camera has axes <code>x</code> = right, <code>y</code> = up, <code>-z</code> = forward.",
        "kind": "function",
        "name": "getRight",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion representing an orientation.",
                "name": "orientation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The x-axis rotated by <code>orientation</code>."
            }
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).getRight",
        "scope": "static"
    },
    {
        "description": "Gets the \"up\" direction that the camera would have if its orientation was set to the quaternion value.\rThe High Fidelity camera has axes <code>x</code> = right, <code>y</code> = up, <code>-z</code> = forward.",
        "kind": "function",
        "name": "getUp",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion representing an orientation.",
                "name": "orientation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The y-axis rotated by <code>orientation</code>."
            }
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).getUp",
        "scope": "static"
    },
    {
        "description": "Calculates the Euler angles for the quaternion, in degrees. (The \"safe\" in the name signifies that the angle results \rwill not be garbage even when the rotation is particularly difficult to decompose with pitches around +/-90 degrees.)",
        "kind": "function",
        "name": "safeEulerAngles",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion representing an orientation.",
                "name": "orientation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "A {@link Vec3} of Euler angles for the <code>orientation</code>, in degrees, the angles being the \rrotations about the x, y, and z axes."
            }
        ],
        "examples": [
            "<caption>Report the camera yaw.</caption>\rvar eulerAngles = Quat.safeEulerAngles(Camera.orientation);\rprint(\"Camera yaw: \" + eulerAngles.y);"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).safeEulerAngles",
        "scope": "static"
    },
    {
        "description": "Generates a quaternion given an angle to rotate through and an axis to rotate about.",
        "kind": "function",
        "name": "angleAxis",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The angle to rotate through, in degrees.",
                "name": "angle"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The unit axis to rotate about.",
                "name": "axis"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion that is a rotation through <code>angle</code> degrees about the <code>axis</code>. \r<strong>WARNING:</strong> This value is in degrees whereas the value returned by {@link Quat(0).angle|Quat.angle} is\rin radians."
            }
        ],
        "examples": [
            "<caption>Calculate a rotation of 90 degrees about the direction your camera is looking.</caption>\rvar rotation = Quat.angleAxis(90, Quat.getForward(Camera.orientation));"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).angleAxis",
        "scope": "static"
    },
    {
        "description": "Gets the rotation axis for a quaternion.",
        "kind": "function",
        "name": "axis",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The quaternion.",
                "name": "q"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The normalized rotation axis for <code>q</code>."
            }
        ],
        "examples": [
            "<caption>Get the rotation axis of a quaternion.</caption>\rvar forward = Quat.getForward(Camera.orientation);\rvar rotation = Quat.angleAxis(90, forward);\rvar axis = Quat.axis(rotation);\rprint(\"Forward: \" + JSON.stringify(forward));\rprint(\"Axis: \" + JSON.stringify(axis)); // Same value as forward."
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).axis",
        "scope": "static"
    },
    {
        "description": "Gets the rotation angle for a quaternion.",
        "kind": "function",
        "name": "angle",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The quaternion.",
                "name": "q"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The rotation angle for <code>q</code>, in radians. <strong>WARNING:</strong> This value is in radians \rwhereas the value used by {@link Quat(0).angleAxis|Quat.angleAxis} is in degrees."
            }
        ],
        "examples": [
            "<caption>Get the rotation angle of a quaternion.</caption>\rvar forward = Quat.getForward(Camera.orientation);\rvar rotation = Quat.angleAxis(90, forward);\rvar angle = Quat.angle(rotation);\rprint(\"Angle: \" + angle * 180 / Math.PI);  // 90 degrees."
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).angle",
        "scope": "static"
    },
    {
        "description": "Computes a spherical linear interpolation between two rotations, safely handling two rotations that are very similar.\rSee also, {@link Quat(0).slerp|Quat.slerp}.",
        "kind": "function",
        "name": "mix",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The beginning rotation.",
                "name": "q1"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The ending rotation.",
                "name": "q2"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The mixture coefficient between <code>0.0</code> and <code>1.0</code>. Specifies the proportion\r    of <code>q2</code>'s value to return in favor of <code>q1</code>'s value. A value of <code>0.0</code> returns \r    <code>q1</code>'s value; <code>1.0</code> returns <code>q2s</code>'s value.",
                "name": "alpha"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A spherical linear interpolation between rotations <code>q1</code> and <code>q2</code>."
            }
        ],
        "examples": [
            "<caption>Animate between one rotation and another.</caption>\rvar dt = amountOfTimeThatHasPassed;\rvar mixFactor = amountOfTimeThatHasPassed / TIME_TO_COMPLETE;\rif (mixFactor > 1) {\r    mixFactor = 1;\r}\rvar newRotation = Quat.mix(startRotation, endRotation, mixFactor);"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).mix",
        "scope": "static"
    },
    {
        "description": "Computes a spherical linear interpolation between two rotations, for rotations that are not very similar.\rSee also, {@link Quat(0).mix|Quat.mix}.",
        "kind": "function",
        "name": "slerp",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The beginning rotation.",
                "name": "q1"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The ending rotation.",
                "name": "q2"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The mixture coefficient between <code>0.0</code> and <code>1.0</code>. Specifies the proportion\r    of <code>q2</code>'s value to return in favor of <code>q1</code>'s value. A value of <code>0.0</code> returns\r    <code>q1</code>'s value; <code>1.0</code> returns <code>q2s</code>'s value.",
                "name": "alpha"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A spherical linear interpolation between rotations <code>q1</code> and <code>q2</code>."
            }
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).slerp",
        "scope": "static"
    },
    {
        "description": "Computes a spherical quadrangle interpolation between two rotations along a path oriented toward two other rotations.\rEquivalent to: <code>Quat.slerp(Quat.slerp(q1, q2, alpha), Quat.slerp(s1, s2, alpha), 2 * alpha * (1.0 - alpha))</code>.",
        "kind": "function",
        "name": "squad",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "Initial rotation.",
                "name": "q1"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "Final rotation.",
                "name": "q2"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "First control point.",
                "name": "s1"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "Second control point.",
                "name": "s2"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The mixture coefficient between <code>0.0</code> and <code>1.0</code>. A value of \r    <code>0.0</code> returns <code>q1</code>'s value; <code>1.0</code> returns <code>q2s</code>'s value.",
                "name": "alpha"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A spherical quadrangle interpolation between rotations <code>q1</code> and <code>q2</code> using control\r    points <code>s1</code> and <code>s2</code>."
            }
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).squad",
        "scope": "static"
    },
    {
        "description": "Calculates the dot product of two quaternions. The closer the quaternions are to each other the more non-zero the value \ris (either positive or negative). Identical unit rotations have a dot product of +/-1.",
        "kind": "function",
        "name": "dot",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The first quaternion.",
                "name": "q1"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The second quaternion.",
                "name": "q2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The dot product of <code>q1</code> and <code>q2</code>."
            }
        ],
        "examples": [
            "<caption>Testing unit quaternions for equality.</caption>\rvar q1 = Quat.fromPitchYawRollDegrees(0, 0, 0);\rvar q2 = Quat.fromPitchYawRollDegrees(0, 0, 0);\rprint(Quat.equal(q1, q2)); // true\rvar q3 = Quat.fromPitchYawRollDegrees(0, 0, 359.95);\rprint(Quat.equal(q1, q3)); // false\r\rvar dot = Quat.dot(q1, q3);\rprint(dot); // -0.9999999403953552\rvar equal = Math.abs(1 - Math.abs(dot)) < 0.000001;\rprint(equal); // true"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).dot",
        "scope": "static"
    },
    {
        "description": "Prints to the program log a text label followed by a quaternion's pitch, yaw, and roll Euler angles.",
        "kind": "function",
        "name": "print",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The label to print.",
                "name": "label"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The quaternion to print.",
                "name": "q"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If <code>true</code> the angle values are printed in degrees, otherwise they are\r    printed in radians.",
                "name": "asDegrees"
            }
        ],
        "examples": [
            "<caption>Two ways of printing a label plus a quaternion's Euler angles.</caption>\rvar quaternion = Quat.fromPitchYawRollDegrees(0, 45, 0);\r\r// Quaternion: dvec3(0.000000, 45.000004, 0.000000)\rQuat.print(\"Quaternion:\", quaternion,  true);\r\r// Quaternion: {\"x\":0,\"y\":45.000003814697266,\"z\":0}\rprint(\"Quaternion: \" + JSON.stringify(Quat.safeEulerAngles(quaternion)));"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).print",
        "scope": "static"
    },
    {
        "description": "Tests whether two quaternions are equal.\r<p><strong>Note:</strong> The quaternions must be exactly equal in order for <code>true</code> to be returned; it is \roften better to use {@link Quat(0).dot|Quat.dot} and test for closeness to +/-1.</p>",
        "kind": "function",
        "name": "equal",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The first quaternion.",
                "name": "q1"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The second quaternion.",
                "name": "q2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the quaternions are equal, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Testing unit quaternions for equality.</caption>\rvar q1 = Quat.fromPitchYawRollDegrees(0, 0, 0);\rvar q2 = Quat.fromPitchYawRollDegrees(0, 0, 0);\rprint(Quat.equal(q1, q2)); // true\rvar q3 = Quat.fromPitchYawRollDegrees(0, 0, 359.95);\rprint(Quat.equal(q1, q3)); // false\r\rvar dot = Quat.dot(q1, q3);\rprint(dot); // -0.9999999403953552\rvar equal = Math.abs(1 - Math.abs(dot)) < 0.000001;\rprint(equal); // true"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).equal",
        "scope": "static"
    },
    {
        "description": "Cancels out the roll and pitch component of a quaternion so that its completely horizontal with a yaw pointing in the \rgiven quaternion's direction.",
        "kind": "function",
        "name": "cancelOutRollAndPitch",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion representing an orientation.",
                "name": "orientation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "<code>orientation</code> with its roll and pitch canceled out."
            }
        ],
        "examples": [
            "<caption>Two ways of calculating a camera orientation in the x-z plane with a yaw pointing in the direction of\r    a given quaternion.</caption>\rvar quaternion = Quat.fromPitchYawRollDegrees(10, 20, 30);\r\rvar noRollOrPitch = Quat.cancelOutRollAndPitch(quaternion);\rQuat.print(\"\", noRollOrPitch, true); // dvec3(0.000000, 22.245995, 0.000000)\r\rvar front = Quat.getFront(quaternion);\rvar lookAt = Quat.lookAtSimple(Vec3.ZERO, { x: front.x, y: 0, z: front.z });\rQuat.print(\"\", lookAt, true); // dvec3(0.000000, 22.245996, 0.000000)"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).cancelOutRollAndPitch",
        "scope": "static"
    },
    {
        "description": "Cancels out the roll component of a quaternion so that its horizontal axis is level.",
        "kind": "function",
        "name": "cancelOutRoll",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion representing an orientation.",
                "name": "orientation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "<code>orientation</code> with its roll canceled out."
            }
        ],
        "examples": [
            "<caption>Two ways of calculating a camera orientation that points in the direction of a given quaternion but\r    keeps the camera's horizontal axis level.</caption>\rvar quaternion = Quat.fromPitchYawRollDegrees(10, 20, 30);\r\rvar noRoll = Quat.cancelOutRoll(quaternion);\rQuat.print(\"\", noRoll, true); // dvec3(-1.033004, 22.245996, -0.000000)\r\rvar front = Quat.getFront(quaternion);\rvar lookAt = Quat.lookAtSimple(Vec3.ZERO, front);\rQuat.print(\"\", lookAt, true); // dvec3(-1.033004, 22.245996, -0.000000)\r\n    "
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).cancelOutRoll",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Assignment Client Scripts</p>The <code>Recording</code> API makes and plays back recordings of voice and avatar movements. Playback may be done on a \ruser's avatar or an assignment client agent (see the {@link Agent} API).",
        "kind": "namespace",
        "name": "Recording",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "hifiAssignmentClient": true,
        "longname": "Recording",
        "scope": "global"
    },
    {
        "description": "Called when a {@link Recording.loadRecording} call is complete.",
        "kind": "typedef",
        "name": "loadRecordingCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the recording has successfully been loaded, <code>false</code> if it \r    hasn't.",
                "name": "success"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the recording that was requested to be loaded.",
                "name": "url"
            }
        ],
        "memberof": "Recording",
        "longname": "Recording~loadRecordingCallback",
        "scope": "inner"
    },
    {
        "description": "Loads a recording so that it is ready for playing.",
        "kind": "function",
        "name": "loadRecording",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The ATP, HTTP, or file system URL of the recording to load.",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "Recording~loadRecordingCallback"
                    ]
                },
                "optional": true,
                "defaultvalue": null,
                "description": "The function to call upon completion.",
                "name": "callback"
            }
        ],
        "examples": [
            "<caption>Load and play back a recording from the asset server.</caption>\rvar assetPath = Window.browseAssets();\rprint(\"Asset path: \" + assetPath);\r\rif (assetPath.slice(-4) === \".hfr\") {\r    Recording.loadRecording(\"atp:\" + assetPath, function (success, url) {\r        if (!success) {\r            print(\"Error loading recording.\");\r            return;\r        }\r        Recording.startPlaying();\r    });\r}"
        ],
        "memberof": "Recording",
        "longname": "Recording.loadRecording",
        "scope": "static"
    },
    {
        "description": "Starts playing the recording currently loaded or paused.",
        "kind": "function",
        "name": "startPlaying",
        "memberof": "Recording",
        "longname": "Recording.startPlaying",
        "scope": "static"
    },
    {
        "description": "Pauses playback of the recording currently playing. Use {@link Recording.startPlaying|startPlaying} to resume playback \ror {@link Recording.stopPlaying|stopPlaying} to stop playback.",
        "kind": "function",
        "name": "pausePlayer",
        "memberof": "Recording",
        "longname": "Recording.pausePlayer",
        "scope": "static"
    },
    {
        "description": "Stops playing the recording currently playing or paused.",
        "kind": "function",
        "name": "stopPlaying",
        "memberof": "Recording",
        "longname": "Recording.stopPlaying",
        "scope": "static"
    },
    {
        "description": "Gets whether a recording is currently playing.",
        "kind": "function",
        "name": "isPlaying",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if a recording is being played, <code>false</code> if one isn't."
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.isPlaying",
        "scope": "static"
    },
    {
        "description": "Gets whether recording playback is currently paused.",
        "kind": "function",
        "name": "isPaused",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if recording playback is currently paused, <code>false</code> if it isn't."
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.isPaused",
        "scope": "static"
    },
    {
        "description": "Gets the current playback time in the loaded recording, in seconds.",
        "kind": "function",
        "name": "playerElapsed",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The current playback time in the loaded recording, in seconds."
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.playerElapsed",
        "scope": "static"
    },
    {
        "description": "Gets the length of the loaded recording, in seconds.",
        "kind": "function",
        "name": "playerLength",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The length of the recording currently loaded, in seconds"
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.playerLength",
        "scope": "static"
    },
    {
        "description": "Sets the playback audio volume.",
        "kind": "function",
        "name": "setPlayerVolume",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The playback audio volume, range <code>0.0</code> &ndash; <code>1.0</code>.",
                "name": "volume"
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.setPlayerVolume",
        "scope": "static"
    },
    {
        "description": "<p class=\"important\">Not implemented: This method is not implemented yet.</p>",
        "kind": "function",
        "name": "setPlayerAudioOffset",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Audio offset.",
                "name": "audioOffset"
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.setPlayerAudioOffset",
        "scope": "static"
    },
    {
        "description": "Sets the current playback time in the loaded recording.",
        "kind": "function",
        "name": "setPlayerTime",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The current playback time, in seconds.",
                "name": "time"
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.setPlayerTime",
        "scope": "static"
    },
    {
        "description": "Sets whether playback should repeat in a loop.",
        "kind": "function",
        "name": "setPlayerLoop",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if playback should repeat, <code>false</code> if it shouldn't.",
                "name": "loop"
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.setPlayerLoop",
        "scope": "static"
    },
    {
        "description": "Sets whether recording playback will use the display name that the recording was made with.",
        "kind": "function",
        "name": "setPlayerUseDisplayName",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to have recording playback use the display name that the recording \r    was made with, <code>false</code> to have recording playback keep the current display name.",
                "name": "useDisplayName"
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.setPlayerUseDisplayName",
        "scope": "static"
    },
    {
        "description": "<p><em>Not used.</em></p>",
        "kind": "function",
        "name": "setPlayerUseAttachments",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Use attachments.",
                "name": "useAttachments"
            }
        ],
        "deprecated": "This method is deprecated and will be removed.",
        "memberof": "Recording",
        "longname": "Recording.setPlayerUseAttachments",
        "scope": "static"
    },
    {
        "description": "<p><em>Not used.</em></p>",
        "kind": "function",
        "name": "setPlayerUseHeadModel",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Use head model.",
                "name": "useHeadModel"
            }
        ],
        "deprecated": "This method is deprecated and will be removed.",
        "memberof": "Recording",
        "longname": "Recording.setPlayerUseHeadModel",
        "scope": "static"
    },
    {
        "description": "Sets whether recording playback will use the avatar model that the recording was made with.",
        "kind": "function",
        "name": "setPlayerUseSkeletonModel",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to have recording playback use the avatar model that the recording \r    was made with, <code>false</code> to have playback use the current avatar model.",
                "name": "useSkeletonModel"
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.setPlayerUseSkeletonModel",
        "scope": "static"
    },
    {
        "description": "Sets whether recordings are played at the current avatar location or the recorded location.",
        "kind": "function",
        "name": "setPlayFromCurrentLocation",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to play recordings at the current avatar location, \r    <code>false</code> to play recordings at the recorded location.",
                "name": "playFromCurrentLocation"
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.setPlayFromCurrentLocation",
        "scope": "static"
    },
    {
        "description": "Gets whether recording playback will use the display name that the recording was made with.",
        "kind": "function",
        "name": "getPlayerUseDisplayName",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if recording playback will use the display name that the recording was made with, \r    <code>false</code> if playback will keep the current display name."
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.getPlayerUseDisplayName",
        "scope": "static"
    },
    {
        "description": "<p><em>Not used.</em></p>",
        "kind": "function",
        "name": "getPlayerUseAttachments",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Use attachments."
            }
        ],
        "deprecated": "This method is deprecated and will be removed.",
        "memberof": "Recording",
        "longname": "Recording.getPlayerUseAttachments",
        "scope": "static"
    },
    {
        "description": "<p><em>Not used.</em></p>",
        "kind": "function",
        "name": "getPlayerUseHeadModel",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Use head model."
            }
        ],
        "deprecated": "This method is deprecated and will be removed.",
        "memberof": "Recording",
        "longname": "Recording.getPlayerUseHeadModel",
        "scope": "static"
    },
    {
        "description": "Gets whether recording playback will use the avatar model that the recording was made with.",
        "kind": "function",
        "name": "getPlayerUseSkeletonModel",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if recording playback will use the avatar model that the recording was made with, \r    <code>false</code> if playback will use the current avatar model."
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.getPlayerUseSkeletonModel",
        "scope": "static"
    },
    {
        "description": "Gets whether recordings are played at the current avatar location or the recorded location.",
        "kind": "function",
        "name": "getPlayFromCurrentLocation",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if recordings are played at the current avatar location, <code>false</code> if \r    played at the recorded location."
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.getPlayFromCurrentLocation",
        "scope": "static"
    },
    {
        "description": "Starts making a recording.",
        "kind": "function",
        "name": "startRecording",
        "memberof": "Recording",
        "longname": "Recording.startRecording",
        "scope": "static"
    },
    {
        "description": "Stops making a recording. The recording may be saved using {@link Recording.saveRecording|saveRecording} or \r{@link Recording.saveRecordingToAsset|saveRecordingToAsset}, or immediately played back with \r{@link Recording.loadLastRecording|loadLastRecording}.",
        "kind": "function",
        "name": "stopRecording",
        "memberof": "Recording",
        "longname": "Recording.stopRecording",
        "scope": "static"
    },
    {
        "description": "Gets whether a recording is currently being made.",
        "kind": "function",
        "name": "isRecording",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if a recording is currently being made, <code>false</code> if one isn't."
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.isRecording",
        "scope": "static"
    },
    {
        "description": "Gets the duration of the recording currently being made or recently made, in seconds.",
        "kind": "function",
        "name": "recorderElapsed",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The duration of the recording currently being made or recently made, in seconds."
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.recorderElapsed",
        "scope": "static"
    },
    {
        "description": "Gets the default directory that recordings are saved in.",
        "kind": "function",
        "name": "getDefaultRecordingSaveDirectory",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The default recording save directory."
            }
        ],
        "examples": [
            "<caption>Report the default save directory.</caption>\rprint(\"Default save directory: \" + Recording.getDefaultRecordingSaveDirectory());"
        ],
        "memberof": "Recording",
        "longname": "Recording.getDefaultRecordingSaveDirectory",
        "scope": "static"
    },
    {
        "description": "Saves the most recently made recording to a file.",
        "kind": "function",
        "name": "saveRecording",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the file to save the recording to.",
                "name": "filename"
            }
        ],
        "examples": [
            "<caption>Save a 5 second recording to a file.</caption>\rRecording.startRecording();\r\rScript.setTimeout(function () {\r    Recording.stopRecording();\r    var filename = (new Date()).toISOString();  // yyyy-mm-ddThh:mm:ss.sssZ\r    filename = filename.slice(0, -5).replace(/:/g, \"\").replace(\"T\", \"-\") \r        + \".hfr\";  // yyyymmmdd-hhmmss.hfr\r    filename = Recording.getDefaultRecordingSaveDirectory() + filename;\r    Recording.saveRecording(filename);\r    print(\"Saved recording: \" + filename);\r}, 5000);"
        ],
        "memberof": "Recording",
        "longname": "Recording.saveRecording",
        "scope": "static"
    },
    {
        "description": "Called when a {@link Recording.saveRecordingToAsset} call is complete.",
        "kind": "typedef",
        "name": "saveRecordingToAssetCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the recording stored in the asset server if successful, <code>\"\"</code> if \r    unsuccessful. The URL has <code>atp:</code> as the scheme and the SHA256 hash as the filename (with no extension).",
                "name": "url"
            }
        ],
        "memberof": "Recording",
        "longname": "Recording~saveRecordingToAssetCallback",
        "scope": "inner"
    },
    {
        "description": "Saves the most recently made recording to the domain's asset server.",
        "kind": "function",
        "name": "saveRecordingToAsset",
        "params": [
            {
                "type": {
                    "names": [
                        "Recording~saveRecordingToAssetCallback"
                    ]
                },
                "description": "The function to call upon completion.",
                "name": "callback"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the recording is successfully being saved, <code>false</code> if not."
            }
        ],
        "examples": [
            "<caption>Save a 5 second recording to the asset server.</caption>\rfunction onSavedRecordingToAsset(url) {\r    if (url === \"\") {\r        print(\"Couldn't save recording.\");\r        return;\r    }\r\r    print(\"Saved recording: \" + url);  // atp:SHA256\r\r    var filename = (new Date()).toISOString();  // yyyy-mm-ddThh:mm:ss.sssZ\r    filename = filename.slice(0, -5).replace(/:/g, \"\").replace(\"T\", \"-\")\r        + \".hfr\";  // yyyymmmdd-hhmmss.hfr\r    var hash = url.slice(4);  // Remove leading \"atp:\" from url.\r    mappingPath = \"/recordings/\" + filename;\r    Assets.setMapping(mappingPath, hash, function (error) {\r        if (error) {\r            print(\"Mapping error: \" + error);\r        }\r    });\r    print(\"Mapped recording: \" + mappingPath);  // /recordings/filename\r}\r\rRecording.startRecording();\r\rScript.setTimeout(function () {\r    Recording.stopRecording();\r    var success = Recording.saveRecordingToAsset(onSavedRecordingToAsset);\r    if (!success) {\r        print(\"Couldn't save recording.\");\r    }\r}, 5000);"
        ],
        "memberof": "Recording",
        "longname": "Recording.saveRecordingToAsset",
        "scope": "static"
    },
    {
        "description": "Loads the most recently made recording and plays it back on your avatar.",
        "kind": "function",
        "name": "loadLastRecording",
        "examples": [
            "<caption>Make a 5 second recording and immediately play it back on your avatar.</caption>\rRecording.startRecording();\r\rScript.setTimeout(function () {\r    Recording.stopRecording();\r    Recording.loadLastRecording();\r}, 5000);\r\n     "
        ],
        "memberof": "Recording",
        "longname": "Recording.loadLastRecording",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Scene</code> API provides some control over what is rendered.",
        "kind": "namespace",
        "name": "Scene",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if avatars are rendered, <code>false</code> if they aren't.",
                "name": "shouldRenderAvatars"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if entities (domain, avatar, and local) are rendered, \r    <code>false</code> if they aren't.",
                "name": "shouldRenderEntities"
            }
        ],
        "longname": "Scene",
        "scope": "global"
    },
    {
        "description": "Triggered when whether or not avatars are rendered changes.",
        "kind": "signal",
        "name": "shouldRenderAvatarsChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if avatars are rendered, <code>false</code> if they aren't.",
                "name": "shouldRenderAvatars"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when the rendering of avatars changes.</caption>\rScene.shouldRenderAvatarsChanged.connect(function (shouldRenderAvatars) {\r    print(\"Should render avatars changed to: \" + shouldRenderAvatars);\r});"
        ],
        "memberof": "Scene",
        "longname": "Scene.shouldRenderAvatarsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when whether or not entities are rendered changes.",
        "kind": "signal",
        "name": "shouldRenderEntitiesChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if entities (domain, avatar, and local) are rendered, \r    <code>false</code> if they aren't.",
                "name": "shouldRenderEntities"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Scene",
        "longname": "Scene.shouldRenderEntitiesChanged",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>Plays or \"injects\" the content of an audio file.\r\r<p>Create using {@link Audio} API methods.</p>",
        "kind": "class",
        "name": "AudioInjector",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the audio is currently playing, otherwise <code>false</code>. \r    <em>Read-only.</em>",
                "name": "playing"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The loudness in the last frame of audio, range <code>0.0</code> &ndash; <code>1.0</code>. \r    <em>Read-only.</em>",
                "name": "loudness"
            },
            {
                "type": {
                    "names": [
                        "AudioInjector.AudioInjectorOptions"
                    ]
                },
                "description": "Configures how the injector plays the audio.",
                "name": "options"
            }
        ],
        "longname": "AudioInjector",
        "scope": "global"
    },
    {
        "description": "Stops current playback, if any, and starts playing from the beginning.",
        "kind": "function",
        "name": "restart",
        "memberof": "AudioInjector",
        "longname": "AudioInjector.restart",
        "scope": "static"
    },
    {
        "description": "Stops audio playback.",
        "kind": "function",
        "name": "stop",
        "examples": [
            "<caption>Stop playing a sound before it finishes.</caption>\rvar sound = SoundCache.getSound(Script.resourcesPath() + \"sounds/sample.wav\");\rvar injector;\rvar injectorOptions = {\r    position: MyAvatar.position\r};\r\rScript.setTimeout(function () { // Give the sound time to load.\r    injector = Audio.playSound(sound, injectorOptions);\r}, 1000);\r\rScript.setTimeout(function () {\r    injector.stop();\r}, 2000);"
        ],
        "memberof": "AudioInjector",
        "longname": "AudioInjector.stop",
        "scope": "static"
    },
    {
        "description": "Gets the current configuration of the audio injector.",
        "kind": "function",
        "name": "getOptions",
        "returns": [
            {
                "type": {
                    "names": [
                        "AudioInjector.AudioInjectorOptions"
                    ]
                },
                "description": "Configuration of how the injector plays the audio."
            }
        ],
        "memberof": "AudioInjector",
        "longname": "AudioInjector.getOptions",
        "scope": "static"
    },
    {
        "description": "Configures how the injector plays the audio.",
        "kind": "function",
        "name": "setOptions",
        "params": [
            {
                "type": {
                    "names": [
                        "AudioInjector.AudioInjectorOptions"
                    ]
                },
                "description": "Configuration of how the injector plays the audio.",
                "name": "options"
            }
        ],
        "memberof": "AudioInjector",
        "longname": "AudioInjector.setOptions",
        "scope": "static"
    },
    {
        "description": "Gets the loudness of the most recent frame of audio played.",
        "kind": "function",
        "name": "getLoudness",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The loudness of the most recent frame of audio played, range <code>0.0</code> &ndash; <code>1.0</code>."
            }
        ],
        "memberof": "AudioInjector",
        "longname": "AudioInjector.getLoudness",
        "scope": "static"
    },
    {
        "description": "Gets whether or not the audio is currently playing.",
        "kind": "function",
        "name": "isPlaying",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the audio is currently playing, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>See if a sound is playing.</caption>\rvar sound = SoundCache.getSound(Script.resourcesPath() + \"sounds/sample.wav\");\rvar injector;\rvar injectorOptions = {\r    position: MyAvatar.position\r};\r\rScript.setTimeout(function () { // Give the sound time to load.\r    injector = Audio.playSound(sound, injectorOptions);\r}, 1000);\r\rScript.setTimeout(function () {\r    print(\"Sound is playing: \" + injector.isPlaying());\r}, 2000);"
        ],
        "memberof": "AudioInjector",
        "longname": "AudioInjector.isPlaying",
        "scope": "static"
    },
    {
        "description": "Triggered when the audio has finished playing.",
        "kind": "signal",
        "name": "finished",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when a sound has finished playing.</caption>\rvar sound = SoundCache.getSound(Script.resourcesPath() + \"sounds/sample.wav\");\rvar injector;\rvar injectorOptions = {\r    position: MyAvatar.position\r};\r\rScript.setTimeout(function () { // Give the sound time to load.\r    injector = Audio.playSound(sound, injectorOptions);\r    injector.finished.connect(function () {\r        print(\"Finished playing sound\");\r    });\r}, 1000);\r\n     "
        ],
        "memberof": "AudioInjector",
        "longname": "AudioInjector.finished",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>The <code>Resource</code> API provides values that define the possible loading states of a resource.",
        "kind": "namespace",
        "name": "Resource",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "Resource.State"
                    ]
                },
                "description": "The possible loading states of a resource. <em>Read-only.</em>",
                "name": "State"
            }
        ],
        "longname": "Resource",
        "scope": "global"
    },
    {
        "description": "<p>The name of an entity event. When the entity event occurs, any function that has been registered for that event via \r{@link Script.addEventHandler} is called with parameters per the entity event.</p>\r<table>\r  <thead>\r    <tr><th>Event Name</th><th>Entity Event</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"enterEntity\"</code></td><td>{@link Entities.enterEntity}</td></tr>\r    <tr><td><code>\"leaveEntity\"</code></td><td>{@link Entities.leaveEntity}</td></tr>\r    <tr><td><code>\"mousePressOnEntity\"</code></td><td>{@link Entities.mousePressOnEntity}</td></tr>\r    <tr><td><code>\"mouseMoveOnEntity\"</code></td><td>{@link Entities.mouseMoveOnEntity}</td></tr>\r    <tr><td><code>\"mouseReleaseOnEntity\"</code></td><td>{@link Entities.mouseReleaseOnEntity}</td></tr>\r    <tr><td><code>\"clickDownOnEntity\"</code></td><td>{@link Entities.clickDownOnEntity}</td></tr>\r    <tr><td><code>\"holdingClickOnEntity\"</code></td><td>{@link Entities.holdingClickOnEntity}</td></tr>\r    <tr><td><code>\"clickReleaseOnEntity\"</code></td><td>{@link Entities.clickReleaseOnEntity}</td></tr>\r    <tr><td><code>\"hoverEnterEntity\"</code></td><td>{@link Entities.hoverEnterEntity}</td></tr>\r    <tr><td><code>\"hoverOverEntity\"</code></td><td>{@link Entities.hoverOverEntity}</td></tr>\r    <tr><td><code>\"hoverLeaveEntity\"</code></td><td>{@link Entities.hoverLeaveEntity}</td></tr>\r    <tr><td><code>\"collisionWithEntity\"</code></td><td>{@link Entities.collisionWithEntity}</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "EntityEvent",
        "type": {
            "names": [
                "string"
            ]
        },
        "memberof": "Script",
        "longname": "Script.EntityEvent",
        "scope": "static"
    },
    {
        "description": "Triggered when the script starts for a user. See also, {@link Script.entityScriptPreloadFinished}.\r<p>Note: Can only be connected to via <code>this.preload = function (...) { ... }</code> in the entity script.</p>\r<p class=\"availableIn\"><strong>Supported Script Types:</strong> Client Entity Scripts &bull; Server Entity Scripts</p>",
        "kind": "signal",
        "name": "preload",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that the script is running in.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Get the ID of the entity that a client entity script is running in.</caption>\rvar entityScript = (function () {\r    this.entityID = Uuid.NULL;\r\r    this.preload = function (entityID) {\r        this.entityID = entityID;\r        print(\"Entity ID: \" + this.entityID);\r    };\r});\r\rvar entityID = Entities.addEntity({\r    type: \"Box\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    dimensions: { x: 0.5, y: 0.5, z: 0.5 },\r    color: { red: 255, green: 0, blue: 0 },\r    script: \"(\" + entityScript + \")\",  // Could host the script on a Web server instead.\r    lifetime: 300  // Delete after 5 minutes.\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.preload",
        "scope": "static"
    },
    {
        "description": "Triggered when the script terminates for a user.\r<p>Note: Can only be connected to via <code>this.unoad = function () { ... }</code> in the entity script.</p>\r<p class=\"availableIn\"><strong>Supported Script Types:</strong> Client Entity Scripts &bull; Server Entity Scripts</p>",
        "kind": "signal",
        "name": "unload",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that the script is running in.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.unload",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>The <code>Script</code> API provides facilities for working with scripts.",
        "kind": "namespace",
        "name": "Script",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The context that the script is running in:\r    <ul>\r      <li><code>\"client\"</code>: An Interface or avatar script.</li>\r      <li><code>\"entity_client\"</code>: A client entity script.</li>\r      <li><code>\"entity_server\"</code>: A server entity script.</li>\r      <li><code>\"agent\"</code>: An assignment client script.</li>\r    </ul>\r    <em>Read-only.</em>",
                "name": "context"
            }
        ],
        "longname": "Script",
        "scope": "global"
    },
    {
        "description": "Stops and unloads the current script.\r<p><strong>Warning:</strong> If an assignment client script, the script gets restarted after stopping.</p>",
        "kind": "function",
        "name": "stop",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Marshal.\r    <p class=\"important\">Deprecated: This parameter is deprecated and will be removed.</p>",
                "name": "marshal"
            }
        ],
        "examples": [
            "<caption>Stop a script after 5s.</caption>\rScript.setInterval(function () {\r    print(\"Hello\");\r}, 1000);\r\rScript.setTimeout(function () {\r    Script.stop(true);\r}, 5000);"
        ],
        "memberof": "Script",
        "longname": "Script.stop",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "registerGlobalObject",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Object.",
                "name": "object"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Script",
        "longname": "Script.registerGlobalObject",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "registerGetterSetter",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Getter.",
                "name": "getter"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Setter.",
                "name": "setter"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "Parent.",
                "name": "parent"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Script",
        "longname": "Script.registerGetterSetter",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "registerFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function.",
                "name": "function"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "description": "Number of arguments.",
                "name": "numArguments"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Script",
        "longname": "Script.registerFunction",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "registerFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Parent.",
                "name": "parent"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function.",
                "name": "function"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "description": "Number of arguments.",
                "name": "numArguments"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Script",
        "longname": "Script.registerFunction",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "registerValue",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Value.",
                "name": "value"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Script",
        "longname": "Script.registerValue",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "evaluate",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Program.",
                "name": "program"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "File name.",
                "name": "filename"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "description": "Line number.",
                "name": "lineNumber"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Object."
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Script",
        "longname": "Script.evaluate",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "evaluateInClosure",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Locals.",
                "name": "locals"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Program.",
                "name": "program"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Object."
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Script",
        "longname": "Script.evaluateInClosure",
        "scope": "static"
    },
    {
        "description": "Gets the context that the script is running in: Interface/avatar, client entity, server entity, or assignment client.",
        "kind": "function",
        "name": "getContext",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The context that the script is running in:\r<ul>\r  <li><code>\"client\"</code>: An Interface or avatar script.</li>\r  <li><code>\"entity_client\"</code>: A client entity script.</li>\r  <li><code>\"entity_server\"</code>: A server entity script.</li>\r  <li><code>\"agent\"</code>: An assignment client script.</li>\r</ul>"
            }
        ],
        "memberof": "Script",
        "longname": "Script.getContext",
        "scope": "static"
    },
    {
        "description": "Checks whether the script is running as an Interface or avatar script.",
        "kind": "function",
        "name": "isClientScript",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the script is running as an Interface or avatar script, <code>false</code> if it \r    isn't."
            }
        ],
        "memberof": "Script",
        "longname": "Script.isClientScript",
        "scope": "static"
    },
    {
        "description": "Checks whether the application was compiled as a debug build.",
        "kind": "function",
        "name": "isDebugMode",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the application was compiled as a debug build, <code>false</code> if it was \r    compiled as a release build."
            }
        ],
        "memberof": "Script",
        "longname": "Script.isDebugMode",
        "scope": "static"
    },
    {
        "description": "Checks whether the script is running as a client entity script.",
        "kind": "function",
        "name": "isEntityClientScript",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the script is running as a client entity script, <code>false</code> if it isn't."
            }
        ],
        "memberof": "Script",
        "longname": "Script.isEntityClientScript",
        "scope": "static"
    },
    {
        "description": "Checks whether the script is running as a server entity script.",
        "kind": "function",
        "name": "isEntityServerScript",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the script is running as a server entity script, <code>false</code> if it isn't."
            }
        ],
        "memberof": "Script",
        "longname": "Script.isEntityServerScript",
        "scope": "static"
    },
    {
        "description": "Checks whether the script is running as an assignment client script.",
        "kind": "function",
        "name": "isAgentScript",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the script is running as an assignment client script, <code>false</code> if it \r    isn't."
            }
        ],
        "memberof": "Script",
        "longname": "Script.isAgentScript",
        "scope": "static"
    },
    {
        "description": "Adds a function to the list of functions called when an entity event occurs on a particular entity.\r<p>See also, the {@link Entities} API.</p>",
        "kind": "function",
        "name": "addEventHandler",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Script.EntityEvent"
                    ]
                },
                "description": "The name of the entity event.",
                "name": "eventName"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to call when the entity event occurs on the entity. It can be either the name \r    of a function or an in-line definition.",
                "name": "handler"
            }
        ],
        "examples": [
            "<caption>Report when a mouse press occurs on a particular entity.</caption>\rvar entityID = Entities.addEntity({\r    type: \"Box\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    dimensions: { x: 0.5, y: 0.5, z: 0.5 },\r    lifetime: 300  // Delete after 5 minutes.\r});\r\rfunction reportMousePress(entityID, event) {\r    print(\"Mouse pressed on entity: \" + JSON.stringify(event));\r}\r\rScript.addEventHandler(entityID, \"mousePressOnEntity\", reportMousePress);"
        ],
        "memberof": "Script",
        "longname": "Script.addEventHandler",
        "scope": "static"
    },
    {
        "description": "Removes a function from the list of functions called when an entity event occurs on a particular entity.\r<p>See also, the {@link Entities} API.</p>",
        "kind": "function",
        "name": "removeEventHandler",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Script.EntityEvent"
                    ]
                },
                "description": "The name of the entity event.",
                "name": "eventName"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The name of the function to no longer call when the entity event occurs on the entity.",
                "name": "handler"
            }
        ],
        "memberof": "Script",
        "longname": "Script.removeEventHandler",
        "scope": "static"
    },
    {
        "description": "Starts running another script in Interface, if it isn't already running. The script is not automatically loaded next \rtime Interface starts.\r<p class=\"availableIn\"><strong>Supported Script Types:</strong> Interface Scripts &bull; Avatar Scripts</p>\r<p>See also, {@link ScriptDiscoveryService.loadScript}.</p>",
        "kind": "function",
        "name": "load",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the script to load. This can be relative to the current script's URL.",
                "name": "filename"
            }
        ],
        "examples": [
            "<caption>Load a script from another script.</caption>\r// First file: scriptA.js\rprint(\"This is script A\");\r\r// Second file: scriptB.js\rprint(\"This is script B\");\rScript.load(\"scriptA.js\");\r\r// If you run scriptB.js you should see both scripts in the Running Scripts dialog.\r// And you should see the following output:\r// This is script B\r// This is script A"
        ],
        "memberof": "Script",
        "longname": "Script.load",
        "scope": "static"
    },
    {
        "description": "Includes JavaScript from other files in the current script. If a callback is specified, the files are loaded and \rincluded asynchronously, otherwise they are included synchronously (i.e., script execution blocks while the files are \rincluded).",
        "kind": "function",
        "name": "include",
        "variation": "0",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "The URLs of the scripts to include. Each can be relative to the current script.",
                "name": "filenames"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "defaultvalue": null,
                "description": "The function to call back when the scripts have been included. It can be either the \r    name of a function or an in-line definition.",
                "name": "callback"
            }
        ],
        "memberof": "Script",
        "longname": "Script.include(0)",
        "scope": "static"
    },
    {
        "description": "Includes JavaScript from another file in the current script. If a callback is specified, the file is loaded and included\rasynchronously, otherwise it is included synchronously (i.e., script execution blocks while the file is included).",
        "kind": "function",
        "name": "include",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the script to include. It can be relative to the current script.",
                "name": "filename"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "defaultvalue": null,
                "description": "The function to call back when the script has been included. It can be either the \r    name of a function or an in-line definition.",
                "name": "callback"
            }
        ],
        "examples": [
            "<caption>Include a script file asynchronously.</caption>\r// First file: scriptA.js\rprint(\"This is script A\");\r\r// Second file: scriptB.js\rprint(\"This is script B\");\rScript.include(\"scriptA.js\", function () {\r    print(\"Script A has been included\");\r});\r\r// If you run scriptB.js you should see only scriptB.js in the running scripts list.\r// And you should see the following output:\r// This is script B\r// This is script A\r// Script A has been included"
        ],
        "memberof": "Script",
        "longname": "Script.include",
        "scope": "static"
    },
    {
        "description": "Provides access to methods or objects provided in an external JavaScript or JSON file. \rSee {@link https://docs.highfidelity.com/script/js-tips.html} for further details.",
        "kind": "function",
        "name": "require",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The module to use. May be a JavaScript file, a JSON file, or the name of a system module such \r    as <code>\"appUi\"</code> (i.e., the \"appUi.js\" system module JavaScript file).",
                "name": "module"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object",
                        "array"
                    ]
                },
                "description": "The value assigned to <code>module.exports</code> in the JavaScript file, or the value defined \r    in the JSON file."
            }
        ],
        "memberof": "Script",
        "longname": "Script.require",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "resetModuleCache",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Delete script cache.",
                "name": "deleteScriptCache"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Script",
        "longname": "Script.resetModuleCache",
        "scope": "static"
    },
    {
        "description": "Calls a function repeatedly, at a set interval.",
        "kind": "function",
        "name": "setInterval",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to call. This can be either the name of a function or an in-line definition.",
                "name": "function"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The interval at which to call the function, in ms.",
                "name": "interval"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "A handle to the interval timer. This can be used in {@link Script.clearInterval}."
            }
        ],
        "examples": [
            "<caption>Print a message every second.</caption>\rScript.setInterval(function () {\r    print(\"Interval timer fired\");\r}, 1000);"
        ],
        "memberof": "Script",
        "longname": "Script.setInterval",
        "scope": "static"
    },
    {
        "description": "Calls a function once, after a delay.",
        "kind": "function",
        "name": "setTimeout",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to call. This can be either the name of a function or an in-line definition.",
                "name": "function"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The delay after which to call the function, in ms.",
                "name": "timeout"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "A handle to the timeout timer. This can be used in {@link Script.clearTimeout}."
            }
        ],
        "examples": [
            "<caption>Print a message once, after a second.</caption>\rScript.setTimeout(function () {\r    print(\"Timeout timer fired\");\r}, 1000);"
        ],
        "memberof": "Script",
        "longname": "Script.setTimeout",
        "scope": "static"
    },
    {
        "description": "Stops an interval timer set by {@link Script.setInterval|setInterval}.",
        "kind": "function",
        "name": "clearInterval",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The interval timer to stop.",
                "name": "timer"
            }
        ],
        "examples": [
            "<caption>Stop an interval timer.</caption>\r// Print a message every second.\rvar timer = Script.setInterval(function () {\r    print(\"Interval timer fired\");\r}, 1000);\r\r// Stop the timer after 10 seconds.\rScript.setTimeout(function () {\r    print(\"Stop interval timer\");\r    Script.clearInterval(timer);\r}, 10000);"
        ],
        "memberof": "Script",
        "longname": "Script.clearInterval",
        "scope": "static"
    },
    {
        "description": "Stops a timeout timer set by {@link Script.setTimeout|setTimeout}.",
        "kind": "function",
        "name": "clearTimeout",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The timeout timer to stop.",
                "name": "timer"
            }
        ],
        "examples": [
            "<caption>Stop a timeout timer.</caption>\r// Print a message after two seconds.\rvar timer = Script.setTimeout(function () {\r    print(\"Timer fired\");\r}, 2000);\r\r// Uncomment the following line to stop the timer from firing.\r//Script.clearTimeout(timer);"
        ],
        "memberof": "Script",
        "longname": "Script.clearTimeout",
        "scope": "static"
    },
    {
        "description": "Prints a message to the program log.\r<p>Alternatively, you can use {@link print}, {@link console.log}, or one of the other {@link console} methods.</p>",
        "kind": "function",
        "name": "print",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The message to print.",
                "name": "message"
            }
        ],
        "memberof": "Script",
        "longname": "Script.print",
        "scope": "static"
    },
    {
        "description": "Prints a message to the program log.\r<p>This is an alias of {@link Script.print}.</p>",
        "kind": "function",
        "name": "print",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The message to print.",
                "name": "message"
            }
        ],
        "longname": "print",
        "scope": "global"
    },
    {
        "description": "Resolves a relative path to an absolute path. The relative path is relative to the script's location.",
        "kind": "function",
        "name": "resolvePath",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The relative path to resolve.",
                "name": "path"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The absolute path."
            }
        ],
        "examples": [
            "<caption>Report the directory and filename of the running script.</caption>\rprint(Script.resolvePath(\"\"));",
            "<caption>Report the directory of the running script.</caption>\rprint(Script.resolvePath(\".\"));",
            "<caption>Report the path to a file located relative to the running script.</caption>\rprint(Script.resolvePath(\"../assets/sounds/hello.wav\"));"
        ],
        "memberof": "Script",
        "longname": "Script.resolvePath",
        "scope": "static"
    },
    {
        "description": "Gets the path to the resources directory for QML files.",
        "kind": "function",
        "name": "resourcesPath",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path to the resources directory for QML files."
            }
        ],
        "memberof": "Script",
        "longname": "Script.resourcesPath",
        "scope": "static"
    },
    {
        "description": "Starts timing a section of code in order to send usage data about it to High Fidelity. Shouldn't be used outside of the \rstandard scripts.",
        "kind": "function",
        "name": "beginProfileRange",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "A name that identifies the section of code.",
                "name": "label"
            }
        ],
        "memberof": "Script",
        "longname": "Script.beginProfileRange",
        "scope": "static"
    },
    {
        "description": "Finishes timing a section of code in order to send usage data about it to High Fidelity. Shouldn't be used outside of \rthe standard scripts.",
        "kind": "function",
        "name": "endProfileRange",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "A name that identifies the section of code.",
                "name": "label"
            }
        ],
        "memberof": "Script",
        "longname": "Script.endProfileRange",
        "scope": "static"
    },
    {
        "description": "Checks whether an entity has an entity script running.",
        "kind": "function",
        "name": "isEntityScriptRunning",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the entity has an entity script running, <code>false</code> if it doesn't."
            }
        ],
        "memberof": "Script",
        "longname": "Script.isEntityScriptRunning",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "loadEntityScript",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "Entity ID.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Script.",
                "name": "script"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Force re-download.",
                "name": "forceRedownload"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Script",
        "longname": "Script.loadEntityScript",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "unloadEntityScript",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "Entity ID.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Should remove from map.",
                "name": "shouldRemoveFromMap"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Script",
        "longname": "Script.unloadEntityScript",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "unloadAllEntityScripts",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Wait for completion if call moved to another thread.",
                "name": "blockingCall"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Script",
        "longname": "Script.unloadAllEntityScripts",
        "scope": "static"
    },
    {
        "description": "Calls a method in an entity script.",
        "kind": "function",
        "name": "callEntityScriptMethod",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity running the entity script.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the method to call.",
                "name": "methodName"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "The parameters to call the specified method with.",
                "name": "parameters"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "optional": true,
                "defaultvalue": "Uuid.NULL",
                "description": "An ID that identifies the caller.",
                "name": "remoteCallerID"
            }
        ],
        "memberof": "Script",
        "longname": "Script.callEntityScriptMethod",
        "scope": "static"
    },
    {
        "description": "Calls a method in an entity script.",
        "kind": "function",
        "name": "callEntityScriptMethod",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "Entity ID.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Method name.",
                "name": "methodName"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "Pointer event.",
                "name": "event"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Script",
        "longname": "Script.callEntityScriptMethod",
        "scope": "static"
    },
    {
        "description": "Calls a method in an entity script.",
        "kind": "function",
        "name": "callEntityScriptMethod",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "Entity ID.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Method name.",
                "name": "methodName"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "Other entity ID.",
                "name": "otherID"
            },
            {
                "type": {
                    "names": [
                        "Collision"
                    ]
                },
                "description": "Collision.",
                "name": "collision"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Script",
        "longname": "Script.callEntityScriptMethod",
        "scope": "static"
    },
    {
        "description": "Manually runs the JavaScript garbage collector which reclaims memory by disposing of objects that are no longer \rreachable.",
        "kind": "function",
        "name": "requestGarbageCollection",
        "memberof": "Script",
        "longname": "Script.requestGarbageCollection",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "generateUUID",
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "A new UUID."
            }
        ],
        "deprecated": "This function is deprecated and will be removed. Use {@link Uuid(0).generate|Uuid.generate} instead.",
        "memberof": "Script",
        "longname": "Script.generateUUID",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "callAnimationStateHandler",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Callback function.",
                "name": "callback"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Parameters.",
                "name": "parameters"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "Names.",
                "name": "names"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Use names.",
                "name": "useNames"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Result handler.",
                "name": "resultHandler"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Script",
        "longname": "Script.callAnimationStateHandler",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "updateMemoryCost",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Delta size.",
                "name": "deltaSize"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Script",
        "longname": "Script.updateMemoryCost",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "scriptLoaded",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "File name.",
                "name": "filename"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "deprecated": "This signal is deprecated and will be removed.",
        "memberof": "Script",
        "longname": "Script.scriptLoaded",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "errorLoadingScript",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "File name.",
                "name": "filename"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "deprecated": "This signal is deprecated and will be removed.",
        "memberof": "Script",
        "longname": "Script.errorLoadingScript",
        "scope": "static"
    },
    {
        "description": "Triggered frequently at a system-determined interval.",
        "kind": "signal",
        "name": "update",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The time since the last update, in s.",
                "name": "deltaTime"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report script update intervals.</caption>\rScript.update.connect(function (deltaTime) {\r    print(\"Update: \" + deltaTime);\r});"
        ],
        "memberof": "Script",
        "longname": "Script.update",
        "scope": "static"
    },
    {
        "description": "Triggered when the script is stopping.",
        "kind": "signal",
        "name": "scriptEnding",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when a script is stopping.</caption>\rprint(\"Script started\");\r\rScript.scriptEnding.connect(function () {\r    print(\"Script ending\");\r});\r\rScript.setTimeout(function () {\r    print(\"Stopping script\");\r    Script.stop();\r}, 1000);"
        ],
        "memberof": "Script",
        "longname": "Script.scriptEnding",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "finished",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "File name.",
                "name": "filename"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Engine.",
                "name": "engine"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "deprecated": "This signal is deprecated and will be removed.",
        "memberof": "Script",
        "longname": "Script.finished",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "cleanupMenuItem",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Menu item.",
                "name": "menuItem"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "deprecated": "This signal is deprecated and will be removed.",
        "memberof": "Script",
        "longname": "Script.cleanupMenuItem",
        "scope": "static"
    },
    {
        "description": "Triggered when the script prints a message to the program log via {@link  print}, {@link Script.print}, \r{@link console.log}, or {@link console.debug}.",
        "kind": "signal",
        "name": "printedMessage",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The message.",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the script that generated the message.",
                "name": "scriptName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Script",
        "longname": "Script.printedMessage",
        "scope": "static"
    },
    {
        "description": "Triggered when the script generates an error or {@link console.error} is called.",
        "kind": "signal",
        "name": "errorMessage",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The error message.",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the script that generated the error message.",
                "name": "scriptName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Script",
        "longname": "Script.errorMessage",
        "scope": "static"
    },
    {
        "description": "Triggered when the script generates a warning or {@link console.warn} is called.",
        "kind": "signal",
        "name": "warningMessage",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The warning message.",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the script that generated the warning message.",
                "name": "scriptName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Script",
        "longname": "Script.warningMessage",
        "scope": "static"
    },
    {
        "description": "Triggered when the script generates an information message or {@link console.info} is called.",
        "kind": "signal",
        "name": "infoMessage",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The information message.",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the script that generated the information message.",
                "name": "scriptName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Script",
        "longname": "Script.infoMessage",
        "scope": "static"
    },
    {
        "description": "Triggered when the running state of the script changes, e.g., from running to stopping.",
        "kind": "signal",
        "name": "runningStateChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Script",
        "longname": "Script.runningStateChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "clearDebugWindow",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "deprecated": "This signal is deprecated and will be removed.",
        "memberof": "Script",
        "longname": "Script.clearDebugWindow",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "loadScript",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Script name.",
                "name": "scriptName"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Is user loaded.",
                "name": "isUserLoaded"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "deprecated": "This signal is deprecated and will be removed.",
        "memberof": "Script",
        "longname": "Script.loadScript",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "reloadScript",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Script name.",
                "name": "scriptName"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Is user loaded.",
                "name": "isUserLoaded"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "deprecated": "This signal is deprecated and will be removed.",
        "memberof": "Script",
        "longname": "Script.reloadScript",
        "scope": "static"
    },
    {
        "description": "Triggered when the script has stopped.",
        "kind": "signal",
        "name": "doneRunning",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Script",
        "longname": "Script.doneRunning",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "entityScriptDetailsUpdated",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "deprecated": "This signal is deprecated and will be removed.",
        "memberof": "Script",
        "longname": "Script.entityScriptDetailsUpdated",
        "scope": "static"
    },
    {
        "description": "Triggered when the script starts for the user. See also, {@link Entities.preload}.\r<p class=\"availableIn\"><strong>Supported Script Types:</strong> Client Entity Scripts &bull; Server Entity Scripts</p>",
        "kind": "signal",
        "name": "entityScriptPreloadFinished",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that the script is running in.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Get the ID of the entity that a client entity script is running in.</caption>\rvar entityScript = function () {\r    this.entityID = Uuid.NULL;\r};\r\rScript.entityScriptPreloadFinished.connect(function (entityID) {\r    this.entityID = entityID;\r    print(\"Entity ID: \" + this.entityID);\r});\r\rvar entityID = Entities.addEntity({\r    type: \"Box\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    dimensions: { x: 0.5, y: 0.5, z: 0.5 },\r    color: { red: 255, green: 0, blue: 0 },\r    script: \"(\" + entityScript + \")\",  // Could host the script on a Web server instead.\r    lifetime: 300  // Delete after 5 minutes.\r});"
        ],
        "memberof": "Script",
        "longname": "Script.entityScriptPreloadFinished",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "executeOnScriptThread",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function.",
                "name": "function"
            },
            {
                "type": {
                    "names": [
                        "ConnectionType"
                    ]
                },
                "optional": true,
                "defaultvalue": 2,
                "description": "Connection type.",
                "name": "type"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Script",
        "longname": "Script.executeOnScriptThread",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "_requireResolve",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Module.",
                "name": "module"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "Relative to.",
                "name": "relativeTo"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Result."
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Script",
        "longname": "Script._requireResolve",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "entityScriptContentAvailable",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "Entity ID.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Path.",
                "name": "scriptOrURL"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Contents.",
                "name": "contents"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Is a URL.",
                "name": "isURL"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Success.",
                "name": "success"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Status.",
                "name": "status"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Script",
        "longname": "Script.entityScriptContentAvailable",
        "scope": "static"
    },
    {
        "description": "Information on a public script, i.e., a script that's included in the Interface installation.",
        "kind": "typedef",
        "name": "PublicScript",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The script's file name.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<code>\"script\"</code> or <code>\"folder\"</code>.\r    <p class=\"important\">Deprecated: This property is deprecated and will be removed. It currently always has the value, \r    <code>\"script\"</code>.</p>",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Array.<ScriptDiscoveryService.PublicScript>"
                    ]
                },
                "optional": true,
                "description": "Only present if <code>type == \"folder\"</code>.\r    <p class=\"important\">Deprecated: This property is deprecated and will be removed. It currently is never present.",
                "name": "children"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "The full URL of the script &mdash; including the <code>\"file:///\"</code> scheme at the start.\r    <p>Only present if <code>type == \"script\"</code>.</p>",
                "name": "url"
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.PublicScript",
        "scope": "static"
    },
    {
        "description": "Information on a local script.",
        "kind": "typedef",
        "name": "LocalScript",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The script's file name.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The script's path.",
                "name": "path"
            }
        ],
        "deprecated": "This type is deprecated and will be removed.",
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.LocalScript",
        "scope": "static"
    },
    {
        "description": "Information on a running script.",
        "kind": "typedef",
        "name": "RunningScript",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the script is a local file (i.e., the scheme is \"file\"), <code>false</code> \r    if it isn't (e.g., the scheme is \"http\").",
                "name": "local"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The script's file name.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The script's path and file name &mdash; excluding the scheme if a local file.",
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The full URL of the script &mdash; including the scheme if a local file.",
                "name": "url"
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.RunningScript",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>ScriptDiscoveryService</code> API provides facilities to work with Interface scripts.",
        "kind": "namespace",
        "name": "ScriptDiscoveryService",
        "hifiInterface": true,
        "hifiAvatar": true,
        "hifiClientEntity": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The path and name of a script to debug using the \"API Debugger\" developer tool \r    (currentAPI.js). If set, the API Debugger dialog displays the objects and values exposed by the script using \r    {@link Script.registerValue} and similar.",
                "name": "debugScriptUrl"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path where the default scripts are located in the Interface installation. \r    <em>Read-only.</em>",
                "name": "defaultScriptsPath"
            },
            {
                "type": {
                    "names": [
                        "ScriptsModel"
                    ]
                },
                "description": "Information on the scripts that are in the default scripts directory of the \r    Interface installation.\r    <em>Read-only.</em>",
                "name": "scriptsModel"
            },
            {
                "type": {
                    "names": [
                        "ScriptsModelFilter"
                    ]
                },
                "description": "Sorted and filtered information on the scripts that are in the default \r    scripts directory of the Interface installation.\r    <em>Read-only.</em>",
                "name": "scriptsModelFilter"
            }
        ],
        "longname": "ScriptDiscoveryService",
        "scope": "global"
    },
    {
        "description": "Starts running an Interface script, if it isn't already running. The script is automatically loaded next time Interface \rstarts.\r<p>This is a synonym for calling {@link ScriptDiscoveryService.loadScript|loadScript} with just the script URL.</p>\r<p class=\"availableIn\"><strong>Supported Script Types:</strong> Interface Scripts &bull; Avatar Scripts</p>\r<p>See also, {@link Script.load}.</p>",
        "kind": "function",
        "name": "loadOneScript",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the script. If a local file, including the <code>\"file:///\"</code> scheme is \r    optional.",
                "name": "url"
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.loadOneScript",
        "scope": "static"
    },
    {
        "description": "Starts running an Interface script, if it isn't already running.\r<p class=\"availableIn\"><strong>Supported Script Types:</strong> Interface Scripts &bull; Avatar Scripts</p>\r<p>See also, {@link Script.load}.</p>",
        "kind": "function",
        "name": "loadScript",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The path and name of the script. If a local file, including the <code>\"file:///\"</code> \r    scheme is optional.",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "<code>true</code> if the user specifically loaded it, <code>false</code> if not \r    (e.g., a script loaded it). If <code>false</code>, the script is not automatically loaded next time Interface starts.",
                "name": "isUserLoaded"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<em>Not used.</em>",
                "name": "loadScriptFromEditor"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<em>Not used.</em>",
                "name": "activateMainWindow"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> to redownload the script, <code>false</code> to use the copy from \r    the cache if available.",
                "name": "reload"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> to close Interface when the script finishes, \r    <code>false</code> to not close Interface.",
                "name": "quitWhenFinished"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "An empty object, <code>{}</code>."
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.loadScript",
        "scope": "static"
    },
    {
        "description": "Stops or restarts an Interface script.",
        "kind": "function",
        "name": "stopScript",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the script. If a local file, including the <code>\"file:///\"</code> scheme is \r    optional.",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> to redownload and restart the script, <code>false</code> to stop \r    it.",
                "name": "restart"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the script was successfully stopped or restarted, <code>false</code> if it \r    wasn't (e.g., the script couldn't be found)."
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.stopScript",
        "scope": "static"
    },
    {
        "description": "Restarts all Interface, avatar, and client entity scripts after clearing the scripts cache.",
        "kind": "function",
        "name": "reloadAllScripts",
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.reloadAllScripts",
        "scope": "static"
    },
    {
        "description": "Stops or restarts all Interface scripts. The scripts cache is not cleared. If restarting, avatar and client entity \rscripts are also restarted.",
        "kind": "function",
        "name": "stopAllScripts",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> to restart the scripts, <code>false</code> to stop them.",
                "name": "restart"
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.stopAllScripts",
        "scope": "static"
    },
    {
        "description": "Gets a list of all Interface scripts that are currently running.",
        "kind": "function",
        "name": "getRunning",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ScriptDiscoveryService.RunningScript>"
                    ]
                },
                "description": "All Interface scripts that are currently running."
            }
        ],
        "examples": [
            "<caption>Report all running scripts.</caption>\rvar runningScripts = ScriptDiscoveryService.getRunning();\rprint(\"Running scripts:\");\rfor (var i = 0; i < runningScripts.length; i++) {\r    print(JSON.stringify(runningScripts[i]));\r}"
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.getRunning",
        "scope": "static"
    },
    {
        "description": "Gets a list of all script files that are in the default scripts directory of the Interface installation.",
        "kind": "function",
        "name": "getPublic",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ScriptDiscoveryService.PublicScript>"
                    ]
                },
                "description": "All scripts in the \"scripts\" directory of the Interface \r    installation."
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.getPublic",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getLocal",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<ScriptDiscoveryService.LocalScript>"
                    ]
                },
                "description": "Local scripts."
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.getLocal",
        "scope": "static"
    },
    {
        "description": "Triggered when the number of Interface scripts running changes.",
        "kind": "signal",
        "name": "scriptCountChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when the number of running scripts changes.</caption>\rScriptDiscoveryService.scriptCountChanged.connect(function () {\r    print(\"Scripts count changed: \" + ScriptDiscoveryService.getRunning().length);\r});"
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.scriptCountChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when Interface, avatar, and client entity scripts are restarting as a result of\r{@link ScriptDiscoveryService.reloadAllScripts|reloadAllScripts} or \r{@link ScriptDiscoveryService.stopAllScripts|stopAllScripts}.",
        "kind": "signal",
        "name": "scriptsReloading",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.scriptsReloading",
        "scope": "static"
    },
    {
        "description": "Triggered when a script could not be loaded.",
        "kind": "signal",
        "name": "scriptLoadError",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the script that could not be loaded.",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<code>\"\"</code> always.",
                "name": "error"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.scriptLoadError",
        "scope": "static"
    },
    {
        "description": "Triggered when any script prints a message to the program log via {@link  print}, {@link Script.print},\r{@link console.log}, or {@link console.debug}.",
        "kind": "signal",
        "name": "printedMessage",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The message.",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the script that generated the message.",
                "name": "scriptName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.printedMessage",
        "scope": "static"
    },
    {
        "description": "Triggered when any script generates an error or {@link console.error} is called.",
        "kind": "signal",
        "name": "errorMessage",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The error message.",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the script that generated the error message.",
                "name": "scriptName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.errorMessage",
        "scope": "static"
    },
    {
        "description": "Triggered when any script generates a warning or {@link console.warn} is called.",
        "kind": "signal",
        "name": "warningMessage",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The warning message.",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the script that generated the warning message.",
                "name": "scriptName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.warningMessage",
        "scope": "static"
    },
    {
        "description": "Triggered when any script generates an information message or {@link console.info} is called.",
        "kind": "signal",
        "name": "infoMessage",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The information message.",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the script that generated the informaton message.",
                "name": "scriptName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.infoMessage",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "errorLoadingScript",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "URL.",
                "name": "url"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "deprecated": "This signal is deprecated and will be removed.",
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.errorLoadingScript",
        "scope": "static"
    },
    {
        "description": "Triggered when the Debug Window is cleared.",
        "kind": "signal",
        "name": "clearDebugWindow",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.clearDebugWindow",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "onPrintedMessage",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Message.",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Script name.",
                "name": "scriptName"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.onPrintedMessage",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "onErrorMessage",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Message.",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Script name.",
                "name": "scriptName"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.onErrorMessage",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "onWarningMessage",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Message.",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Script name.",
                "name": "scriptName"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.onWarningMessage",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "onInfoMessage",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Message.",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Script name.",
                "name": "scriptName"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.onInfoMessage",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "onErrorLoadingScript",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "URL.",
                "name": "url"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.onErrorLoadingScript",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "onClearDebugWindow",
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.onClearDebugWindow",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "onScriptFinished",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Script name.",
                "name": "scriptName"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Engine.",
                "name": "engine"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.onScriptFinished",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>Information on the scripts that are in the default scripts directory of the Interface installation. This is provided as a \rproperty of {@link ScriptDiscoveryService}.\r\r<p>The information provided reflects the subdirectory structure. Methods and signals are per QT's \r<a href=\"http://doc.qt.io/qt-5/qabstractitemmodel.html\">QAbstractItemModel</a> class, with the following details:</p>\r<ul>\r  <li>A single column of data: <code>columnCount(index)</code> returns <code>1</code>. </li>\r  <li>Data is provided for the following roles:\r    <table>\r      <thead>\r        <tr><th>Role</th><th>Value</th><th>Description</th></tr>\r      </thead>\r      <tbody>\r        <tr><td>Display</td><td><code>0</code></td><td>The directory or script file name.</td></tr>\r        <tr><td>Path</td><td><code>256</code></td><td>The path and filename of the data item if it is a script, \r        <code>undefined</code> if it is a directory.</td></tr>\r      </tbody>\r    </table>\r  </li>\r  <li>Use <code>null</code> for the root directory's index.</li>\r</ul>",
        "kind": "class",
        "name": "ScriptsModel",
        "hideconstructor": true,
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "examples": [
            "<caption>List the first 2 levels of the scripts directory.</caption>\rvar MAX_DIRECTORY_LEVEL = 1;\rvar DISPLAY_ROLE = 0;\rvar PATH_ROLE = 256;\r\rfunction printDirectory(parentIndex, directoryLevel, indent) {\r    var numRows = ScriptDiscoveryService.scriptsModel.rowCount(parentIndex);\r    for (var i = 0; i < numRows; i++) {\r        var rowIndex = ScriptDiscoveryService.scriptsModel.index(i, 0, parentIndex);\r\r        var name = ScriptDiscoveryService.scriptsModel.data(rowIndex, DISPLAY_ROLE);\r        var hasChildren = ScriptDiscoveryService.scriptsModel.hasChildren(rowIndex);\r        var path = hasChildren ? \"\" : ScriptDiscoveryService.scriptsModel.data(rowIndex, PATH_ROLE);\r\r        print(indent + \"- \" + name + (hasChildren ? \"\" : \" - \" + path));\r\r        if (hasChildren && directoryLevel < MAX_DIRECTORY_LEVEL) {\r            printDirectory(rowIndex, directoryLevel + 1, indent + \"    \");\r        }\r    }\r}\r\rprint(\"Scripts:\");\rprintDirectory(null, 0, \"\");  // null index for the root directory."
        ],
        "longname": "ScriptsModel",
        "scope": "global"
    },
    {
        "kind": "function",
        "name": "updateScriptsLocation",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "New path.",
                "name": "newPath"
            }
        ],
        "deprecated": "This method is deprecated and will be removed from the API.",
        "memberof": "ScriptsModel",
        "longname": "ScriptsModel.updateScriptsLocation",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "downloadFinished",
        "deprecated": "This method is deprecated and will be removed from the API.",
        "memberof": "ScriptsModel",
        "longname": "ScriptsModel.downloadFinished",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "reloadLocalFiles",
        "deprecated": "This method is deprecated and will be removed from the API.",
        "memberof": "ScriptsModel",
        "longname": "ScriptsModel.reloadLocalFiles",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "reloadDefaultFiles",
        "deprecated": "This method is deprecated and will be removed from the API.",
        "memberof": "ScriptsModel",
        "longname": "ScriptsModel.reloadDefaultFiles",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>Sorted and filtered information on the scripts that are in the default scripts directory of the Interface installation. This \ris provided as a property of {@link ScriptDiscoveryService}.\r\r<p>The information provided reflects the subdirectory structure. Properties, methods, and signals are per QT's\r<a href=\"https://doc.qt.io/qt-5/qsortfilterproxymodel.html\">QSortFilterProxyModel</a> class, with the following details:</p>\r<ul>\r  <li>The rows are sorted per directory and file names.</li>\r  <li>A single column of data: <code>columnCount(index)</code> returns <code>1</code>. </li>\r  <li>Data is provided for the following roles:\r    <table>\r      <thead>\r        <tr><th>Role</th><th>Value</th><th>Description</th></tr>\r      </thead>\r      <tbody>\r        <tr><td>Display</td><td><code>0</code></td><td>The directory or script file name.</td></tr>\r        <tr><td>Path</td><td><code>256</code></td><td>The path and filename of the data item if it is a script,\r        <code>undefined</code> if it is a directory.</td></tr>\r      </tbody>\r    </table>\r  </li>\r  <li>Use <code>null</code> for the root directory's index.</li>\r</ul>",
        "kind": "class",
        "name": "ScriptsModelFilter",
        "hideconstructor": true,
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "examples": [
            "<caption>List all scripts that include \"edit\" in their name.</caption>\rvar DISPLAY_ROLE = 0;\rvar PATH_ROLE = 256;\r\rfunction printDirectory(parentIndex, directoryLevel, indent) {\r    var numRows = ScriptDiscoveryService.scriptsModelFilter.rowCount(parentIndex);\r    for (var i = 0; i < numRows; i++) {\r        var rowIndex = ScriptDiscoveryService.scriptsModelFilter.index(i, 0, parentIndex);\r\r        var name = ScriptDiscoveryService.scriptsModelFilter.data(rowIndex, DISPLAY_ROLE);\r        var hasChildren = ScriptDiscoveryService.scriptsModelFilter.hasChildren(rowIndex);\r        var path = hasChildren ? \"\" : ScriptDiscoveryService.scriptsModelFilter.data(rowIndex, PATH_ROLE);\r\r        print(indent + \"- \" + name + (hasChildren ? \"\" : \" - \" + path));\r\r        if (hasChildren) {\r            printDirectory(rowIndex, directoryLevel + 1, indent + \"    \");\r        }\r    }\r}\r\rScriptDiscoveryService.scriptsModelFilter.filterRegExp = new RegExp(\"^.*edit.*$\", \"i\");  // Set the filter.\rprint(\"Edit scripts:\");\rprintDirectory(null, 0, \"\");  // null index for the root directory.\r\n "
        ],
        "longname": "ScriptsModelFilter",
        "scope": "global"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>The <code>Uuid</code> API provides facilities for working with UUIDs.",
        "kind": "namespace",
        "name": "Uuid",
        "variation": "0",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The null UUID, <code>\"{00000000-0000-0000-0000-000000000000}\"</code>.",
                "name": "NULL"
            }
        ],
        "longname": "Uuid(0)",
        "scope": "global"
    },
    {
        "description": "Generates a UUID from a string representation of the UUID.",
        "kind": "function",
        "name": "fromString",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "A string representation of a UUID. The curly braces are optional.",
                "name": "string"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "A UUID if the given <code>string</code> is valid, <code>null</code> otherwise."
            }
        ],
        "examples": [
            "<caption>Valid and invalid parameters.</caption>\rvar uuid = Uuid.fromString(\"{527c27ea-6d7b-4b47-9ae2-b3051d50d2cd}\");\rprint(uuid); // {527c27ea-6d7b-4b47-9ae2-b3051d50d2cd}\r\ruuid = Uuid.fromString(\"527c27ea-6d7b-4b47-9ae2-b3051d50d2cd\");\rprint(uuid); // {527c27ea-6d7b-4b47-9ae2-b3051d50d2cd}\r\ruuid = Uuid.fromString(\"527c27ea\");\rprint(uuid); // null"
        ],
        "memberof": "Uuid(0)",
        "longname": "Uuid(0).fromString",
        "scope": "static"
    },
    {
        "description": "Generates a string representation of a UUID. However, because UUIDs are represented in JavaScript as strings, this is in\reffect a no-op.",
        "kind": "function",
        "name": "toString",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID to generate a string from.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "- A string representation of the UUID."
            }
        ],
        "memberof": "Uuid(0)",
        "longname": "Uuid(0).toString",
        "scope": "static"
    },
    {
        "description": "Generates a new UUID.",
        "kind": "function",
        "name": "generate",
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "A new UUID."
            }
        ],
        "examples": [
            "<caption>Generate a new UUID and reports its JavaScript type.</caption>\rvar uuid = Uuid.generate();\rprint(uuid);        // {nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn}\rprint(typeof uuid); // string"
        ],
        "memberof": "Uuid(0)",
        "longname": "Uuid(0).generate",
        "scope": "static"
    },
    {
        "description": "Tests whether two UUIDs are equal.",
        "kind": "function",
        "name": "isEqual",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The first UUID to compare.",
                "name": "idA"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The second UUID to compare.",
                "name": "idB"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the two UUIDs are equal, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Demonstrate <code>true</code> and <code>false</code> cases.</caption>\rvar uuidA = Uuid.generate();\rvar uuidB = Uuid.generate();\rprint(Uuid.isEqual(uuidA, uuidB)); // false\ruuidB = uuidA;\rprint(Uuid.isEqual(uuidA, uuidB)); // true"
        ],
        "memberof": "Uuid(0)",
        "longname": "Uuid(0).isEqual",
        "scope": "static"
    },
    {
        "description": "Tests whether a UUID is null.",
        "kind": "function",
        "name": "isNull",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID to test.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the UUID equals <code>Uuid.NULL</code> or is <code>null</code>, otherwise \r    <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Demonstrate <code>true</code> and <code>false</code> cases.</caption>\rvar uuid; // undefined\rprint(Uuid.isNull(uuid)); // false\ruuid = Uuid.generate();\rprint(Uuid.isNull(uuid)); // false\ruuid = Uuid.NULL;\rprint(Uuid.isNull(uuid)); // true\ruuid = null;\rprint(Uuid.isNull(uuid)); // true"
        ],
        "memberof": "Uuid(0)",
        "longname": "Uuid(0).isNull",
        "scope": "static"
    },
    {
        "description": "Prints a UUID to the program log, as a text label followed by the UUID value.",
        "kind": "function",
        "name": "print",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The label to print.",
                "name": "label"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID to print.",
                "name": "id"
            }
        ],
        "examples": [
            "<caption>Two ways of printing a label plus UUID.</caption>\rvar uuid = Uuid.generate();\rUuid.print(\"Generated UUID:\", uuid); // Generated UUID: {nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn}\rprint(\"Generated UUID: \" + uuid);    // Generated UUID: {nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn}\r\n     "
        ],
        "memberof": "Uuid(0)",
        "longname": "Uuid(0).print",
        "scope": "static"
    },
    {
        "description": "A display or device touch event.",
        "kind": "typedef",
        "name": "TouchEvent",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer x-coordinate of the average position of the touch events.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer y-coordinate of the average position of the touch events.",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the touch point has just been pressed, otherwise <code>false</code>.",
                "name": "isPressed"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the touch point has moved, otherwise <code>false</code>.",
                "name": "isMoved"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the touch point has not moved, otherwise <code>false</code>.",
                "name": "isStationary"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the  touch point has just been released, otherwise <code>false</code>.",
                "name": "isReleased"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the Shift key was pressed when the event was generated, otherwise\r    <code>false</code>.",
                "name": "isShifted"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the \"meta\" key was pressed when the event was generated, otherwise\r    <code>false</code>. On Windows the \"meta\" key is the Windows key; on OSX it is the Control (Splat) key.",
                "name": "isMeta"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the \"control\" key was pressed when the event was generated, otherwise\r    <code>false</code>. On Windows the \"control\" key is the Ctrl key; on OSX it is the Command key.",
                "name": "isControl"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the Alt key was pressed when the event was generated, otherwise\r    <code>false</code>.",
                "name": "isAlt"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer number of touch points.",
                "name": "touchPoints"
            },
            {
                "type": {
                    "names": [
                        "Array.<Vec2>"
                    ]
                },
                "description": "The coordinates of the touch points.",
                "name": "points"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The radius of a circle centered on their average position that encompasses the touch points.",
                "name": "radius"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the <code>radius</code> has reduced since the most recent touch event \r    with a different <code>radius</code> value, otherwise <code>false</code>.",
                "name": "isPinching"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the <code>radius</code> has increased since the most recent touch \r    event with a different <code>radius</code> value, otherwise <code>false</code>.",
                "name": "isPinchOpening"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "An angle calculated from the touch points, in degrees.",
                "name": "angle"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The change in the <code>angle</code> value since the previous touch event, in degrees, if \r    the number of touch points is the same, otherwise <code>0.0</code>.",
                "name": "deltaAngle"
            },
            {
                "type": {
                    "names": [
                        "Array.<number>"
                    ]
                },
                "description": "The angles of each touch point about the center of all the touch points, in degrees.",
                "name": "angles"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the <code>angle</code> of the touch event has changed since the \r    previous touch event and the number of touch points is the same, otherwise <code>false</code>.",
                "name": "isRotating"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<code>\"clockwise\"</code> or <code>\"counterClockwise\"</code> if the <code>angle</code> of the \r    touch event has changed since the previous touch event and the number of touch points is the same, otherwise \r    <code>\"none\"</code>.",
                "name": "rotating"
            }
        ],
        "examples": [
            "<caption>Report the TouchEvent details when a touch event starts.</caption>\rController.touchBeginEvent.connect(function (event) {\r    print(JSON.stringify(event));\r});\r\n "
        ],
        "longname": "TouchEvent",
        "scope": "global"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Assignment Client Scripts</p>The <code>Users</code> API provides features to regulate your interaction with other users.",
        "kind": "namespace",
        "name": "Users",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the domain server allows the client to kick (ban) avatars, otherwise \r    <code>false</code>. <em>Read-only.</em>",
                "name": "canKick"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the client requests extra data from the mixers (such as \r    positional data of an avatar they've ignored). <em>Read-only.</em>",
                "name": "requestsDomainListData"
            }
        ],
        "longname": "Users",
        "scope": "global"
    },
    {
        "description": "Ignores or un-ignores another avatar. Ignoring an avatar makes them disappear for you and you disappear for them.",
        "kind": "function",
        "name": "ignore",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The session ID of the avatar to ignore.",
                "name": "sessionID"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "<code>true</code> to ignore, <code>false</code> to un-ignore.",
                "name": "enable"
            }
        ],
        "examples": [
            "<caption>Ignore a nearby avatar for a few seconds.</caption>\rvar avatars = AvatarList.getAvatarsInRange(MyAvatar.position, 1000);\rif (avatars.length > 1) {  // Skip own avatar which is provided in position 0.\r    print(\"Ignore: \" + avatars[1]);\r    Users.ignore(avatars[1], true);\r    Script.setTimeout(function () {\r        print(\"Un-ignore: \" + avatars[1]);\r        Users.ignore(avatars[1], false);\r    }, 5000);\r} else {\r    print(\"No avatars\");\r}"
        ],
        "memberof": "Users",
        "longname": "Users.ignore",
        "scope": "static"
    },
    {
        "description": "Gets whether or not you have ignored a particular avatar.",
        "kind": "function",
        "name": "getIgnoreStatus",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The session ID of the avatar to get the ignore status of.",
                "name": "sessionID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the avatar is being ignored, <code>false</code> if it isn't."
            }
        ],
        "memberof": "Users",
        "longname": "Users.getIgnoreStatus",
        "scope": "static"
    },
    {
        "description": "Mutes or un-mutes another avatar. Muting makes you unable to hear them and them unable to hear you.",
        "kind": "function",
        "name": "personalMute",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The session ID of the avatar to mute.",
                "name": "sessionID"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "<code>true</code> to mute, <code>false</code> to un-mute.",
                "name": "muteEnabled"
            }
        ],
        "memberof": "Users",
        "longname": "Users.personalMute",
        "scope": "static"
    },
    {
        "description": "Gets whether or not you have muted a particular avatar.",
        "kind": "function",
        "name": "getPersonalMuteStatus",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The session ID of the avatar to get the mute status of.",
                "name": "sessionID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the avatar is muted, <code>false</code> if it isn't."
            }
        ],
        "memberof": "Users",
        "longname": "Users.getPersonalMuteStatus",
        "scope": "static"
    },
    {
        "description": "Sets an avatar's gain (volume) for you and you only, or sets the master gain.",
        "kind": "function",
        "name": "setAvatarGain",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The session ID of the avatar to set the gain for, or <code>null</code> to set the master gain.",
                "name": "nodeID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The gain to set, in dB.",
                "name": "gain"
            }
        ],
        "memberof": "Users",
        "longname": "Users.setAvatarGain",
        "scope": "static"
    },
    {
        "description": "Gets an avatar's gain (volume) for you and you only, or gets the master gain.",
        "kind": "function",
        "name": "getAvatarGain",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The session ID of the avatar to get the gain for, or <code>null</code> to get the master gain.",
                "name": "nodeID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The gain, in dB."
            }
        ],
        "memberof": "Users",
        "longname": "Users.getAvatarGain",
        "scope": "static"
    },
    {
        "description": "Kicks and bans a user. This removes them from the server and prevents them from returning. The ban is by user name if \ravailable, or machine fingerprint otherwise.\r<p>This function only works if you're an administrator of the domain you're in.</p>",
        "kind": "function",
        "name": "kick",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The session ID of the user to kick and ban.",
                "name": "sessionID"
            }
        ],
        "memberof": "Users",
        "longname": "Users.kick",
        "scope": "static"
    },
    {
        "description": "Mutes a user's microphone for everyone. The mute is not permanent: the user can unmute themselves. \r<p>This function only works if you're an administrator of the domain you're in.</p>",
        "kind": "function",
        "name": "mute",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The session ID of the user to mute.",
                "name": "sessionID"
            }
        ],
        "memberof": "Users",
        "longname": "Users.mute",
        "scope": "static"
    },
    {
        "description": "Requests the user name and machine fingerprint associated with the given UUID. The user name is returned via a \r{@link Users.usernameFromIDReply|usernameFromIDReply} signal.\r<p>This function only works if you're an administrator of the domain you're in.</p>",
        "kind": "function",
        "name": "requestUsernameFromID",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The session ID of the user to get the user name and machine fingerprint of.",
                "name": "sessionID"
            }
        ],
        "examples": [
            "<caption>Report the user name and fingerprint of a nearby user.</caption>\rfunction onUsernameFromIDReply(sessionID, userName, machineFingerprint, isAdmin) {\r    print(\"Session:     \" + sessionID);\r    print(\"User name:   \" + userName);\r    print(\"Fingerprint: \" + machineFingerprint);\r    print(\"Is admin:    \" + isAdmin);\r}\r\rUsers.usernameFromIDReply.connect(onUsernameFromIDReply);\r\rvar avatars = AvatarList.getAvatarsInRange(MyAvatar.position, 1000);\rif (avatars.length > 1) {  // Skip own avatar which is provided in position 0.\r    print(\"Request data for: \" + avatars[1]);\r    Users.requestUsernameFromID(avatars[1]);\r} else {\r    print(\"No avatars\");\r}"
        ],
        "memberof": "Users",
        "longname": "Users.requestUsernameFromID",
        "scope": "static"
    },
    {
        "description": "Gets whether the client can kick and ban users in the domain.",
        "kind": "function",
        "name": "getCanKick",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the domain server allows the client to kick and ban users, otherwise \r    <code>false</code>."
            }
        ],
        "memberof": "Users",
        "longname": "Users.getCanKick",
        "scope": "static"
    },
    {
        "description": "Toggles the state of the privacy shield.",
        "kind": "function",
        "name": "toggleIgnoreRadius",
        "memberof": "Users",
        "longname": "Users.toggleIgnoreRadius",
        "scope": "static"
    },
    {
        "description": "Enables the privacy shield.",
        "kind": "function",
        "name": "enableIgnoreRadius",
        "memberof": "Users",
        "longname": "Users.enableIgnoreRadius",
        "scope": "static"
    },
    {
        "description": "Disables the privacy shield.",
        "kind": "function",
        "name": "disableIgnoreRadius",
        "memberof": "Users",
        "longname": "Users.disableIgnoreRadius",
        "scope": "static"
    },
    {
        "description": "Gets the status of the privacy shield.",
        "kind": "function",
        "name": "getIgnoreRadiusEnabled",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the privacy shield is enabled, <code>false</code> if it is disabled."
            }
        ],
        "memberof": "Users",
        "longname": "Users.getIgnoreRadiusEnabled",
        "scope": "static"
    },
    {
        "description": "Triggered when your ability to kick and ban users changes.",
        "kind": "signal",
        "name": "canKickChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if you can kick and ban users, <code>false</code> if you can't.",
                "name": "canKick"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Users",
        "longname": "Users.canKickChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the privacy shield status changes.",
        "kind": "signal",
        "name": "ignoreRadiusEnabledChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the privacy shield is enabled, <code>false</code> if it isn't.",
                "name": "isEnabled"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Users",
        "longname": "Users.ignoreRadiusEnabledChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when another user enters the privacy shield.",
        "kind": "signal",
        "name": "enteredIgnoreRadius",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Users",
        "longname": "Users.enteredIgnoreRadius",
        "scope": "static"
    },
    {
        "description": "Triggered in response to a {@link Users.requestUsernameFromID|requestUsernameFromID} call. Provides the user name and \rmachine fingerprint associated with a UUID.",
        "kind": "signal",
        "name": "usernameFromIDReply",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The session ID of the client that the data is for.",
                "name": "sessionID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The user name of the client, if the requesting client is an administrator in the domain or \r    the <code>sessionID</code> is that of the client, otherwise <code>\"\"</code>.",
                "name": "userName"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The machine fingerprint of the client, if the requesting client is an administrator \r    in the domain or the <code>sessionID</code> is that of the client, otherwise {@link Uuid|Uuid.NULL}.",
                "name": "machineFingerprint"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the client is an administrator in the domain, <code>false</code> if not.",
                "name": "isAdmin"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Users",
        "longname": "Users.usernameFromIDReply",
        "scope": "static"
    },
    {
        "description": "Triggered when a client has disconnected from the domain.",
        "kind": "signal",
        "name": "avatarDisconnected",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The session ID of the client that has disconnected.",
                "name": "sessionID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Users",
        "longname": "Users.avatarDisconnected",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>The <code>Vec3</code> API provides facilities for generating and manipulating 3-dimensional vectors. High Fidelity uses a \rright-handed Cartesian coordinate system where the y-axis is the \"up\" and the negative z-axis is the \"front\" direction.\r<img alt=\"High Fidelity coordinate system\" src=\"https://docs.highfidelity.com/images/opengl-coord-system.jpg\" />",
        "kind": "namespace",
        "name": "Vec3",
        "variation": "0",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: 1, y: 0, z: 0 }</code> : Unit vector in the x-axis direction. <em>Read-only.</em>",
                "name": "UNIT_X"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: 0, y: 1, z: 0 }</code> : Unit vector in the y-axis direction. <em>Read-only.</em>",
                "name": "UNIT_Y"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: 0, y: 0, z: 1 }</code> : Unit vector in the z-axis direction. <em>Read-only.</em>",
                "name": "UNIT_Z"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: -1, y: 0, z: 0 }</code> : Unit vector in the negative x-axis direction. \r    <em>Read-only.</em>",
                "name": "UNIT_NEG_X"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: 0, y: -1, z: 0 }</code> : Unit vector in the negative y-axis direction. \r    <em>Read-only.</em>",
                "name": "UNIT_NEG_Y"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: 0, y: 0, z: -1 }</code> : Unit vector in the negative z-axis direction. \r    <em>Read-only.</em>",
                "name": "UNIT_NEG_Z"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: 0.707107, y: 0.707107, z: 0 }</code> : Unit vector in the direction of the diagonal \r    between the x and y axes. <em>Read-only.</em>",
                "name": "UNIT_XY"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: 0.707107, y: 0, z: 0.707107 }</code> : Unit vector in the direction of the diagonal \r    between the x and z axes. <em>Read-only.</em>",
                "name": "UNIT_XZ"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: 0, y: 0.707107, z: 0.707107 }</code> : Unit vector in the direction of the diagonal \r    between the y and z axes. <em>Read-only.</em>",
                "name": "UNIT_YZ"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: 0.577350, y: 0.577350, z: 0.577350 }</code> : Unit vector in the direction of the \r    diagonal between the x, y, and z axes. <em>Read-only.</em>",
                "name": "UNIT_XYZ"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: 3.402823e+38, y: 3.402823e+38, z: 3.402823e+38 }</code> : Vector with all axis \r    values set to the maximum floating point value. <em>Read-only.</em>",
                "name": "FLOAT_MAX"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: -3.402823e+38, y: -3.402823e+38, z: -3.402823e+38 }</code> : Vector with all axis \r    values set to the negative of the maximum floating point value. <em>Read-only.</em>",
                "name": "FLOAT_MIN"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: 0, y: 0, z: 0 }</code> : Vector with all axis values set to <code>0</code>. \r    <em>Read-only.</em>",
                "name": "ZERO"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: 1, y: 1, z: 1 }</code> : Vector with all axis values set to <code>1</code>. \r    <em>Read-only.</em>",
                "name": "ONE"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: 2, y: 2, z: 2 }</code> : Vector with all axis values set to <code>2</code>. \r    <em>Read-only.</em>",
                "name": "TWO"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: 0.5, y: 0.5, z: 0.5 }</code> : Vector with all axis values set to <code>0.5</code>. \r    <em>Read-only.</em>",
                "name": "HALF"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: 1, y: 0, z: 0 }</code> : Unit vector in the \"right\" direction. Synonym for \r    <code>UNIT_X</code>. <em>Read-only.</em>",
                "name": "RIGHT"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: 0, y: 1, z: 0 }</code> : Unit vector in the \"up\" direction. Synonym for \r    <code>UNIT_Y</code>. <em>Read-only.</em>",
                "name": "UP"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: 0, y: 0, z: -1 }</code> : Unit vector in the \"front\" direction. Synonym for \r    <code>UNIT_NEG_Z</code>. <em>Read-only.</em>",
                "name": "FRONT"
            }
        ],
        "longname": "Vec3(0)",
        "scope": "global"
    },
    {
        "description": "Calculates the reflection of a vector in a plane.",
        "kind": "function",
        "name": "reflect",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The vector to reflect.",
                "name": "v"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The normal of the plane.",
                "name": "normal"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The vector reflected in the plane given by the normal."
            }
        ],
        "examples": [
            "<caption>Reflect a vector in the x-z plane.</caption>\rvar v = { x: 1, y: 2, z: 3 };\rvar normal = Vec3.UNIT_Y;\rvar reflected = Vec3.reflect(v, normal);\rprint(JSON.stringify(reflected));  // {\"x\":1,\"y\":-2,\"z\":3}"
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).reflect",
        "scope": "static"
    },
    {
        "description": "Calculates the cross product of two vectors.",
        "kind": "function",
        "name": "cross",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The first vector.",
                "name": "v1"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The second vector.",
                "name": "v2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The cross product of <code>v1</code> and <code>v2</code>."
            }
        ],
        "examples": [
            "<caption>The cross product of x and y unit vectors is the z unit vector.</caption>\rvar v1 = { x: 1, y: 0, z: 0 };\rvar v2 = { x: 0, y: 1, z: 0 };\rvar crossProduct = Vec3.cross(v1, v2);\rprint(JSON.stringify(crossProduct)); // {\"x\":0,\"y\":0,\"z\":1}"
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).cross",
        "scope": "static"
    },
    {
        "description": "Calculates the dot product of two vectors.",
        "kind": "function",
        "name": "dot",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The first vector.",
                "name": "v1"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The second vector.",
                "name": "v2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The dot product of <code>v1</code> and <code>v2</code>."
            }
        ],
        "examples": [
            "<caption>The dot product of vectors at right angles is <code>0</code>.</caption>\rvar v1 = { x: 1, y: 0, z: 0 };\rvar v2 = { x: 0, y: 1, z: 0 };\rvar dotProduct = Vec3.dot(v1, v2);\rprint(dotProduct); // 0"
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).dot",
        "scope": "static"
    },
    {
        "description": "Multiplies a vector by a scale factor.",
        "kind": "function",
        "name": "multiply",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The vector.",
                "name": "v"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The scale factor.",
                "name": "scale"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The vector with each ordinate value multiplied by the <code>scale</code>."
            }
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).multiply",
        "scope": "static"
    },
    {
        "description": "Multiplies a vector by a scale factor.",
        "kind": "function",
        "name": "multiply",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The scale factor.",
                "name": "scale"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The vector.",
                "name": "v"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The vector with each ordinate value multiplied by the <code>scale</code>."
            }
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).multiply",
        "scope": "static"
    },
    {
        "description": "Multiplies two vectors.",
        "kind": "function",
        "name": "multiplyVbyV",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The first vector.",
                "name": "v1"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The second vector.",
                "name": "v2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "A vector formed by multiplying the ordinates of two vectors: <code>{ x: v1.x * v2.x, y: v1.y * v2.y, \r    z: v1.z * v2.z }</code>."
            }
        ],
        "examples": [
            "<caption>Multiply two vectors.</caption>\rvar v1 = { x: 1, y: 2, z: 3 };\rvar v2 = { x: 1, y: 2, z: 3 };\rvar multiplied = Vec3.multiplyVbyV(v1, v2);\rprint(JSON.stringify(multiplied));  // {\"x\":1,\"y\":4,\"z\":9}"
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).multiplyVbyV",
        "scope": "static"
    },
    {
        "description": "Rotates a vector.",
        "kind": "function",
        "name": "multiplyQbyV",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation to apply.",
                "name": "q"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The vector to rotate.",
                "name": "v"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>v</code> rotated by <code>q</code>."
            }
        ],
        "examples": [
            "<caption>Rotate the negative z-axis by 90 degrees about the x-axis.</caption>\rvar v = Vec3.UNIT_NEG_Z;\rvar q = Quat.fromPitchYawRollDegrees(90, 0, 0);\rvar result = Vec3.multiplyQbyV(q, v);\rprint(JSON.stringify(result));  // {\"x\":0,\"y\":1.000,\"z\":1.19e-7}"
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).multiplyQbyV",
        "scope": "static"
    },
    {
        "description": "Calculates the sum of two vectors.",
        "kind": "function",
        "name": "sum",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The first vector.",
                "name": "v1"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The second vector.",
                "name": "v2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The sum of the two vectors."
            }
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).sum",
        "scope": "static"
    },
    {
        "description": "Calculates one vector subtracted from another.",
        "kind": "function",
        "name": "subtract",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The first vector.",
                "name": "v1"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The second vector.",
                "name": "v2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The second vector subtracted from the first."
            }
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).subtract",
        "scope": "static"
    },
    {
        "description": "Calculates the length of a vector",
        "kind": "function",
        "name": "length",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The vector.",
                "name": "v"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The length of the vector."
            }
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).length",
        "scope": "static"
    },
    {
        "description": "Calculates the distance between two points.",
        "kind": "function",
        "name": "distance",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The first point.",
                "name": "p1"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The second point.",
                "name": "p2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The distance between the two points."
            }
        ],
        "examples": [
            "<caption>The distance between two points is aways positive.</caption>\rvar p1 = { x: 0, y: 0, z: 0 };\rvar p2 = { x: 0, y: 0, z: 10 };\rvar distance = Vec3.distance(p1, p2);\rprint(distance); // 10\r\rp2 = { x: 0, y: 0, z: -10 };\rdistance = Vec3.distance(p1, p2);\rprint(distance); // 10"
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).distance",
        "scope": "static"
    },
    {
        "description": "Calculates the angle of rotation from one vector onto another, with the sign depending on a reference vector.",
        "kind": "function",
        "name": "orientedAngle",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The first vector.",
                "name": "v1"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The second vector.",
                "name": "v2"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "Reference vector.",
                "name": "ref"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The angle of rotation from the first vector to the second, in degrees. The value is positive if the \rrotation axis aligns with the reference vector (has a positive dot product), otherwise the value is negative."
            }
        ],
        "examples": [
            "<caption>Compare <code>Vec3.getAngle()</code> and <code>Vec3.orientedAngle()</code>.</caption>\rvar v1 = { x: 5, y: 0, z: 0 };\rvar v2 = { x: 5, y: 0, z: 5 };\r\rvar angle = Vec3.getAngle(v1, v2);\rprint(angle * 180 / Math.PI);  // 45\r\rprint(Vec3.orientedAngle(v1, v2, Vec3.UNIT_Y));  // -45\rprint(Vec3.orientedAngle(v1, v2, Vec3.UNIT_NEG_Y));  // 45\rprint(Vec3.orientedAngle(v1, v2, { x: 1, y: 2, z: -1 }));  // -45\rprint(Vec3.orientedAngle(v1, v2, { x: 1, y: -2, z: -1 }));  // 45"
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).orientedAngle",
        "scope": "static"
    },
    {
        "description": "Normalizes a vector so that its length is <code>1</code>.",
        "kind": "function",
        "name": "normalize",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The vector to normalize.",
                "name": "v"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The vector normalized to have a length of <code>1</code>."
            }
        ],
        "examples": [
            "<caption>Normalize a vector.</caption>\rvar v = { x: 10, y: 10, z: 0 };\rvar normalized = Vec3.normalize(v);\rprint(JSON.stringify(normalized));  // {\"x\":0.7071,\"y\":0.7071,\"z\":0}\rprint(Vec3.length(normalized));  // 1"
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).normalize",
        "scope": "static"
    },
    {
        "description": "Calculates a linear interpolation between two vectors.",
        "kind": "function",
        "name": "mix",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The first vector.",
                "name": "v1"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The second vector.",
                "name": "v2"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The interpolation factor, range <code>0.0</code> &ndash; <code>1.0</code>.",
                "name": "factor"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The linear interpolation between the two vectors: <code>(1 - factor) * v1 + factor * v2</code>."
            }
        ],
        "examples": [
            "<caption>Linear interpolation between two vectors.</caption>\rvar v1 = { x: 10, y: 0, z: 0 };\rvar v2 = { x: 0, y: 10, z: 0 };\rvar interpolated = Vec3.mix(v1, v2, 0.75);  // 1/4 of v1 and 3/4 of v2.\rprint(JSON.stringify(interpolated));  // {\"x\":2.5,\"y\":7.5\",\"z\":0}"
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).mix",
        "scope": "static"
    },
    {
        "description": "Prints the vector to the program log, as a text label followed by the vector value.",
        "kind": "function",
        "name": "print",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The label to print.",
                "name": "label"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The vector value to print.",
                "name": "v"
            }
        ],
        "examples": [
            "<caption>Two ways of printing a label and vector value.</caption>\rvar v = { x: 1, y: 2, z: 3 };\rVec3.print(\"Vector: \", v);  // dvec3(1.000000, 2.000000, 3.000000)\rprint(\"Vector: \" + JSON.stringify(v));  // {\"x\":1,\"y\":2,\"z\":3}"
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).print",
        "scope": "static"
    },
    {
        "description": "Tests whether two vectors are equal.\r<p><strong>Note:</strong> The vectors must be exactly equal in order for <code>true</code> to be returned; it is often \rbetter to use {@link Vec3(0).withinEpsilon|withinEpsilon}.</p>",
        "kind": "function",
        "name": "equal",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The first vector.",
                "name": "v1"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The second vector.",
                "name": "v2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the two vectors are exactly equal, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption> Vectors are only equal if exactly the same.</caption>\rvar v1 = { x: 10, y: 10, z: 10 };\rvar v2 = { x: 10, y: 10, z: 10 };\r\rvar equal = Vec3.equal(v1, v2);\rprint(equal);  // true\r\rv2 = { x: 10, y: 10, z: 10.0005 };\requal = Vec3.equal(v1, v2);\rprint(equal);  // false"
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).equal",
        "scope": "static"
    },
    {
        "description": "Tests whether two vectors are equal within a tolerance.\r<p><strong>Note:</strong> It is often better to use this function than {@link Vec3(0).equal|equal}.</p>",
        "kind": "function",
        "name": "withinEpsilon",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The first vector.",
                "name": "v1"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The second vector.",
                "name": "v2"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The maximum distance between the two vectors.",
                "name": "epsilon"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the distance between the points represented by the vectors is less than or equal \rto <code>epsilon</code>, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Testing vectors for near equality.</caption>\rvar v1 = { x: 10, y: 10, z: 10 };\rvar v2 = { x: 10, y: 10, z: 10.0005 };\r\rvar equal = Vec3.equal(v1, v2);\rprint(equal);  // false\r\requal = Vec3.withinEpsilon(v1, v2, 0.001);\rprint(equal);  // true"
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).withinEpsilon",
        "scope": "static"
    },
    {
        "description": "Calculates polar coordinates (elevation, azimuth, radius) that transform the unit z-axis vector onto a point.",
        "kind": "function",
        "name": "toPolar",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The point to calculate the polar coordinates for.",
                "name": "p"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "Vector of polar coordinates for the point: <code>x</code> elevation rotation about the x-axis in \r    radians, <code>y</code> azimuth rotation about the y-axis in radians, and <code>z</code> radius."
            }
        ],
        "examples": [
            "<caption>Polar coordinates for a point.</caption>\rvar v = { x: 5, y: 2.5, z: 5 };\rvar polar = Vec3.toPolar(v);\rprint(\"Elevation: \" + polar.x * 180 / Math.PI);  // -19.471\rprint(\"Azimuth: \" + polar.y * 180 / Math.PI);  // 45\rprint(\"Radius: \" + polar.z);  // 7.5"
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).toPolar",
        "scope": "static"
    },
    {
        "description": "Calculates the coordinates of a point from polar coordinate transformation of the unit z-axis vector.",
        "kind": "function",
        "name": "fromPolar",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The polar coordinates of a point: <code>x</code> elevation rotation about the x-axis in radians, \r   <code>y</code> azimuth rotation about the y-axis in radians, and <code>z</code> radius.",
                "name": "polar"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The coordinates of the point."
            }
        ],
        "examples": [
            "<caption>Polar coordinates to Cartesian.</caption>\rvar polar = { x: -19.471 * Math.PI / 180, y: 45 * Math.PI / 180, z: 7.5 };\rvar p = Vec3.fromPolar(polar);\rprint(JSON.stringify(p));  // {\"x\":5,\"y\":2.5,\"z\":5}"
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).fromPolar",
        "scope": "static"
    },
    {
        "description": "Calculates the unit vector corresponding to polar coordinates elevation and azimuth transformation of the unit z-axis \rvector.",
        "kind": "function",
        "name": "fromPolar",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Rotation about the x-axis, in radians.",
                "name": "elevation"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Rotation about the y-axis, in radians.",
                "name": "azimuth"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "Unit vector for the direction specified by <code>elevation</code> and <code>azimuth</code>."
            }
        ],
        "examples": [
            "<caption>Polar coordinates to Cartesian coordinates.</caption>\rvar elevation = -19.471 * Math.PI / 180;\rvar rotation = 45 * Math.PI / 180;\rvar p = Vec3.fromPolar(elevation, rotation);\rprint(JSON.stringify(p));  // {\"x\":0.667,\"y\":0.333,\"z\":0.667}\rp = Vec3.multiply(7.5, p);\rprint(JSON.stringify(p));  // {\"x\":5,\"y\":2.5,\"z\":5}"
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).fromPolar",
        "scope": "static"
    },
    {
        "description": "Calculates the angle between two vectors.",
        "kind": "function",
        "name": "getAngle",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The first vector.",
                "name": "v1"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The second vector.",
                "name": "v2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The angle between the two vectors, in radians."
            }
        ],
        "examples": [
            "<caption>Calculate the angle between two vectors.</caption>\rvar v1 = { x: 10, y: 0, z: 0 };\rvar v2 = { x: 0, y: 0, z: 10 };\rvar angle = Vec3.getAngle(v1, v2);\rprint(angle * 180 / Math.PI);  // 90\r\n     "
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).getAngle",
        "scope": "static"
    },
    {
        "description": "A mouse wheel event.",
        "kind": "typedef",
        "name": "WheelEvent",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer x-coordinate of the event on the Interface window or HMD HUD.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer y-coordinate of the event on the Interface window or HMD HUD.",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer number indicating the direction and speed to scroll: positive numbers to scroll up, and \r    negative numers to scroll down.",
                "name": "delta"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The orientation of the wheel: <code>\"VERTICAL\"</code> for a typical mouse; \r    <code>\"HORIZONTAL\"</code> for a \"horizontal\" wheel.",
                "name": "orientation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the left button was pressed when the event was generated, otherwise \r    <code>false</code>.",
                "name": "isLeftButton"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the middle button was pressed when the event was generated, \r    otherwise <code>false</code>.",
                "name": "isMiddleButton"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the right button was pressed when the event was generated, \r    otherwise <code>false</code>.",
                "name": "isRightButton"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the Shift key was pressed when the event was generated, otherwise\r    <code>false</code>.",
                "name": "isShifted"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the \"meta\" key was pressed when the event was generated, otherwise\r    <code>false</code>. On Windows the \"meta\" key is the Windows key; on OSX it is the Control (Splat) key.",
                "name": "isMeta"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the \"control\" key was pressed when the event was generated, otherwise\r    <code>false</code>. On Windows the \"control\" key is the Ctrl key; on OSX it is the Command key.",
                "name": "isControl"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the Alt key was pressed when the event was generated, otherwise\r    <code>false</code>.",
                "name": "isAlt"
            }
        ],
        "examples": [
            "<caption>Report the WheelEvent details for each wheel rotation.</caption>\rController.wheelEvent.connect(function (event) {\r    print(JSON.stringify(event));\r});\r\n "
        ],
        "longname": "WheelEvent",
        "scope": "global"
    },
    {
        "kind": "function",
        "name": "lintScript",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Source code.",
                "name": "sourceCode"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "File name.",
                "name": "fileName"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 1,
                "description": "Line number.",
                "name": "lineNumber"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Object."
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Script",
        "longname": "Script.lintScript",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "makeError",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "optional": true,
                "description": "Other.",
                "name": "other"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"Error\"",
                "description": "Error.",
                "name": "type"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Object."
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Script",
        "longname": "Script.makeError",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "formatExecption",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Exception.",
                "name": "exception"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Include extended details.",
                "name": "inludeExtendeDetails"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "String."
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Script",
        "longname": "Script.formatExecption",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "signalHandlerException",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Exception.",
                "name": "exception"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "deprecated": "This signal is deprecated and will be removed.",
        "memberof": "Script",
        "longname": "Script.signalHandlerException",
        "scope": "static"
    },
    {
        "description": "Triggered when a script generates an unhandled exception.",
        "kind": "signal",
        "name": "unhandledException",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The details of the exception.",
                "name": "exception"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report the details of an unhandled exception.</caption>\rScript.unhandledException.connect(function (exception) {\r    print(\"Unhandled exception: \" + JSON.stringify(exception));\r});\rvar properties = JSON.parse(\"{ x: 1\"); // Invalid JSON string.\r\n     "
        ],
        "memberof": "Script",
        "longname": "Script.unhandledException",
        "scope": "static"
    },
    {
        "description": "<p>How an entity is billboarded.</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"none\"</code></td><td>The entity will not be billboarded.</td></tr>\r    <tr><td><code>\"yaw\"</code></td><td>The entity will yaw, but not pitch, to face the camera. Its actual rotation will be \r      ignored.</td></tr>\r    <tr><td><code>\"full\"</code></td><td>The entity will yaw and pitch to face the camera. Its actual rotation will be \r      ignored.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "BillboardMode",
        "type": {
            "names": [
                "string"
            ]
        },
        "longname": "BillboardMode",
        "scope": "global"
    },
    {
        "description": "<p>A <code>BoxFace</code> specifies the face of an axis-aligned (AA) box.\r<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"MIN_X_FACE\"</code></td><td>The minimum x-axis face.</td></tr>\r    <tr><td><code>\"MAX_X_FACE\"</code></td><td>The maximum x-axis face.</td></tr>\r    <tr><td><code>\"MIN_Y_FACE\"</code></td><td>The minimum y-axis face.</td></tr>\r    <tr><td><code>\"MAX_Y_FACE\"</code></td><td>The maximum y-axis face.</td></tr>\r    <tr><td><code>\"MIN_Z_FACE\"</code></td><td>The minimum z-axis face.</td></tr>\r    <tr><td><code>\"MAX_Z_FACE\"</code></td><td>The maximum z-axis face.</td></tr>\r    <tr><td><code>\"UNKNOWN_FACE\"</code></td><td>Unknown value.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "BoxFace",
        "type": {
            "names": [
                "string"
            ]
        },
        "longname": "BoxFace",
        "scope": "global"
    },
    {
        "description": "<p>How an effect is applied in a {@link Entities.EntityProperties-Zone|Zone} entity.</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"inherit\"</code></td><td>The effect from any enclosing zone continues into this zone.</td></tr>\r    <tr><td><code>\"disabled\"</code></td><td>The effect &mdash; from any enclosing zone and this zone &mdash; is disabled in \r      this zone.</td></tr>\r    <tr><td><code>\"enabled\"</code></td><td>The effect from this zone is enabled, overriding the effect from any enclosing \r      zone.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "ComponentMode",
        "type": {
            "names": [
                "string"
            ]
        },
        "memberof": "Entities",
        "longname": "Entities.ComponentMode",
        "scope": "static"
    },
    {
        "description": "<p>The priority of updates from avatars in a zone to other clients.</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"inherit\"</code></td><td>The update priority from any enclosing zone continues into this zone.</td></tr>\r    <tr><td><code>\"crowd\"</code></td><td>The update priority in this zone is the normal priority.</td></tr>\r    <tr><td><code>\"hero\"</code></td><td>Avatars in this zone have an increased update priority.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "AvatarPriorityMode",
        "type": {
            "names": [
                "string"
            ]
        },
        "memberof": "Entities",
        "longname": "Entities.AvatarPriorityMode",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>The <code>DebugDraw</code> API renders debug markers and lines. These markers are only visible locally; they are not visible \rto other users.",
        "kind": "namespace",
        "name": "DebugDraw",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "longname": "DebugDraw",
        "scope": "global"
    },
    {
        "description": "Draws a line in world space, visible for a single frame. To make the line visually persist, you need to repeatedly draw \rit.",
        "kind": "function",
        "name": "drawRay",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The start position of the line, in world coordinates.",
                "name": "start"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The end position of the line, in world coordinates.",
                "name": "end"
            },
            {
                "type": {
                    "names": [
                        "Vec4"
                    ]
                },
                "description": "The color of the line. Each component should be in the range <code>0.0</code> &ndash; \r<code>1.0</code>, with <code>x</code> = red, <code>y</code> = green, <code>z</code> = blue, and <code>w</code> = alpha.",
                "name": "color"
            }
        ],
        "examples": [
            "<caption>Draw a red ray from your initial avatar position to 10m in front of it.</caption>\rvar start = MyAvatar.position;\rvar end = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -10 }));\rvar color = { x: 1.0, y: 0.0, z: 0.0, w: 1.0 };\r\rScript.update.connect(function () {\r    DebugDraw.drawRay(start, end, color);\r});"
        ],
        "memberof": "DebugDraw",
        "longname": "DebugDraw.drawRay",
        "scope": "static"
    },
    {
        "description": "Draws lines in world space, visible for a single frame. To make the lines visually persist, you need to repeatedly draw \rthem.\r<p><strong>Note:</strong> Currently doesn't work.",
        "kind": "function",
        "name": "drawRays",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<Vec3Pair>"
                    ]
                },
                "description": "The start and end points of the lines to draw.",
                "name": "lines"
            },
            {
                "type": {
                    "names": [
                        "Vec4"
                    ]
                },
                "description": "The color of the lines. Each component should be in the range <code>0.0</code> &ndash; \r<code>1.0</code>, with <code>x</code> = red, <code>y</code> = green, <code>z</code> = blue, and <code>w</code> = alpha.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "optional": true,
                "defaultvalue": "0,0,0",
                "description": "A translation applied to each line.",
                "name": "translation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "optional": true,
                "defaultvalue": "Quat.IDENTITY",
                "description": "A rotation applied to each line.",
                "name": "rotation"
            }
        ],
        "examples": [
            "<caption>Draw a red \"V\" in front of your initial avatar position.</caption>\rvar lines = [\r    [{ x: -1, y: 0.5, z: 0 }, { x: 0, y: 0, z: 0 }],\r    [{ x: 0, y: 0, z: 0 }, { x: 1, y: 0.5, z: 0 }]\r];\rvar color = { x: 1, y: 0, z: 0, w: 1 };\rvar translation = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.75, z: -5 }));\rvar rotation = MyAvatar.orientation;\r\rScript.update.connect(function () {\r    DebugDraw.drawRays(lines, color, translation, rotation);\r});"
        ],
        "memberof": "DebugDraw",
        "longname": "DebugDraw.drawRays",
        "scope": "static"
    },
    {
        "description": "Adds or updates a debug marker in world coordinates. This marker is drawn every frame until it is removed using  \r{@link DebugDraw.removeMarker|removeMarker}. If a world coordinates debug marker of the specified <code>name</code> \ralready exists, its parameters are updated.",
        "kind": "function",
        "name": "addMarker",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "A name that uniquely identifies the marker.",
                "name": "key"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the marker in world coordinates.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the market in world coordinates.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec4"
                    ]
                },
                "description": "The color of the marker.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "float"
                    ]
                },
                "description": "A float between 0.0 and 1.0 (10 cm) to control the size of the marker.",
                "name": "size"
            }
        ],
        "examples": [
            "<caption>Briefly draw a debug marker in front of your avatar, in world coordinates.</caption>\rvar MARKER_NAME = \"my marker\";\rDebugDraw.addMarker(\r    MARKER_NAME,\r    Quat.ZERO,\r    Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5})),\r    { red: 255, green: 0, blue: 0 },\r    1.0\r);\rScript.setTimeout(function () {\r    DebugDraw.removeMarker(MARKER_NAME);\r}, 5000);"
        ],
        "memberof": "DebugDraw",
        "longname": "DebugDraw.addMarker",
        "scope": "static"
    },
    {
        "description": "Removes a debug marker that was added in world coordinates.",
        "kind": "function",
        "name": "removeMarker",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the world coordinates debug marker to remove.",
                "name": "key"
            }
        ],
        "memberof": "DebugDraw",
        "longname": "DebugDraw.removeMarker",
        "scope": "static"
    },
    {
        "description": "Adds or updates a debug marker to the world in avatar coordinates. This marker is drawn every frame until it is removed \rusing {@link DebugDraw.removeMyAvatarMarker|removeMyAvatarMarker}. If an avatar coordinates debug marker of the \rspecified <code>name</code> already exists, its parameters are updated. The debug marker moves with your avatar.",
        "kind": "function",
        "name": "addMyAvatarMarker",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "A name that uniquely identifies the marker.",
                "name": "key"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the marker in avatar coordinates.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the market in avatar coordinates.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec4"
                    ]
                },
                "description": "color of the marker.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "float"
                    ]
                },
                "description": "A float between 0.0 and 1.0 (10 cm) to control the size of the marker.",
                "name": "size"
            }
        ],
        "examples": [
            "<caption>Briefly draw a debug marker in front of your avatar, in avatar coordinates.</caption>\rvar MARKER_NAME = \"My avatar marker\";\rDebugDraw.addMyAvatarMarker(\r    MARKER_NAME,\r    Quat.ZERO,\r    { x: 0, y: 0, z: -5 },\r    { red: 255, green: 0, blue: 0 },\r    1.0\r);\rScript.setTimeout(function () {\r    DebugDraw.removeMyAvatarMarker(MARKER_NAME);\r}, 5000);"
        ],
        "memberof": "DebugDraw",
        "longname": "DebugDraw.addMyAvatarMarker",
        "scope": "static"
    },
    {
        "description": "Removes a debug marker that was added in avatar coordinates.",
        "kind": "function",
        "name": "removeMyAvatarMarker",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the avatar coordinates debug marker to remove.",
                "name": "key"
            }
        ],
        "memberof": "DebugDraw",
        "longname": "DebugDraw.removeMyAvatarMarker",
        "scope": "static"
    },
    {
        "description": "A triangle in a mesh.",
        "kind": "typedef",
        "name": "Triangle",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of vertex 0 in the triangle.",
                "name": "v0"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of vertex 1 in the triangle.",
                "name": "v1"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of vertex 2 in the triangle.",
                "name": "v2"
            }
        ],
        "longname": "Triangle",
        "scope": "global"
    },
    {
        "description": "<p>A {@link Entities.EntityProperties-Gizmo|Gizmo} entity may be one of the following types:</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"ring\"</code></td><td>A ring gizmo.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "GizmoType",
        "type": {
            "names": [
                "string"
            ]
        },
        "memberof": "Entities",
        "longname": "Entities.GizmoType",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Paths</code> API provides absolute paths to the scripts and resources directories.",
        "kind": "namespace",
        "name": "Paths",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "deprecated": "The Paths API is deprecated. Use {@link Script.resolvePath} and {@link Script.resourcesPath} instead.",
        "readonly": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path to the scripts directory. <em>Read-only.</em>",
                "name": "defaultScripts"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path to the resources directory. <em>Read-only.</em>",
                "name": "resources"
            }
        ],
        "longname": "Paths",
        "scope": "global"
    },
    {
        "description": "<p>A collision may occur with the following types of items:</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th>\r  </thead>\r  <tbody>\r    <tr><td><code>1</code></td><td>Static entities &mdash; non-dynamic entities with no velocity.</td></tr>\r    <tr><td><code>2</code></td><td>Dynamic entities &mdash; entities that have their <code>dynamic</code> property set to\r        <code>true</code>.</td></tr>\r    <tr><td><code>4</code></td><td>Kinematic entities &mdash; non-dynamic entities with velocity.</td></tr>\r    <tr><td><code>8</code></td><td>My avatar.</td></tr>\r    <tr><td><code>16</code></td><td>Other avatars.</td></tr>\r  </tbody>\r</table>\r<p>The values for the collision types that are enabled are added together to give the CollisionMask value. For example, a\rvalue of <code>31</code> means that an entity will collide with all item types.</p>",
        "kind": "typedef",
        "name": "CollisionMask",
        "type": {
            "names": [
                "number"
            ]
        },
        "longname": "CollisionMask",
        "scope": "global"
    },
    {
        "description": "<p>A set of flags for a pick filter. The value is constructed by using the <code>|</code> (bitwise OR) operator on the \rindividual flag values.</p>\r<table>\r  <thead>\r    <tr><th>Flag Name</th><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td>PICK_DOMAIN_ENTITIES</td><td><code>1</code></td><td>Include domain entities when intersecting.</td></tr>\r    <tr><td>PICK_AVATAR_ENTITIES</td><td><code>2</code></td><td>Include avatar entities when intersecting.</td></tr>\r    <tr><td>PICK_LOCAL_ENTITIES</td><td><code>4</code></td><td>Include local entities when intersecting.</td></tr>\r    <tr><td>PICK_AVATATRS</td><td><code>8</code></td><td>Include avatars when intersecting.</td></tr>\r    <tr><td>PICK_HUD</td><td><code>16</code></td><td>Include the HUD surface when intersecting in HMD mode.</td></tr>\r    <tr><td>PICK_INCLUDE_VISIBLE</td><td><code>32</code></td><td>Include visible objects when intersecting.</td></tr>\r    <tr><td>PICK_INCLUDE_INVISIBLE</td><td><code>64</code></td><td>Include invisible objects when intersecting.</td></tr>\r    <tr><td>PICK_INCLUDE_COLLIDABLE</td><td><code>128</code></td><td>Include collidable objects when \r      intersecting.</td></tr>\r    <tr><td>PICK_INCLUDE_NONCOLLIDABLE</td><td><code>256</code></td><td>Include non-collidable objects when \r      intersecting.</td></tr>\r    <tr><td>PICK_PRECISE</td><td><code>512</code></td><td>Pick against exact meshes.</td></tr>\r    <tr><td>PICK_COARSE</td><td><code>1024</code></td><td>Pick against coarse meshes.</td></tr>\r    <tr><td>PICK_ALL_INTERSECTIONS</td><td><code>2048</code></td><td>Return all intersections instead of just the \r      closest.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "FilterFlags",
        "type": {
            "names": [
                "number"
            ]
        },
        "longname": "FilterFlags",
        "scope": "global"
    },
    {
        "description": "A 2D or 3D mouse or similar pointer event.",
        "kind": "typedef",
        "name": "PointerEvent",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The type of event: <code>\"Press\"</code>, <code>\"DoublePress\"</code>, <code>\"Release\"</code>, or\r    <code>\"Move\"</code>.",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer number used to identify the pointer: <code>0</code> = hardware mouse, <code>1</code> = left\r    controller, <code>2</code> = right controller.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "The 2D position of the event on the intersected object XY plane, where applicable.",
                "name": "pos2D"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The 3D position of the event on the intersected object, where applicable.",
                "name": "pos3D"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The surface normal at the intersection point.",
                "name": "normal"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The direction of the intersection ray.",
                "name": "direction"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the button pressed: <code>None</code>, <code>Primary</code>, <code>Secondary</code>,\r   or <code>Tertiary</code>.",
                "name": "button"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the button pressed was the primary button, otherwise \r    <code>undefined</code>;",
                "name": "isPrimaryButton"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the button pressed was the primary button, otherwise\r    <code>undefined</code>;",
                "name": "isLeftButton"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the button pressed was the secondary button, otherwise\r    <code>undefined</code>;",
                "name": "isSecondaryButton"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the button pressed was the secondary button, otherwise\r    <code>undefined</code>;",
                "name": "isRightButton"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the button pressed was the tertiary button, otherwise\r    <code>undefined</code>;",
                "name": "isTertiaryButton"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the button pressed was the tertiary button, otherwise\r    <code>undefined</code>;",
                "name": "isMiddleButton"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the primary button is currently being pressed, otherwise\r    <code>false</code>",
                "name": "isPrimaryHeld"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the secondary button is currently being pressed, otherwise\r    <code>false</code>",
                "name": "isSecondaryHeld"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the tertiary button is currently being pressed, otherwise\r    <code>false</code>",
                "name": "isTertiaryHeld"
            },
            {
                "type": {
                    "names": [
                        "KeyboardModifiers"
                    ]
                },
                "description": "Integer value with bits set according to which keyboard modifier keys were\r    pressed when the event was generated.",
                "name": "keyboardModifiers"
            }
        ],
        "longname": "PointerEvent",
        "scope": "global"
    },
    {
        "description": "<p>A KeyboardModifiers value is used to specify which modifier keys on the keyboard are pressed. The value is the sum \r(bitwise OR) of the relevant combination of values from the following table:</p>\r<table>\r  <thead>\r    <tr><th>Key</th><th>Hexadecimal value</th><th>Decimal value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td>Shift</td><td><code>0x02000000</code></td><td><code>33554432</code></td>\r        <td>A Shift key on the keyboard is pressed.</td></tr>\r    <tr><td>Control</td><td><code>0x04000000</code></td><td><code>67108864</code></td>\r        <td>A control key on the keyboard is pressed. On Windows the \"control\" key is the Ctrl key; on OSX it is the Command \r        key.</td></tr>\r    <tr><td>Alt</td><td><code>0x08000000</code></td><td><code>134217728</code></td>\r        <td>An Alt key on the keyboard is pressed.</td></tr>\r    <tr><td>Meta</td><td><code>0x10000000</code></td><td><code>268435456</code></td>\r        <td>A meta key on the keyboard is pressed. On Windows the \"meta\" key is the Windows key; on OSX it is the Control \r        (Splat) key.</td></tr>\r    <tr><td>Keypad</td><td><code>0x20000000</code></td><td><code>536870912</code></td>\r        <td>A keypad button is pressed.</td></tr>\r    <tr><td>Group</td><td><code>0x40000000</code></td><td><code>1073741824</code></td>\r        <td>X11 operating system only: An AltGr / Mode_switch key on the keyboard is pressed.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "KeyboardModifiers",
        "type": {
            "names": [
                "number"
            ]
        },
        "longname": "KeyboardModifiers",
        "scope": "global"
    },
    {
        "description": "<p>How the geometry of an entity is rendered.</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"solid\"</code></td><td>The entity is drawn as a solid shape.</td></tr>\r    <tr><td><code>\"lines\"</code></td><td>The entity is drawn as wireframe.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "PrimitiveMode",
        "type": {
            "names": [
                "string"
            ]
        },
        "memberof": "Entities",
        "longname": "Entities.PrimitiveMode",
        "scope": "static"
    },
    {
        "description": "<p>Pulse modes for color and alpha pulsing.</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"none\"</code></td><td>No pulsing.</td></tr>\r    <tr><td><code>\"in\"</code></td><td>Pulse in phase with the pulse period.</td></tr>\r    <tr><td><code>\"out\"</code></td><td>Pulse out of phase with the pulse period.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "PulseMode",
        "type": {
            "names": [
                "string"
            ]
        },
        "memberof": "Entities",
        "longname": "Entities.PulseMode",
        "scope": "static"
    },
    {
        "description": "An axis-aligned cube, defined as the bottom right near (minimum axes values) corner of the cube plus the dimension of its \rsides.",
        "kind": "typedef",
        "name": "AACube",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "X coordinate of the brn corner of the cube.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Y coordinate of the brn corner of the cube.",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Z coordinate of the brn corner of the cube.",
                "name": "z"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The dimensions of each side of the cube.",
                "name": "scale"
            }
        ],
        "longname": "AACube",
        "scope": "global"
    },
    {
        "description": "Details of a collision between avatars and entities.",
        "kind": "typedef",
        "name": "Collision",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "ContactEventType"
                    ]
                },
                "description": "The contact type of the collision event.",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of one of the avatars or entities in the collision.",
                "name": "idA"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the other of the avatars or entities in the collision.",
                "name": "idB"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The amount of penetration between the two items.",
                "name": "penetration"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The point of contact.",
                "name": "contactPoint"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The change in relative velocity of the two items, in m/s.",
                "name": "velocityChange"
            }
        ],
        "longname": "Collision",
        "scope": "global"
    },
    {
        "description": "A 2D size value.",
        "kind": "typedef",
        "name": "Size",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The height value.",
                "name": "height"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The width value.",
                "name": "width"
            }
        ],
        "longname": "Size",
        "scope": "global"
    },
    {
        "description": "The details of an animation that is playing.",
        "kind": "typedef",
        "name": "AnimationDetails",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<em>Not used.</em>",
                "name": "role"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL to the animation file. Animation files need to be in glTF or FBX format but only need to \r    contain the avatar skeleton and animation data. glTF models may be in JSON or binary format (\".gltf\" or \".glb\" URLs \r    respectively).\r    <p><strong>Warning:</strong> glTF animations currently do not always animate correctly.</p>",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The frames per second(FPS) rate for the animation playback. 30 FPS is normal speed.",
                "name": "fps"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Not used.</em>",
                "name": "priority"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the animation should loop, <code>false</code> if it shouldn't.",
                "name": "loop"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<em>Not used.</em>",
                "name": "hold"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The frame the animation should start at.",
                "name": "firstFrame"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The frame the animation should stop at.",
                "name": "lastFrame"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<em>Not used.</em>",
                "name": "running"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The current frame being played.",
                "name": "currentFrame"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<em>Not used.</em>",
                "name": "startAutomatically"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<em>Not used.</em>",
                "name": "allowTranslation"
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.AnimationDetails",
        "scope": "static"
    },
    {
        "description": "A 4 x 4 matrix, typically containing a scale, rotation, and translation transform. See also the {@link Mat4(0)|Mat4} object.",
        "kind": "typedef",
        "name": "Mat4",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Row 0, column 0 value.",
                "name": "r0c0"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Row 1, column 0 value.",
                "name": "r1c0"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Row 2, column 0 value.",
                "name": "r2c0"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Row 3, column 0 value.",
                "name": "r3c0"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Row 0, column 1 value.",
                "name": "r0c1"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Row 1, column 1 value.",
                "name": "r1c1"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Row 2, column 1 value.",
                "name": "r2c1"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Row 3, column 1 value.",
                "name": "r3c1"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Row 0, column 2 value.",
                "name": "r0c2"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Row 1, column 2 value.",
                "name": "r1c2"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Row 2, column 2 value.",
                "name": "r2c2"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Row 3, column 2 value.",
                "name": "r3c2"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Row 0, column 3 value.",
                "name": "r0c3"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Row 1, column 3 value.",
                "name": "r1c3"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Row 2, column 3 value.",
                "name": "r2c3"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Row 3, column 3 value.",
                "name": "r3c3"
            }
        ],
        "longname": "Mat4",
        "scope": "global"
    },
    {
        "description": "A 2-dimensional vector.",
        "kind": "typedef",
        "name": "Vec2",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "X-coordinate of the vector. Synonyms: <code>u</code>.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Y-coordinate of the vector. Synonyms: <code>v</code>.",
                "name": "y"
            }
        ],
        "examples": [
            "<caption>Vec2s can be set in multiple ways and modified with their aliases, but still stringify in the same way</caption>\rEntities.editEntity(<id>, { materialMappingPos: { x: 0.1, y: 0.2 }});          // { x: 0.1, y: 0.2 }\rEntities.editEntity(<id>, { materialMappingPos: { u: 0.3, v: 0.4 }});          // { x: 0.3, y: 0.4 }\rEntities.editEntity(<id>, { materialMappingPos: [0.5, 0.6] });                 // { x: 0.5, y: 0.6 }\rEntities.editEntity(<id>, { materialMappingPos: 0.7 });                        // { x: 0.7, y: 0.7 }\rvar color = Entities.getEntityProperties(<id>).materialMappingPos;             // { x: 0.7, y: 0.7 }\rcolor.v = 0.8;                                                                 // { x: 0.7, y: 0.8 }"
        ],
        "longname": "Vec2",
        "scope": "global"
    },
    {
        "description": "A 3-dimensional vector. See also the {@link Vec3(0)|Vec3} object.",
        "kind": "typedef",
        "name": "Vec3",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "X-coordinate of the vector. Synonyms: <code>r</code>, <code>red</code>.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Y-coordinate of the vector. Synonyms: <code>g</code>, <code>green</code>.",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Z-coordinate of the vector. Synonyms: <code>b</code>, <code>blue</code>.",
                "name": "z"
            }
        ],
        "examples": [
            "<caption>Vec3 values can be set in multiple ways and modified with their aliases, but still stringify in the same \r    way.</caption>\rEntities.editEntity(<id>, { position: { x: 1, y: 2, z: 3 }});                 // { x: 1, y: 2, z: 3 }\rEntities.editEntity(<id>, { position: { r: 4, g: 5, b: 6 }});                 // { x: 4, y: 5, z: 6 }\rEntities.editEntity(<id>, { position: { red: 7, green: 8, blue: 9 }});        // { x: 7, y: 8, z: 9 }\rEntities.editEntity(<id>, { position: [10, 11, 12] });                        // { x: 10, y: 11, z: 12 }\rEntities.editEntity(<id>, { position: 13 });                                  // { x: 13, y: 13, z: 13 }\rvar position = Entities.getEntityProperties(<id>).position;                   // { x: 13, y: 13, z: 13 }\rposition.g = 14;                                                              // { x: 13, y: 14, z: 13 }\rposition.blue = 15;                                                           // { x: 13, y: 14, z: 15 }\rEntities.editEntity(<id>, { position: \"red\"});                                // { x: 255, y: 0, z: 0 }\rEntities.editEntity(<id>, { position: \"#00FF00\"});                            // { x: 0, y: 255, z: 0 }"
        ],
        "longname": "Vec3",
        "scope": "global"
    },
    {
        "description": "A color vector. See also the {@link Vec3(0)|Vec3} object.",
        "kind": "typedef",
        "name": "Color",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Red component value. Integer in the range <code>0</code> - <code>255</code>.  Synonyms: <code>r</code>, <code>x</code>.",
                "name": "red"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Green component value. Integer in the range <code>0</code> - <code>255</code>.  Synonyms: <code>g</code>, <code>y</code>.",
                "name": "green"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Blue component value. Integer in the range <code>0</code> - <code>255</code>.  Synonyms: <code>b</code>, <code>z</code>.",
                "name": "blue"
            }
        ],
        "examples": [
            "<caption>Colors can be set in multiple ways and modified with their aliases, but still stringify in the same way</caption>\rEntities.editEntity(<id>, { color: { x: 1, y: 2, z: 3 }});                 // { red: 1, green: 2, blue: 3 }\rEntities.editEntity(<id>, { color: { r: 4, g: 5, b: 6 }});                 // { red: 4, green: 5, blue: 6 }\rEntities.editEntity(<id>, { color: { red: 7, green: 8, blue: 9 }});        // { red: 7, green: 8, blue: 9 }\rEntities.editEntity(<id>, { color: [10, 11, 12] });                        // { red: 10, green: 11, blue: 12 }\rEntities.editEntity(<id>, { color: 13 });                                  // { red: 13, green: 13, blue: 13 }\rvar color = Entities.getEntityProperties(<id>).color;                      // { red: 13, green: 13, blue: 13 }\rcolor.g = 14;                                                              // { red: 13, green: 14, blue: 13 }\rcolor.blue = 15;                                                           // { red: 13, green: 14, blue: 15 }\rEntities.editEntity(<id>, { color: \"red\"});                                // { red: 255, green: 0, blue: 0 }\rEntities.editEntity(<id>, { color: \"#00FF00\"});                            // { red: 0, green: 255, blue: 0 }"
        ],
        "longname": "Color",
        "scope": "global"
    },
    {
        "description": "A color vector with real values. Values may also be <code>null</code>. See also the {@link Vec3(0)|Vec3} object.",
        "kind": "typedef",
        "name": "ColorFloat",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Red component value. Real in the range <code>0</code> - <code>255</code>.  Synonyms: <code>r</code>, <code>x</code>.",
                "name": "red"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Green component value. Real in the range <code>0</code> - <code>255</code>.  Synonyms: <code>g</code>, <code>y</code>.",
                "name": "green"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Blue component value. Real in the range <code>0</code> - <code>255</code>.  Synonyms: <code>b</code>, <code>z</code>.",
                "name": "blue"
            }
        ],
        "examples": [
            "<caption>ColorFloats can be set in multiple ways and modified with their aliases, but still stringify in the same way</caption>\rEntities.editEntity(<id>, { color: { x: 1, y: 2, z: 3 }});                 // { red: 1, green: 2, blue: 3 }\rEntities.editEntity(<id>, { color: { r: 4, g: 5, b: 6 }});                 // { red: 4, green: 5, blue: 6 }\rEntities.editEntity(<id>, { color: { red: 7, green: 8, blue: 9 }});        // { red: 7, green: 8, blue: 9 }\rEntities.editEntity(<id>, { color: [10, 11, 12] });                        // { red: 10, green: 11, blue: 12 }\rEntities.editEntity(<id>, { color: 13 });                                  // { red: 13, green: 13, blue: 13 }\rvar color = Entities.getEntityProperties(<id>).color;                      // { red: 13, green: 13, blue: 13 }\rcolor.g = 14;                                                              // { red: 13, green: 14, blue: 13 }\rcolor.blue = 15;                                                           // { red: 13, green: 14, blue: 15 }\rEntities.editEntity(<id>, { color: \"red\"});                                // { red: 255, green: 0, blue: 0 }\rEntities.editEntity(<id>, { color: \"#00FF00\"});                            // { red: 0, green: 255, blue: 0 }"
        ],
        "longname": "ColorFloat",
        "scope": "global"
    },
    {
        "description": "A 4-dimensional vector.",
        "kind": "typedef",
        "name": "Vec4",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "X-coordinate of the vector.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Y-coordinate of the vector.",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Z-coordinate of the vector.",
                "name": "z"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "W-coordinate of the vector.",
                "name": "w"
            }
        ],
        "longname": "Vec4",
        "scope": "global"
    },
    {
        "description": "Defines a rectangular portion of an image or screen, or similar.",
        "kind": "typedef",
        "name": "Rect",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Left, x-coordinate value.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Top, y-coordinate value.",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Width of the rectangle.",
                "name": "width"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Height of the rectangle.",
                "name": "height"
            }
        ],
        "longname": "Rect",
        "scope": "global"
    },
    {
        "description": "A vector with a starting point. It is used, for example, when finding entities or avatars that lie under a mouse click or \rintersect a laser beam.",
        "kind": "typedef",
        "name": "PickRay",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The starting position of the ray.",
                "name": "origin"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The direction that the ray travels.",
                "name": "direction"
            }
        ],
        "longname": "PickRay",
        "scope": "global"
    },
    {
        "description": "The tip of a stylus.",
        "kind": "typedef",
        "name": "StylusTip",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The hand that the stylus is attached to: <code>0</code> for left hand, <code>1</code> for the \r    right hand, <code>-1</code> for invalid.",
                "name": "side"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the stylus tip relative to the body of the stylus.",
                "name": "tipOffset"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the stylus tip.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the stylus.",
                "name": "orientation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The velocity of the stylus tip.",
                "name": "velocity"
            }
        ],
        "longname": "StylusTip",
        "scope": "global"
    },
    {
        "description": "A parabola defined by a starting point, initial velocity, and acceleration. It is used, for example, when finding entities or\ravatars that intersect a parabolic beam.",
        "kind": "typedef",
        "name": "PickParabola",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The starting position of the parabola, i.e., the initial position of a virtual projectile whose \r    trajectory defines the parabola.",
                "name": "origin"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The starting velocity of the parabola in m/s, i.e., the initial speed of a virtual projectile \r    whose trajectory defines the parabola.",
                "name": "velocity"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The acceleration that the parabola experiences in m/s<sup>2</sup>, i.e., the acceleration of \r    a virtual projectile whose trajectory defines the parabola, both magnitude and direction.",
                "name": "acceleration"
            }
        ],
        "longname": "PickParabola",
        "scope": "global"
    },
    {
        "description": "A volume for checking collisions in the physics simulation.",
        "kind": "typedef",
        "name": "CollisionRegion",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Shape"
                    ]
                },
                "description": "The collision region's shape and size. Dimensions are in world coordinates, but scale with the \r    parent if defined.",
                "name": "shape"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the <code>shape</code> has no model, or has a model and it is loaded, \r    <code>false</code> if otherwise.",
                "name": "loaded"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the collision region, relative to the parent if defined.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the collision region, relative to the parent if defined.",
                "name": "orientation"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The approximate minimum penetration depth for a test object to be considered in contact with\r    the collision region. The depth is in world coordinates but scales with the parent if defined.",
                "name": "threshold"
            },
            {
                "type": {
                    "names": [
                        "CollisionMask"
                    ]
                },
                "optional": true,
                "defaultvalue": 8,
                "description": "The type of objects the collision region collides as. Objects whose collision\r    masks overlap with the region's collision group are considered to be colliding with the region.",
                "name": "collisionGroup"
            }
        ],
        "longname": "CollisionRegion",
        "scope": "global"
    },
    {
        "description": "A physical volume.",
        "kind": "typedef",
        "name": "Shape",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "ShapeType"
                    ]
                },
                "defaultvalue": "\"none\"",
                "description": "The type of shape.",
                "name": "shapeType"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The model to load to for the shape if <code>shapeType</code> is one of\r    <code>\"compound\"</code>, <code>\"simple-hull\"</code>, <code>\"simple-compound\"</code>, or <code>\"static-mesh\"</code>.",
                "name": "modelUrl"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The dimensions of the shape.",
                "name": "dimensions"
            }
        ],
        "longname": "Shape",
        "scope": "global"
    },
    {
        "description": "<p>The type of a collision contact event.</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>0</code></td><td>Start of the collision.</td></tr>\r    <tr><td><code>1</code></td><td>Continuation of the collision.</td></tr>\r    <tr><td><code>2</code></td><td>End of the collision.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "ContactEventType",
        "type": {
            "names": [
                "number"
            ]
        },
        "longname": "ContactEventType",
        "scope": "global"
    },
    {
        "description": "UUIDs (Universally Unique IDentifiers) are used to uniquely identify entities, avatars, and the like. They are represented \rin JavaScript as strings in the format, <code>\"{nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn}\"</code>, where the \"n\"s are\rhexadecimal digits.",
        "kind": "typedef",
        "name": "Uuid",
        "type": {
            "names": [
                "string"
            ]
        },
        "longname": "Uuid",
        "scope": "global"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts &bull; Server Entity Scripts &bull; Assignment Client Scripts</p>A handle for a mesh in an entity, such as returned by {@link Entities.getMeshes}.",
        "kind": "class",
        "name": "MeshProxy",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "deprecated": "Use the {@link Graphics} API instead.",
        "longname": "MeshProxy",
        "scope": "global"
    },
    {
        "description": "Get the number of vertices in the mesh.",
        "kind": "function",
        "name": "getNumVertices",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer number of vertices in the mesh."
            }
        ],
        "memberof": "MeshProxy",
        "longname": "MeshProxy#getNumVertices",
        "scope": "instance"
    },
    {
        "description": "Get the position of a vertex in the mesh.",
        "kind": "function",
        "name": "getPos",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer index of the mesh vertex.",
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "Local position of the vertex relative to the mesh."
            }
        ],
        "memberof": "MeshProxy",
        "longname": "MeshProxy#getPos",
        "scope": "instance"
    },
    {
        "description": "<p>A layer in which an entity may be rendered.</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"world\"</code></td><td>The entity is drawn in the world with everything else.</td></tr>\r    <tr><td><code>\"front\"</code></td><td>The entity is drawn on top of the world layer but behind the HUD surface.</td></tr>\r    <tr><td><code>\"hud\"</code></td><td>The entity is drawn on top of other layers and the HUD surface.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "RenderLayer",
        "type": {
            "names": [
                "string"
            ]
        },
        "memberof": "Entities",
        "longname": "Entities.RenderLayer",
        "scope": "static"
    },
    {
        "description": "Information about a resource request.",
        "kind": "typedef",
        "name": "ResourceRequest",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the resource request.",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "An ID identifying the request.",
                "name": "callerId"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Extra information about the request.",
                "name": "extra"
            }
        ],
        "memberof": "ResourceRequestObserver",
        "longname": "ResourceRequestObserver.ResourceRequest",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>ResourceRequestObserver</code> API provides notifications when an observable resource request is made.",
        "kind": "namespace",
        "name": "ResourceRequestObserver",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "longname": "ResourceRequestObserver",
        "scope": "global"
    },
    {
        "description": "Triggered when an observable resource request is made.",
        "kind": "signal",
        "name": "resourceRequestEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "ResourceRequestObserver.ResourceRequest"
                    ]
                },
                "description": "Information about the resource request.",
                "name": "request"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when a particular Clipboard.importEntities() resource request is made.</caption>\rResourceRequestObserver.resourceRequestEvent.connect(function (request) {\r    if (request.callerId === 100) {\r        print(\"Resource request: \" + JSON.stringify(request));\r    }\r});\r\rfunction importEntities() {\r    var filename = Window.browse(\"Import entities to clipboard\", \"\", \"*.json\");\r    if (filename) {\r        Clipboard.importEntities(filename, true, 100);\r        pastedEntities = Clipboard.pasteEntities(Vec3.sum(MyAvatar.position,\r            Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })));\r        print(\"Entities pasted: \" + JSON.stringify(pastedEntities));\r    }\r}\r\rScript.setTimeout(importEntities, 2000);\r\n     "
        ],
        "memberof": "ResourceRequestObserver",
        "longname": "ResourceRequestObserver.resourceRequestEvent",
        "scope": "static"
    },
    {
        "description": "<p>Defines the shape used for collisions or zones.</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"none\"</code></td><td>No shape.</td></tr>\r    <tr><td><code>\"box\"</code></td><td>A cube.</td></tr>\r    <tr><td><code>\"sphere\"</code></td><td>A sphere.</td></tr>\r    <tr><td><code>\"capsule-x\"</code></td><td>A capsule (cylinder with spherical ends) oriented on the x-axis.</td></tr>\r    <tr><td><code>\"capsule-y\"</code></td><td>A capsule (cylinder with spherical ends) oriented on the y-axis.</td></tr>\r    <tr><td><code>\"capsule-z\"</code></td><td>A capsule (cylinder with spherical ends) oriented on the z-axis.</td></tr>\r    <tr><td><code>\"cylinder-x\"</code></td><td>A cylinder oriented on the x-axis.</td></tr>\r    <tr><td><code>\"cylinder-y\"</code></td><td>A cylinder oriented on the y-axis.</td></tr>\r    <tr><td><code>\"cylinder-z\"</code></td><td>A cylinder oriented on the z-axis.</td></tr>\r    <tr><td><code>\"hull\"</code></td><td><em>Not used.</em></td></tr>\r    <tr><td><code>\"compound\"</code></td><td>A compound convex hull specified in an OBJ file.</td></tr>\r    <tr><td><code>\"simple-hull\"</code></td><td>A convex hull automatically generated from the model.</td></tr>\r    <tr><td><code>\"simple-compound\"</code></td><td>A compound convex hull automatically generated from the model, using \r        sub-meshes.</td></tr>\r    <tr><td><code>\"static-mesh\"</code></td><td>The exact shape of the model.</td></tr>\r    <tr><td><code>\"plane\"</code></td><td>A plane.</td></tr>\r    <tr><td><code>\"ellipsoid\"</code></td><td>An ellipsoid.</td></tr>\r    <tr><td><code>\"circle\"</code></td><td>A circle.</td></tr>\r    <tr><td><code>\"multisphere\"</code></td><td>A convex hull generated from a set of spheres.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "ShapeType",
        "type": {
            "names": [
                "string"
            ]
        },
        "longname": "ShapeType",
        "scope": "global"
    },
    {
        "description": "<p>An in-world item may be one of the following types:</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"entity\"</code></td><td>The item is an entity.</td></tr>\r    <tr><td><code>\"avatar\"</code></td><td>The item is an avatar.</td></tr>\r    <tr><td><code>\"unknown\"</code></td><td>The item cannot be found.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "NestableType",
        "type": {
            "names": [
                "string"
            ]
        },
        "memberof": "Entities",
        "longname": "Entities.NestableType",
        "scope": "static"
    },
    {
        "description": "<p>A {@link Entities.EntityProperties-Text|Text} entity may use one of the following effects:</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"none\"</code></td><td>No effect.</td></tr>\r    <tr><td><code>\"outline\"</code></td><td>An outline effect.</td></tr>\r    <tr><td><code>\"outlineFill\"</code></td><td>An outline effect, with fill.</td></tr>\r    <tr><td><code>\"shadow\"</code></td><td>A shadow effect.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "TextEffect",
        "type": {
            "names": [
                "string"
            ]
        },
        "memberof": "Entities",
        "longname": "Entities.TextEffect",
        "scope": "static"
    },
    {
        "description": "<p>Specifies how a web surface processes events.</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"touch\"</code></td><td>Events are processed as touch events.</td></tr>\r    <tr><td><code>\"mouse\"</code></td><td>Events are processed as mouse events.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "WebInputMode",
        "type": {
            "names": [
                "string"
            ]
        },
        "longname": "WebInputMode",
        "scope": "global"
    },
    {
        "description": "<p>Camera modes affect the position of the camera and the controls for camera movement. The camera can be in one of the\rfollowing modes:</p>\r<table>\r  <thead>\r    <tr>\r      <th>Mode</th>\r      <th>String</th>\r      <th>Description</th>\r    </tr>\r  </thead>\r  <tbody>\r    <tr>\r      <td><strong>First&nbsp;Person</strong></td>\r      <td><code>\"first&nbsp;person\"</code></td>\r      <td><p>The camera is positioned such that you have the same view as your avatar. The camera moves and rotates with\r      your avatar.</p>\r      <p><em>Legacy first person camera mode.</em></p></td>\r    </tr>\r    <tr>\r      <td><strong>First&nbsp;Person&nbsp;Look&nbsp;At</strong></td>\r      <td><code>\"first&nbsp;person&nbsp;look&nbsp;at\"</code></td>\r      <td><p>The camera is positioned such that you have the same view as your avatar. The camera moves and rotates with \r      your avatar's head.</p>\r      <p><em>Default first person camera mode.</em></p></td>\r    </tr>\r    <tr>\r      <td><strong>Third&nbsp;Person</strong></td>\r      <td><code>\"third&nbsp;person\"</code></td>\r      <td><p>The camera is positioned such that you have a view from just behind your avatar. The camera moves and rotates \r      with your avatar.</p>  \r      <p><em>Legacy third person camera camera mode.</em></p> \r      <pre class=\"prettyprint\"><code>Camera.mode = \"third person\";</code></pre></td>\r    </tr>\r    <tr>\r      <td><strong>Look&nbsp;At</strong></td>\r      <td><code>\"look&nbsp;at\"</code></td>\r      <td><p>The camera is positioned behind your avatar. The camera moves and rotates independently from your avatar. The\r      avatar's head always faces the camera look at point.</p>\r      <p><em>Default third person camera mode.</em></td>\r    </tr>\r    <tr>\r      <td><strong>Selfie</strong></td>\r      <td><code>\"selfie\"</code></td>\r      <td><p>The camera is positioned in front of your avatar. The camera moves and rotates independently from your avatar.\r      Your avatar's head is always facing the camera.</p>\r      <p><em>Default \"look at myself\" camera mode.</em></p></td>\r    </tr>\r    <tr>\r      <td><strong>Mirror</strong></td>\r      <td><code>\"mirror\"</code></td>\r      <td><p>The camera is positioned such that you are looking directly at your avatar. The camera is fixed and does not \r      move with your avatar.</p> \r      <p><em>Legacy \"look at myself\" behavior.</em></p>\r      <pre class=\"prettyprint\"><code>Camera.mode = \"mirror\";</code></pre></td>\r    </tr>\r    <tr>\r      <td><strong>Independent</strong></td>\r      <td><code>\"independent\"</code></td>\r      <td>The camera's position and orientation don't change with your avatar movement. Instead, they can be set via \r      scripting.</td>\r    </tr>\r    <tr>\r      <td><strong>Entity</strong></td>\r      <td><code>\"entity\"</code></td>\r      <td>The camera's position and orientation are set to be the same as a specified entity's, and move with the entity as\r      it moves.\r    </tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "Mode",
        "type": {
            "names": [
                "string"
            ]
        },
        "memberof": "Camera",
        "longname": "Camera.Mode",
        "scope": "static"
    },
    {
        "description": "A ViewFrustum has a \"keyhole\" shape: a regular frustum for stuff that is visible plus a central sphere for stuff that is\rnearby (for physics simulation).",
        "kind": "typedef",
        "name": "ViewFrustum",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The location of the frustum's apex.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The direction that the frustum is looking at.",
                "name": "orientation"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Center radius of the keyhole in meters.",
                "name": "centerRadius"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Horizontal field of view in degrees.",
                "name": "fieldOfView"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Aspect ratio of the frustum.",
                "name": "aspectRatio"
            },
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The projection matrix for the view defined by the frustum.",
                "name": "projection"
            }
        ],
        "longname": "ViewFrustum",
        "scope": "global"
    },
    {
        "description": "Gets the current camera mode. You can also get the mode using the {@link Camera|Camera.mode} property.",
        "kind": "function",
        "name": "getModeString",
        "returns": [
            {
                "type": {
                    "names": [
                        "Camera.Mode"
                    ]
                },
                "description": "The current camera mode."
            }
        ],
        "memberof": "Camera",
        "longname": "Camera.getModeString",
        "scope": "static"
    },
    {
        "description": "Sets the camera mode. You can also set the mode using the {@link Camera|Camera.mode} property.",
        "kind": "function",
        "name": "setModeString",
        "params": [
            {
                "type": {
                    "names": [
                        "Camera.Mode"
                    ]
                },
                "description": "The mode to set the camera to.",
                "name": "mode"
            }
        ],
        "memberof": "Camera",
        "longname": "Camera.setModeString",
        "scope": "static"
    },
    {
        "description": "Gets the current camera position. You can also get the position using the {@link Camera|Camera.position} property.",
        "kind": "function",
        "name": "getPosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The current camera position."
            }
        ],
        "memberof": "Camera",
        "longname": "Camera.getPosition",
        "scope": "static"
    },
    {
        "description": "Sets the camera position. You can also set the position using the {@link Camera|Camera.position} property. Only works if \rthe camera is in independent mode.",
        "kind": "function",
        "name": "setPosition",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position to set the camera at.",
                "name": "position"
            }
        ],
        "memberof": "Camera",
        "longname": "Camera.setPosition",
        "scope": "static"
    },
    {
        "description": "Gets the current camera orientation. You can also get the orientation using the {@link Camera|Camera.orientation} \rproperty.",
        "kind": "function",
        "name": "getOrientation",
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The current camera orientation."
            }
        ],
        "memberof": "Camera",
        "longname": "Camera.getOrientation",
        "scope": "static"
    },
    {
        "description": "Sets the camera orientation. You can also set the orientation using the {@link Camera|Camera.orientation} property. Only\rworks if the camera is in independent mode.",
        "kind": "function",
        "name": "setOrientation",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation to set the camera to.",
                "name": "orientation"
            }
        ],
        "memberof": "Camera",
        "longname": "Camera.setOrientation",
        "scope": "static"
    },
    {
        "description": "Computes a {@link PickRay} based on the current camera configuration and the specified <code>x, y</code> position on the \rscreen. The {@link PickRay} can be used in functions such as {@link Entities.findRayIntersection} and \r{@link Overlays.findRayIntersection}.",
        "kind": "function",
        "name": "computePickRay",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "X-coordinate on screen.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Y-coordinate on screen.",
                "name": "y"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "PickRay"
                    ]
                },
                "description": "The computed {@link PickRay}."
            }
        ],
        "examples": [
            "<caption>Use a PickRay to detect mouse clicks on entities.</caption>\rfunction onMousePressEvent(event) {\r    var pickRay = Camera.computePickRay(event.x, event.y);\r    var intersection = Entities.findRayIntersection(pickRay);\r    if (intersection.intersects) {\r        print(\"You clicked on entity \" + intersection.entityID);\r    }\r}\r\rController.mousePressEvent.connect(onMousePressEvent);"
        ],
        "memberof": "Camera",
        "longname": "Camera.computePickRay",
        "scope": "static"
    },
    {
        "description": "Rotates the camera to look at the specified <code>position</code>. Only works if the camera is in independent mode.",
        "kind": "function",
        "name": "lookAt",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position to look at.",
                "name": "position"
            }
        ],
        "examples": [
            "<caption>Rotate your camera to look at entities as you click on them with your mouse.</caption>\rfunction onMousePressEvent(event) {\r    var pickRay = Camera.computePickRay(event.x, event.y);\r    var intersection = Entities.findRayIntersection(pickRay);\r    if (intersection.intersects) {\r        // Switch to independent mode.\r        Camera.mode = \"independent\";\r        // Look at the entity that was clicked.\r        var properties = Entities.getEntityProperties(intersection.entityID, \"position\");\r        Camera.lookAt(properties.position);\r    }\r}\r\rController.mousePressEvent.connect(onMousePressEvent);"
        ],
        "memberof": "Camera",
        "longname": "Camera.lookAt",
        "scope": "static"
    },
    {
        "description": "Sets the camera to continue looking at the specified <code>position</code> even while the camera moves. Only works if \rthe camera is in independent mode.",
        "kind": "function",
        "name": "keepLookingAt",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position to keep looking at.",
                "name": "position"
            }
        ],
        "memberof": "Camera",
        "longname": "Camera.keepLookingAt",
        "scope": "static"
    },
    {
        "description": "Stops the camera from continually looking at the position that was set with {@link Camera.keepLookingAt}.",
        "kind": "function",
        "name": "stopLookingAt",
        "memberof": "Camera",
        "longname": "Camera.stopLookingAt",
        "scope": "static"
    },
    {
        "description": "Triggered when the camera mode changes.",
        "kind": "signal",
        "name": "modeUpdated",
        "params": [
            {
                "type": {
                    "names": [
                        "Camera.Mode"
                    ]
                },
                "description": "The new camera mode.",
                "name": "newMode"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report camera mode changes.</caption>\rfunction onCameraModeUpdated(newMode) {\r    print(\"The camera mode has changed to \" + newMode);\r}\r\rCamera.modeUpdated.connect(onCameraModeUpdated);\r\n     "
        ],
        "memberof": "Camera",
        "longname": "Camera.modeUpdated",
        "scope": "static"
    },
    {
        "kind": "namespace",
        "name": "Workload",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "cpuRunTime"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enabled"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "branch"
            }
        ],
        "longname": "Workload",
        "scope": "global",
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>"
    },
    {
        "kind": "function",
        "name": "toJSON",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "Workload",
        "longname": "Workload.toJSON",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "load",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "map"
            }
        ],
        "memberof": "Workload",
        "longname": "Workload.load",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getConfig",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                }
            }
        ],
        "memberof": "Workload",
        "longname": "Workload.getConfig",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isTask",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Workload",
        "longname": "Workload.isTask",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isSwitch",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Workload",
        "longname": "Workload.isSwitch",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getSubConfigs",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<object>"
                    ]
                }
            }
        ],
        "memberof": "Workload",
        "longname": "Workload.getSubConfigs",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getNumSubs",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Workload",
        "longname": "Workload.getNumSubs",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getSubConfig",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                }
            }
        ],
        "memberof": "Workload",
        "longname": "Workload.getSubConfig",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "load",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "json"
            }
        ],
        "memberof": "Workload",
        "longname": "Workload.load",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "refresh",
        "memberof": "Workload",
        "longname": "Workload.refresh",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "loaded",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Workload",
        "longname": "Workload.loaded",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "newStats",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Workload",
        "longname": "Workload.newStats",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "dirtyEnabled",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Workload",
        "longname": "Workload.dirtyEnabled",
        "scope": "static"
    },
    {
        "kind": "namespace",
        "name": "OffscreenFlags",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "navigationFocused"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "navigationFocusDisabled"
            }
        ],
        "longname": "OffscreenFlags",
        "scope": "global",
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>"
    },
    {
        "kind": "signal",
        "name": "navigationFocusedChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OffscreenFlags",
        "longname": "OffscreenFlags.navigationFocusedChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "navigationFocusDisabledChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OffscreenFlags",
        "longname": "OffscreenFlags.navigationFocusDisabledChanged",
        "scope": "static"
    },
    {
        "description": "Creates a new button, adds it to this and returns it.",
        "kind": "function",
        "name": "addButton",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "button properties",
                "name": "properties"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "TabletButtonProxy"
                    ]
                }
            }
        ],
        "memberof": "QmlFragmentClass",
        "longname": "QmlFragmentClass#addButton",
        "scope": "instance"
    },
    {
        "kind": "class",
        "name": "OverlayWebWindow",
        "params": [
            {
                "type": {
                    "names": [
                        "OverlayWindow.Properties"
                    ]
                },
                "optional": true,
                "defaultvalue": null,
                "name": "properties"
            }
        ],
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "name": "size"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "visible"
            }
        ],
        "longname": "OverlayWebWindow",
        "scope": "global",
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>"
    },
    {
        "kind": "function",
        "name": "getURL",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.getURL",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setURL",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "url"
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.setURL",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setScriptURL",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "script"
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.setScriptURL",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "urlChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.urlChanged",
        "scope": "static"
    },
    {
        "kind": "typedef",
        "name": "Properties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "source"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "width"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "height"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "visible"
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.Properties",
        "scope": "static"
    },
    {
        "kind": "class",
        "name": "OverlayWindow",
        "params": [
            {
                "type": {
                    "names": [
                        "OverlayWindow.Properties"
                    ]
                },
                "optional": true,
                "defaultvalue": null,
                "name": "properties"
            }
        ],
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "name": "size"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "visible"
            }
        ],
        "longname": "OverlayWindow",
        "scope": "global",
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>"
    },
    {
        "kind": "function",
        "name": "initQml",
        "params": [
            {
                "type": {
                    "names": [
                        "OverlayWindow.Properties"
                    ]
                },
                "name": "properties"
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.initQml",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isVisible",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.isVisible",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setVisible",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "visible"
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.setVisible",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getPosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                }
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.getPosition",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setPosition",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "name": "position"
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.setPosition",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setPosition",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "y"
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.setPosition",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getSize",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                }
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.getSize",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setSize",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "name": "size"
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.setSize",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setSize",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "width"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "height"
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.setSize",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setTitle",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "title"
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.setTitle",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "raise",
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.raise",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "close",
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.close",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getEventBridge",
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                }
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.getEventBridge",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "sendToQml",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.sendToQml",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "clearDebugWindow",
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.clearDebugWindow",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "emitScriptEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.emitScriptEvent",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "emitWebEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.emitWebEvent",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "visibleChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.visibleChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "positionChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.positionChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "sizeChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.sizeChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "moved",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "name": "position"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.moved",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "resized",
        "params": [
            {
                "type": {
                    "names": [
                        "Size"
                    ]
                },
                "name": "size"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.resized",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "closed",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.closed",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "fromQml",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.fromQml",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "scriptEventReceived",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.scriptEventReceived",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "webEventReceived",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.webEventReceived",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "hasMoved",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "name": "position"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.hasMoved",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "hasClosed",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.hasClosed",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "qmlToScript",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.qmlToScript",
        "scope": "static"
    },
    {
        "description": "Properties of a tablet button.",
        "kind": "typedef",
        "name": "ButtonProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The button ID. <em>Read-only.</em>",
                "name": "uuid"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "Synonym for <code>uuid</code>.",
                "name": "objectName"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The order in which the button was created: each button created gets a value incremented by \r    one.",
                "name": "stableOrder"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The url of the default button icon displayed. (50 x 50 pixels. SVG, PNG, or other image format.)",
                "name": "icon"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The url of the button icon displayed when the button is hovered and not active.",
                "name": "hoverIcon"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The url of the button icon displayed when the button is active.",
                "name": "activeIcon"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The url of the button icon displayed when the button is hovered and active.",
                "name": "activeHoverIcon"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The button caption.",
                "name": "text"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The button caption when the button is hovered and not active.",
                "name": "hoverText"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The button caption when the button is active.",
                "name": "activeText"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The button caption when the button is hovered and active.",
                "name": "activeHoverText"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"#ffffff\"",
                "description": "The color of the button caption.",
                "name": "captionColor"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<code>true</code> if the button is active, <code>false</code> if it isn't.",
                "name": "isActive"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the button is being hovered, <code>false</code> if it isn't.",
                "name": "isEntered"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "<code>true</code> if the button is enabled, <code>false</code> if it is disabled.",
                "name": "buttonEnabled"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 100,
                "description": "Determines the order of the buttons: buttons with lower numbers appear before buttons\r    with larger numbers.",
                "name": "sortOrder"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If <code>true</code> and the tablet is being used, the button's <code>isActive</code> \r    state toggles each time the button is clicked. <em>Tablet only.</em>",
                "name": "inDebugMode"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Internal tablet-only property.",
                "name": "flickable"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Internal tablet-only property.",
                "name": "gridView"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Internal tablet-only property.",
                "name": "buttonIndex"
            }
        ],
        "tags": [
            {
                "originalTitle": "comment",
                "title": "comment",
                "text": "{string} defaultCaptionColor=\"#ffffff\" - Internal property.",
                "value": "{string} defaultCaptionColor=\"#ffffff\" - Internal property."
            },
            {
                "originalTitle": "comment",
                "title": "comment",
                "text": "{object} tabletRoot - Internal tablet-only property.",
                "value": "{object} tabletRoot - Internal tablet-only property."
            },
            {
                "originalTitle": "comment",
                "title": "comment",
                "text": "{number} imageOffOut - Internal toolbar-only property.",
                "value": "{number} imageOffOut - Internal toolbar-only property."
            },
            {
                "originalTitle": "comment",
                "title": "comment",
                "text": "{number} imageOffIn - Internal toolbar-only property.",
                "value": "{number} imageOffIn - Internal toolbar-only property."
            },
            {
                "originalTitle": "comment",
                "title": "comment",
                "text": "{number} imageOnOut - Internal toolbar-only property.",
                "value": "{number} imageOnOut - Internal toolbar-only property."
            },
            {
                "originalTitle": "comment",
                "title": "comment",
                "text": "{number} imageOnIn - Internal toolbar-only property.",
                "value": "{number} imageOnIn - Internal toolbar-only property."
            }
        ],
        "memberof": "TabletButtonProxy",
        "longname": "TabletButtonProxy.ButtonProperties",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Tablet</code> API provides the facilities to work with the system or other tablet. In toolbar mode (see Developer \r&gt; UI options), the tablet's menu buttons are displayed in a toolbar and other tablet content is displayed in a dialog.\r\r<p>See also the {@link Toolbars} API for working with toolbars.</p>",
        "kind": "namespace",
        "name": "Tablet",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "longname": "Tablet",
        "scope": "global"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>tabletInterface</code> API provides the facilities to work with the system or other tablet.",
        "kind": "namespace",
        "name": "tabletInterface",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "deprecated": "This API is deprecated and will be removed. Use {@link Tablet} instead.",
        "longname": "tabletInterface",
        "scope": "global"
    },
    {
        "description": "<p>Standard tablet sounds.</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>0</code></td><td>Button click.</td></tr>\r    <tr><td><code>1</code></td><td>Button hover.</td></tr>\r    <tr><td><code>2</code></td><td>Tablet open.</td></tr>\r    <tr><td><code>3</code></td><td>Tablet hands in.</td></tr>\r    <tr><td><code>4</code></td><td>Tablet hands out.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "AudioEvents",
        "type": {
            "names": [
                "number"
            ]
        },
        "memberof": "Tablet",
        "longname": "Tablet.AudioEvents",
        "scope": "static"
    },
    {
        "description": "Gets an instance of a tablet. A new tablet is created if one with the specified name doesn't already exist.",
        "kind": "function",
        "name": "getTablet",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "A unique name that identifies the tablet.",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "TabletProxy"
                    ]
                },
                "description": "The tablet instance."
            }
        ],
        "examples": [
            "<caption>Display the High Fidelity home page on the system tablet.</caption>\rvar tablet = Tablet.getTablet(\"com.highfidelity.interface.tablet.system\");\rtablet.gotoWebScreen(\"https://highfidelity.com/\");"
        ],
        "memberof": "Tablet",
        "longname": "Tablet.getTablet",
        "scope": "static"
    },
    {
        "description": "Plays a standard tablet sound. The sound is played locally (only the user running the script hears it) without a \rposition.",
        "kind": "function",
        "name": "playSound",
        "params": [
            {
                "type": {
                    "names": [
                        "Tablet.AudioEvents"
                    ]
                },
                "description": "The tablet sound to play.",
                "name": "sound"
            }
        ],
        "examples": [
            "<caption>Play a tablet sound.</caption>\rvar TABLET_BUTTON_CLICK = 0;\rTablet.playSound(TABLET_BUTTON_CLICK);"
        ],
        "memberof": "Tablet",
        "longname": "Tablet.playSound",
        "scope": "static"
    },
    {
        "description": "Triggered when a tablet message or dialog is displayed on the tablet that needs the user's attention.\r<p><strong>Note:</strong> Only triggered if the script is running in the same script engine as the script that created \rthe tablet. By default, this means in scripts included as part of the default scripts.</p>",
        "kind": "signal",
        "name": "tabletNotification",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Tablet",
        "longname": "Tablet.tabletNotification",
        "scope": "static"
    },
    {
        "description": "Information on the buttons in the tablet main menu (toolbar in toolbar mode) for use in QML. Has properties and functions \rper <a href=\"http://doc.qt.io/qt-5/qabstractlistmodel.html\">http://doc.qt.io/qt-5/qabstractlistmodel.html</a>.",
        "kind": "typedef",
        "name": "TabletButtonListModel",
        "type": {
            "names": [
                "object"
            ]
        },
        "memberof": "TabletProxy",
        "longname": "TabletProxy.TabletButtonListModel",
        "scope": "static"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>An instance of a tablet. In toolbar mode (see Developer &gt; UI options), the tablet's menu buttons are displayed in a \rtoolbar and other tablet content is displayed in a dialog.\r\r<p>Retrieve an existing tablet or create a new tablet using {@link Tablet.getTablet}.</p>",
        "kind": "class",
        "name": "TabletProxy",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "A unique name that identifies the tablet. <em>Read-only.</em>",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the tablet is in toolbar mode, <code>false</code> if it isn't.",
                "name": "toolbarMode"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the tablet is displayed in landscape mode, <code>false</code> if it is \r    displayed in portrait mode.\r    <p>Note: This property isn't used in toolbar mode.</p>",
                "name": "landscape"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the tablet is currently displayed, <code>false</code> if it isn't.\r    <p>Note: This property isn't used in toolbar mode.</p>",
                "name": "tabletShown"
            },
            {
                "type": {
                    "names": [
                        "TabletProxy.TabletButtonListModel"
                    ]
                },
                "description": "Information on the buttons in the tablet main menu (or toolbar in \r    toolbar mode) for use in QML. <em>Read-only.</em>",
                "name": "buttons"
            }
        ],
        "longname": "TabletProxy",
        "scope": "global"
    },
    {
        "description": "Displays the tablet menu. The tablet is opened if it isn't already open.",
        "kind": "function",
        "name": "gotoMenuScreen",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The name of a submenu to display, if any.",
                "name": "submenu"
            }
        ],
        "examples": [
            "<caption>Go to the \"View\" menu.</caption>\rtablet.gotoMenuScreen(\"View\");"
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#gotoMenuScreen",
        "scope": "instance"
    },
    {
        "kind": "function",
        "name": "initialScreen",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "URL.",
                "name": "url"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "TabletProxy",
        "longname": "TabletProxy#initialScreen",
        "scope": "instance"
    },
    {
        "description": "Displays the tablet home screen, if the tablet is open.",
        "kind": "function",
        "name": "gotoHomeScreen",
        "memberof": "TabletProxy",
        "longname": "TabletProxy#gotoHomeScreen",
        "scope": "instance"
    },
    {
        "description": "Opens a web app or page in addition to any current app. In tablet mode, the app or page is displayed over the top of the\rcurrent app; in toolbar mode, the app is opened in a new window that replaces any current window open. If in tablet\rmode, the app or page can be closed using {@link TabletProxy#returnToPreviousApp}.",
        "kind": "function",
        "name": "gotoWebScreen",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the web page or app.",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The URL of JavaScript to inject into the web page.",
                "name": "injectedJavaScriptUrl"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If <code>true</code>, the web page or app is displayed in a frame with \"back\" \rand \"close\" buttons.\r<p class=\"important\">Deprecated: This parameter is deprecated and will be removed.</p>",
                "name": "loadOtherBase"
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#gotoWebScreen",
        "scope": "instance"
    },
    {
        "description": "Opens a QML app or dialog on the tablet.",
        "kind": "function",
        "name": "loadQMLSource",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path of the QML app or dialog.",
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<code>true</code> to make the dialog resizable in toolbar mode, <code>false</code> \r    to have it not resizable.",
                "name": "resizable"
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#loadQMLSource",
        "scope": "instance"
    },
    {
        "kind": "function",
        "name": "loadQMLSourceImpl",
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "TabletProxy",
        "longname": "TabletProxy#loadQMLSourceImpl",
        "scope": "instance"
    },
    {
        "kind": "function",
        "name": "loadHTMLSourceOnTopImpl",
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "TabletProxy",
        "longname": "TabletProxy#loadHTMLSourceOnTopImpl",
        "scope": "instance"
    },
    {
        "kind": "function",
        "name": "returnToPreviousAppImpl",
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "TabletProxy",
        "longname": "TabletProxy#returnToPreviousAppImpl",
        "scope": "instance"
    },
    {
        "kind": "function",
        "name": "loadQMLOnTopImpl",
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "TabletProxy",
        "longname": "TabletProxy#loadQMLOnTopImpl",
        "scope": "instance"
    },
    {
        "description": "Displays a QML dialog over the top of the current dialog, without closing the current dialog. Use \r{@link TabletProxy#popFromStack|popFromStack} to close the dialog.\r<p>If the current dialog or its ancestors contain a QML <code>StackView</code> with <code>objectName: \"stack\"</code> and \rfunction <code>pushSource(path)</code>, that function is called; otherwise, \r{@link TabletProxy#loadQMLSource|loadQMLSource} is called. The Create app provides an example of using a QML \r<code>StackView</code>.</p>",
        "kind": "function",
        "name": "pushOntoStack",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path to the dialog's QML.",
                "name": "path"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the dialog was successfully opened, <code>false</code> if it wasn't."
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#pushOntoStack",
        "scope": "instance"
    },
    {
        "description": "Closes a QML dialog that was displayed using {@link Tablet#pushOntoStack|pushOntoStack} with a dialog implementing a QML \r<code>StackView</code>; otherwise, no action is taken.\r<p>If using a QML <code>StackView</code>, its <code>popSource()</code> function is called.</p>",
        "kind": "function",
        "name": "popFromStack",
        "memberof": "TabletProxy",
        "longname": "TabletProxy#popFromStack",
        "scope": "instance"
    },
    {
        "description": "Opens a QML app or dialog in addition to any current app. In tablet mode, the app or dialog is displayed over the top of \rthe current app; in toolbar mode, the app or dialog is opened in a new window. If in tablet mode, the app can be closed \rusing {@link TabletProxy#returnToPreviousApp}.",
        "kind": "function",
        "name": "loadQMLOnTop",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path to the app's QML.",
                "name": "path"
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#loadQMLOnTop",
        "scope": "instance"
    },
    {
        "description": "Opens a web app or page in addition to any current app. In tablet mode, the app or page is displayed over the top of the\rcurrent app; in toolbar mode, the app is opened in a new window that replaces any current window open. If in tablet \rmode, the app or page can be closed using {@link TabletProxy#returnToPreviousApp}.",
        "kind": "function",
        "name": "loadWebScreenOnTop",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the web page or HTML app.",
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The URL of JavaScript to inject into the web page.",
                "name": "injectedJavaScriptURL"
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#loadWebScreenOnTop",
        "scope": "instance"
    },
    {
        "description": "Closes the current app and returns to the previous app, if in tablet mode and the current app was loaded using \r{@link TabletProxy#loadQMLOnTop|loadQMLOnTop} or {@link TabletProxy#loadWebScreenOnTop|loadWebScreenOnTop}.",
        "kind": "function",
        "name": "returnToPreviousApp",
        "memberof": "TabletProxy",
        "longname": "TabletProxy#returnToPreviousApp",
        "scope": "instance"
    },
    {
        "description": "Checks if the tablet has a modal, non-modal, or message dialog open.",
        "kind": "function",
        "name": "isMessageDialogOpen",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if a modal, non-modal, or message dialog is open, <code>false</code> if there isn't."
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#isMessageDialogOpen",
        "scope": "instance"
    },
    {
        "description": "Closes any open modal, non-modal, or message dialog, opened by {@link Window.prompt}, {@link Window.promptAsync}, \r{@link Window.openMessageBox}, or similar.",
        "kind": "function",
        "name": "closeDialog",
        "memberof": "TabletProxy",
        "longname": "TabletProxy#closeDialog",
        "scope": "instance"
    },
    {
        "description": "Adds a new button to the tablet menu.",
        "kind": "function",
        "name": "addButton",
        "params": [
            {
                "type": {
                    "names": [
                        "TabletButtonProxy.ButtonProperties"
                    ]
                },
                "description": "Button properties.",
                "name": "properties"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "TabletButtonProxy"
                    ]
                },
                "description": "The button added."
            }
        ],
        "examples": [
            "<caption>Add a menu button.</caption>\rvar tablet = Tablet.getTablet(\"com.highfidelity.interface.tablet.system\");\rvar button = tablet.addButton({ text: \"TEST\" });\r\rbutton.clicked.connect(function () {\r    print(\"TEST button clicked\");\r});\r\rScript.scriptEnding.connect(function () {\r    tablet.removeButton(button);\r});"
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#addButton",
        "scope": "instance"
    },
    {
        "description": "Removes a button from the tablet menu.",
        "kind": "function",
        "name": "removeButton",
        "params": [
            {
                "type": {
                    "names": [
                        "TabletButtonProxy"
                    ]
                },
                "description": "The button to remove.",
                "name": "button"
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#removeButton",
        "scope": "instance"
    },
    {
        "description": "Sends a message to the current web page. To receive the message, the web page's script must connect to the\r<code>EventBridge</code> that is automatically provided to the script:\r<pre class=\"prettyprint\"><code>EventBridge.scriptEventReceived.connect(function(message) {\r    ...\r});</code></pre>",
        "kind": "function",
        "name": "emitScriptEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "object"
                    ]
                },
                "description": "The message to send to the web page.",
                "name": "message"
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#emitScriptEvent",
        "scope": "instance"
    },
    {
        "description": "Sends a message to the current QML page. To receive the message, the QML page must implement a function:\r<pre class=\"prettyprint\"><code>function fromScript(message) {\r  ...\r}</code></pre>",
        "kind": "function",
        "name": "sendToQml",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "object"
                    ]
                },
                "description": "The message to send to the QML page.",
                "name": "message"
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#sendToQml",
        "scope": "instance"
    },
    {
        "description": "Checks if the tablet is on the home screen.",
        "kind": "function",
        "name": "onHomeScreen",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the tablet is on the home screen, <code>false</code> if it isn't."
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#onHomeScreen",
        "scope": "instance"
    },
    {
        "description": "Sets whether the tablet is displayed in landscape or portrait mode.\r<p>Note: The setting isn't used in toolbar mode.</p>",
        "kind": "function",
        "name": "setLandscape",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to display the tablet in landscape mode, <code>false</code> to display it \r    in portrait mode.",
                "name": "landscape"
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#setLandscape",
        "scope": "instance"
    },
    {
        "description": "Gets whether the tablet is displayed in landscape or portrait mode.\r<p>Note: The setting isn't used in toolbar mode.</p>",
        "kind": "function",
        "name": "getLandscape",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the tablet is displayed in landscape mode, <code>false</code> if it is displayed \r    in portrait mode."
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#getLandscape",
        "scope": "instance"
    },
    {
        "description": "Checks if a path is the current app or dialog displayed.",
        "kind": "function",
        "name": "isPathLoaded",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path to test.",
                "name": "path"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if <code>path</code> is the current app or dialog, <code>false</code> if it isn't."
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#isPathLoaded",
        "scope": "instance"
    },
    {
        "description": "Triggered when a message from the current HTML web page displayed on the tablet is received. The HTML web page can send \ra message by calling:\r<pre class=\"prettyprint\"><code>EventBridge.emitWebEvent(message);</code></pre>",
        "kind": "signal",
        "name": "webEventReceived",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "object"
                    ]
                },
                "description": "The message received.",
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#webEventReceived",
        "scope": "instance"
    },
    {
        "description": "Triggered when a message from the current QML page displayed on the tablet is received. The QML page can send a message \r(string or object) by calling: <pre class=\"prettyprint\"><code>sendToScript(message);</code></pre>",
        "kind": "signal",
        "name": "fromQml",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "object"
                    ]
                },
                "description": "The message received.",
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#fromQml",
        "scope": "instance"
    },
    {
        "description": "Triggered when the tablet's screen changes.",
        "kind": "signal",
        "name": "screenChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The type of the new screen or change: <code>\"Home\"</code>, <code>\"Menu\"</code>, \r    <code>\"QML\"</code>, <code>\"Web\"</code>, <code>\"Closed\"</code>, or <code>\"Unknown\"</code>.",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The url of the page displayed. Only valid for Web and QML.",
                "name": "url"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#screenChanged",
        "scope": "instance"
    },
    {
        "description": "Triggered when the tablet is opened or closed.\r<p>Note: Doesn't apply in toolbar mode.</p>",
        "kind": "signal",
        "name": "tabletShownChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#tabletShownChanged",
        "scope": "instance"
    },
    {
        "description": "Triggered when the tablet's toolbar mode changes.",
        "kind": "signal",
        "name": "toolbarModeChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when the system tablet's toolbar mode changes.</caption>\rvar tablet = Tablet.getTablet(\"com.highfidelity.interface.tablet.system\");\rtablet.toolbarModeChanged.connect(function () {\r    print(\"Tablet toolbar mode changed to: \" + tablet.toolbarMode);\r});\r// Use Developer > UI > Tablet Becomes Toolbar to change the toolbar mode."
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#toolbarModeChanged",
        "scope": "instance"
    },
    {
        "kind": "function",
        "name": "desktopWindowClosed",
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "TabletProxy",
        "longname": "TabletProxy#desktopWindowClosed",
        "scope": "instance"
    },
    {
        "kind": "function",
        "name": "emitWebEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "object",
                        "string"
                    ]
                },
                "description": "Message",
                "name": "message"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "TabletProxy",
        "longname": "TabletProxy#emitWebEvent",
        "scope": "instance"
    },
    {
        "kind": "function",
        "name": "onTabletShown",
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "TabletProxy",
        "longname": "TabletProxy#onTabletShown",
        "scope": "instance"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>A tablet button. In toolbar mode (Developer &gt; UI &gt; Tablet Becomes Toolbar), the tablet button is displayed on the \rtoolbar.\r\r<p>Create a new button using {@link TabletProxy#addButton}.</p>",
        "kind": "class",
        "name": "TabletButtonProxy",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the button. <em>Read-only.</em>",
                "name": "uuid"
            },
            {
                "type": {
                    "names": [
                        "TabletButtonProxy.ButtonProperties"
                    ]
                },
                "description": "The current values of the button's properties. Only properties \r    that have been set during button creation or subsequently edited are returned. <em>Read-only.</em>",
                "name": "properties"
            }
        ],
        "longname": "TabletButtonProxy",
        "scope": "global"
    },
    {
        "description": "Gets the current values of the button's properties. Only properties that have been set during button creation or \rsubsequently edited are returned.",
        "kind": "function",
        "name": "getProperties",
        "returns": [
            {
                "type": {
                    "names": [
                        "TabletButtonProxy.ButtonProperties"
                    ]
                },
                "description": "The button properties."
            }
        ],
        "examples": [
            "<caption>Report a test button's properties.</caption>\rvar tablet = Tablet.getTablet(\"com.highfidelity.interface.tablet.system\");\rvar button = tablet.addButton({ text: \"TEST\" });\r\rvar properties = button.getProperties();\rprint(\"TEST button properties: \" + JSON.stringify(properties));\r\rScript.scriptEnding.connect(function () {\r    tablet.removeButton(button);\r});"
        ],
        "memberof": "TabletButtonProxy",
        "longname": "TabletButtonProxy#getProperties",
        "scope": "instance"
    },
    {
        "description": "Changes the values of the button's properties.",
        "kind": "function",
        "name": "editProperties",
        "params": [
            {
                "type": {
                    "names": [
                        "TabletButtonProxy.ButtonProperties"
                    ]
                },
                "description": "The properties to change.",
                "name": "properties"
            }
        ],
        "examples": [
            "<caption>Set a button's hover text after a delay.</caption>\rvar tablet = Tablet.getTablet(\"com.highfidelity.interface.tablet.system\");\rvar button = tablet.addButton({ text: \"TEST\" });\r\rbutton.propertiesChanged.connect(function () {\r    print(\"TEST button properties changed\");\r});\r\rScript.setTimeout(function () {\r    button.editProperties({ text: \"CHANGED\" });\r}, 2000);\r\rScript.scriptEnding.connect(function () {\r    tablet.removeButton(button);\r});"
        ],
        "memberof": "TabletButtonProxy",
        "longname": "TabletButtonProxy#editProperties",
        "scope": "instance"
    },
    {
        "description": "Triggered when the button is clicked.",
        "kind": "signal",
        "name": "clicked",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report a menu button click.</caption>\rvar tablet = Tablet.getTablet(\"com.highfidelity.interface.tablet.system\");\rvar button = tablet.addButton({ text: \"TEST\" });\r\rbutton.clicked.connect(function () {\r    print(\"TEST button clicked\");\r});\r\rScript.scriptEnding.connect(function () {\r    tablet.removeButton(button);\r});"
        ],
        "memberof": "TabletButtonProxy",
        "longname": "TabletButtonProxy#clicked",
        "scope": "instance"
    },
    {
        "description": "Triggered when a button's properties are changed.",
        "kind": "signal",
        "name": "propertiesChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "TabletButtonProxy",
        "longname": "TabletButtonProxy#propertiesChanged",
        "scope": "instance"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>An instance of a toolbar.\r\r<p>Retrieve an existing toolbar or create a new toolbar using {@link Toolbars.getToolbar}.</p>",
        "kind": "class",
        "name": "ToolbarProxy",
        "hideconstructor": true,
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "longname": "ToolbarProxy",
        "scope": "global"
    },
    {
        "description": "<em>Currently doesn't work.</em>",
        "kind": "function",
        "name": "addButton",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Button properties",
                "name": "properties"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The button added."
            }
        ],
        "deprecated": "This method is deprecated and will be removed.",
        "memberof": "ToolbarProxy",
        "longname": "ToolbarProxy#addButton",
        "scope": "instance"
    },
    {
        "description": "<em>Currently doesn't work.</em>",
        "kind": "function",
        "name": "removeButton",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Button name.",
                "name": "name"
            }
        ],
        "deprecated": "This method is deprecated and will be removed.",
        "memberof": "ToolbarProxy",
        "longname": "ToolbarProxy#removeButton",
        "scope": "instance"
    },
    {
        "description": "Sets the value of a toolbar property. A property is added to the toolbar if the named property doesn't already \rexist.",
        "kind": "function",
        "name": "writeProperty",
        "tags": [
            {
                "originalTitle": "parm",
                "title": "parm",
                "text": "{string} propertyName - The name of the property. Toolbar properties are those in the QML implementation of the\r    toolbar.",
                "value": "{string} propertyName - The name of the property. Toolbar properties are those in the QML implementation of the\r    toolbar."
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The value of the property.",
                "name": "propertyValue"
            }
        ],
        "memberof": "ToolbarProxy",
        "longname": "ToolbarProxy#writeProperty",
        "scope": "instance"
    },
    {
        "description": "Sets the values of toolbar properties. A property is added to the toolbar if a named property doesn't already\rexist.",
        "kind": "function",
        "name": "writeProperties",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The names and values of the properties to set. Toolbar properties are those in the QML \r    implementation of the toolbar.",
                "name": "properties"
            }
        ],
        "memberof": "ToolbarProxy",
        "longname": "ToolbarProxy#writeProperties",
        "scope": "instance"
    },
    {
        "description": "Gets the value of a toolbar property.",
        "kind": "function",
        "name": "readProperty",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The property name. Toolbar properties are those in the QML implementation of the toolbar.",
                "name": "propertyName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The value of the property if the property name is valid, otherwise <code>undefined</code>."
            }
        ],
        "memberof": "ToolbarProxy",
        "longname": "ToolbarProxy#readProperty",
        "scope": "instance"
    },
    {
        "description": "Gets the values of toolbar properties.",
        "kind": "function",
        "name": "readProperties",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "The names of the properties to get the values of. Toolbar properties are those in the \r    QML implementation of the toolbar.",
                "name": "propertyList"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The names and values of the specified properties. If the toolbar doesn't have a particular property \r    then the result doesn't include that property."
            }
        ],
        "memberof": "ToolbarProxy",
        "longname": "ToolbarProxy#readProperties",
        "scope": "instance"
    },
    {
        "description": "<p class='availableIn'><b>Supported Script Types:</b> Interface Scripts &bull; Client Entity Scripts &bull; Avatar Scripts</p>The <code>Toolbars</code> API provides facilities to work with the system or other toolbar.\r\r<p>See also the {@link Tablet} API for use of the system tablet and toolbar in desktop and HMD modes.</p>",
        "kind": "namespace",
        "name": "Toolbars",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAvatar": true,
        "longname": "Toolbars",
        "scope": "global"
    },
    {
        "description": "Gets an instance of a toolbar. A new toolbar is created if one with the specified name doesn't already exist.",
        "kind": "function",
        "name": "getToolbar",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "A unique name that identifies the toolbar.",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ToolbarProxy"
                    ]
                },
                "description": "The toolbar instance."
            }
        ],
        "memberof": "Toolbars",
        "longname": "Toolbars.getToolbar",
        "scope": "static"
    },
    {
        "description": "Triggered when the visibility of a toolbar changes.",
        "kind": "signal",
        "name": "toolbarVisibleChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the toolbar is visible, <code>false</code> if it is hidden.",
                "name": "isVisible"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the toolbar.",
                "name": "toolbarName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Briefly hide the system toolbar.</caption>\rToolbars.toolbarVisibleChanged.connect(function(visible, name) {\r    print(\"Toolbar \" + name + \" visible changed to \" + visible);\r});\r\rvar toolbar = Toolbars.getToolbar(\"com.highfidelity.interface.toolbar.system\");\rif (toolbar) {\r    toolbar.writeProperty(\"visible\", false);\r    Script.setTimeout(function () {\r        toolbar.writeProperty(\"visible\", true);\r    }, 2000);\r}\r\n     "
        ],
        "memberof": "Toolbars",
        "longname": "Toolbars.toolbarVisibleChanged",
        "scope": "static"
    },
    {
        "description": "<p>The <code>Controller.Hardware.OculusTouch</code> object has properties representing the Oculus Rift. The property values \rare integer IDs, uniquely identifying each output. <em>Read-only.</em></p>\r<p>These outputs can be mapped to actions or functions or <code>Controller.Standard</code> items in a {@link RouteObject} \rmapping.</p>\r<table>\r  <thead>\r    <tr><th>Property</th><th>Type</th><th>Data</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td colspan=\"4\"><strong>Buttons</strong></td></tr>\r    <tr><td><code>A</code></td><td>number</td><td>number</td><td>\"A\" button pressed.</td></tr>\r    <tr><td><code>B</code></td><td>number</td><td>number</td><td>\"B\" button pressed.</td></tr>\r    <tr><td><code>X</code></td><td>number</td><td>number</td><td>\"X\" button pressed.</td></tr>\r    <tr><td><code>Y</code></td><td>number</td><td>number</td><td>\"Y\" button pressed.</td></tr>\r    <tr><td><code>LeftApplicationMenu</code></td><td>number</td><td>number</td><td>Left application menu button pressed.\r      </td></tr>\r    <tr><td><code>RightApplicationMenu</code></td><td>number</td><td>number</td><td>Right application menu button pressed.\r      </td></tr>\r    <tr><td colspan=\"4\"><strong>Sticks</strong></td></tr>\r    <tr><td><code>LX</code></td><td>number</td><td>number</td><td>Left stick x-axis scale.</td></tr>\r    <tr><td><code>LY</code></td><td>number</td><td>number</td><td>Left stick y-axis scale.</td></tr>\r    <tr><td><code>RX</code></td><td>number</td><td>number</td><td>Right stick x-axis scale.</td></tr>\r    <tr><td><code>RY</code></td><td>number</td><td>number</td><td>Right stick y-axis scale.</td></tr>\r    <tr><td><code>LS</code></td><td>number</td><td>number</td><td>Left stick button pressed.</td></tr>\r    <tr><td><code>RS</code></td><td>number</td><td>number</td><td>Right stick button pressed.</td></tr>\r    <tr><td><code>LSTouch</code></td><td>number</td><td>number</td><td>Left stick is touched.</td></tr>\r    <tr><td><code>RSTouch</code></td><td>number</td><td>number</td><td>Right stick is touched.</td></tr>\r    <tr><td colspan=\"4\"><strong>Triggers</strong></td></tr>\r    <tr><td><code>LT</code></td><td>number</td><td>number</td><td>Left trigger scale.</td></tr>\r    <tr><td><code>RT</code></td><td>number</td><td>number</td><td>Right trigger scale.</td></tr>\r    <tr><td><code>LeftGrip</code></td><td>number</td><td>number</td><td>Left grip scale.</td></tr>\r    <tr><td><code>RightGrip</code></td><td>number</td><td>number</td><td>Right grip scale.</td></tr>\r    <tr><td colspan=\"4\"><strong>Finger Abstractions</strong></td></tr>\r    <tr><td><code>LeftPrimaryThumbTouch</code></td><td>number</td><td>number</td><td>Left thumb touching primary thumb \r      button.</td></tr>\r    <tr><td><code>LeftSecondaryThumbTouch</code></td><td>number</td><td>number</td><td>Left thumb touching secondary thumb \r      button.</td></tr>\r    <tr><td><code>LeftThumbUp</code></td><td>number</td><td>number</td><td>Left thumb not touching primary or secondary \r      thumb buttons.</td></tr>\r    <tr><td><code>RightPrimaryThumbTouch</code></td><td>number</td><td>number</td><td>Right thumb touching primary thumb \r      button.</td></tr>\r    <tr><td><code>RightSecondaryThumbTouch</code></td><td>number</td><td>number</td><td>Right thumb touching secondary thumb \r      button.</td></tr>\r    <tr><td><code>RightThumbUp</code></td><td>number</td><td>number</td><td>Right thumb not touching primary or secondary \r      thumb buttons.</td></tr>\r    <tr><td><code>LeftPrimaryIndexTouch</code></td><td>number</td><td>number</td><td>Left index finger is touching primary \r      index finger control.</td></tr>\r    <tr><td><code>LeftIndexPoint</code></td><td>number</td><td>number</td><td>Left index finger is pointing, not touching \r      primary or secondary index finger controls.</td></tr>\r    <tr><td><code>RightPrimaryIndexTouch</code></td><td>number</td><td>number</td><td>Right index finger is touching primary \r      index finger control.</td></tr>\r    <tr><td><code>RightIndexPoint</code></td><td>number</td><td>number</td><td>Right index finger is pointing, not touching \r      primary or secondary index finger controls.</td></tr>\r    <tr><td colspan=\"4\"><strong>Avatar Skeleton</strong></td></tr>\r    <tr><td><code>Head</code></td><td>number</td><td>{@link Pose}</td><td>Head pose.</td></tr>\r    <tr><td><code>LeftHand</code></td><td>number</td><td>{@link Pose}</td><td>Left hand pose.</td></tr>\r    <tr><td><code>RightHand</code></td><td>number</td><td>{@link Pose}</td><td>right hand pose.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "Hardware-OculusTouch",
        "type": {
            "names": [
                "object"
            ]
        },
        "memberof": "Controller",
        "longname": "Controller.Hardware-OculusTouch",
        "scope": "static"
    },
    {
        "description": "<p>The <code>Controller.Hardware.Vive</code> object has properties representing the Vive. The property values are integer \rIDs, uniquely identifying each output. <em>Read-only.</em></p>\r<p>These outputs can be mapped to actions or functions or <code>Controller.Standard</code> items in a {@link RouteObject} \rmapping.</p>\r<table>\r  <thead>\r    <tr><th>Property</th><th>Type</th><th>Data</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td colspan=\"4\"><strong>Buttons</strong></td></tr>\r    <tr><td><code>LeftApplicationMenu</code></td><td>number</td><td>number</td><td>Left application menu button pressed.\r      </td></tr>\r    <tr><td><code>RightApplicationMenu</code></td><td>number</td><td>number</td><td>Right application menu button pressed.\r      </td></tr>\r    <tr><td colspan=\"4\"><strong>Touch Pad (Sticks)</strong></td></tr>\r    <tr><td><code>LX</code></td><td>number</td><td>number</td><td>Left touch pad x-axis scale.</td></tr>\r    <tr><td><code>LY</code></td><td>number</td><td>number</td><td>Left touch pad y-axis scale.</td></tr>\r    <tr><td><code>RX</code></td><td>number</td><td>number</td><td>Right stick x-axis scale.</td></tr>\r    <tr><td><code>RY</code></td><td>number</td><td>number</td><td>Right stick y-axis scale.</td></tr>\r    <tr><td><code>LS</code></td><td>number</td><td>number</td><td>Left touch pad pressed.</td></tr>\r    <tr><td><code>LSCenter</code></td><td>number</td><td>number</td><td>Left touch pad center pressed.</td></tr>\r    <tr><td><code>LSX</code></td><td>number</td><td>number</td><td>Left touch pad pressed x-coordinate.</td></tr>\r    <tr><td><code>LSY</code></td><td>number</td><td>number</td><td>Left touch pad pressed y-coordinate.</td></tr>\r    <tr><td><code>RS</code></td><td>number</td><td>number</td><td>Right touch pad pressed.</td></tr>\r    <tr><td><code>RSCenter</code></td><td>number</td><td>number</td><td>Right touch pad center pressed.</td></tr>\r    <tr><td><code>RSX</code></td><td>number</td><td>number</td><td>Right touch pad pressed x-coordinate.</td></tr>\r    <tr><td><code>RSY</code></td><td>number</td><td>number</td><td>Right touch pad pressed y-coordinate.</td></tr>\r    <tr><td><code>LSTouch</code></td><td>number</td><td>number</td><td>Left touch pad is touched.</td></tr>\r    <tr><td><code>RSTouch</code></td><td>number</td><td>number</td><td>Right touch pad is touched.</td></tr>\r    <tr><td colspan=\"4\"><strong>Triggers</strong></td></tr>\r    <tr><td><code>LT</code></td><td>number</td><td>number</td><td>Left trigger scale.</td></tr>\r    <tr><td><code>RT</code></td><td>number</td><td>number</td><td>Right trigger scale.</td></tr>\r    <tr><td><code>LTClick</code></td><td>number</td><td>number</td><td>Left trigger click.</td></tr>\r    <tr><td><code>RTClick</code></td><td>number</td><td>number</td><td>Right trigger click.</td></tr>\r    <tr><td><code>LeftGrip</code></td><td>number</td><td>number</td><td>Left grip scale.</td></tr>\r    <tr><td><code>RightGrip</code></td><td>number</td><td>number</td><td>Right grip scale.</td></tr>\r    <tr><td colspan=\"4\"><strong>Avatar Skeleton</strong></td></tr>\r    <tr><td><code>Hips</code></td><td>number</td><td>{@link Pose}</td><td>Hips pose.</td></tr>\r    <tr><td><code>Spine2</code></td><td>number</td><td>{@link Pose}</td><td>Spine2 pose.</td></tr>\r    <tr><td><code>Head</code></td><td>number</td><td>{@link Pose}</td><td>Head pose.</td></tr>\r    <tr><td><code>LeftArm</code></td><td>number</td><td>{@link Pose}</td><td>Left arm pose.</td></tr>\r    <tr><td><code>RightArm</code></td><td>number</td><td>{@link Pose}</td><td>Right arm pose</td></tr>\r    <tr><td><code>LeftHand</code></td><td>number</td><td>{@link Pose}</td><td>Left hand pose.</td></tr>\r    <tr><td><code>RightHand</code></td><td>number</td><td>{@link Pose}</td><td>Right hand pose.</td></tr>\r    <tr><td colspan=\"4\"><strong>Trackers</strong></td></tr>\r    <tr><td><code>TrackedObject00</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 0 pose.</td></tr>\r    <tr><td><code>TrackedObject01</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 1 pose.</td></tr>\r    <tr><td><code>TrackedObject02</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 2 pose.</td></tr>\r    <tr><td><code>TrackedObject03</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 3 pose.</td></tr>\r    <tr><td><code>TrackedObject04</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 4 pose.</td></tr>\r    <tr><td><code>TrackedObject05</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 5 pose.</td></tr>\r    <tr><td><code>TrackedObject06</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 6 pose.</td></tr>\r    <tr><td><code>TrackedObject07</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 7 pose.</td></tr>\r    <tr><td><code>TrackedObject08</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 8 pose.</td></tr>\r    <tr><td><code>TrackedObject09</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 9 pose.</td></tr>\r    <tr><td><code>TrackedObject10</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 10 pose.</td></tr>\r    <tr><td><code>TrackedObject11</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 11 pose.</td></tr>\r    <tr><td><code>TrackedObject12</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 12 pose.</td></tr>\r    <tr><td><code>TrackedObject13</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 13 pose.</td></tr>\r    <tr><td><code>TrackedObject14</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 14 pose.</td></tr>\r    <tr><td><code>TrackedObject15</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 15 pose.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "Hardware-Vive",
        "type": {
            "names": [
                "object"
            ]
        },
        "memberof": "Controller",
        "longname": "Controller.Hardware-Vive",
        "scope": "static"
    },
    {
        "kind": "package",
        "longname": "package:undefined",
        "files": [
            "D:\\Workspaces\\CtrlAltStudio\\Athena-A\\Athena-A\\tools\\jsdoc\\root.js"
        ]
    },
    {
        "description": "Gets information about an avatar.",
        "kind": "function",
        "name": "getAvatar",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the avatar.",
                "name": "avatarID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "AvatarData"
                    ]
                },
                "description": "Information about the avatar."
            }
        ],
        "memberof": "AvatarManager",
        "longname": "AvatarManager.getAvatar",
        "scope": "static"
    },
    {
        "description": "Triggered when an avatar arrives in the domain.",
        "kind": "signal",
        "name": "avatarAddedEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the avatar that arrived in the domain.",
                "name": "sessionUUID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when an avatar arrives in the domain.</caption>\rAvatarManager.avatarAddedEvent.connect(function (sessionID) {\r    print(\"Avatar arrived: \" + sessionID);\r});\r\r// Note: If using from the AvatarList API, replace \"AvatarManager\" with \"AvatarList\"."
        ],
        "memberof": "AvatarManager",
        "longname": "AvatarManager.avatarAddedEvent",
        "scope": "static"
    },
    {
        "description": "Triggered when an avatar leaves the domain.",
        "kind": "signal",
        "name": "avatarRemovedEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the avatar that left the domain.",
                "name": "sessionUUID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when an avatar leaves the domain.</caption>\rAvatarManager.avatarRemovedEvent.connect(function (sessionID) {\r    print(\"Avatar left: \" + sessionID);\r});\r\r// Note: If using from the AvatarList API, replace \"AvatarManager\" with \"AvatarList\"."
        ],
        "memberof": "AvatarManager",
        "longname": "AvatarManager.avatarRemovedEvent",
        "scope": "static"
    },
    {
        "description": "Triggered when an avatar's session ID changes.",
        "kind": "signal",
        "name": "avatarSessionChangedEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The new session ID.",
                "name": "newSessionUUID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The old session ID.",
                "name": "oldSessionUUID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when an avatar's session ID changes.</caption>\rAvatarManager.avatarSessionChangedEvent.connect(function (newSessionID, oldSessionID) {\r    print(\"Avatar session ID changed from \" + oldSessionID + \" to \" + newSessionID);\r});\r\r// Note: If using from the AvatarList API, replace \"AvatarManager\" with \"AvatarList\"."
        ],
        "memberof": "AvatarManager",
        "longname": "AvatarManager.avatarSessionChangedEvent",
        "scope": "static"
    },
    {
        "description": "Checks whether there is an avatar within a specified distance from a point.",
        "kind": "function",
        "name": "isAvatarInRange",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The test position.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The test distance.",
                "name": "range"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if there's an avatar within the specified distance of the point, <code>false</code> \r    if not."
            }
        ],
        "memberof": "AvatarManager",
        "longname": "AvatarManager.isAvatarInRange",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "sessionUUIDChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "New session ID.",
                "name": "sessionUUID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "Old session ID.",
                "name": "oldSessionUUID"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "AvatarManager",
        "longname": "AvatarManager.sessionUUIDChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "processAvatarDataPacket",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Message.",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Sending node.",
                "name": "sendingNode"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "AvatarManager",
        "longname": "AvatarManager.processAvatarDataPacket",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "processAvatarIdentityPacket",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Message.",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Sending node.",
                "name": "sendingNode"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "AvatarManager",
        "longname": "AvatarManager.processAvatarIdentityPacket",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "processBulkAvatarTraits",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Message.",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Sending node.",
                "name": "sendingNode"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "AvatarManager",
        "longname": "AvatarManager.processBulkAvatarTraits",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "processKillAvatar",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Message.",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Sending node.",
                "name": "sendingNode"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "AvatarManager",
        "longname": "AvatarManager.processKillAvatar",
        "scope": "static"
    },
    {
        "description": "Gets the minimum scale allowed for this avatar in the current domain.\rThis value can change as the user changes avatars or when changing domains.",
        "kind": "function",
        "name": "getDomainMinScale",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The minimum scale allowed for this avatar in the current domain."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getDomainMinScale",
        "scope": "static"
    },
    {
        "description": "Gets the maximum scale allowed for this avatar in the current domain.\rThis value can change as the user changes avatars or when changing domains.",
        "kind": "function",
        "name": "getDomainMaxScale",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The maximum scale allowed for this avatar in the current domain."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getDomainMaxScale",
        "scope": "static"
    },
    {
        "description": "Gets the current eye height of the avatar.\rThis height is only an estimate and might be incorrect for avatars that are missing standard joints.",
        "kind": "function",
        "name": "getEyeHeight",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The eye height of the avatar."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getEyeHeight",
        "scope": "static"
    },
    {
        "description": "Gets the current height of the avatar.\rThis height is only an estimate and might be incorrect for avatars that are missing standard joints.",
        "kind": "function",
        "name": "getHeight",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The height of the avatar."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getHeight",
        "scope": "static"
    },
    {
        "description": "Sets the pointing state of the hands to control where the laser emanates from. If the right index finger is pointing, the \rlaser emanates from the tip of that finger, otherwise it emanates from the palm.",
        "kind": "function",
        "name": "setHandState",
        "params": [
            {
                "type": {
                    "names": [
                        "HandState"
                    ]
                },
                "description": "The pointing state of the hand.",
                "name": "state"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setHandState",
        "scope": "static"
    },
    {
        "description": "Gets the pointing state of the hands to control where the laser emanates from. If the right index finger is pointing, the\rlaser emanates from the tip of that finger, otherwise it emanates from the palm.",
        "kind": "function",
        "name": "getHandState",
        "returns": [
            {
                "type": {
                    "names": [
                        "HandState"
                    ]
                },
                "description": "The pointing state of the hand."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getHandState",
        "scope": "static"
    },
    {
        "description": "Sets joint translations and rotations from raw joint data.",
        "kind": "function",
        "name": "setRawJointData",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<JointData>"
                    ]
                },
                "description": "The raw joint data.",
                "name": "data"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setRawJointData",
        "scope": "static"
    },
    {
        "description": "Sets a specific joint's rotation and position relative to its parent, in model coordinates.\r<p><strong>Warning:</strong> These coordinates are not necessarily in meters.</p>\r<p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse\rkinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints, \rthe avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate \rjoints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set \rthe rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>",
        "kind": "function",
        "name": "setJointData",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint.",
                "name": "index"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation of the joint relative to its parent.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The translation of the joint relative to its parent, in model coordinates.",
                "name": "translation"
            }
        ],
        "examples": [
            "<caption>Set your avatar to it's default T-pose for a while.<br />\r<img alt=\"Avatar in T-pose\" src=\"https://docs.highfidelity.com/images/t-pose.png\" /></caption>\r// Set all joint translations and rotations to defaults.\rvar i, length, rotation, translation;\rfor (i = 0, length = MyAvatar.getJointNames().length; i < length; i++) {\r    rotation = MyAvatar.getDefaultJointRotation(i);\r    translation = MyAvatar.getDefaultJointTranslation(i);\r    MyAvatar.setJointData(i, rotation, translation);\r}\r\r// Restore your avatar's motion after 5s.\rScript.setTimeout(function () {\r    MyAvatar.clearJointsData();\r}, 5000);\r\r// Note: If using from the Avatar API, replace all occurrences of \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setJointData",
        "scope": "static"
    },
    {
        "description": "Sets a specific joint's rotation and position relative to its parent, in model coordinates.\r<p><strong>Warning:</strong> These coordinates are not necessarily in meters.</p>\r<p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse\rkinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints, \rthe avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate \rjoints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set \rthe rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>",
        "kind": "function",
        "name": "setJointData",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the joint.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation of the joint relative to its parent.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The translation of the joint relative to its parent, in model coordinates.",
                "name": "translation"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setJointData",
        "scope": "static"
    },
    {
        "description": "Sets a specific joint's rotation relative to its parent.\r<p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse \rkinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints, \rthe avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate \rjoints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set \rthe rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>",
        "kind": "function",
        "name": "setJointRotation",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint.",
                "name": "index"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation of the joint relative to its parent.",
                "name": "rotation"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setJointRotation",
        "scope": "static"
    },
    {
        "description": "Sets a specific joint's rotation relative to its parent.\r<p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse \rkinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints, \rthe avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate \rjoints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set \rthe rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>",
        "kind": "function",
        "name": "setJointRotation",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the joint.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation of the joint relative to its parent.",
                "name": "rotation"
            }
        ],
        "examples": [
            "<caption>Set your avatar to its default T-pose then rotate its right arm.<br />\r<img alt=\"Avatar in T-pose with arm rotated\" src=\"https://docs.highfidelity.com/images/armpose.png\" /></caption>\r// Set all joint translations and rotations to defaults.\rvar i, length, rotation, translation;\rfor (i = 0, length = MyAvatar.getJointNames().length; i < length; i++) {\r    rotation = MyAvatar.getDefaultJointRotation(i);\r    translation = MyAvatar.getDefaultJointTranslation(i);\r    MyAvatar.setJointData(i, rotation, translation);\r}\r\r// Rotate the right arm.\rvar newArmRotation = { x: 0.47, y: 0.22, z: -0.02, w: 0.87 };\rMyAvatar.setJointRotation(\"RightArm\", newArmRotation);\r\r// Restore your avatar's motion after 5s.\rScript.setTimeout(function () {\r    MyAvatar.clearJointsData();\r}, 5000);\r\r// Note: If using from the Avatar API, replace all occurrences of \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setJointRotation",
        "scope": "static"
    },
    {
        "description": "Sets a specific joint's translation relative to its parent, in model coordinates.\r<p><strong>Warning:</strong> These coordinates are not necessarily in meters.</p>\r<p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse\rkinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints, \rthe avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate \rjoints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set \rthe rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>",
        "kind": "function",
        "name": "setJointTranslation",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint.",
                "name": "index"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The translation of the joint relative to its parent, in model coordinates.",
                "name": "translation"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setJointTranslation",
        "scope": "static"
    },
    {
        "description": "Sets a specific joint's translation relative to its parent, in model coordinates.\r<p><strong>Warning:</strong> These coordinates are not necessarily in meters.</p>\r<p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse\rkinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints, \rthe avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate \rjoints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set \rthe rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>",
        "kind": "function",
        "name": "setJointTranslation",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the joint.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The translation of the joint relative to its parent, in model coordinates.",
                "name": "translation"
            }
        ],
        "examples": [
            "<caption>Stretch your avatar's neck. Depending on the avatar you are using, you will either see a gap between \rthe head and body or you will see the neck stretched.<br />\r<img alt=\"Avatar with neck stretched\" src=\"https://docs.highfidelity.com/images/stretched-neck.png\" /></caption>\r// Stretch your avatar's neck.\rMyAvatar.setJointTranslation(\"Neck\", Vec3.multiply(2, MyAvatar.getJointTranslation(\"Neck\")));\r\r// Restore your avatar's neck after 5s.\rScript.setTimeout(function () {\r    MyAvatar.clearJointData(\"Neck\");\r}, 5000);\r\r// Note: If using from the Avatar API, replace all occurrences of \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setJointTranslation",
        "scope": "static"
    },
    {
        "description": "Clears joint translations and rotations set by script for a specific joint. This restores all motion from the default \ranimation system including inverse kinematics for that joint.\r<p>Note: This is slightly faster than the function variation that specifies the joint name.</p>",
        "kind": "function",
        "name": "clearJointData",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint.",
                "name": "index"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.clearJointData",
        "scope": "static"
    },
    {
        "description": "Clears joint translations and rotations set by script for a specific joint. This restores all motion from the default \ranimation system including inverse kinematics for that joint.\r<p>Note: This is slightly slower than the function variation that specifies the joint index.</p>",
        "kind": "function",
        "name": "clearJointData",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the joint.",
                "name": "name"
            }
        ],
        "examples": [
            "<caption>Offset and restore the position of your avatar's head.</caption>\r// Stretch your avatar's neck.\rMyAvatar.setJointTranslation(\"Neck\", Vec3.multiply(2, MyAvatar.getJointTranslation(\"Neck\")));\r\r// Restore your avatar's neck after 5s.\rScript.setTimeout(function () {\r    MyAvatar.clearJointData(\"Neck\");\r}, 5000);\r\r// Note: If using from the Avatar API, replace all occurrences of \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.clearJointData",
        "scope": "static"
    },
    {
        "description": "Checks that the data for a joint are valid.",
        "kind": "function",
        "name": "isJointDataValid",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint.",
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the joint data are valid, <code>false</code> if not."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.isJointDataValid",
        "scope": "static"
    },
    {
        "description": "Checks if the data for a joint are valid.",
        "kind": "function",
        "name": "isJointDataValid",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the joint.",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the joint data are valid, <code>false</code> if not."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.isJointDataValid",
        "scope": "static"
    },
    {
        "description": "Gets the rotation of a joint relative to its parent. For information on the joint hierarchy used, see \r<a href=\"https://docs.highfidelity.com/create/avatars/avatar-standards\">Avatar Standards</a>.",
        "kind": "function",
        "name": "getJointRotation",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint.",
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation of the joint relative to its parent."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getJointRotation",
        "scope": "static"
    },
    {
        "description": "Gets the rotation of a joint relative to its parent. For information on the joint hierarchy used, see \r<a href=\"https://docs.highfidelity.com/create/avatars/avatar-standards\">Avatar Standards</a>.",
        "kind": "function",
        "name": "getJointRotation",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the joint.",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation of the joint relative to its parent."
            }
        ],
        "examples": [
            "<caption>Report the rotation of your avatar's hips joint.</caption>\rprint(JSON.stringify(MyAvatar.getJointRotation(\"Hips\")));\r\r// Note: If using from the Avatar API, replace \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getJointRotation",
        "scope": "static"
    },
    {
        "description": "Gets the translation of a joint relative to its parent, in model coordinates.\r<p><strong>Warning:</strong> These coordinates are not necessarily in meters.</p>\r<p>For information on the joint hierarchy used, see \r<a href=\"https://docs.highfidelity.com/create/avatars/avatar-standards\">Avatar Standards</a>.</p>",
        "kind": "function",
        "name": "getJointTranslation",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint.",
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The translation of the joint relative to its parent, in model coordinates."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getJointTranslation",
        "scope": "static"
    },
    {
        "description": "Gets the translation of a joint relative to its parent, in model coordinates.\r<p><strong>Warning:</strong> These coordinates are not necessarily in meters.</p>\r<p>For information on the joint hierarchy used, see\r<a href=\"https://docs.highfidelity.com/create/avatars/avatar-standards\">Avatar Standards</a>.</p>",
        "kind": "function",
        "name": "getJointTranslation",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The name of the joint.",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The translation of the joint relative to its parent, in model coordinates."
            }
        ],
        "examples": [
            "<caption>Report the translation of your avatar's hips joint.</caption>\rprint(JSON.stringify(MyAvatar.getJointRotation(\"Hips\")));\r\r// Note: If using from the Avatar API, replace \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getJointTranslation",
        "scope": "static"
    },
    {
        "description": "Gets the rotations of all joints in the current avatar. Each joint's rotation is relative to its parent joint.",
        "kind": "function",
        "name": "getJointRotations",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Quat>"
                    ]
                },
                "description": "The rotations of all joints relative to each's parent. The values are in the same order as the array \rreturned by {@link MyAvatar.getJointNames}, or {@link Avatar.getJointNames} if using the <code>Avatar</code> API."
            }
        ],
        "examples": [
            "<caption>Report the rotations of all your avatar's joints.</caption>\rprint(JSON.stringify(MyAvatar.getJointRotations()));\r\r// Note: If using from the Avatar API, replace all \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getJointRotations",
        "scope": "static"
    },
    {
        "description": "Gets the translations of all joints in the current avatar. Each joint's translation is relative to its parent joint, in\rmodel coordinates.\r<p><strong>Warning:</strong> These coordinates are not necessarily in meters.</p>",
        "kind": "function",
        "name": "getJointTranslations",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "description": "The translations of all joints relative to each's parent, in model coordinates. The values are in the \r    same order as the array returned by {@link MyAvatar.getJointNames}, or {@link Avatar.getJointNames} if using the \r    <code>Avatar</code> API."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getJointTranslations",
        "scope": "static"
    },
    {
        "description": "Sets the rotations of all joints in the current avatar. Each joint's rotation is relative to its parent joint.\r<p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse\rkinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints,\rthe avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate\rjoints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set\rthe rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>",
        "kind": "function",
        "name": "setJointRotations",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<Quat>"
                    ]
                },
                "description": "The rotations for all joints in the avatar. The values are in the same order as the \rarray returned by {@link MyAvatar.getJointNames}, or {@link Avatar.getJointNames} if using the <code>Avatar</code> API.",
                "name": "jointRotations"
            }
        ],
        "examples": [
            "<caption>Set your avatar to its default T-pose then rotate its right arm.<br />\r<img alt=\"Avatar in T-pose\" src=\"https://docs.highfidelity.com/images/armpose.png\" /></caption>\r// Set all joint translations and rotations to defaults.\rvar i, length, rotation, translation;\rfor (i = 0, length = MyAvatar.getJointNames().length; i < length; i++) {\r    rotation = MyAvatar.getDefaultJointRotation(i);\r    translation = MyAvatar.getDefaultJointTranslation(i);\r    MyAvatar.setJointData(i, rotation, translation);\r}\r\r// Get all join rotations.\rvar jointRotations = MyAvatar.getJointRotations(); \r\r// Update the rotation of the right arm in the array.\rjointRotations[MyAvatar.getJointIndex(\"RightArm\")] = { x: 0.47, y: 0.22, z: -0.02, w: 0.87 };\r\r// Update all joint rotations.\rMyAvatar.setJointRotations(jointRotations);\r\r// Restore your avatar's motion after 5s.\rScript.setTimeout(function () {\r    MyAvatar.clearJointsData();\r}, 5000);\r\r// Note: If using from the Avatar API, replace all occurrences of \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setJointRotations",
        "scope": "static"
    },
    {
        "description": "Sets the translations of all joints in the current avatar. Each joint's translation is relative to its parent joint, in \rmodel coordinates.\r<p><strong>Warning:</strong> These coordinates are not necessarily in meters.</p>\r<p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse\rkinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints,\rthe avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate\rjoints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set\rthe rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>",
        "kind": "function",
        "name": "setJointTranslations",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "description": "The translations for all joints in the avatar, in model coordinates. The values are in \r    the same order as the array returned by {@link MyAvatar.getJointNames}, or {@link Avatar.getJointNames} if using the \r    <code>Avatar</code> API.",
                "name": "translations"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setJointTranslations",
        "scope": "static"
    },
    {
        "description": "Clears all joint translations and rotations that have been set by script. This restores all motion from the default \ranimation system including inverse kinematics for all joints.",
        "kind": "function",
        "name": "clearJointsData",
        "examples": [
            "<caption>Set your avatar to it's default T-pose for a while.</caption>\r// Set all joint translations and rotations to defaults.\rvar i, length, rotation, translation;\rfor (i = 0, length = MyAvatar.getJointNames().length; i < length; i++) {\r    rotation = MyAvatar.getDefaultJointRotation(i);\r    translation = MyAvatar.getDefaultJointTranslation(i);\r    MyAvatar.setJointData(i, rotation, translation);\r}\r\r// Restore your avatar's motion after 5s.\rScript.setTimeout(function () {\r    MyAvatar.clearJointsData();\r}, 5000);\r\r// Note: If using from the Avatar API, replace all occurrences of \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.clearJointsData",
        "scope": "static"
    },
    {
        "description": "Gets the joint index for a named joint. The joint index value is the position of the joint in the array returned by \r{@link MyAvatar.getJointNames}, or {@link Avatar.getJointNames} if using the <code>Avatar</code> API.",
        "kind": "function",
        "name": "getJointIndex",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the joint.",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint if valid, otherwise <code>-1</code>."
            }
        ],
        "examples": [
            "<caption>Report the index of your avatar's left arm joint.</caption>\rprint(JSON.stringify(MyAvatar.getJointIndex(\"LeftArm\")));\r\r// Note: If using from the Avatar API, replace \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getJointIndex",
        "scope": "static"
    },
    {
        "description": "Gets the names of all the joints in the current avatar.",
        "kind": "function",
        "name": "getJointNames",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "The joint names."
            }
        ],
        "examples": [
            "<caption>Report the names of all the joints in your current avatar.</caption>\rprint(JSON.stringify(MyAvatar.getJointNames()));\r\r// Note: If using from the Avatar API, replace \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getJointNames",
        "scope": "static"
    },
    {
        "description": "Sets the value of a blendshape to animate your avatar's face. To enable other users to see the resulting animation of \ryour avatar's face, set {@link Avatar.hasScriptedBlendshapes} to true while using this API and back to false when your\ranimation is complete.",
        "kind": "function",
        "name": "setBlendshape",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the blendshape, per the \r    {@link https://docs.highfidelity.com/create/avatars/avatar-standards.html#blendshapes Avatar Standards}.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "A value between <code>0.0</code> and <code>1.0</code>.",
                "name": "value"
            }
        ],
        "examples": [
            "<caption>Open your avatar's mouth wide.</caption>\rMyAvatar.hasScriptedBlendshapes = true;\rMyAvatar.setBlendshape(\"JawOpen\", 1.0);\r\r// Note: If using from the Avatar API, replace \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setBlendshape",
        "scope": "static"
    },
    {
        "description": "Gets information about the models currently attached to your avatar.",
        "kind": "function",
        "name": "getAttachmentsVariant",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<AttachmentData>"
                    ]
                },
                "description": "Information about all models attached to your avatar."
            }
        ],
        "deprecated": "This function is deprecated and will be removed. Use avatar entities instead.",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getAttachmentsVariant",
        "scope": "static"
    },
    {
        "description": "Sets all models currently attached to your avatar. For example, if you retrieve attachment data using\r{@link MyAvatar.getAttachmentsVariant} or {@link Avatar.getAttachmentsVariant}, make changes to it, and then want to \rupdate your avatar's attachments per the changed data.",
        "kind": "function",
        "name": "setAttachmentsVariant",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<AttachmentData>"
                    ]
                },
                "description": "The attachment data defining the models to have attached to your avatar.",
                "name": "variant"
            }
        ],
        "deprecated": "This function is deprecated and will be removed. Use avatar entities instead.",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setAttachmentsVariant",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "updateAvatarEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The entity ID.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Array.<byte>"
                    ]
                },
                "description": "Entity data.",
                "name": "entityData"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.updateAvatarEntity",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "clearAvatarEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The entity ID.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Requires removal from tree.",
                "name": "requiresRemovalFromTree"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.clearAvatarEntity",
        "scope": "static"
    },
    {
        "description": "Sets the avatar's skeleton model.",
        "kind": "function",
        "name": "setSkeletonModelURL",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The avatar's FST file.",
                "name": "url"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setSkeletonModelURL",
        "scope": "static"
    },
    {
        "description": "Gets information about the models currently attached to your avatar.",
        "kind": "function",
        "name": "getAttachmentData",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<AttachmentData>"
                    ]
                },
                "description": "Information about all models attached to your avatar."
            }
        ],
        "deprecated": "This function is deprecated and will be removed. Use avatar entities instead.",
        "examples": [
            "<caption>Report the URLs of all current attachments.</caption>\rvar attachments = MyAvatar.getaAttachmentData();\rfor (var i = 0; i < attachments.length; i++) {\r    print(attachments[i].modelURL);\r}\r\r// Note: If using from the Avatar API, replace \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getAttachmentData",
        "scope": "static"
    },
    {
        "description": "Sets all models currently attached to your avatar. For example, if you retrieve attachment data using\r{@link MyAvatar.getAttachmentData} or {@link Avatar.getAttachmentData}, make changes to it, and then want to update your avatar's attachments per the \rchanged data. You can also remove all attachments by using setting <code>attachmentData</code> to <code>null</code>.",
        "kind": "function",
        "name": "setAttachmentData",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<AttachmentData>"
                    ]
                },
                "description": "The attachment data defining the models to have attached to your avatar. Use\r    <code>null</code> to remove all attachments.",
                "name": "attachmentData"
            }
        ],
        "deprecated": "This function is deprecated and will be removed. Use avatar entities instead.",
        "examples": [
            "<caption>Remove a hat attachment if your avatar is wearing it.</caption>\rvar hatURL = \"https://s3.amazonaws.com/hifi-public/tony/cowboy-hat.fbx\";\rvar attachments = MyAvatar.getAttachmentData();\r\rfor (var i = 0; i < attachments.length; i++) {\r    if (attachments[i].modelURL === hatURL) {\r        attachments.splice(i, 1);\r        MyAvatar.setAttachmentData(attachments);\r        break;\r    }\r }\r\r// Note: If using from the Avatar API, replace all occurrences of \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setAttachmentData",
        "scope": "static"
    },
    {
        "description": "Attaches a model to your avatar. For example, you can give your avatar a hat to wear, a guitar to hold, or a surfboard to\rstand on.",
        "kind": "function",
        "name": "attach",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the glTF, FBX, or OBJ model to attach. glTF models may be in JSON or binary format \r    (\".gltf\" or \".glb\" URLs respectively).",
                "name": "modelURL"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The name of the avatar joint (see {@link MyAvatar.getJointNames} or \r    {@link Avatar.getJointNames}) to attach the model to.",
                "name": "jointName"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "optional": true,
                "defaultvalue": "Vec3.ZERO",
                "description": "The offset to apply to the model relative to the joint position.",
                "name": "translation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "optional": true,
                "defaultvalue": "Quat.IDENTITY",
                "description": "The rotation to apply to the model relative to the joint orientation.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": "1.0",
                "description": "The scale to apply to the model.",
                "name": "scale"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If the model has a skeleton, set this to <code>true</code> so that the bones of the \r    attached model's skeleton are rotated to fit the avatar's current pose. <code>isSoft</code> is used, for example, \r    to have clothing that moves with the avatar.\r    <p>If <code>true</code>, the <code>translation</code>, <code>rotation</code>, and <code>scale</code> parameters are \r    ignored.</p>",
                "name": "isSoft"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If <code>true</code> then more than one copy of any particular model may be \r    attached to the same joint; if <code>false</code> then the same model cannot be attached to the same joint.",
                "name": "allowDuplicates"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "<em>Not used.</em>",
                "name": "useSaved"
            }
        ],
        "deprecated": "This function is deprecated and will be removed. Use avatar entities instead.",
        "examples": [
            "<caption>Attach a cowboy hat to your avatar's head.</caption>\rvar attachment = {\r    modelURL: \"https://s3.amazonaws.com/hifi-public/tony/cowboy-hat.fbx\",\r    jointName: \"Head\",\r    translation: {\"x\": 0, \"y\": 0.25, \"z\": 0},\r    rotation: {\"x\": 0, \"y\": 0, \"z\": 0, \"w\": 1},\r    scale: 0.01,\r    isSoft: false\r};\r\r MyAvatar.attach(attachment.modelURL,\r                 attachment.jointName,\r                 attachment.translation,\r                 attachment.rotation,\r                 attachment.scale,\r                 attachment.isSoft);\r\r// Note: If using from the Avatar API, replace \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.attach",
        "scope": "static"
    },
    {
        "description": "Detaches the most recently attached instance of a particular model from either a specific joint or any joint.",
        "kind": "function",
        "name": "detachOne",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the model to detach.",
                "name": "modelURL"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The name of the joint to detach the model from. If <code>\"\"</code>, then the most \r    recently attached model is removed from which ever joint it was attached to.",
                "name": "jointName"
            }
        ],
        "deprecated": "This function is deprecated and will be removed. Use avatar entities instead.",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.detachOne",
        "scope": "static"
    },
    {
        "description": "Detaches all instances of a particular model from either a specific joint or all joints.",
        "kind": "function",
        "name": "detachAll",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the model to detach.",
                "name": "modelURL"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The name of the joint to detach the model from. If <code>\"\"</code>, then the model is \r    detached from all joints.",
                "name": "jointName"
            }
        ],
        "deprecated": "This function is deprecated and will be removed. Use avatar entities instead.",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.detachAll",
        "scope": "static"
    },
    {
        "description": "Gets the transform from the user's real world to the avatar's size, orientation, and position in the virtual world.",
        "kind": "function",
        "name": "getSensorToWorldMatrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The scale, rotation, and translation transform from the user's real world to the avatar's size, \r    orientation, and position in the virtual world."
            }
        ],
        "examples": [
            "<caption>Report the sensor to world matrix.</caption>\rvar sensorToWorldMatrix = MyAvatar.getSensorToWorldMatrix();\rprint(\"Sensor to woprld matrix: \" + JSON.stringify(sensorToWorldMatrix));\rprint(\"Rotation: \" + JSON.stringify(Mat4.extractRotation(sensorToWorldMatrix)));\rprint(\"Translation: \" + JSON.stringify(Mat4.extractTranslation(sensorToWorldMatrix)));\rprint(\"Scale: \" + JSON.stringify(Mat4.extractScale(sensorToWorldMatrix)));\r\r// Note: If using from the Avatar API, replace \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getSensorToWorldMatrix",
        "scope": "static"
    },
    {
        "description": "Gets the scale that transforms dimensions in the user's real world to the avatar's size in the virtual world.",
        "kind": "function",
        "name": "getSensorToWorldScale",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The scale that transforms dimensions in the user's real world to the avatar's size in the virtual \r    world."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getSensorToWorldScale",
        "scope": "static"
    },
    {
        "description": "Gets the rotation and translation of the left hand controller relative to the avatar.",
        "kind": "function",
        "name": "getControllerLeftHandMatrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The rotation and translation of the left hand controller relative to the avatar."
            }
        ],
        "examples": [
            "<caption>Report the left hand controller matrix.</caption>\rvar leftHandMatrix = MyAvatar.getControllerLeftHandMatrix();\rprint(\"Controller left hand matrix: \" + JSON.stringify(leftHandMatrix));\rprint(\"Rotation: \" + JSON.stringify(Mat4.extractRotation(leftHandMatrix)));\rprint(\"Translation: \" + JSON.stringify(Mat4.extractTranslation(leftHandMatrix)));\rprint(\"Scale: \" + JSON.stringify(Mat4.extractScale(leftHandMatrix))); // Always 1,1,1.\r\r// Note: If using from the Avatar API, replace \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getControllerLeftHandMatrix",
        "scope": "static"
    },
    {
        "description": "Gets the rotation and translation of the right hand controller relative to the avatar.",
        "kind": "function",
        "name": "getControllerRightHandMatrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The rotation and translation of the right hand controller relative to the avatar."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getControllerRightHandMatrix",
        "scope": "static"
    },
    {
        "description": "Gets the amount of avatar mixer data being generated by the avatar.",
        "kind": "function",
        "name": "getDataRate",
        "params": [
            {
                "type": {
                    "names": [
                        "AvatarDataRate"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The type of avatar mixer data to get the data rate of.",
                "name": "rateName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The data rate in kbps."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getDataRate",
        "scope": "static"
    },
    {
        "description": "Gets the update rate of avatar mixer data being generated by the avatar.",
        "kind": "function",
        "name": "getUpdateRate",
        "params": [
            {
                "type": {
                    "names": [
                        "AvatarUpdateRate"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The type of avatar mixer data to get the update rate of.",
                "name": "rateName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The update rate in Hz."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getUpdateRate",
        "scope": "static"
    },
    {
        "description": "Triggered when the avatar's <code>displayName</code> property value changes.",
        "kind": "signal",
        "name": "displayNameChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when your avatar display name changes.</caption>\rMyAvatar.displayNameChanged.connect(function () {\r    print(\"Avatar display name changed to: \" + MyAvatar.displayName);\r});\r\r// Note: If using from the Avatar API, replace \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.displayNameChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the avatar's <code>sessionDisplayName</code> property value changes.",
        "kind": "signal",
        "name": "sessionDisplayNameChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when your avatar's session display name changes.</caption>\rMyAvatar.sessionDisplayNameChanged.connect(function () {\r    print(\"Avatar session display name changed to: \" + MyAvatar.sessionDisplayName);\r});\r\r// Note: If using from the Avatar API, replace \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.sessionDisplayNameChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the avatar's model (i.e., <code>skeletonModelURL</code> property value) is changed.",
        "kind": "signal",
        "name": "skeletonModelURLChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when your avatar's skeleton model changes.</caption>\rMyAvatar.skeletonModelURLChanged.connect(function () {\r    print(\"Skeleton model changed to: \" + MyAvatar.skeletonModelURL);\r});\r\r// Note: If using from the Avatar API, replace \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.skeletonModelURLChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the avatar's <code>lookAtSnappingEnabled</code> property value changes.",
        "kind": "signal",
        "name": "lookAtSnappingChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if look-at snapping is enabled, <code>false</code> if not.",
                "name": "enabled"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when your look-at snapping setting changes.</caption>\rMyAvatar.lookAtSnappingChanged.connect(function () {\r    print(\"Avatar look-at snapping changed to: \" + MyAvatar.lookAtSnappingEnabled);\r});\r\r// Note: If using from the Avatar API, replace \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.lookAtSnappingChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the avatar's <code>sessionUUID</code> property value changes.",
        "kind": "signal",
        "name": "sessionUUIDChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when your avatar's session UUID changes.</caption>\rMyAvatar.sessionUUIDChanged.connect(function () {\r    print(\"Avatar session UUID changed to: \" + MyAvatar.sessionUUID);\r});\r\r// Note: If using from the Avatar API, replace \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.sessionUUIDChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "sendAvatarDataPacket",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Send all.",
                "name": "sendAll"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.sendAvatarDataPacket",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "sendIdentityPacket",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.sendIdentityPacket",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setSessionUUID",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "Session UUID.",
                "name": "sessionUUID"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setSessionUUID",
        "scope": "static"
    },
    {
        "description": "Gets the target scale of the avatar without any restrictions on permissible values imposed by the domain. In contrast, the \r<code>scale</code> property's value may be limited by the domain's settings.",
        "kind": "function",
        "name": "getTargetScale",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The target scale of the avatar."
            }
        ],
        "examples": [
            "<caption>Compare the target and current avatar scales.</caption>\rprint(\"Current avatar scale: \" + MyAvatar.scale);\rprint(\"Target avatar scale:  \" + MyAvatar.getTargetScale());\r\r// Note: If using from the Avatar API, replace all occurrences of \"MyAvatar\" with \"Avatar\"."
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getTargetScale",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "resetLastSent",
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.resetLastSent",
        "scope": "static"
    },
    {
        "description": "Enables and shows a pointer. Enabled pointers update their pick results and generate events.",
        "kind": "function",
        "name": "enableLaserPointer",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pointer.",
                "name": "id"
            }
        ],
        "memberof": "LaserPointers",
        "longname": "LaserPointers.enableLaserPointer",
        "scope": "static"
    },
    {
        "description": "Disables and hides a pointer. Disabled pointers do not update their pick results or generate events.",
        "kind": "function",
        "name": "disableLaserPointer",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pointer.",
                "name": "id"
            }
        ],
        "memberof": "LaserPointers",
        "longname": "LaserPointers.disableLaserPointer",
        "scope": "static"
    },
    {
        "description": "Removes (deletes) a pointer.",
        "kind": "function",
        "name": "removeLaserPointer",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pointer.",
                "name": "id"
            }
        ],
        "memberof": "LaserPointers",
        "longname": "LaserPointers.removeLaserPointer",
        "scope": "static"
    },
    {
        "description": "Sets whether or not a pointer should use precision picking, i.e., whether it should pick against precise meshes or \rcoarse meshes. This has the same effect as using the <code>PICK_PRECISE</code> or <code>PICK_COARSE</code> filter flags.",
        "kind": "function",
        "name": "setPrecisionPicking",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the pointer.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to use precision picking, <code>false</code> to use coarse picking.",
                "name": "precisionPicking"
            }
        ],
        "memberof": "LaserPointers",
        "longname": "LaserPointers.setPrecisionPicking",
        "scope": "static"
    },
    {
        "description": "Gets the URLs of all resources in the cache.",
        "kind": "function",
        "name": "getResourceList",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "The URLs of all resources in the cache."
            }
        ],
        "examples": [
            "<caption>Report cached resources.</caption>\r// Replace AnimationCache with ModelCache, SoundCache, or TextureCache as appropriate.\r\rvar cachedResources = AnimationCache.getResourceList();\rprint(\"Cached resources: \" + JSON.stringify(cachedResources));"
        ],
        "memberof": "AnimationCache",
        "longname": "AnimationCache.getResourceList",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "updateTotalSize",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Delta size.",
                "name": "deltaSize"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "AnimationCache",
        "longname": "AnimationCache.updateTotalSize",
        "scope": "static"
    },
    {
        "description": "Prefetches a resource.",
        "kind": "function",
        "name": "prefetch",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the resource to prefetch.",
                "name": "url"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ResourceObject"
                    ]
                },
                "description": "A resource object."
            }
        ],
        "examples": [
            "<caption>Prefetch a resource and wait until it has loaded.</caption>\r// Replace AnimationCache with ModelCache, SoundCache, or TextureCache as appropriate.\r// TextureCache has its own version of this function.\r\rvar resourceURL = \"https://s3-us-west-1.amazonaws.com/hifi-content/clement/production/animations/sitting_idle.fbx\";\rvar resourceObject = AnimationCache.prefetch(resourceURL);\r\rfunction checkIfResourceLoaded(state) {\r    if (state === Resource.State.FINISHED) {\r        print(\"Resource loaded and ready.\");\r    } else if (state === Resource.State.FAILED) {\r        print(\"Resource not loaded.\");\r    }\r}\r\r// Resource may have already been loaded.\rprint(\"Resource state: \" + resourceObject.state);\rcheckIfResourceLoaded(resourceObject.state);\r\r// Resource may still be loading.\rresourceObject.stateChanged.connect(function (state) {\r    print(\"Resource state changed to: \" + state);\r    checkIfResourceLoaded(state);\r});"
        ],
        "memberof": "AnimationCache",
        "longname": "AnimationCache.prefetch",
        "scope": "static"
    },
    {
        "description": "Triggered when the cache content has changed.",
        "kind": "signal",
        "name": "dirty",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AnimationCache",
        "longname": "AnimationCache.dirty",
        "scope": "static"
    },
    {
        "description": "Gets the URLs of all resources in the cache.",
        "kind": "function",
        "name": "getResourceList",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "The URLs of all resources in the cache."
            }
        ],
        "examples": [
            "<caption>Report cached resources.</caption>\r// Replace AnimationCache with ModelCache, SoundCache, or TextureCache as appropriate.\r\rvar cachedResources = AnimationCache.getResourceList();\rprint(\"Cached resources: \" + JSON.stringify(cachedResources));"
        ],
        "memberof": "SoundCache",
        "longname": "SoundCache.getResourceList",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "updateTotalSize",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Delta size.",
                "name": "deltaSize"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "SoundCache",
        "longname": "SoundCache.updateTotalSize",
        "scope": "static"
    },
    {
        "description": "Prefetches a resource.",
        "kind": "function",
        "name": "prefetch",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the resource to prefetch.",
                "name": "url"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ResourceObject"
                    ]
                },
                "description": "A resource object."
            }
        ],
        "examples": [
            "<caption>Prefetch a resource and wait until it has loaded.</caption>\r// Replace AnimationCache with ModelCache, SoundCache, or TextureCache as appropriate.\r// TextureCache has its own version of this function.\r\rvar resourceURL = \"https://s3-us-west-1.amazonaws.com/hifi-content/clement/production/animations/sitting_idle.fbx\";\rvar resourceObject = AnimationCache.prefetch(resourceURL);\r\rfunction checkIfResourceLoaded(state) {\r    if (state === Resource.State.FINISHED) {\r        print(\"Resource loaded and ready.\");\r    } else if (state === Resource.State.FAILED) {\r        print(\"Resource not loaded.\");\r    }\r}\r\r// Resource may have already been loaded.\rprint(\"Resource state: \" + resourceObject.state);\rcheckIfResourceLoaded(resourceObject.state);\r\r// Resource may still be loading.\rresourceObject.stateChanged.connect(function (state) {\r    print(\"Resource state changed to: \" + state);\r    checkIfResourceLoaded(state);\r});"
        ],
        "memberof": "SoundCache",
        "longname": "SoundCache.prefetch",
        "scope": "static"
    },
    {
        "description": "Triggered when the cache content has changed.",
        "kind": "signal",
        "name": "dirty",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "SoundCache",
        "longname": "SoundCache.dirty",
        "scope": "static"
    },
    {
        "description": "Gets the URLs of all resources in the cache.",
        "kind": "function",
        "name": "getResourceList",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "The URLs of all resources in the cache."
            }
        ],
        "examples": [
            "<caption>Report cached resources.</caption>\r// Replace AnimationCache with ModelCache, SoundCache, or TextureCache as appropriate.\r\rvar cachedResources = AnimationCache.getResourceList();\rprint(\"Cached resources: \" + JSON.stringify(cachedResources));"
        ],
        "memberof": "TextureCache",
        "longname": "TextureCache.getResourceList",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "updateTotalSize",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Delta size.",
                "name": "deltaSize"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "TextureCache",
        "longname": "TextureCache.updateTotalSize",
        "scope": "static"
    },
    {
        "description": "Prefetches a resource.",
        "kind": "function",
        "name": "prefetch",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the resource to prefetch.",
                "name": "url"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ResourceObject"
                    ]
                },
                "description": "A resource object."
            }
        ],
        "examples": [
            "<caption>Prefetch a resource and wait until it has loaded.</caption>\r// Replace AnimationCache with ModelCache, SoundCache, or TextureCache as appropriate.\r// TextureCache has its own version of this function.\r\rvar resourceURL = \"https://s3-us-west-1.amazonaws.com/hifi-content/clement/production/animations/sitting_idle.fbx\";\rvar resourceObject = AnimationCache.prefetch(resourceURL);\r\rfunction checkIfResourceLoaded(state) {\r    if (state === Resource.State.FINISHED) {\r        print(\"Resource loaded and ready.\");\r    } else if (state === Resource.State.FAILED) {\r        print(\"Resource not loaded.\");\r    }\r}\r\r// Resource may have already been loaded.\rprint(\"Resource state: \" + resourceObject.state);\rcheckIfResourceLoaded(resourceObject.state);\r\r// Resource may still be loading.\rresourceObject.stateChanged.connect(function (state) {\r    print(\"Resource state changed to: \" + state);\r    checkIfResourceLoaded(state);\r});"
        ],
        "memberof": "TextureCache",
        "longname": "TextureCache.prefetch",
        "scope": "static"
    },
    {
        "description": "Triggered when the cache content has changed.",
        "kind": "signal",
        "name": "dirty",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "TextureCache",
        "longname": "TextureCache.dirty",
        "scope": "static"
    },
    {
        "description": "Gets the URLs of all resources in the cache.",
        "kind": "function",
        "name": "getResourceList",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "The URLs of all resources in the cache."
            }
        ],
        "examples": [
            "<caption>Report cached resources.</caption>\r// Replace AnimationCache with ModelCache, SoundCache, or TextureCache as appropriate.\r\rvar cachedResources = AnimationCache.getResourceList();\rprint(\"Cached resources: \" + JSON.stringify(cachedResources));"
        ],
        "memberof": "ModelCache",
        "longname": "ModelCache.getResourceList",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "updateTotalSize",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Delta size.",
                "name": "deltaSize"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "ModelCache",
        "longname": "ModelCache.updateTotalSize",
        "scope": "static"
    },
    {
        "description": "Prefetches a resource.",
        "kind": "function",
        "name": "prefetch",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the resource to prefetch.",
                "name": "url"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ResourceObject"
                    ]
                },
                "description": "A resource object."
            }
        ],
        "examples": [
            "<caption>Prefetch a resource and wait until it has loaded.</caption>\r// Replace AnimationCache with ModelCache, SoundCache, or TextureCache as appropriate.\r// TextureCache has its own version of this function.\r\rvar resourceURL = \"https://s3-us-west-1.amazonaws.com/hifi-content/clement/production/animations/sitting_idle.fbx\";\rvar resourceObject = AnimationCache.prefetch(resourceURL);\r\rfunction checkIfResourceLoaded(state) {\r    if (state === Resource.State.FINISHED) {\r        print(\"Resource loaded and ready.\");\r    } else if (state === Resource.State.FAILED) {\r        print(\"Resource not loaded.\");\r    }\r}\r\r// Resource may have already been loaded.\rprint(\"Resource state: \" + resourceObject.state);\rcheckIfResourceLoaded(resourceObject.state);\r\r// Resource may still be loading.\rresourceObject.stateChanged.connect(function (state) {\r    print(\"Resource state changed to: \" + state);\r    checkIfResourceLoaded(state);\r});"
        ],
        "memberof": "ModelCache",
        "longname": "ModelCache.prefetch",
        "scope": "static"
    },
    {
        "description": "Triggered when the cache content has changed.",
        "kind": "signal",
        "name": "dirty",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "ModelCache",
        "longname": "ModelCache.dirty",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "initQml",
        "params": [
            {
                "type": {
                    "names": [
                        "OverlayWindow.Properties"
                    ]
                },
                "name": "properties"
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.initQml",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isVisible",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.isVisible",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setVisible",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "visible"
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.setVisible",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getPosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.getPosition",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setPosition",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "name": "position"
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.setPosition",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setPosition",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "y"
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.setPosition",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getSize",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.getSize",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setSize",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "name": "size"
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.setSize",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setSize",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "width"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "height"
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.setSize",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setTitle",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "title"
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.setTitle",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "raise",
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.raise",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "close",
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.close",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getEventBridge",
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.getEventBridge",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "sendToQml",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.sendToQml",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "clearDebugWindow",
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.clearDebugWindow",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "emitScriptEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.emitScriptEvent",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "emitWebEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.emitWebEvent",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "visibleChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.visibleChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "positionChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.positionChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "sizeChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.sizeChanged",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "moved",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "name": "position"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.moved",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "resized",
        "params": [
            {
                "type": {
                    "names": [
                        "Size"
                    ]
                },
                "name": "size"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.resized",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "closed",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.closed",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "fromQml",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.fromQml",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "scriptEventReceived",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.scriptEventReceived",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "webEventReceived",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.webEventReceived",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "hasMoved",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "name": "position"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.hasMoved",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "hasClosed",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.hasClosed",
        "scope": "static"
    },
    {
        "kind": "signal",
        "name": "qmlToScript",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.qmlToScript",
        "scope": "static"
    },
    {
        "description": "Gets an instance of a tablet. A new tablet is created if one with the specified name doesn't already exist.",
        "kind": "function",
        "name": "getTablet",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "A unique name that identifies the tablet.",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "TabletProxy"
                    ]
                },
                "description": "The tablet instance."
            }
        ],
        "examples": [
            "<caption>Display the High Fidelity home page on the system tablet.</caption>\rvar tablet = Tablet.getTablet(\"com.highfidelity.interface.tablet.system\");\rtablet.gotoWebScreen(\"https://highfidelity.com/\");"
        ],
        "memberof": "tabletInterface",
        "longname": "tabletInterface.getTablet",
        "scope": "static"
    },
    {
        "description": "Plays a standard tablet sound. The sound is played locally (only the user running the script hears it) without a \rposition.",
        "kind": "function",
        "name": "playSound",
        "params": [
            {
                "type": {
                    "names": [
                        "Tablet.AudioEvents"
                    ]
                },
                "description": "The tablet sound to play.",
                "name": "sound"
            }
        ],
        "examples": [
            "<caption>Play a tablet sound.</caption>\rvar TABLET_BUTTON_CLICK = 0;\rTablet.playSound(TABLET_BUTTON_CLICK);"
        ],
        "memberof": "tabletInterface",
        "longname": "tabletInterface.playSound",
        "scope": "static"
    },
    {
        "description": "Triggered when a tablet message or dialog is displayed on the tablet that needs the user's attention.\r<p><strong>Note:</strong> Only triggered if the script is running in the same script engine as the script that created \rthe tablet. By default, this means in scripts included as part of the default scripts.</p>",
        "kind": "signal",
        "name": "tabletNotification",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "tabletInterface",
        "longname": "tabletInterface.tabletNotification",
        "scope": "static"
    }
]